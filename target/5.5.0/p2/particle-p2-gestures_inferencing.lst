
/Users/shawnhymel/Projects/Particle/particle-p2-gestures_inferencing/target/5.5.0/p2/particle-p2-gestures_inferencing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085e7000  085e7000  00007000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085e7018  085e7018  00007018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085e70a4  085e70a4  000070a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023e7718  085e70b0  00007718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   000188d4  023e7720  085e70b8  00007720  2**4
                  CONTENTS, ALLOC, LOAD, CODE
  5 .data_alt     00000000  023ffff4  023ffff4  00030000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffff4  023ffff4  00030000  2**0
                  CONTENTS
  7 .data         00000370  1007a324  085ff98c  0002a324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000954  1007a694  1007a694  0003a694  2**2
                  ALLOC
  9 .secure_ram_text 00000000  1007e000  1007e000  00030000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085ffcfc  0002b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 000002b8  085ffd00  085ffd00  0002fd00  2**0
                  ALLOC
 12 .module_info_product 00000006  085fffb8  085fffb8  0002fd00  2**0
                  ALLOC
 13 .module_info_suffix 0000003e  085fffbe  085fffbe  0002ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .module_info_crc 00000004  085ffffc  085ffffc  0002fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   004ee573  00000000  00000000  00030000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0002c805  00000000  00000000  0051e573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    000b4e78  00000000  00000000  0054ad78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004b88  00000000  00000000  005ffbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0001ec28  00000000  00000000  00604778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003cdee  00000000  00000000  006233a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000a7040  00000000  00000000  0066018e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001e39f4  00000000  00000000  007071ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000fed0  00000000  00000000  008eabc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085e7018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85e7018:	4813      	ldr	r0, [pc, #76]	; (85e7068 <module_user_pre_init+0x50>)
 85e701a:	4914      	ldr	r1, [pc, #80]	; (85e706c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85e701c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85e701e:	4288      	cmp	r0, r1
 85e7020:	d005      	beq.n	85e702e <module_user_pre_init+0x16>
 85e7022:	4a13      	ldr	r2, [pc, #76]	; (85e7070 <module_user_pre_init+0x58>)
 85e7024:	4282      	cmp	r2, r0
 85e7026:	d002      	beq.n	85e702e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85e7028:	4b12      	ldr	r3, [pc, #72]	; (85e7074 <module_user_pre_init+0x5c>)
 85e702a:	1a12      	subs	r2, r2, r0
 85e702c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85e702e:	4812      	ldr	r0, [pc, #72]	; (85e7078 <module_user_pre_init+0x60>)
 85e7030:	4a12      	ldr	r2, [pc, #72]	; (85e707c <module_user_pre_init+0x64>)
 85e7032:	2100      	movs	r1, #0
 85e7034:	4b12      	ldr	r3, [pc, #72]	; (85e7080 <module_user_pre_init+0x68>)
 85e7036:	1a12      	subs	r2, r2, r0
 85e7038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85e703a:	4812      	ldr	r0, [pc, #72]	; (85e7084 <module_user_pre_init+0x6c>)
 85e703c:	4912      	ldr	r1, [pc, #72]	; (85e7088 <module_user_pre_init+0x70>)
 85e703e:	4288      	cmp	r0, r1
 85e7040:	d005      	beq.n	85e704e <module_user_pre_init+0x36>
 85e7042:	4a12      	ldr	r2, [pc, #72]	; (85e708c <module_user_pre_init+0x74>)
 85e7044:	4282      	cmp	r2, r0
 85e7046:	d002      	beq.n	85e704e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85e7048:	4b0a      	ldr	r3, [pc, #40]	; (85e7074 <module_user_pre_init+0x5c>)
 85e704a:	1a12      	subs	r2, r2, r0
 85e704c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85e704e:	4810      	ldr	r0, [pc, #64]	; (85e7090 <module_user_pre_init+0x78>)
 85e7050:	4910      	ldr	r1, [pc, #64]	; (85e7094 <module_user_pre_init+0x7c>)
 85e7052:	4288      	cmp	r0, r1
 85e7054:	d005      	beq.n	85e7062 <module_user_pre_init+0x4a>
 85e7056:	4a10      	ldr	r2, [pc, #64]	; (85e7098 <module_user_pre_init+0x80>)
 85e7058:	4282      	cmp	r2, r0
 85e705a:	d002      	beq.n	85e7062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85e705c:	4b05      	ldr	r3, [pc, #20]	; (85e7074 <module_user_pre_init+0x5c>)
 85e705e:	1a12      	subs	r2, r2, r0
 85e7060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85e7062:	4801      	ldr	r0, [pc, #4]	; (85e7068 <module_user_pre_init+0x50>)
 85e7064:	bd08      	pop	{r3, pc}
 85e7066:	bf00      	nop
 85e7068:	1007a324 	.word	0x1007a324
 85e706c:	085ff98c 	.word	0x085ff98c
 85e7070:	1007a694 	.word	0x1007a694
 85e7074:	10110d2d 	.word	0x10110d2d
 85e7078:	1007a694 	.word	0x1007a694
 85e707c:	1007afe8 	.word	0x1007afe8
 85e7080:	10110ea1 	.word	0x10110ea1
 85e7084:	023e7718 	.word	0x023e7718
 85e7088:	085e70b0 	.word	0x085e70b0
 85e708c:	023e7720 	.word	0x023e7720
 85e7090:	023e7720 	.word	0x023e7720
 85e7094:	085e70b8 	.word	0x085e70b8
 85e7098:	023ffff4 	.word	0x023ffff4

085e709c <dynalib_preinit>:
 85e709c:	085e7019 00000000                       .p^.....

Disassembly of section .psram_text:

023e7720 <__aeabi_drsub>:
 23e7720:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23e7724:	e002      	b.n	23e772c <__adddf3>
 23e7726:	bf00      	nop

023e7728 <__aeabi_dsub>:
 23e7728:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023e772c <__adddf3>:
 23e772c:	b530      	push	{r4, r5, lr}
 23e772e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23e7732:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23e7736:	ea94 0f05 	teq	r4, r5
 23e773a:	bf08      	it	eq
 23e773c:	ea90 0f02 	teqeq	r0, r2
 23e7740:	bf1f      	itttt	ne
 23e7742:	ea54 0c00 	orrsne.w	ip, r4, r0
 23e7746:	ea55 0c02 	orrsne.w	ip, r5, r2
 23e774a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23e774e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23e7752:	f000 80e2 	beq.w	23e791a <__adddf3+0x1ee>
 23e7756:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23e775a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23e775e:	bfb8      	it	lt
 23e7760:	426d      	neglt	r5, r5
 23e7762:	dd0c      	ble.n	23e777e <__adddf3+0x52>
 23e7764:	442c      	add	r4, r5
 23e7766:	ea80 0202 	eor.w	r2, r0, r2
 23e776a:	ea81 0303 	eor.w	r3, r1, r3
 23e776e:	ea82 0000 	eor.w	r0, r2, r0
 23e7772:	ea83 0101 	eor.w	r1, r3, r1
 23e7776:	ea80 0202 	eor.w	r2, r0, r2
 23e777a:	ea81 0303 	eor.w	r3, r1, r3
 23e777e:	2d36      	cmp	r5, #54	; 0x36
 23e7780:	bf88      	it	hi
 23e7782:	bd30      	pophi	{r4, r5, pc}
 23e7784:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e7788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23e778c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23e7790:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23e7794:	d002      	beq.n	23e779c <__adddf3+0x70>
 23e7796:	4240      	negs	r0, r0
 23e7798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e779c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23e77a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23e77a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23e77a8:	d002      	beq.n	23e77b0 <__adddf3+0x84>
 23e77aa:	4252      	negs	r2, r2
 23e77ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e77b0:	ea94 0f05 	teq	r4, r5
 23e77b4:	f000 80a7 	beq.w	23e7906 <__adddf3+0x1da>
 23e77b8:	f1a4 0401 	sub.w	r4, r4, #1
 23e77bc:	f1d5 0e20 	rsbs	lr, r5, #32
 23e77c0:	db0d      	blt.n	23e77de <__adddf3+0xb2>
 23e77c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 23e77c6:	fa22 f205 	lsr.w	r2, r2, r5
 23e77ca:	1880      	adds	r0, r0, r2
 23e77cc:	f141 0100 	adc.w	r1, r1, #0
 23e77d0:	fa03 f20e 	lsl.w	r2, r3, lr
 23e77d4:	1880      	adds	r0, r0, r2
 23e77d6:	fa43 f305 	asr.w	r3, r3, r5
 23e77da:	4159      	adcs	r1, r3
 23e77dc:	e00e      	b.n	23e77fc <__adddf3+0xd0>
 23e77de:	f1a5 0520 	sub.w	r5, r5, #32
 23e77e2:	f10e 0e20 	add.w	lr, lr, #32
 23e77e6:	2a01      	cmp	r2, #1
 23e77e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 23e77ec:	bf28      	it	cs
 23e77ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 23e77f2:	fa43 f305 	asr.w	r3, r3, r5
 23e77f6:	18c0      	adds	r0, r0, r3
 23e77f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23e77fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e7800:	d507      	bpl.n	23e7812 <__adddf3+0xe6>
 23e7802:	f04f 0e00 	mov.w	lr, #0
 23e7806:	f1dc 0c00 	rsbs	ip, ip, #0
 23e780a:	eb7e 0000 	sbcs.w	r0, lr, r0
 23e780e:	eb6e 0101 	sbc.w	r1, lr, r1
 23e7812:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23e7816:	d31b      	bcc.n	23e7850 <__adddf3+0x124>
 23e7818:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23e781c:	d30c      	bcc.n	23e7838 <__adddf3+0x10c>
 23e781e:	0849      	lsrs	r1, r1, #1
 23e7820:	ea5f 0030 	movs.w	r0, r0, rrx
 23e7824:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23e7828:	f104 0401 	add.w	r4, r4, #1
 23e782c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23e7830:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23e7834:	f080 809a 	bcs.w	23e796c <__adddf3+0x240>
 23e7838:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23e783c:	bf08      	it	eq
 23e783e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23e7842:	f150 0000 	adcs.w	r0, r0, #0
 23e7846:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e784a:	ea41 0105 	orr.w	r1, r1, r5
 23e784e:	bd30      	pop	{r4, r5, pc}
 23e7850:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23e7854:	4140      	adcs	r0, r0
 23e7856:	eb41 0101 	adc.w	r1, r1, r1
 23e785a:	3c01      	subs	r4, #1
 23e785c:	bf28      	it	cs
 23e785e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23e7862:	d2e9      	bcs.n	23e7838 <__adddf3+0x10c>
 23e7864:	f091 0f00 	teq	r1, #0
 23e7868:	bf04      	itt	eq
 23e786a:	4601      	moveq	r1, r0
 23e786c:	2000      	moveq	r0, #0
 23e786e:	fab1 f381 	clz	r3, r1
 23e7872:	bf08      	it	eq
 23e7874:	3320      	addeq	r3, #32
 23e7876:	f1a3 030b 	sub.w	r3, r3, #11
 23e787a:	f1b3 0220 	subs.w	r2, r3, #32
 23e787e:	da0c      	bge.n	23e789a <__adddf3+0x16e>
 23e7880:	320c      	adds	r2, #12
 23e7882:	dd08      	ble.n	23e7896 <__adddf3+0x16a>
 23e7884:	f102 0c14 	add.w	ip, r2, #20
 23e7888:	f1c2 020c 	rsb	r2, r2, #12
 23e788c:	fa01 f00c 	lsl.w	r0, r1, ip
 23e7890:	fa21 f102 	lsr.w	r1, r1, r2
 23e7894:	e00c      	b.n	23e78b0 <__adddf3+0x184>
 23e7896:	f102 0214 	add.w	r2, r2, #20
 23e789a:	bfd8      	it	le
 23e789c:	f1c2 0c20 	rsble	ip, r2, #32
 23e78a0:	fa01 f102 	lsl.w	r1, r1, r2
 23e78a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 23e78a8:	bfdc      	itt	le
 23e78aa:	ea41 010c 	orrle.w	r1, r1, ip
 23e78ae:	4090      	lslle	r0, r2
 23e78b0:	1ae4      	subs	r4, r4, r3
 23e78b2:	bfa2      	ittt	ge
 23e78b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23e78b8:	4329      	orrge	r1, r5
 23e78ba:	bd30      	popge	{r4, r5, pc}
 23e78bc:	ea6f 0404 	mvn.w	r4, r4
 23e78c0:	3c1f      	subs	r4, #31
 23e78c2:	da1c      	bge.n	23e78fe <__adddf3+0x1d2>
 23e78c4:	340c      	adds	r4, #12
 23e78c6:	dc0e      	bgt.n	23e78e6 <__adddf3+0x1ba>
 23e78c8:	f104 0414 	add.w	r4, r4, #20
 23e78cc:	f1c4 0220 	rsb	r2, r4, #32
 23e78d0:	fa20 f004 	lsr.w	r0, r0, r4
 23e78d4:	fa01 f302 	lsl.w	r3, r1, r2
 23e78d8:	ea40 0003 	orr.w	r0, r0, r3
 23e78dc:	fa21 f304 	lsr.w	r3, r1, r4
 23e78e0:	ea45 0103 	orr.w	r1, r5, r3
 23e78e4:	bd30      	pop	{r4, r5, pc}
 23e78e6:	f1c4 040c 	rsb	r4, r4, #12
 23e78ea:	f1c4 0220 	rsb	r2, r4, #32
 23e78ee:	fa20 f002 	lsr.w	r0, r0, r2
 23e78f2:	fa01 f304 	lsl.w	r3, r1, r4
 23e78f6:	ea40 0003 	orr.w	r0, r0, r3
 23e78fa:	4629      	mov	r1, r5
 23e78fc:	bd30      	pop	{r4, r5, pc}
 23e78fe:	fa21 f004 	lsr.w	r0, r1, r4
 23e7902:	4629      	mov	r1, r5
 23e7904:	bd30      	pop	{r4, r5, pc}
 23e7906:	f094 0f00 	teq	r4, #0
 23e790a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23e790e:	bf06      	itte	eq
 23e7910:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23e7914:	3401      	addeq	r4, #1
 23e7916:	3d01      	subne	r5, #1
 23e7918:	e74e      	b.n	23e77b8 <__adddf3+0x8c>
 23e791a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23e791e:	bf18      	it	ne
 23e7920:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23e7924:	d029      	beq.n	23e797a <__adddf3+0x24e>
 23e7926:	ea94 0f05 	teq	r4, r5
 23e792a:	bf08      	it	eq
 23e792c:	ea90 0f02 	teqeq	r0, r2
 23e7930:	d005      	beq.n	23e793e <__adddf3+0x212>
 23e7932:	ea54 0c00 	orrs.w	ip, r4, r0
 23e7936:	bf04      	itt	eq
 23e7938:	4619      	moveq	r1, r3
 23e793a:	4610      	moveq	r0, r2
 23e793c:	bd30      	pop	{r4, r5, pc}
 23e793e:	ea91 0f03 	teq	r1, r3
 23e7942:	bf1e      	ittt	ne
 23e7944:	2100      	movne	r1, #0
 23e7946:	2000      	movne	r0, #0
 23e7948:	bd30      	popne	{r4, r5, pc}
 23e794a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23e794e:	d105      	bne.n	23e795c <__adddf3+0x230>
 23e7950:	0040      	lsls	r0, r0, #1
 23e7952:	4149      	adcs	r1, r1
 23e7954:	bf28      	it	cs
 23e7956:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23e795a:	bd30      	pop	{r4, r5, pc}
 23e795c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23e7960:	bf3c      	itt	cc
 23e7962:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23e7966:	bd30      	popcc	{r4, r5, pc}
 23e7968:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e796c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23e7970:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23e7974:	f04f 0000 	mov.w	r0, #0
 23e7978:	bd30      	pop	{r4, r5, pc}
 23e797a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23e797e:	bf1a      	itte	ne
 23e7980:	4619      	movne	r1, r3
 23e7982:	4610      	movne	r0, r2
 23e7984:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23e7988:	bf1c      	itt	ne
 23e798a:	460b      	movne	r3, r1
 23e798c:	4602      	movne	r2, r0
 23e798e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23e7992:	bf06      	itte	eq
 23e7994:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23e7998:	ea91 0f03 	teqeq	r1, r3
 23e799c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23e79a0:	bd30      	pop	{r4, r5, pc}
 23e79a2:	bf00      	nop

023e79a4 <__aeabi_ui2d>:
 23e79a4:	f090 0f00 	teq	r0, #0
 23e79a8:	bf04      	itt	eq
 23e79aa:	2100      	moveq	r1, #0
 23e79ac:	4770      	bxeq	lr
 23e79ae:	b530      	push	{r4, r5, lr}
 23e79b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e79b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e79b8:	f04f 0500 	mov.w	r5, #0
 23e79bc:	f04f 0100 	mov.w	r1, #0
 23e79c0:	e750      	b.n	23e7864 <__adddf3+0x138>
 23e79c2:	bf00      	nop

023e79c4 <__aeabi_i2d>:
 23e79c4:	f090 0f00 	teq	r0, #0
 23e79c8:	bf04      	itt	eq
 23e79ca:	2100      	moveq	r1, #0
 23e79cc:	4770      	bxeq	lr
 23e79ce:	b530      	push	{r4, r5, lr}
 23e79d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e79d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e79d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23e79dc:	bf48      	it	mi
 23e79de:	4240      	negmi	r0, r0
 23e79e0:	f04f 0100 	mov.w	r1, #0
 23e79e4:	e73e      	b.n	23e7864 <__adddf3+0x138>
 23e79e6:	bf00      	nop

023e79e8 <__aeabi_f2d>:
 23e79e8:	0042      	lsls	r2, r0, #1
 23e79ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23e79ee:	ea4f 0131 	mov.w	r1, r1, rrx
 23e79f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23e79f6:	bf1f      	itttt	ne
 23e79f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23e79fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23e7a00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23e7a04:	4770      	bxne	lr
 23e7a06:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23e7a0a:	bf08      	it	eq
 23e7a0c:	4770      	bxeq	lr
 23e7a0e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23e7a12:	bf04      	itt	eq
 23e7a14:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23e7a18:	4770      	bxeq	lr
 23e7a1a:	b530      	push	{r4, r5, lr}
 23e7a1c:	f44f 7460 	mov.w	r4, #896	; 0x380
 23e7a20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23e7a24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23e7a28:	e71c      	b.n	23e7864 <__adddf3+0x138>
 23e7a2a:	bf00      	nop

023e7a2c <__aeabi_ul2d>:
 23e7a2c:	ea50 0201 	orrs.w	r2, r0, r1
 23e7a30:	bf08      	it	eq
 23e7a32:	4770      	bxeq	lr
 23e7a34:	b530      	push	{r4, r5, lr}
 23e7a36:	f04f 0500 	mov.w	r5, #0
 23e7a3a:	e00a      	b.n	23e7a52 <__aeabi_l2d+0x16>

023e7a3c <__aeabi_l2d>:
 23e7a3c:	ea50 0201 	orrs.w	r2, r0, r1
 23e7a40:	bf08      	it	eq
 23e7a42:	4770      	bxeq	lr
 23e7a44:	b530      	push	{r4, r5, lr}
 23e7a46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23e7a4a:	d502      	bpl.n	23e7a52 <__aeabi_l2d+0x16>
 23e7a4c:	4240      	negs	r0, r0
 23e7a4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e7a52:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23e7a56:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23e7a5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23e7a5e:	f43f aed8 	beq.w	23e7812 <__adddf3+0xe6>
 23e7a62:	f04f 0203 	mov.w	r2, #3
 23e7a66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23e7a6a:	bf18      	it	ne
 23e7a6c:	3203      	addne	r2, #3
 23e7a6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23e7a72:	bf18      	it	ne
 23e7a74:	3203      	addne	r2, #3
 23e7a76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23e7a7a:	f1c2 0320 	rsb	r3, r2, #32
 23e7a7e:	fa00 fc03 	lsl.w	ip, r0, r3
 23e7a82:	fa20 f002 	lsr.w	r0, r0, r2
 23e7a86:	fa01 fe03 	lsl.w	lr, r1, r3
 23e7a8a:	ea40 000e 	orr.w	r0, r0, lr
 23e7a8e:	fa21 f102 	lsr.w	r1, r1, r2
 23e7a92:	4414      	add	r4, r2
 23e7a94:	e6bd      	b.n	23e7812 <__adddf3+0xe6>
 23e7a96:	bf00      	nop

023e7a98 <__aeabi_dmul>:
 23e7a98:	b570      	push	{r4, r5, r6, lr}
 23e7a9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23e7a9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23e7aa2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23e7aa6:	bf1d      	ittte	ne
 23e7aa8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23e7aac:	ea94 0f0c 	teqne	r4, ip
 23e7ab0:	ea95 0f0c 	teqne	r5, ip
 23e7ab4:	f000 f8de 	bleq	23e7c74 <__aeabi_dmul+0x1dc>
 23e7ab8:	442c      	add	r4, r5
 23e7aba:	ea81 0603 	eor.w	r6, r1, r3
 23e7abe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23e7ac2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23e7ac6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23e7aca:	bf18      	it	ne
 23e7acc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23e7ad0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e7ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23e7ad8:	d038      	beq.n	23e7b4c <__aeabi_dmul+0xb4>
 23e7ada:	fba0 ce02 	umull	ip, lr, r0, r2
 23e7ade:	f04f 0500 	mov.w	r5, #0
 23e7ae2:	fbe1 e502 	umlal	lr, r5, r1, r2
 23e7ae6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23e7aea:	fbe0 e503 	umlal	lr, r5, r0, r3
 23e7aee:	f04f 0600 	mov.w	r6, #0
 23e7af2:	fbe1 5603 	umlal	r5, r6, r1, r3
 23e7af6:	f09c 0f00 	teq	ip, #0
 23e7afa:	bf18      	it	ne
 23e7afc:	f04e 0e01 	orrne.w	lr, lr, #1
 23e7b00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23e7b04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23e7b08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23e7b0c:	d204      	bcs.n	23e7b18 <__aeabi_dmul+0x80>
 23e7b0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23e7b12:	416d      	adcs	r5, r5
 23e7b14:	eb46 0606 	adc.w	r6, r6, r6
 23e7b18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23e7b1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23e7b20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23e7b24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23e7b28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23e7b2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23e7b30:	bf88      	it	hi
 23e7b32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23e7b36:	d81e      	bhi.n	23e7b76 <__aeabi_dmul+0xde>
 23e7b38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23e7b3c:	bf08      	it	eq
 23e7b3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23e7b42:	f150 0000 	adcs.w	r0, r0, #0
 23e7b46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e7b4a:	bd70      	pop	{r4, r5, r6, pc}
 23e7b4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23e7b50:	ea46 0101 	orr.w	r1, r6, r1
 23e7b54:	ea40 0002 	orr.w	r0, r0, r2
 23e7b58:	ea81 0103 	eor.w	r1, r1, r3
 23e7b5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23e7b60:	bfc2      	ittt	gt
 23e7b62:	ebd4 050c 	rsbsgt	r5, r4, ip
 23e7b66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23e7b6a:	bd70      	popgt	{r4, r5, r6, pc}
 23e7b6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e7b70:	f04f 0e00 	mov.w	lr, #0
 23e7b74:	3c01      	subs	r4, #1
 23e7b76:	f300 80ab 	bgt.w	23e7cd0 <__aeabi_dmul+0x238>
 23e7b7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23e7b7e:	bfde      	ittt	le
 23e7b80:	2000      	movle	r0, #0
 23e7b82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23e7b86:	bd70      	pople	{r4, r5, r6, pc}
 23e7b88:	f1c4 0400 	rsb	r4, r4, #0
 23e7b8c:	3c20      	subs	r4, #32
 23e7b8e:	da35      	bge.n	23e7bfc <__aeabi_dmul+0x164>
 23e7b90:	340c      	adds	r4, #12
 23e7b92:	dc1b      	bgt.n	23e7bcc <__aeabi_dmul+0x134>
 23e7b94:	f104 0414 	add.w	r4, r4, #20
 23e7b98:	f1c4 0520 	rsb	r5, r4, #32
 23e7b9c:	fa00 f305 	lsl.w	r3, r0, r5
 23e7ba0:	fa20 f004 	lsr.w	r0, r0, r4
 23e7ba4:	fa01 f205 	lsl.w	r2, r1, r5
 23e7ba8:	ea40 0002 	orr.w	r0, r0, r2
 23e7bac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23e7bb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23e7bb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23e7bb8:	fa21 f604 	lsr.w	r6, r1, r4
 23e7bbc:	eb42 0106 	adc.w	r1, r2, r6
 23e7bc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e7bc4:	bf08      	it	eq
 23e7bc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e7bca:	bd70      	pop	{r4, r5, r6, pc}
 23e7bcc:	f1c4 040c 	rsb	r4, r4, #12
 23e7bd0:	f1c4 0520 	rsb	r5, r4, #32
 23e7bd4:	fa00 f304 	lsl.w	r3, r0, r4
 23e7bd8:	fa20 f005 	lsr.w	r0, r0, r5
 23e7bdc:	fa01 f204 	lsl.w	r2, r1, r4
 23e7be0:	ea40 0002 	orr.w	r0, r0, r2
 23e7be4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e7be8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23e7bec:	f141 0100 	adc.w	r1, r1, #0
 23e7bf0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e7bf4:	bf08      	it	eq
 23e7bf6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e7bfa:	bd70      	pop	{r4, r5, r6, pc}
 23e7bfc:	f1c4 0520 	rsb	r5, r4, #32
 23e7c00:	fa00 f205 	lsl.w	r2, r0, r5
 23e7c04:	ea4e 0e02 	orr.w	lr, lr, r2
 23e7c08:	fa20 f304 	lsr.w	r3, r0, r4
 23e7c0c:	fa01 f205 	lsl.w	r2, r1, r5
 23e7c10:	ea43 0302 	orr.w	r3, r3, r2
 23e7c14:	fa21 f004 	lsr.w	r0, r1, r4
 23e7c18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e7c1c:	fa21 f204 	lsr.w	r2, r1, r4
 23e7c20:	ea20 0002 	bic.w	r0, r0, r2
 23e7c24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23e7c28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23e7c2c:	bf08      	it	eq
 23e7c2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23e7c32:	bd70      	pop	{r4, r5, r6, pc}
 23e7c34:	f094 0f00 	teq	r4, #0
 23e7c38:	d10f      	bne.n	23e7c5a <__aeabi_dmul+0x1c2>
 23e7c3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23e7c3e:	0040      	lsls	r0, r0, #1
 23e7c40:	eb41 0101 	adc.w	r1, r1, r1
 23e7c44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e7c48:	bf08      	it	eq
 23e7c4a:	3c01      	subeq	r4, #1
 23e7c4c:	d0f7      	beq.n	23e7c3e <__aeabi_dmul+0x1a6>
 23e7c4e:	ea41 0106 	orr.w	r1, r1, r6
 23e7c52:	f095 0f00 	teq	r5, #0
 23e7c56:	bf18      	it	ne
 23e7c58:	4770      	bxne	lr
 23e7c5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23e7c5e:	0052      	lsls	r2, r2, #1
 23e7c60:	eb43 0303 	adc.w	r3, r3, r3
 23e7c64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23e7c68:	bf08      	it	eq
 23e7c6a:	3d01      	subeq	r5, #1
 23e7c6c:	d0f7      	beq.n	23e7c5e <__aeabi_dmul+0x1c6>
 23e7c6e:	ea43 0306 	orr.w	r3, r3, r6
 23e7c72:	4770      	bx	lr
 23e7c74:	ea94 0f0c 	teq	r4, ip
 23e7c78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23e7c7c:	bf18      	it	ne
 23e7c7e:	ea95 0f0c 	teqne	r5, ip
 23e7c82:	d00c      	beq.n	23e7c9e <__aeabi_dmul+0x206>
 23e7c84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e7c88:	bf18      	it	ne
 23e7c8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e7c8e:	d1d1      	bne.n	23e7c34 <__aeabi_dmul+0x19c>
 23e7c90:	ea81 0103 	eor.w	r1, r1, r3
 23e7c94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e7c98:	f04f 0000 	mov.w	r0, #0
 23e7c9c:	bd70      	pop	{r4, r5, r6, pc}
 23e7c9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e7ca2:	bf06      	itte	eq
 23e7ca4:	4610      	moveq	r0, r2
 23e7ca6:	4619      	moveq	r1, r3
 23e7ca8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e7cac:	d019      	beq.n	23e7ce2 <__aeabi_dmul+0x24a>
 23e7cae:	ea94 0f0c 	teq	r4, ip
 23e7cb2:	d102      	bne.n	23e7cba <__aeabi_dmul+0x222>
 23e7cb4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23e7cb8:	d113      	bne.n	23e7ce2 <__aeabi_dmul+0x24a>
 23e7cba:	ea95 0f0c 	teq	r5, ip
 23e7cbe:	d105      	bne.n	23e7ccc <__aeabi_dmul+0x234>
 23e7cc0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23e7cc4:	bf1c      	itt	ne
 23e7cc6:	4610      	movne	r0, r2
 23e7cc8:	4619      	movne	r1, r3
 23e7cca:	d10a      	bne.n	23e7ce2 <__aeabi_dmul+0x24a>
 23e7ccc:	ea81 0103 	eor.w	r1, r1, r3
 23e7cd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23e7cd4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23e7cd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23e7cdc:	f04f 0000 	mov.w	r0, #0
 23e7ce0:	bd70      	pop	{r4, r5, r6, pc}
 23e7ce2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23e7ce6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23e7cea:	bd70      	pop	{r4, r5, r6, pc}

023e7cec <__aeabi_ddiv>:
 23e7cec:	b570      	push	{r4, r5, r6, lr}
 23e7cee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23e7cf2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23e7cf6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23e7cfa:	bf1d      	ittte	ne
 23e7cfc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23e7d00:	ea94 0f0c 	teqne	r4, ip
 23e7d04:	ea95 0f0c 	teqne	r5, ip
 23e7d08:	f000 f8a7 	bleq	23e7e5a <__aeabi_ddiv+0x16e>
 23e7d0c:	eba4 0405 	sub.w	r4, r4, r5
 23e7d10:	ea81 0e03 	eor.w	lr, r1, r3
 23e7d14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23e7d18:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23e7d1c:	f000 8088 	beq.w	23e7e30 <__aeabi_ddiv+0x144>
 23e7d20:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23e7d24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23e7d28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23e7d2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23e7d30:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23e7d34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23e7d38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23e7d3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23e7d40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23e7d44:	429d      	cmp	r5, r3
 23e7d46:	bf08      	it	eq
 23e7d48:	4296      	cmpeq	r6, r2
 23e7d4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23e7d4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23e7d52:	d202      	bcs.n	23e7d5a <__aeabi_ddiv+0x6e>
 23e7d54:	085b      	lsrs	r3, r3, #1
 23e7d56:	ea4f 0232 	mov.w	r2, r2, rrx
 23e7d5a:	1ab6      	subs	r6, r6, r2
 23e7d5c:	eb65 0503 	sbc.w	r5, r5, r3
 23e7d60:	085b      	lsrs	r3, r3, #1
 23e7d62:	ea4f 0232 	mov.w	r2, r2, rrx
 23e7d66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23e7d6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23e7d6e:	ebb6 0e02 	subs.w	lr, r6, r2
 23e7d72:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e7d76:	bf22      	ittt	cs
 23e7d78:	1ab6      	subcs	r6, r6, r2
 23e7d7a:	4675      	movcs	r5, lr
 23e7d7c:	ea40 000c 	orrcs.w	r0, r0, ip
 23e7d80:	085b      	lsrs	r3, r3, #1
 23e7d82:	ea4f 0232 	mov.w	r2, r2, rrx
 23e7d86:	ebb6 0e02 	subs.w	lr, r6, r2
 23e7d8a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e7d8e:	bf22      	ittt	cs
 23e7d90:	1ab6      	subcs	r6, r6, r2
 23e7d92:	4675      	movcs	r5, lr
 23e7d94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23e7d98:	085b      	lsrs	r3, r3, #1
 23e7d9a:	ea4f 0232 	mov.w	r2, r2, rrx
 23e7d9e:	ebb6 0e02 	subs.w	lr, r6, r2
 23e7da2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e7da6:	bf22      	ittt	cs
 23e7da8:	1ab6      	subcs	r6, r6, r2
 23e7daa:	4675      	movcs	r5, lr
 23e7dac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23e7db0:	085b      	lsrs	r3, r3, #1
 23e7db2:	ea4f 0232 	mov.w	r2, r2, rrx
 23e7db6:	ebb6 0e02 	subs.w	lr, r6, r2
 23e7dba:	eb75 0e03 	sbcs.w	lr, r5, r3
 23e7dbe:	bf22      	ittt	cs
 23e7dc0:	1ab6      	subcs	r6, r6, r2
 23e7dc2:	4675      	movcs	r5, lr
 23e7dc4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23e7dc8:	ea55 0e06 	orrs.w	lr, r5, r6
 23e7dcc:	d018      	beq.n	23e7e00 <__aeabi_ddiv+0x114>
 23e7dce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23e7dd2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23e7dd6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23e7dda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23e7dde:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23e7de2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23e7de6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23e7dea:	d1c0      	bne.n	23e7d6e <__aeabi_ddiv+0x82>
 23e7dec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e7df0:	d10b      	bne.n	23e7e0a <__aeabi_ddiv+0x11e>
 23e7df2:	ea41 0100 	orr.w	r1, r1, r0
 23e7df6:	f04f 0000 	mov.w	r0, #0
 23e7dfa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23e7dfe:	e7b6      	b.n	23e7d6e <__aeabi_ddiv+0x82>
 23e7e00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23e7e04:	bf04      	itt	eq
 23e7e06:	4301      	orreq	r1, r0
 23e7e08:	2000      	moveq	r0, #0
 23e7e0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23e7e0e:	bf88      	it	hi
 23e7e10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23e7e14:	f63f aeaf 	bhi.w	23e7b76 <__aeabi_dmul+0xde>
 23e7e18:	ebb5 0c03 	subs.w	ip, r5, r3
 23e7e1c:	bf04      	itt	eq
 23e7e1e:	ebb6 0c02 	subseq.w	ip, r6, r2
 23e7e22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23e7e26:	f150 0000 	adcs.w	r0, r0, #0
 23e7e2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23e7e2e:	bd70      	pop	{r4, r5, r6, pc}
 23e7e30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23e7e34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23e7e38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23e7e3c:	bfc2      	ittt	gt
 23e7e3e:	ebd4 050c 	rsbsgt	r5, r4, ip
 23e7e42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23e7e46:	bd70      	popgt	{r4, r5, r6, pc}
 23e7e48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e7e4c:	f04f 0e00 	mov.w	lr, #0
 23e7e50:	3c01      	subs	r4, #1
 23e7e52:	e690      	b.n	23e7b76 <__aeabi_dmul+0xde>
 23e7e54:	ea45 0e06 	orr.w	lr, r5, r6
 23e7e58:	e68d      	b.n	23e7b76 <__aeabi_dmul+0xde>
 23e7e5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23e7e5e:	ea94 0f0c 	teq	r4, ip
 23e7e62:	bf08      	it	eq
 23e7e64:	ea95 0f0c 	teqeq	r5, ip
 23e7e68:	f43f af3b 	beq.w	23e7ce2 <__aeabi_dmul+0x24a>
 23e7e6c:	ea94 0f0c 	teq	r4, ip
 23e7e70:	d10a      	bne.n	23e7e88 <__aeabi_ddiv+0x19c>
 23e7e72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23e7e76:	f47f af34 	bne.w	23e7ce2 <__aeabi_dmul+0x24a>
 23e7e7a:	ea95 0f0c 	teq	r5, ip
 23e7e7e:	f47f af25 	bne.w	23e7ccc <__aeabi_dmul+0x234>
 23e7e82:	4610      	mov	r0, r2
 23e7e84:	4619      	mov	r1, r3
 23e7e86:	e72c      	b.n	23e7ce2 <__aeabi_dmul+0x24a>
 23e7e88:	ea95 0f0c 	teq	r5, ip
 23e7e8c:	d106      	bne.n	23e7e9c <__aeabi_ddiv+0x1b0>
 23e7e8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23e7e92:	f43f aefd 	beq.w	23e7c90 <__aeabi_dmul+0x1f8>
 23e7e96:	4610      	mov	r0, r2
 23e7e98:	4619      	mov	r1, r3
 23e7e9a:	e722      	b.n	23e7ce2 <__aeabi_dmul+0x24a>
 23e7e9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23e7ea0:	bf18      	it	ne
 23e7ea2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23e7ea6:	f47f aec5 	bne.w	23e7c34 <__aeabi_dmul+0x19c>
 23e7eaa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23e7eae:	f47f af0d 	bne.w	23e7ccc <__aeabi_dmul+0x234>
 23e7eb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23e7eb6:	f47f aeeb 	bne.w	23e7c90 <__aeabi_dmul+0x1f8>
 23e7eba:	e712      	b.n	23e7ce2 <__aeabi_dmul+0x24a>

023e7ebc <__gedf2>:
 23e7ebc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23e7ec0:	e006      	b.n	23e7ed0 <__cmpdf2+0x4>
 23e7ec2:	bf00      	nop

023e7ec4 <__ledf2>:
 23e7ec4:	f04f 0c01 	mov.w	ip, #1
 23e7ec8:	e002      	b.n	23e7ed0 <__cmpdf2+0x4>
 23e7eca:	bf00      	nop

023e7ecc <__cmpdf2>:
 23e7ecc:	f04f 0c01 	mov.w	ip, #1
 23e7ed0:	f84d cd04 	str.w	ip, [sp, #-4]!
 23e7ed4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e7ed8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e7edc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e7ee0:	bf18      	it	ne
 23e7ee2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23e7ee6:	d01b      	beq.n	23e7f20 <__cmpdf2+0x54>
 23e7ee8:	b001      	add	sp, #4
 23e7eea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23e7eee:	bf0c      	ite	eq
 23e7ef0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23e7ef4:	ea91 0f03 	teqne	r1, r3
 23e7ef8:	bf02      	ittt	eq
 23e7efa:	ea90 0f02 	teqeq	r0, r2
 23e7efe:	2000      	moveq	r0, #0
 23e7f00:	4770      	bxeq	lr
 23e7f02:	f110 0f00 	cmn.w	r0, #0
 23e7f06:	ea91 0f03 	teq	r1, r3
 23e7f0a:	bf58      	it	pl
 23e7f0c:	4299      	cmppl	r1, r3
 23e7f0e:	bf08      	it	eq
 23e7f10:	4290      	cmpeq	r0, r2
 23e7f12:	bf2c      	ite	cs
 23e7f14:	17d8      	asrcs	r0, r3, #31
 23e7f16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23e7f1a:	f040 0001 	orr.w	r0, r0, #1
 23e7f1e:	4770      	bx	lr
 23e7f20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e7f24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e7f28:	d102      	bne.n	23e7f30 <__cmpdf2+0x64>
 23e7f2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23e7f2e:	d107      	bne.n	23e7f40 <__cmpdf2+0x74>
 23e7f30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e7f34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e7f38:	d1d6      	bne.n	23e7ee8 <__cmpdf2+0x1c>
 23e7f3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23e7f3e:	d0d3      	beq.n	23e7ee8 <__cmpdf2+0x1c>
 23e7f40:	f85d 0b04 	ldr.w	r0, [sp], #4
 23e7f44:	4770      	bx	lr
 23e7f46:	bf00      	nop

023e7f48 <__aeabi_cdrcmple>:
 23e7f48:	4684      	mov	ip, r0
 23e7f4a:	4610      	mov	r0, r2
 23e7f4c:	4662      	mov	r2, ip
 23e7f4e:	468c      	mov	ip, r1
 23e7f50:	4619      	mov	r1, r3
 23e7f52:	4663      	mov	r3, ip
 23e7f54:	e000      	b.n	23e7f58 <__aeabi_cdcmpeq>
 23e7f56:	bf00      	nop

023e7f58 <__aeabi_cdcmpeq>:
 23e7f58:	b501      	push	{r0, lr}
 23e7f5a:	f7ff ffb7 	bl	23e7ecc <__cmpdf2>
 23e7f5e:	2800      	cmp	r0, #0
 23e7f60:	bf48      	it	mi
 23e7f62:	f110 0f00 	cmnmi.w	r0, #0
 23e7f66:	bd01      	pop	{r0, pc}

023e7f68 <__aeabi_dcmpeq>:
 23e7f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e7f6c:	f7ff fff4 	bl	23e7f58 <__aeabi_cdcmpeq>
 23e7f70:	bf0c      	ite	eq
 23e7f72:	2001      	moveq	r0, #1
 23e7f74:	2000      	movne	r0, #0
 23e7f76:	f85d fb08 	ldr.w	pc, [sp], #8
 23e7f7a:	bf00      	nop

023e7f7c <__aeabi_dcmplt>:
 23e7f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e7f80:	f7ff ffea 	bl	23e7f58 <__aeabi_cdcmpeq>
 23e7f84:	bf34      	ite	cc
 23e7f86:	2001      	movcc	r0, #1
 23e7f88:	2000      	movcs	r0, #0
 23e7f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 23e7f8e:	bf00      	nop

023e7f90 <__aeabi_dcmple>:
 23e7f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e7f94:	f7ff ffe0 	bl	23e7f58 <__aeabi_cdcmpeq>
 23e7f98:	bf94      	ite	ls
 23e7f9a:	2001      	movls	r0, #1
 23e7f9c:	2000      	movhi	r0, #0
 23e7f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 23e7fa2:	bf00      	nop

023e7fa4 <__aeabi_dcmpge>:
 23e7fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e7fa8:	f7ff ffce 	bl	23e7f48 <__aeabi_cdrcmple>
 23e7fac:	bf94      	ite	ls
 23e7fae:	2001      	movls	r0, #1
 23e7fb0:	2000      	movhi	r0, #0
 23e7fb2:	f85d fb08 	ldr.w	pc, [sp], #8
 23e7fb6:	bf00      	nop

023e7fb8 <__aeabi_dcmpgt>:
 23e7fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23e7fbc:	f7ff ffc4 	bl	23e7f48 <__aeabi_cdrcmple>
 23e7fc0:	bf34      	ite	cc
 23e7fc2:	2001      	movcc	r0, #1
 23e7fc4:	2000      	movcs	r0, #0
 23e7fc6:	f85d fb08 	ldr.w	pc, [sp], #8
 23e7fca:	bf00      	nop

023e7fcc <__aeabi_dcmpun>:
 23e7fcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23e7fd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e7fd4:	d102      	bne.n	23e7fdc <__aeabi_dcmpun+0x10>
 23e7fd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23e7fda:	d10a      	bne.n	23e7ff2 <__aeabi_dcmpun+0x26>
 23e7fdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23e7fe0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23e7fe4:	d102      	bne.n	23e7fec <__aeabi_dcmpun+0x20>
 23e7fe6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23e7fea:	d102      	bne.n	23e7ff2 <__aeabi_dcmpun+0x26>
 23e7fec:	f04f 0000 	mov.w	r0, #0
 23e7ff0:	4770      	bx	lr
 23e7ff2:	f04f 0001 	mov.w	r0, #1
 23e7ff6:	4770      	bx	lr

023e7ff8 <__aeabi_d2iz>:
 23e7ff8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23e7ffc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23e8000:	d215      	bcs.n	23e802e <__aeabi_d2iz+0x36>
 23e8002:	d511      	bpl.n	23e8028 <__aeabi_d2iz+0x30>
 23e8004:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23e8008:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23e800c:	d912      	bls.n	23e8034 <__aeabi_d2iz+0x3c>
 23e800e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e8012:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23e8016:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23e801a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23e801e:	fa23 f002 	lsr.w	r0, r3, r2
 23e8022:	bf18      	it	ne
 23e8024:	4240      	negne	r0, r0
 23e8026:	4770      	bx	lr
 23e8028:	f04f 0000 	mov.w	r0, #0
 23e802c:	4770      	bx	lr
 23e802e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23e8032:	d105      	bne.n	23e8040 <__aeabi_d2iz+0x48>
 23e8034:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23e8038:	bf08      	it	eq
 23e803a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23e803e:	4770      	bx	lr
 23e8040:	f04f 0000 	mov.w	r0, #0
 23e8044:	4770      	bx	lr
 23e8046:	bf00      	nop

023e8048 <__aeabi_d2uiz>:
 23e8048:	004a      	lsls	r2, r1, #1
 23e804a:	d211      	bcs.n	23e8070 <__aeabi_d2uiz+0x28>
 23e804c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23e8050:	d211      	bcs.n	23e8076 <__aeabi_d2uiz+0x2e>
 23e8052:	d50d      	bpl.n	23e8070 <__aeabi_d2uiz+0x28>
 23e8054:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23e8058:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23e805c:	d40e      	bmi.n	23e807c <__aeabi_d2uiz+0x34>
 23e805e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e8062:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23e8066:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23e806a:	fa23 f002 	lsr.w	r0, r3, r2
 23e806e:	4770      	bx	lr
 23e8070:	f04f 0000 	mov.w	r0, #0
 23e8074:	4770      	bx	lr
 23e8076:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23e807a:	d102      	bne.n	23e8082 <__aeabi_d2uiz+0x3a>
 23e807c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e8080:	4770      	bx	lr
 23e8082:	f04f 0000 	mov.w	r0, #0
 23e8086:	4770      	bx	lr

023e8088 <__aeabi_d2f>:
 23e8088:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23e808c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23e8090:	bf24      	itt	cs
 23e8092:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23e8096:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23e809a:	d90d      	bls.n	23e80b8 <__aeabi_d2f+0x30>
 23e809c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23e80a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23e80a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23e80a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23e80ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23e80b0:	bf08      	it	eq
 23e80b2:	f020 0001 	biceq.w	r0, r0, #1
 23e80b6:	4770      	bx	lr
 23e80b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23e80bc:	d121      	bne.n	23e8102 <__aeabi_d2f+0x7a>
 23e80be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23e80c2:	bfbc      	itt	lt
 23e80c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23e80c8:	4770      	bxlt	lr
 23e80ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23e80ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23e80d2:	f1c2 0218 	rsb	r2, r2, #24
 23e80d6:	f1c2 0c20 	rsb	ip, r2, #32
 23e80da:	fa10 f30c 	lsls.w	r3, r0, ip
 23e80de:	fa20 f002 	lsr.w	r0, r0, r2
 23e80e2:	bf18      	it	ne
 23e80e4:	f040 0001 	orrne.w	r0, r0, #1
 23e80e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23e80ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23e80f0:	fa03 fc0c 	lsl.w	ip, r3, ip
 23e80f4:	ea40 000c 	orr.w	r0, r0, ip
 23e80f8:	fa23 f302 	lsr.w	r3, r3, r2
 23e80fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23e8100:	e7cc      	b.n	23e809c <__aeabi_d2f+0x14>
 23e8102:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23e8106:	d107      	bne.n	23e8118 <__aeabi_d2f+0x90>
 23e8108:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23e810c:	bf1e      	ittt	ne
 23e810e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23e8112:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23e8116:	4770      	bxne	lr
 23e8118:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23e811c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23e8120:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23e8124:	4770      	bx	lr
 23e8126:	bf00      	nop

023e8128 <__aeabi_ldivmod>:
 23e8128:	b97b      	cbnz	r3, 23e814a <__aeabi_ldivmod+0x22>
 23e812a:	b972      	cbnz	r2, 23e814a <__aeabi_ldivmod+0x22>
 23e812c:	2900      	cmp	r1, #0
 23e812e:	bfbe      	ittt	lt
 23e8130:	2000      	movlt	r0, #0
 23e8132:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 23e8136:	e006      	blt.n	23e8146 <__aeabi_ldivmod+0x1e>
 23e8138:	bf08      	it	eq
 23e813a:	2800      	cmpeq	r0, #0
 23e813c:	bf1c      	itt	ne
 23e813e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 23e8142:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e8146:	f000 b9eb 	b.w	23e8520 <__aeabi_idiv0>
 23e814a:	f1ad 0c08 	sub.w	ip, sp, #8
 23e814e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23e8152:	2900      	cmp	r1, #0
 23e8154:	db09      	blt.n	23e816a <__aeabi_ldivmod+0x42>
 23e8156:	2b00      	cmp	r3, #0
 23e8158:	db1a      	blt.n	23e8190 <__aeabi_ldivmod+0x68>
 23e815a:	f000 f86b 	bl	23e8234 <__udivmoddi4>
 23e815e:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e8162:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e8166:	b004      	add	sp, #16
 23e8168:	4770      	bx	lr
 23e816a:	4240      	negs	r0, r0
 23e816c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e8170:	2b00      	cmp	r3, #0
 23e8172:	db1b      	blt.n	23e81ac <__aeabi_ldivmod+0x84>
 23e8174:	f000 f85e 	bl	23e8234 <__udivmoddi4>
 23e8178:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e817c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e8180:	b004      	add	sp, #16
 23e8182:	4240      	negs	r0, r0
 23e8184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e8188:	4252      	negs	r2, r2
 23e818a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e818e:	4770      	bx	lr
 23e8190:	4252      	negs	r2, r2
 23e8192:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e8196:	f000 f84d 	bl	23e8234 <__udivmoddi4>
 23e819a:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e819e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e81a2:	b004      	add	sp, #16
 23e81a4:	4240      	negs	r0, r0
 23e81a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e81aa:	4770      	bx	lr
 23e81ac:	4252      	negs	r2, r2
 23e81ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e81b2:	f000 f83f 	bl	23e8234 <__udivmoddi4>
 23e81b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 23e81ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23e81be:	b004      	add	sp, #16
 23e81c0:	4252      	negs	r2, r2
 23e81c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23e81c6:	4770      	bx	lr

023e81c8 <__aeabi_d2lz>:
 23e81c8:	b538      	push	{r3, r4, r5, lr}
 23e81ca:	2200      	movs	r2, #0
 23e81cc:	2300      	movs	r3, #0
 23e81ce:	4604      	mov	r4, r0
 23e81d0:	460d      	mov	r5, r1
 23e81d2:	f7ff fed3 	bl	23e7f7c <__aeabi_dcmplt>
 23e81d6:	b928      	cbnz	r0, 23e81e4 <__aeabi_d2lz+0x1c>
 23e81d8:	4620      	mov	r0, r4
 23e81da:	4629      	mov	r1, r5
 23e81dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23e81e0:	f000 b80a 	b.w	23e81f8 <__aeabi_d2ulz>
 23e81e4:	4620      	mov	r0, r4
 23e81e6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 23e81ea:	f000 f805 	bl	23e81f8 <__aeabi_d2ulz>
 23e81ee:	4240      	negs	r0, r0
 23e81f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23e81f4:	bd38      	pop	{r3, r4, r5, pc}
 23e81f6:	bf00      	nop

023e81f8 <__aeabi_d2ulz>:
 23e81f8:	b5d0      	push	{r4, r6, r7, lr}
 23e81fa:	2200      	movs	r2, #0
 23e81fc:	4b0b      	ldr	r3, [pc, #44]	; (23e822c <__aeabi_d2ulz+0x34>)
 23e81fe:	4606      	mov	r6, r0
 23e8200:	460f      	mov	r7, r1
 23e8202:	f7ff fc49 	bl	23e7a98 <__aeabi_dmul>
 23e8206:	f7ff ff1f 	bl	23e8048 <__aeabi_d2uiz>
 23e820a:	4604      	mov	r4, r0
 23e820c:	f7ff fbca 	bl	23e79a4 <__aeabi_ui2d>
 23e8210:	2200      	movs	r2, #0
 23e8212:	4b07      	ldr	r3, [pc, #28]	; (23e8230 <__aeabi_d2ulz+0x38>)
 23e8214:	f7ff fc40 	bl	23e7a98 <__aeabi_dmul>
 23e8218:	4602      	mov	r2, r0
 23e821a:	460b      	mov	r3, r1
 23e821c:	4630      	mov	r0, r6
 23e821e:	4639      	mov	r1, r7
 23e8220:	f7ff fa82 	bl	23e7728 <__aeabi_dsub>
 23e8224:	f7ff ff10 	bl	23e8048 <__aeabi_d2uiz>
 23e8228:	4621      	mov	r1, r4
 23e822a:	bdd0      	pop	{r4, r6, r7, pc}
 23e822c:	3df00000 	.word	0x3df00000
 23e8230:	41f00000 	.word	0x41f00000

023e8234 <__udivmoddi4>:
 23e8234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e8238:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23e823a:	4604      	mov	r4, r0
 23e823c:	460f      	mov	r7, r1
 23e823e:	2b00      	cmp	r3, #0
 23e8240:	d148      	bne.n	23e82d4 <__udivmoddi4+0xa0>
 23e8242:	428a      	cmp	r2, r1
 23e8244:	4694      	mov	ip, r2
 23e8246:	d961      	bls.n	23e830c <__udivmoddi4+0xd8>
 23e8248:	fab2 f382 	clz	r3, r2
 23e824c:	b143      	cbz	r3, 23e8260 <__udivmoddi4+0x2c>
 23e824e:	f1c3 0120 	rsb	r1, r3, #32
 23e8252:	409f      	lsls	r7, r3
 23e8254:	fa02 fc03 	lsl.w	ip, r2, r3
 23e8258:	409c      	lsls	r4, r3
 23e825a:	fa20 f101 	lsr.w	r1, r0, r1
 23e825e:	430f      	orrs	r7, r1
 23e8260:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23e8264:	fa1f fe8c 	uxth.w	lr, ip
 23e8268:	0c22      	lsrs	r2, r4, #16
 23e826a:	fbb7 f6f1 	udiv	r6, r7, r1
 23e826e:	fb01 7716 	mls	r7, r1, r6, r7
 23e8272:	fb06 f00e 	mul.w	r0, r6, lr
 23e8276:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23e827a:	4290      	cmp	r0, r2
 23e827c:	d908      	bls.n	23e8290 <__udivmoddi4+0x5c>
 23e827e:	eb1c 0202 	adds.w	r2, ip, r2
 23e8282:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23e8286:	d202      	bcs.n	23e828e <__udivmoddi4+0x5a>
 23e8288:	4290      	cmp	r0, r2
 23e828a:	f200 8137 	bhi.w	23e84fc <__udivmoddi4+0x2c8>
 23e828e:	463e      	mov	r6, r7
 23e8290:	1a12      	subs	r2, r2, r0
 23e8292:	b2a4      	uxth	r4, r4
 23e8294:	fbb2 f0f1 	udiv	r0, r2, r1
 23e8298:	fb01 2210 	mls	r2, r1, r0, r2
 23e829c:	fb00 fe0e 	mul.w	lr, r0, lr
 23e82a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23e82a4:	45a6      	cmp	lr, r4
 23e82a6:	d908      	bls.n	23e82ba <__udivmoddi4+0x86>
 23e82a8:	eb1c 0404 	adds.w	r4, ip, r4
 23e82ac:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23e82b0:	d202      	bcs.n	23e82b8 <__udivmoddi4+0x84>
 23e82b2:	45a6      	cmp	lr, r4
 23e82b4:	f200 811c 	bhi.w	23e84f0 <__udivmoddi4+0x2bc>
 23e82b8:	4610      	mov	r0, r2
 23e82ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23e82be:	eba4 040e 	sub.w	r4, r4, lr
 23e82c2:	2600      	movs	r6, #0
 23e82c4:	b11d      	cbz	r5, 23e82ce <__udivmoddi4+0x9a>
 23e82c6:	40dc      	lsrs	r4, r3
 23e82c8:	2300      	movs	r3, #0
 23e82ca:	e9c5 4300 	strd	r4, r3, [r5]
 23e82ce:	4631      	mov	r1, r6
 23e82d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e82d4:	428b      	cmp	r3, r1
 23e82d6:	d909      	bls.n	23e82ec <__udivmoddi4+0xb8>
 23e82d8:	2d00      	cmp	r5, #0
 23e82da:	f000 80fd 	beq.w	23e84d8 <__udivmoddi4+0x2a4>
 23e82de:	2600      	movs	r6, #0
 23e82e0:	e9c5 0100 	strd	r0, r1, [r5]
 23e82e4:	4630      	mov	r0, r6
 23e82e6:	4631      	mov	r1, r6
 23e82e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23e82ec:	fab3 f683 	clz	r6, r3
 23e82f0:	2e00      	cmp	r6, #0
 23e82f2:	d14b      	bne.n	23e838c <__udivmoddi4+0x158>
 23e82f4:	428b      	cmp	r3, r1
 23e82f6:	f0c0 80f2 	bcc.w	23e84de <__udivmoddi4+0x2aa>
 23e82fa:	4282      	cmp	r2, r0
 23e82fc:	f240 80ef 	bls.w	23e84de <__udivmoddi4+0x2aa>
 23e8300:	4630      	mov	r0, r6
 23e8302:	2d00      	cmp	r5, #0
 23e8304:	d0e3      	beq.n	23e82ce <__udivmoddi4+0x9a>
 23e8306:	e9c5 4700 	strd	r4, r7, [r5]
 23e830a:	e7e0      	b.n	23e82ce <__udivmoddi4+0x9a>
 23e830c:	b902      	cbnz	r2, 23e8310 <__udivmoddi4+0xdc>
 23e830e:	deff      	udf	#255	; 0xff
 23e8310:	fab2 f382 	clz	r3, r2
 23e8314:	2b00      	cmp	r3, #0
 23e8316:	f040 809d 	bne.w	23e8454 <__udivmoddi4+0x220>
 23e831a:	1a89      	subs	r1, r1, r2
 23e831c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23e8320:	b297      	uxth	r7, r2
 23e8322:	2601      	movs	r6, #1
 23e8324:	0c20      	lsrs	r0, r4, #16
 23e8326:	fbb1 f2fe 	udiv	r2, r1, lr
 23e832a:	fb0e 1112 	mls	r1, lr, r2, r1
 23e832e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23e8332:	fb07 f002 	mul.w	r0, r7, r2
 23e8336:	4288      	cmp	r0, r1
 23e8338:	d90f      	bls.n	23e835a <__udivmoddi4+0x126>
 23e833a:	eb1c 0101 	adds.w	r1, ip, r1
 23e833e:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23e8342:	bf2c      	ite	cs
 23e8344:	f04f 0901 	movcs.w	r9, #1
 23e8348:	f04f 0900 	movcc.w	r9, #0
 23e834c:	4288      	cmp	r0, r1
 23e834e:	d903      	bls.n	23e8358 <__udivmoddi4+0x124>
 23e8350:	f1b9 0f00 	cmp.w	r9, #0
 23e8354:	f000 80cf 	beq.w	23e84f6 <__udivmoddi4+0x2c2>
 23e8358:	4642      	mov	r2, r8
 23e835a:	1a09      	subs	r1, r1, r0
 23e835c:	b2a4      	uxth	r4, r4
 23e835e:	fbb1 f0fe 	udiv	r0, r1, lr
 23e8362:	fb0e 1110 	mls	r1, lr, r0, r1
 23e8366:	fb00 f707 	mul.w	r7, r0, r7
 23e836a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23e836e:	42a7      	cmp	r7, r4
 23e8370:	d908      	bls.n	23e8384 <__udivmoddi4+0x150>
 23e8372:	eb1c 0404 	adds.w	r4, ip, r4
 23e8376:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23e837a:	d202      	bcs.n	23e8382 <__udivmoddi4+0x14e>
 23e837c:	42a7      	cmp	r7, r4
 23e837e:	f200 80b4 	bhi.w	23e84ea <__udivmoddi4+0x2b6>
 23e8382:	4608      	mov	r0, r1
 23e8384:	1be4      	subs	r4, r4, r7
 23e8386:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23e838a:	e79b      	b.n	23e82c4 <__udivmoddi4+0x90>
 23e838c:	f1c6 0720 	rsb	r7, r6, #32
 23e8390:	40b3      	lsls	r3, r6
 23e8392:	fa01 f406 	lsl.w	r4, r1, r6
 23e8396:	fa22 fc07 	lsr.w	ip, r2, r7
 23e839a:	40f9      	lsrs	r1, r7
 23e839c:	40b2      	lsls	r2, r6
 23e839e:	ea4c 0c03 	orr.w	ip, ip, r3
 23e83a2:	fa20 f307 	lsr.w	r3, r0, r7
 23e83a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23e83aa:	431c      	orrs	r4, r3
 23e83ac:	fa1f fe8c 	uxth.w	lr, ip
 23e83b0:	fa00 f306 	lsl.w	r3, r0, r6
 23e83b4:	0c20      	lsrs	r0, r4, #16
 23e83b6:	fbb1 f8f9 	udiv	r8, r1, r9
 23e83ba:	fb09 1118 	mls	r1, r9, r8, r1
 23e83be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23e83c2:	fb08 f00e 	mul.w	r0, r8, lr
 23e83c6:	4288      	cmp	r0, r1
 23e83c8:	d90f      	bls.n	23e83ea <__udivmoddi4+0x1b6>
 23e83ca:	eb1c 0101 	adds.w	r1, ip, r1
 23e83ce:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23e83d2:	bf2c      	ite	cs
 23e83d4:	f04f 0b01 	movcs.w	fp, #1
 23e83d8:	f04f 0b00 	movcc.w	fp, #0
 23e83dc:	4288      	cmp	r0, r1
 23e83de:	d903      	bls.n	23e83e8 <__udivmoddi4+0x1b4>
 23e83e0:	f1bb 0f00 	cmp.w	fp, #0
 23e83e4:	f000 808d 	beq.w	23e8502 <__udivmoddi4+0x2ce>
 23e83e8:	46d0      	mov	r8, sl
 23e83ea:	1a09      	subs	r1, r1, r0
 23e83ec:	b2a4      	uxth	r4, r4
 23e83ee:	fbb1 f0f9 	udiv	r0, r1, r9
 23e83f2:	fb09 1110 	mls	r1, r9, r0, r1
 23e83f6:	fb00 fe0e 	mul.w	lr, r0, lr
 23e83fa:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23e83fe:	458e      	cmp	lr, r1
 23e8400:	d907      	bls.n	23e8412 <__udivmoddi4+0x1de>
 23e8402:	eb1c 0101 	adds.w	r1, ip, r1
 23e8406:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23e840a:	d201      	bcs.n	23e8410 <__udivmoddi4+0x1dc>
 23e840c:	458e      	cmp	lr, r1
 23e840e:	d87f      	bhi.n	23e8510 <__udivmoddi4+0x2dc>
 23e8410:	4620      	mov	r0, r4
 23e8412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23e8416:	eba1 010e 	sub.w	r1, r1, lr
 23e841a:	fba0 9802 	umull	r9, r8, r0, r2
 23e841e:	4541      	cmp	r1, r8
 23e8420:	464c      	mov	r4, r9
 23e8422:	46c6      	mov	lr, r8
 23e8424:	d302      	bcc.n	23e842c <__udivmoddi4+0x1f8>
 23e8426:	d106      	bne.n	23e8436 <__udivmoddi4+0x202>
 23e8428:	454b      	cmp	r3, r9
 23e842a:	d204      	bcs.n	23e8436 <__udivmoddi4+0x202>
 23e842c:	3801      	subs	r0, #1
 23e842e:	ebb9 0402 	subs.w	r4, r9, r2
 23e8432:	eb68 0e0c 	sbc.w	lr, r8, ip
 23e8436:	2d00      	cmp	r5, #0
 23e8438:	d070      	beq.n	23e851c <__udivmoddi4+0x2e8>
 23e843a:	1b1a      	subs	r2, r3, r4
 23e843c:	eb61 010e 	sbc.w	r1, r1, lr
 23e8440:	fa22 f306 	lsr.w	r3, r2, r6
 23e8444:	fa01 f707 	lsl.w	r7, r1, r7
 23e8448:	40f1      	lsrs	r1, r6
 23e844a:	2600      	movs	r6, #0
 23e844c:	431f      	orrs	r7, r3
 23e844e:	e9c5 7100 	strd	r7, r1, [r5]
 23e8452:	e73c      	b.n	23e82ce <__udivmoddi4+0x9a>
 23e8454:	fa02 fc03 	lsl.w	ip, r2, r3
 23e8458:	f1c3 0020 	rsb	r0, r3, #32
 23e845c:	fa01 f203 	lsl.w	r2, r1, r3
 23e8460:	fa21 f600 	lsr.w	r6, r1, r0
 23e8464:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23e8468:	fa24 f100 	lsr.w	r1, r4, r0
 23e846c:	fa1f f78c 	uxth.w	r7, ip
 23e8470:	409c      	lsls	r4, r3
 23e8472:	4311      	orrs	r1, r2
 23e8474:	fbb6 f0fe 	udiv	r0, r6, lr
 23e8478:	0c0a      	lsrs	r2, r1, #16
 23e847a:	fb0e 6610 	mls	r6, lr, r0, r6
 23e847e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23e8482:	fb00 f607 	mul.w	r6, r0, r7
 23e8486:	4296      	cmp	r6, r2
 23e8488:	d90e      	bls.n	23e84a8 <__udivmoddi4+0x274>
 23e848a:	eb1c 0202 	adds.w	r2, ip, r2
 23e848e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23e8492:	bf2c      	ite	cs
 23e8494:	f04f 0901 	movcs.w	r9, #1
 23e8498:	f04f 0900 	movcc.w	r9, #0
 23e849c:	4296      	cmp	r6, r2
 23e849e:	d902      	bls.n	23e84a6 <__udivmoddi4+0x272>
 23e84a0:	f1b9 0f00 	cmp.w	r9, #0
 23e84a4:	d031      	beq.n	23e850a <__udivmoddi4+0x2d6>
 23e84a6:	4640      	mov	r0, r8
 23e84a8:	1b92      	subs	r2, r2, r6
 23e84aa:	b289      	uxth	r1, r1
 23e84ac:	fbb2 f6fe 	udiv	r6, r2, lr
 23e84b0:	fb0e 2216 	mls	r2, lr, r6, r2
 23e84b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23e84b8:	fb06 f207 	mul.w	r2, r6, r7
 23e84bc:	428a      	cmp	r2, r1
 23e84be:	d907      	bls.n	23e84d0 <__udivmoddi4+0x29c>
 23e84c0:	eb1c 0101 	adds.w	r1, ip, r1
 23e84c4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23e84c8:	d201      	bcs.n	23e84ce <__udivmoddi4+0x29a>
 23e84ca:	428a      	cmp	r2, r1
 23e84cc:	d823      	bhi.n	23e8516 <__udivmoddi4+0x2e2>
 23e84ce:	4646      	mov	r6, r8
 23e84d0:	1a89      	subs	r1, r1, r2
 23e84d2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23e84d6:	e725      	b.n	23e8324 <__udivmoddi4+0xf0>
 23e84d8:	462e      	mov	r6, r5
 23e84da:	4628      	mov	r0, r5
 23e84dc:	e6f7      	b.n	23e82ce <__udivmoddi4+0x9a>
 23e84de:	1a84      	subs	r4, r0, r2
 23e84e0:	eb61 0303 	sbc.w	r3, r1, r3
 23e84e4:	2001      	movs	r0, #1
 23e84e6:	461f      	mov	r7, r3
 23e84e8:	e70b      	b.n	23e8302 <__udivmoddi4+0xce>
 23e84ea:	4464      	add	r4, ip
 23e84ec:	3802      	subs	r0, #2
 23e84ee:	e749      	b.n	23e8384 <__udivmoddi4+0x150>
 23e84f0:	4464      	add	r4, ip
 23e84f2:	3802      	subs	r0, #2
 23e84f4:	e6e1      	b.n	23e82ba <__udivmoddi4+0x86>
 23e84f6:	3a02      	subs	r2, #2
 23e84f8:	4461      	add	r1, ip
 23e84fa:	e72e      	b.n	23e835a <__udivmoddi4+0x126>
 23e84fc:	3e02      	subs	r6, #2
 23e84fe:	4462      	add	r2, ip
 23e8500:	e6c6      	b.n	23e8290 <__udivmoddi4+0x5c>
 23e8502:	f1a8 0802 	sub.w	r8, r8, #2
 23e8506:	4461      	add	r1, ip
 23e8508:	e76f      	b.n	23e83ea <__udivmoddi4+0x1b6>
 23e850a:	3802      	subs	r0, #2
 23e850c:	4462      	add	r2, ip
 23e850e:	e7cb      	b.n	23e84a8 <__udivmoddi4+0x274>
 23e8510:	3802      	subs	r0, #2
 23e8512:	4461      	add	r1, ip
 23e8514:	e77d      	b.n	23e8412 <__udivmoddi4+0x1de>
 23e8516:	3e02      	subs	r6, #2
 23e8518:	4461      	add	r1, ip
 23e851a:	e7d9      	b.n	23e84d0 <__udivmoddi4+0x29c>
 23e851c:	462e      	mov	r6, r5
 23e851e:	e6d6      	b.n	23e82ce <__udivmoddi4+0x9a>

023e8520 <__aeabi_idiv0>:
 23e8520:	4770      	bx	lr
 23e8522:	bf00      	nop

023e8524 <strcmp>:
 23e8524:	f810 2b01 	ldrb.w	r2, [r0], #1
 23e8528:	f811 3b01 	ldrb.w	r3, [r1], #1
 23e852c:	2a01      	cmp	r2, #1
 23e852e:	bf28      	it	cs
 23e8530:	429a      	cmpcs	r2, r3
 23e8532:	d0f7      	beq.n	23e8524 <strcmp>
 23e8534:	1ad0      	subs	r0, r2, r3
 23e8536:	4770      	bx	lr

023e8538 <strlen>:
 23e8538:	4603      	mov	r3, r0
 23e853a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23e853e:	2a00      	cmp	r2, #0
 23e8540:	d1fb      	bne.n	23e853a <strlen+0x2>
 23e8542:	1a18      	subs	r0, r3, r0
 23e8544:	3801      	subs	r0, #1
 23e8546:	4770      	bx	lr

023e8548 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23e8548:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23e854a:	f00e f971 	bl	23f6830 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23e854e:	2500      	movs	r5, #0
 23e8550:	4e05      	ldr	r6, [pc, #20]	; (23e8568 <module_user_init+0x20>)
 23e8552:	4c06      	ldr	r4, [pc, #24]	; (23e856c <module_user_init+0x24>)
 23e8554:	1ba4      	subs	r4, r4, r6
 23e8556:	08a4      	lsrs	r4, r4, #2
 23e8558:	42ac      	cmp	r4, r5
 23e855a:	d100      	bne.n	23e855e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23e855c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23e855e:	f856 3b04 	ldr.w	r3, [r6], #4
 23e8562:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23e8564:	3501      	adds	r5, #1
 23e8566:	e7f7      	b.n	23e8558 <module_user_init+0x10>
 23e8568:	023fffcc 	.word	0x023fffcc
 23e856c:	023ffff4 	.word	0x023ffff4

023e8570 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23e8570:	f003 be0e 	b.w	23ec190 <setup>

023e8574 <module_user_loop>:
}

void module_user_loop() {
 23e8574:	b508      	push	{r3, lr}
    loop();
 23e8576:	f004 fd57 	bl	23ed028 <loop>
    _post_loop();
}
 23e857a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23e857e:	f00e b90f 	b.w	23f67a0 <_post_loop>

023e8582 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23e8582:	f00c b8db 	b.w	23f473c <malloc>

023e8586 <_Znaj>:
 23e8586:	f00c b8d9 	b.w	23f473c <malloc>

023e858a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23e858a:	f00c b8e5 	b.w	23f4758 <free>
	...

023e8590 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23e8590:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23e8592:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23e8594:	4a02      	ldr	r2, [pc, #8]	; (23e85a0 <__cxa_pure_virtual+0x10>)
 23e8596:	4903      	ldr	r1, [pc, #12]	; (23e85a4 <__cxa_pure_virtual+0x14>)
 23e8598:	f00b ff9c 	bl	23f44d4 <panic_>
  while (1);
 23e859c:	e7fe      	b.n	23e859c <__cxa_pure_virtual+0xc>
 23e859e:	bf00      	nop
 23e85a0:	023f4005 	.word	0x023f4005
 23e85a4:	023fadc4 	.word	0x023fadc4

023e85a8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23e85a8:	7800      	ldrb	r0, [r0, #0]
 23e85aa:	fab0 f080 	clz	r0, r0
 23e85ae:	0940      	lsrs	r0, r0, #5
 23e85b0:	4770      	bx	lr

023e85b2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23e85b2:	2301      	movs	r3, #1
 23e85b4:	7003      	strb	r3, [r0, #0]
 23e85b6:	4770      	bx	lr

023e85b8 <arm_mat_scale_f32>:

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 23e85b8:	8803      	ldrh	r3, [r0, #0]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 23e85ba:	6842      	ldr	r2, [r0, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 23e85bc:	8840      	ldrh	r0, [r0, #2]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 23e85be:	6849      	ldr	r1, [r1, #4]
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 23e85c0:	4358      	muls	r0, r3
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 23e85c2:	b900      	cbnz	r0, 23e85c6 <arm_mat_scale_f32+0xe>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 23e85c4:	4770      	bx	lr
      *pOut++ = (*pIn++) * scale;
 23e85c6:	ecf2 7a01 	vldmia	r2!, {s15}
 23e85ca:	ee67 7a80 	vmul.f32	s15, s15, s0
      blkCnt--;
 23e85ce:	3801      	subs	r0, #1
      *pOut++ = (*pIn++) * scale;
 23e85d0:	ece1 7a01 	vstmia	r1!, {s15}
      blkCnt--;
 23e85d4:	e7f5      	b.n	23e85c2 <arm_mat_scale_f32+0xa>

023e85d6 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 23e85d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
  uint16_t nCols = pSrc->numCols;                /* number of columns */
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 23e85d8:	8802      	ldrh	r2, [r0, #0]
 23e85da:	684b      	ldr	r3, [r1, #4]
 23e85dc:	8845      	ldrh	r5, [r0, #2]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 23e85de:	6844      	ldr	r4, [r0, #4]
      {
        /* Read and store input element in destination */
        *px = *pIn++;

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 23e85e0:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 23e85e4:	00af      	lsls	r7, r5, #2
 23e85e6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
      px = pOut + i;
 23e85ea:	4619      	mov	r1, r3
      col = nCols;
 23e85ec:	4628      	mov	r0, r5
      while (col > 0U)
 23e85ee:	4626      	mov	r6, r4
 23e85f0:	b920      	cbnz	r0, 23e85fc <arm_mat_trans_f32+0x26>
      i++;

      /* Decrement row loop counter */
      row--;

    } while (row > 0U);          /* row loop end */
 23e85f2:	3304      	adds	r3, #4
 23e85f4:	4293      	cmp	r3, r2
 23e85f6:	443c      	add	r4, r7
 23e85f8:	d1f7      	bne.n	23e85ea <arm_mat_trans_f32+0x14>
    status = ARM_MATH_SUCCESS;
  }

  /* Return to application */
  return (status);
}
 23e85fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *px = *pIn++;
 23e85fc:	f856 eb04 	ldr.w	lr, [r6], #4
        col--;
 23e8600:	3801      	subs	r0, #1
        *px = *pIn++;
 23e8602:	f8c1 e000 	str.w	lr, [r1]
        px += nRows;
 23e8606:	4461      	add	r1, ip
        col--;
 23e8608:	e7f2      	b.n	23e85f0 <arm_mat_trans_f32+0x1a>
	...

023e860c <arm_mean_f32>:
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 23e860c:	460b      	mov	r3, r1
        float32_t sum = 0.0f;                          /* Temporary result storage */
 23e860e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 23e8638 <arm_mean_f32+0x2c>
{
 23e8612:	b082      	sub	sp, #8
 23e8614:	9101      	str	r1, [sp, #4]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 23e8616:	b94b      	cbnz	r3, 23e862c <arm_mean_f32+0x20>
    blkCnt--;
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 23e8618:	eddd 7a01 	vldr	s15, [sp, #4]
 23e861c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23e8620:	eec7 6a27 	vdiv.f32	s13, s14, s15
 23e8624:	edc2 6a00 	vstr	s13, [r2]
}
 23e8628:	b002      	add	sp, #8
 23e862a:	4770      	bx	lr
    sum += *pSrc++;
 23e862c:	ecf0 7a01 	vldmia	r0!, {s15}
    blkCnt--;
 23e8630:	3b01      	subs	r3, #1
    sum += *pSrc++;
 23e8632:	ee37 7a27 	vadd.f32	s14, s14, s15
    blkCnt--;
 23e8636:	e7ee      	b.n	23e8616 <arm_mean_f32+0xa>
 23e8638:	00000000 	.word	0x00000000

023e863c <arm_rms_f32>:
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 23e863c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 23e8684 <arm_rms_f32+0x48>
{
 23e8640:	b513      	push	{r0, r1, r4, lr}
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 23e8642:	460b      	mov	r3, r1
{
 23e8644:	4614      	mov	r4, r2
 23e8646:	eef0 6a47 	vmov.f32	s13, s14
 23e864a:	9101      	str	r1, [sp, #4]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 23e864c:	b983      	cbnz	r3, 23e8670 <arm_rms_f32+0x34>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 23e864e:	eddd 7a01 	vldr	s15, [sp, #4]
 23e8652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23e8656:	ee87 0a27 	vdiv.f32	s0, s14, s15
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 23e865a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23e865e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23e8662:	db0b      	blt.n	23e867c <arm_rms_f32+0x40>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 23e8664:	f00e fd4c 	bl	23f7100 <sqrtf>
 23e8668:	ed84 0a00 	vstr	s0, [r4]
}
 23e866c:	b002      	add	sp, #8
 23e866e:	bd10      	pop	{r4, pc}
    in = *pSrc++;
 23e8670:	ecf0 7a01 	vldmia	r0!, {s15}
    blkCnt--;
 23e8674:	3b01      	subs	r3, #1
    sum += ( in * in);
 23e8676:	eea7 7aa7 	vfma.f32	s14, s15, s15
    blkCnt--;
 23e867a:	e7e7      	b.n	23e864c <arm_rms_f32+0x10>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 23e867c:	edc4 6a00 	vstr	s13, [r4]
}
 23e8680:	e7f4      	b.n	23e866c <arm_rms_f32+0x30>
 23e8682:	bf00      	nop
 23e8684:	00000000 	.word	0x00000000

023e8688 <arm_var_f32>:
        float32_t sum = 0.0f;                          /* Temporary result storage */
        float32_t fSum = 0.0f;
        float32_t fMean, fValue;
  const float32_t * pInput = pSrc;

  if (blockSize <= 1U)
 23e8688:	2901      	cmp	r1, #1
 23e868a:	eddf 7a13 	vldr	s15, [pc, #76]	; 23e86d8 <arm_var_f32+0x50>
{
 23e868e:	b510      	push	{r4, lr}
  if (blockSize <= 1U)
 23e8690:	d802      	bhi.n	23e8698 <arm_var_f32+0x10>
    /* Decrement loop counter */
    blkCnt--;
  }

  /* Variance */
  *pResult = fSum / (float32_t)(blockSize - 1.0f);
 23e8692:	edc2 7a00 	vstr	s15, [r2]
}
 23e8696:	bd10      	pop	{r4, pc}
 23e8698:	460b      	mov	r3, r1
  const float32_t * pInput = pSrc;
 23e869a:	4604      	mov	r4, r0
    sum += *pInput++;
 23e869c:	ecb4 7a01 	vldmia	r4!, {s14}
  while (blkCnt > 0U)
 23e86a0:	3b01      	subs	r3, #1
    sum += *pInput++;
 23e86a2:	ee77 7a87 	vadd.f32	s15, s15, s14
  while (blkCnt > 0U)
 23e86a6:	d1f9      	bne.n	23e869c <arm_var_f32+0x14>
  fMean = sum / (float32_t) blockSize;
 23e86a8:	ee07 1a10 	vmov	s14, r1
 23e86ac:	eeb8 7a47 	vcvt.f32.u32	s14, s14
        float32_t fSum = 0.0f;
 23e86b0:	eddf 6a09 	vldr	s13, [pc, #36]	; 23e86d8 <arm_var_f32+0x50>
  fMean = sum / (float32_t) blockSize;
 23e86b4:	ee87 6a87 	vdiv.f32	s12, s15, s14
    fValue = *pInput++ - fMean;
 23e86b8:	ecf0 7a01 	vldmia	r0!, {s15}
 23e86bc:	ee77 7ac6 	vsub.f32	s15, s15, s12
  while (blkCnt > 0U)
 23e86c0:	3901      	subs	r1, #1
    fSum += fValue * fValue;
 23e86c2:	eee7 6aa7 	vfma.f32	s13, s15, s15
  while (blkCnt > 0U)
 23e86c6:	d1f7      	bne.n	23e86b8 <arm_var_f32+0x30>
  *pResult = fSum / (float32_t)(blockSize - 1.0f);
 23e86c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 23e86cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 23e86d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 23e86d4:	e7dd      	b.n	23e8692 <arm_var_f32+0xa>
 23e86d6:	bf00      	nop
 23e86d8:	00000000 	.word	0x00000000

023e86dc <arm_convolve_1x1_s8_fast>:
                                             const q7_t *filter_data,
                                             const cmsis_nn_dims *bias_dims,
                                             const int32_t *bias_data,
                                             const cmsis_nn_dims *output_dims,
                                             q7_t *output_data)
{
 23e86dc:	b510      	push	{r4, lr}
    if (conv_params->padding.w != 0 || conv_params->padding.h != 0 || conv_params->stride.w != 1 ||
 23e86de:	6908      	ldr	r0, [r1, #16]
{
 23e86e0:	b08a      	sub	sp, #40	; 0x28
    if (conv_params->padding.w != 0 || conv_params->padding.h != 0 || conv_params->stride.w != 1 ||
 23e86e2:	2800      	cmp	r0, #0
 23e86e4:	d127      	bne.n	23e8736 <arm_convolve_1x1_s8_fast+0x5a>
 23e86e6:	694c      	ldr	r4, [r1, #20]
 23e86e8:	bb2c      	cbnz	r4, 23e8736 <arm_convolve_1x1_s8_fast+0x5a>
 23e86ea:	6888      	ldr	r0, [r1, #8]
 23e86ec:	2801      	cmp	r0, #1
 23e86ee:	d122      	bne.n	23e8736 <arm_convolve_1x1_s8_fast+0x5a>
 23e86f0:	68c8      	ldr	r0, [r1, #12]
 23e86f2:	2801      	cmp	r0, #1
 23e86f4:	d11f      	bne.n	23e8736 <arm_convolve_1x1_s8_fast+0x5a>

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
    const int32_t rhs_rows = output_dims->c;
    const int32_t rhs_cols = input_dims->c;

    arm_nn_mat_mult_nt_t_s8(input_data,
 23e86f6:	6a48      	ldr	r0, [r1, #36]	; 0x24
 23e86f8:	9008      	str	r0, [sp, #32]
 23e86fa:	6a08      	ldr	r0, [r1, #32]
 23e86fc:	9007      	str	r0, [sp, #28]
 23e86fe:	6848      	ldr	r0, [r1, #4]
 23e8700:	9006      	str	r0, [sp, #24]
 23e8702:	6809      	ldr	r1, [r1, #0]
 23e8704:	9105      	str	r1, [sp, #20]
 23e8706:	68d9      	ldr	r1, [r3, #12]
 23e8708:	9104      	str	r1, [sp, #16]
 23e870a:	9911      	ldr	r1, [sp, #68]	; 0x44
 23e870c:	68c9      	ldr	r1, [r1, #12]
 23e870e:	9103      	str	r1, [sp, #12]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 23e8710:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 23e8714:	4341      	muls	r1, r0
 23e8716:	681b      	ldr	r3, [r3, #0]
    arm_nn_mat_mult_nt_t_s8(input_data,
 23e8718:	980c      	ldr	r0, [sp, #48]	; 0x30
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 23e871a:	4359      	muls	r1, r3
    arm_nn_mat_mult_nt_t_s8(input_data,
 23e871c:	9102      	str	r1, [sp, #8]
 23e871e:	6853      	ldr	r3, [r2, #4]
 23e8720:	990e      	ldr	r1, [sp, #56]	; 0x38
 23e8722:	9301      	str	r3, [sp, #4]
 23e8724:	6813      	ldr	r3, [r2, #0]
 23e8726:	9a10      	ldr	r2, [sp, #64]	; 0x40
 23e8728:	9300      	str	r3, [sp, #0]
 23e872a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23e872c:	f000 f878 	bl	23e8820 <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_CMSIS_NN_SUCCESS;
 23e8730:	4620      	mov	r0, r4
}
 23e8732:	b00a      	add	sp, #40	; 0x28
 23e8734:	bd10      	pop	{r4, pc}
        return ARM_CMSIS_NN_ARG_ERROR;
 23e8736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23e873a:	e7fa      	b.n	23e8732 <arm_convolve_1x1_s8_fast+0x56>

023e873c <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
    (void)input_dims;
    return 0;
}
 23e873c:	2000      	movs	r0, #0
 23e873e:	4770      	bx	lr

023e8740 <arm_fully_connected_s16>:
                                            const q7_t *kernel,
                                            const cmsis_nn_dims *bias_dims,
                                            const int64_t *bias,
                                            const cmsis_nn_dims *output_dims,
                                            q15_t *output)
{
 23e8740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)ctx;
    (void)fc_params->filter_offset;

    int32_t batch_cnt = input_dims->n;

    const q31_t reduced_multiplier = REDUCE_MULTIPLIER(quant_params->multiplier);
 23e8744:	6814      	ldr	r4, [r2, #0]
    int32_t batch_cnt = input_dims->n;
 23e8746:	681d      	ldr	r5, [r3, #0]
    const q31_t reduced_multiplier = REDUCE_MULTIPLIER(quant_params->multiplier);
 23e8748:	4b18      	ldr	r3, [pc, #96]	; (23e87ac <arm_fully_connected_s16+0x6c>)
{
 23e874a:	460e      	mov	r6, r1
    const q31_t reduced_multiplier = REDUCE_MULTIPLIER(quant_params->multiplier);
 23e874c:	429c      	cmp	r4, r3
{
 23e874e:	4617      	mov	r7, r2
    const q31_t reduced_multiplier = REDUCE_MULTIPLIER(quant_params->multiplier);
 23e8750:	bfcc      	ite	gt
 23e8752:	f647 74ff 	movwgt	r4, #32767	; 0x7fff
 23e8756:	f504 4400 	addle.w	r4, r4, #32768	; 0x8000
{
 23e875a:	b087      	sub	sp, #28
    const q31_t reduced_multiplier = REDUCE_MULTIPLIER(quant_params->multiplier);
 23e875c:	bfd8      	it	le
 23e875e:	1424      	asrle	r4, r4, #16
{
 23e8760:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 23e8764:	e9dd ab15 	ldrd	sl, fp, [sp, #84]	; 0x54

    while (batch_cnt)
 23e8768:	b91d      	cbnz	r5, 23e8772 <arm_fully_connected_s16+0x32>
        output += output_dims->c;
        batch_cnt--;
    }

    return (ARM_CMSIS_NN_SUCCESS);
}
 23e876a:	4628      	mov	r0, r5
 23e876c:	b007      	add	sp, #28
 23e876e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        arm_nn_vec_mat_mult_t_s16(input,
 23e8772:	6933      	ldr	r3, [r6, #16]
 23e8774:	4640      	mov	r0, r8
 23e8776:	9305      	str	r3, [sp, #20]
 23e8778:	68f3      	ldr	r3, [r6, #12]
 23e877a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23e877c:	9304      	str	r3, [sp, #16]
 23e877e:	f8da 300c 	ldr.w	r3, [sl, #12]
 23e8782:	9912      	ldr	r1, [sp, #72]	; 0x48
 23e8784:	9303      	str	r3, [sp, #12]
 23e8786:	f8d9 3000 	ldr.w	r3, [r9]
        batch_cnt--;
 23e878a:	3d01      	subs	r5, #1
        arm_nn_vec_mat_mult_t_s16(input,
 23e878c:	9302      	str	r3, [sp, #8]
 23e878e:	687b      	ldr	r3, [r7, #4]
 23e8790:	e9cd 4300 	strd	r4, r3, [sp]
 23e8794:	465b      	mov	r3, fp
 23e8796:	f000 fbc6 	bl	23e8f26 <arm_nn_vec_mat_mult_t_s16>
        input += filter_dims->n;
 23e879a:	f8d9 3000 	ldr.w	r3, [r9]
 23e879e:	eb08 0843 	add.w	r8, r8, r3, lsl #1
        output += output_dims->c;
 23e87a2:	f8da 300c 	ldr.w	r3, [sl, #12]
 23e87a6:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
        batch_cnt--;
 23e87aa:	e7dd      	b.n	23e8768 <arm_fully_connected_s16+0x28>
 23e87ac:	7ffeffff 	.word	0x7ffeffff

023e87b0 <arm_fully_connected_s16_get_buffer_size>:

int32_t arm_fully_connected_s16_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
 23e87b0:	2000      	movs	r0, #0
 23e87b2:	4770      	bx	lr

023e87b4 <arm_fully_connected_s8>:
                                           const q7_t *kernel,
                                           const cmsis_nn_dims *bias_dims,
                                           const int32_t *bias,
                                           const cmsis_nn_dims *output_dims,
                                           q7_t *output)
{
 23e87b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e87b8:	460c      	mov	r4, r1
 23e87ba:	4616      	mov	r6, r2

    int32_t batch_cnt = input_dims->n;

    while (batch_cnt)
    {
        arm_nn_vec_mat_mult_t_s8(input,
 23e87bc:	f04f 0b00 	mov.w	fp, #0
    int32_t batch_cnt = input_dims->n;
 23e87c0:	681d      	ldr	r5, [r3, #0]
{
 23e87c2:	b08b      	sub	sp, #44	; 0x2c
 23e87c4:	e9dd 7814 	ldrd	r7, r8, [sp, #80]	; 0x50
 23e87c8:	e9dd 9a19 	ldrd	r9, sl, [sp, #100]	; 0x64
    while (batch_cnt)
 23e87cc:	b91d      	cbnz	r5, 23e87d6 <arm_fully_connected_s8+0x22>
        input += filter_dims->n;
        output += output_dims->c;
        batch_cnt--;
    }
    return (ARM_CMSIS_NN_SUCCESS);
}
 23e87ce:	4628      	mov	r0, r5
 23e87d0:	b00b      	add	sp, #44	; 0x2c
 23e87d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        arm_nn_vec_mat_mult_t_s8(input,
 23e87d6:	2301      	movs	r3, #1
 23e87d8:	9309      	str	r3, [sp, #36]	; 0x24
 23e87da:	6923      	ldr	r3, [r4, #16]
 23e87dc:	4638      	mov	r0, r7
 23e87de:	9308      	str	r3, [sp, #32]
 23e87e0:	68e3      	ldr	r3, [r4, #12]
 23e87e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23e87e4:	9307      	str	r3, [sp, #28]
 23e87e6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 23e87ea:	9916      	ldr	r1, [sp, #88]	; 0x58
 23e87ec:	9306      	str	r3, [sp, #24]
 23e87ee:	f8d8 3000 	ldr.w	r3, [r8]
        batch_cnt--;
 23e87f2:	3d01      	subs	r5, #1
        arm_nn_vec_mat_mult_t_s8(input,
 23e87f4:	9305      	str	r3, [sp, #20]
 23e87f6:	6873      	ldr	r3, [r6, #4]
 23e87f8:	9304      	str	r3, [sp, #16]
 23e87fa:	6833      	ldr	r3, [r6, #0]
 23e87fc:	9303      	str	r3, [sp, #12]
 23e87fe:	68a3      	ldr	r3, [r4, #8]
 23e8800:	e9cd b301 	strd	fp, r3, [sp, #4]
 23e8804:	6823      	ldr	r3, [r4, #0]
 23e8806:	9300      	str	r3, [sp, #0]
 23e8808:	4653      	mov	r3, sl
 23e880a:	f000 fd04 	bl	23e9216 <arm_nn_vec_mat_mult_t_s8>
        input += filter_dims->n;
 23e880e:	f8d8 3000 	ldr.w	r3, [r8]
 23e8812:	441f      	add	r7, r3
        output += output_dims->c;
 23e8814:	f8d9 300c 	ldr.w	r3, [r9, #12]
 23e8818:	449a      	add	sl, r3
        batch_cnt--;
 23e881a:	e7d7      	b.n	23e87cc <arm_fully_connected_s8+0x18>

023e881c <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
 23e881c:	2000      	movs	r0, #0
 23e881e:	4770      	bx	lr

023e8820 <arm_nn_mat_mult_nt_t_s8>:
                                            const int32_t rhs_cols,
                                            const int32_t lhs_offset,
                                            const int32_t dst_offset,
                                            const int32_t activation_min,
                                            const int32_t activation_max)
{
 23e8820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e8824:	b09b      	sub	sp, #108	; 0x6c
 23e8826:	930e      	str	r3, [sp, #56]	; 0x38
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 23e8828:	9b26      	ldr	r3, [sp, #152]	; 0x98
{
 23e882a:	9209      	str	r2, [sp, #36]	; 0x24
        int32_t lhs_rows_idx = lhs_rows >> 1;
 23e882c:	105b      	asrs	r3, r3, #1
 23e882e:	9311      	str	r3, [sp, #68]	; 0x44

            dst_ptr[0] = (q7_t)res00;
            dst_ptr[1] = (q7_t)res01;
        }

        rhs += 2 * rhs_cols;
 23e8830:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 23e8832:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 23e8834:	005b      	lsls	r3, r3, #1
 23e8836:	9310      	str	r3, [sp, #64]	; 0x40
 23e8838:	9b11      	ldr	r3, [sp, #68]	; 0x44
{
 23e883a:	9112      	str	r1, [sp, #72]	; 0x48
 23e883c:	4353      	muls	r3, r2
 23e883e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23e8840:	900c      	str	r0, [sp, #48]	; 0x30
 23e8842:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 23e8846:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23e8848:	930a      	str	r3, [sp, #40]	; 0x28
 23e884a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 23e884c:	2a00      	cmp	r2, #0
 23e884e:	f023 030f 	bic.w	r3, r3, #15
 23e8852:	bfb8      	it	lt
 23e8854:	2300      	movlt	r3, #0
 23e8856:	9308      	str	r3, [sp, #32]
 23e8858:	4613      	mov	r3, r2
 23e885a:	9a08      	ldr	r2, [sp, #32]
 23e885c:	9908      	ldr	r1, [sp, #32]
 23e885e:	1a9b      	subs	r3, r3, r2
 23e8860:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23e8862:	428a      	cmp	r2, r1
 23e8864:	bfb8      	it	lt
 23e8866:	2300      	movlt	r3, #0
 23e8868:	4413      	add	r3, r2
 23e886a:	9316      	str	r3, [sp, #88]	; 0x58
 23e886c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23e886e:	005b      	lsls	r3, r3, #1
 23e8870:	9314      	str	r3, [sp, #80]	; 0x50
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23e8872:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23e8874:	9300      	str	r3, [sp, #0]
 23e8876:	2304      	movs	r3, #4
 23e8878:	9305      	str	r3, [sp, #20]
 23e887a:	2300      	movs	r3, #0
 23e887c:	9301      	str	r3, [sp, #4]
 23e887e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23e8880:	3b01      	subs	r3, #1
 23e8882:	9318      	str	r3, [sp, #96]	; 0x60
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23e8884:	f1a2 030f 	sub.w	r3, r2, #15
 23e8888:	9313      	str	r3, [sp, #76]	; 0x4c
 23e888a:	9a01      	ldr	r2, [sp, #4]
 23e888c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23e888e:	4413      	add	r3, r2
 23e8890:	9307      	str	r3, [sp, #28]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23e8892:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23e8894:	4293      	cmp	r3, r2
 23e8896:	f340 82cc 	ble.w	23e8e32 <arm_nn_mat_mult_nt_t_s8+0x612>
 23e889a:	9b00      	ldr	r3, [sp, #0]
        for (int32_t x = 0; x < rhs_cols; ++x)
 23e889c:	9800      	ldr	r0, [sp, #0]
 23e889e:	1e5a      	subs	r2, r3, #1
        q31_t lhs_offset_contribution1 = 0;
 23e88a0:	2300      	movs	r3, #0
        for (int32_t x = 0; x < rhs_cols; ++x)
 23e88a2:	f1c0 0001 	rsb	r0, r0, #1
        q31_t lhs_offset_contribution0 = 0;
 23e88a6:	4619      	mov	r1, r3
 23e88a8:	e005      	b.n	23e88b6 <arm_nn_mat_mult_nt_t_s8+0x96>
            lhs_offset_contribution0 += rhs[x];
 23e88aa:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 23e88ae:	4421      	add	r1, r4
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 23e88b0:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 23e88b2:	5714      	ldrsb	r4, [r2, r4]
 23e88b4:	4423      	add	r3, r4
        for (int32_t x = 0; x < rhs_cols; ++x)
 23e88b6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 23e88b8:	1884      	adds	r4, r0, r2
 23e88ba:	42ac      	cmp	r4, r5
 23e88bc:	dbf5      	blt.n	23e88aa <arm_nn_mat_mult_nt_t_s8+0x8a>
        lhs_offset_contribution0 *= lhs_offset;
 23e88be:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 23e88c0:	434a      	muls	r2, r1
 23e88c2:	9202      	str	r2, [sp, #8]
        lhs_offset_contribution1 *= lhs_offset;
 23e88c4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 23e88c6:	4353      	muls	r3, r2
 23e88c8:	9303      	str	r3, [sp, #12]
        if (bias)
 23e88ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23e88cc:	b15b      	cbz	r3, 23e88e6 <arm_nn_mat_mult_nt_t_s8+0xc6>
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 23e88ce:	9a01      	ldr	r2, [sp, #4]
 23e88d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23e88d4:	9a02      	ldr	r2, [sp, #8]
 23e88d6:	441a      	add	r2, r3
 23e88d8:	9202      	str	r2, [sp, #8]
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 23e88da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23e88dc:	9a05      	ldr	r2, [sp, #20]
 23e88de:	589b      	ldr	r3, [r3, r2]
 23e88e0:	9a03      	ldr	r2, [sp, #12]
 23e88e2:	441a      	add	r2, r3
 23e88e4:	9203      	str	r2, [sp, #12]
        while (lhs_rows_idx)
 23e88e6:	9b08      	ldr	r3, [sp, #32]
 23e88e8:	9a00      	ldr	r2, [sp, #0]
 23e88ea:	3b01      	subs	r3, #1
 23e88ec:	18d3      	adds	r3, r2, r3
 23e88ee:	930b      	str	r3, [sp, #44]	; 0x2c
        const q7_t *lhs_ptr = &lhs[0];
 23e88f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23e88f2:	9304      	str	r3, [sp, #16]
        int32_t lhs_rows_idx = lhs_rows >> 1;
 23e88f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23e88f6:	9306      	str	r3, [sp, #24]
            dst_ptr[1] = (q7_t)res11;
 23e88f8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23e88fa:	3301      	adds	r3, #1
 23e88fc:	9319      	str	r3, [sp, #100]	; 0x64
        while (lhs_rows_idx)
 23e88fe:	9b06      	ldr	r3, [sp, #24]
 23e8900:	2b00      	cmp	r3, #0
 23e8902:	f000 818e 	beq.w	23e8c22 <arm_nn_mat_mult_nt_t_s8+0x402>
            q31_t res10 = lhs_offset_contribution0;
 23e8906:	e9dd b902 	ldrd	fp, r9, [sp, #8]
 23e890a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23e890c:	9b00      	ldr	r3, [sp, #0]
            q31_t res01 = lhs_offset_contribution1;
 23e890e:	464f      	mov	r7, r9
 23e8910:	189e      	adds	r6, r3, r2
 23e8912:	9b04      	ldr	r3, [sp, #16]
 23e8914:	189d      	adds	r5, r3, r2
            q31_t res00 = lhs_offset_contribution0;
 23e8916:	465b      	mov	r3, fp
            int32_t rhs_cols_idx = 0;
 23e8918:	2200      	movs	r2, #0
 23e891a:	e0a3      	b.n	23e8a64 <arm_nn_mat_mult_nt_t_s8+0x244>
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 23e891c:	9900      	ldr	r1, [sp, #0]
 23e891e:	5888      	ldr	r0, [r1, r2]

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e8920:	9904      	ldr	r1, [sp, #16]
 23e8922:	fa2f fe80 	sxtb16	lr, r0
 23e8926:	588c      	ldr	r4, [r1, r2]
 23e8928:	6831      	ldr	r1, [r6, #0]
 23e892a:	fa2f f884 	sxtb16	r8, r4

__STATIC_FORCEINLINE uint32_t __SXTB16_RORn(uint32_t op1, uint32_t rotate)
{
  uint32_t result;
  if (__builtin_constant_p(rotate) && ((rotate == 8U) || (rotate == 16U) || (rotate == 24U))) {
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e892e:	fa2f f090 	sxtb16	r0, r0, ror #8
 23e8932:	fa2f f494 	sxtb16	r4, r4, ror #8

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e8936:	fb28 3c0e 	smlad	ip, r8, lr, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e893a:	fa2f f381 	sxtb16	r3, r1
 23e893e:	930f      	str	r3, [sp, #60]	; 0x3c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e8940:	fb24 c300 	smlad	r3, r4, r0, ip
 23e8944:	9317      	str	r3, [sp, #92]	; 0x5c
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e8946:	fa2f fc91 	sxtb16	ip, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e894a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23e894c:	fb28 7701 	smlad	r7, r8, r1, r7
 23e8950:	fb24 740c 	smlad	r4, r4, ip, r7
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4(const q7_t *in_q7)
{
    q31_t val;
    memcpy(&val, in_q7, 4);
 23e8954:	6829      	ldr	r1, [r5, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e8956:	fa2f f881 	sxtb16	r8, r1
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e895a:	fa2f f791 	sxtb16	r7, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e895e:	fb28 be0e 	smlad	lr, r8, lr, fp
 23e8962:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23e8964:	fb28 9101 	smlad	r1, r8, r1, r9
 23e8968:	fb27 e000 	smlad	r0, r7, r0, lr
    memcpy(&val, *in_q7, 4);
 23e896c:	f8da 8004 	ldr.w	r8, [sl, #4]
 23e8970:	fb27 110c 	smlad	r1, r7, ip, r1
    memcpy(&val, in_q7, 4);
 23e8974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23e8976:	f8d6 e004 	ldr.w	lr, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e897a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 23e897e:	fa2f f788 	sxtb16	r7, r8
 23e8982:	fa2f fc89 	sxtb16	ip, r9
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e8986:	fa2f f898 	sxtb16	r8, r8, ror #8
 23e898a:	fa2f f999 	sxtb16	r9, r9, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e898e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23e8990:	fb2c 3307 	smlad	r3, ip, r7, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e8994:	fa2f fb8e 	sxtb16	fp, lr
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e8998:	fb29 3308 	smlad	r3, r9, r8, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e899c:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e89a0:	fb2c 440b 	smlad	r4, ip, fp, r4
 23e89a4:	fb29 490e 	smlad	r9, r9, lr, r4
 23e89a8:	686c      	ldr	r4, [r5, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e89aa:	fa2f fc84 	sxtb16	ip, r4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e89ae:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e89b2:	fb2c 0007 	smlad	r0, ip, r7, r0
 23e89b6:	fb2c 110b 	smlad	r1, ip, fp, r1
 23e89ba:	fb24 0808 	smlad	r8, r4, r8, r0
    memcpy(&val, *in_q7, 4);
 23e89be:	f8da b008 	ldr.w	fp, [sl, #8]
 23e89c2:	fb24 1e0e 	smlad	lr, r4, lr, r1
    memcpy(&val, in_q7, 4);
 23e89c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 23e89c8:	f8d6 c008 	ldr.w	ip, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e89cc:	6880      	ldr	r0, [r0, #8]
 23e89ce:	fa2f f18b 	sxtb16	r1, fp
 23e89d2:	fa2f f480 	sxtb16	r4, r0
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e89d6:	fa2f fb9b 	sxtb16	fp, fp, ror #8
 23e89da:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e89de:	fb24 3301 	smlad	r3, r4, r1, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e89e2:	fa2f f78c 	sxtb16	r7, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e89e6:	fb20 330b 	smlad	r3, r0, fp, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e89ea:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e89ee:	fb24 9907 	smlad	r9, r4, r7, r9
 23e89f2:	fb20 900c 	smlad	r0, r0, ip, r9
 23e89f6:	f8d5 9008 	ldr.w	r9, [r5, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e89fa:	fa2f f489 	sxtb16	r4, r9
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e89fe:	fa2f f999 	sxtb16	r9, r9, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e8a02:	fb24 8801 	smlad	r8, r4, r1, r8
 23e8a06:	fb24 e407 	smlad	r4, r4, r7, lr
 23e8a0a:	fb29 8b0b 	smlad	fp, r9, fp, r8
    memcpy(&val, *in_q7, 4);
 23e8a0e:	f8da e00c 	ldr.w	lr, [sl, #12]
 23e8a12:	fb29 4c0c 	smlad	ip, r9, ip, r4
    memcpy(&val, in_q7, 4);
 23e8a16:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 23e8a18:	68f1      	ldr	r1, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e8a1a:	68e7      	ldr	r7, [r4, #12]
 23e8a1c:	fa2f f88e 	sxtb16	r8, lr
 23e8a20:	fa2f fa87 	sxtb16	sl, r7
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e8a24:	fa2f fe9e 	sxtb16	lr, lr, ror #8
 23e8a28:	fa2f f497 	sxtb16	r4, r7, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e8a2c:	fb2a 3308 	smlad	r3, sl, r8, r3
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e8a30:	fa2f f981 	sxtb16	r9, r1
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e8a34:	fb24 330e 	smlad	r3, r4, lr, r3
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e8a38:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e8a3c:	fb2a 0009 	smlad	r0, sl, r9, r0
 23e8a40:	fb24 0701 	smlad	r7, r4, r1, r0
 23e8a44:	68ed      	ldr	r5, [r5, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e8a46:	fa2f f485 	sxtb16	r4, r5
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e8a4a:	fa2f f595 	sxtb16	r5, r5, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e8a4e:	fb24 bb08 	smlad	fp, r4, r8, fp
 23e8a52:	fb24 cc09 	smlad	ip, r4, r9, ip
 23e8a56:	fb25 bb0e 	smlad	fp, r5, lr, fp
 23e8a5a:	fb25 c901 	smlad	r9, r5, r1, ip
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23e8a5e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 23e8a60:	3210      	adds	r2, #16
 23e8a62:	3610      	adds	r6, #16
 23e8a64:	9904      	ldr	r1, [sp, #16]
 23e8a66:	4411      	add	r1, r2
 23e8a68:	910d      	str	r1, [sp, #52]	; 0x34
 23e8a6a:	9900      	ldr	r1, [sp, #0]
 23e8a6c:	eb01 0a02 	add.w	sl, r1, r2
 23e8a70:	f105 0110 	add.w	r1, r5, #16
 23e8a74:	9115      	str	r1, [sp, #84]	; 0x54
 23e8a76:	9913      	ldr	r1, [sp, #76]	; 0x4c
 23e8a78:	4291      	cmp	r1, r2
 23e8a7a:	f73f af4f 	bgt.w	23e891c <arm_nn_mat_mult_nt_t_s8+0xfc>
 23e8a7e:	9908      	ldr	r1, [sp, #32]
 23e8a80:	9a04      	ldr	r2, [sp, #16]
 23e8a82:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23e8a84:	440a      	add	r2, r1
 23e8a86:	4614      	mov	r4, r2
 23e8a88:	1e51      	subs	r1, r2, #1
 23e8a8a:	9a08      	ldr	r2, [sp, #32]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23e8a8c:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 23e8a8e:	42aa      	cmp	r2, r5
 23e8a90:	f2c0 80b5 	blt.w	23e8bfe <arm_nn_mat_mult_nt_t_s8+0x3de>
                lhs_value = lhs_ptr[rhs_cols];
 23e8a94:	9a16      	ldr	r2, [sp, #88]	; 0x58
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 23e8a96:	9901      	ldr	r1, [sp, #4]
                lhs_value = lhs_ptr[rhs_cols];
 23e8a98:	18a2      	adds	r2, r4, r2
 23e8a9a:	9204      	str	r2, [sp, #16]
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 23e8a9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 23e8a9e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 23e8aa2:	920d      	str	r2, [sp, #52]	; 0x34
 23e8aa4:	9a25      	ldr	r2, [sp, #148]	; 0x94
    // Rounding offset to add for a right shift of 31
    mult.word.low = 1 << 30;
    mult.word.high = 0;

    // Gets resolved as a SMLAL instruction
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8aa6:	980d      	ldr	r0, [sp, #52]	; 0x34
 23e8aa8:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 23e8aac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23e8ab0:	2100      	movs	r1, #0
    int32_t result = new_val >> (total_shift - 1);
    result = (result + 1) >> 1;

    return result;
#else
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e8ab2:	ea25 7ee5 	bic.w	lr, r5, r5, asr #31
 23e8ab6:	2d00      	cmp	r5, #0
 23e8ab8:	fa03 f30e 	lsl.w	r3, r3, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8abc:	fbc3 2100 	smlal	r2, r1, r3, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e8ac0:	bfc8      	it	gt
 23e8ac2:	2500      	movgt	r5, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e8ac4:	f04f 0301 	mov.w	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e8ac8:	bfd8      	it	le
 23e8aca:	426d      	negle	r5, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e8acc:	fa03 fa05 	lsl.w	sl, r3, r5
    result = (int32_t)(mult.long_long >> 31);
 23e8ad0:	0fd2      	lsrs	r2, r2, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e8ad2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    result = (int32_t)(mult.long_long >> 31);
 23e8ad6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    q31_t threshold = remainder_mask >> 1;
 23e8ada:	fa4a fc03 	asr.w	ip, sl, r3
    int32_t remainder = remainder_mask & dividend;
 23e8ade:	ea02 010a 	and.w	r1, r2, sl
    if (result < 0)
 23e8ae2:	412a      	asrs	r2, r5
    q31_t threshold = remainder_mask >> 1;
 23e8ae4:	bf54      	ite	pl
 23e8ae6:	4663      	movpl	r3, ip
        threshold++;
 23e8ae8:	4463      	addmi	r3, ip
    if (remainder > threshold)
 23e8aea:	4299      	cmp	r1, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 23e8aec:	9905      	ldr	r1, [sp, #20]
 23e8aee:	9b24      	ldr	r3, [sp, #144]	; 0x90
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8af0:	f04f 0000 	mov.w	r0, #0
 23e8af4:	585b      	ldr	r3, [r3, r1]
        result++;
 23e8af6:	bfc8      	it	gt
 23e8af8:	3201      	addgt	r2, #1
 23e8afa:	930f      	str	r3, [sp, #60]	; 0x3c
 23e8afc:	9b25      	ldr	r3, [sp, #148]	; 0x94
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8afe:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 23e8b00:	585c      	ldr	r4, [r3, r1]
 23e8b02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e8b06:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 23e8b0a:	408f      	lsls	r7, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8b0c:	fbc7 3006 	smlal	r3, r0, r7, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e8b10:	2c00      	cmp	r4, #0
    result = (int32_t)(mult.long_long >> 31);
 23e8b12:	ea4f 73d3 	mov.w	r3, r3, lsr #31
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e8b16:	bfc8      	it	gt
 23e8b18:	2400      	movgt	r4, #0
    result = (int32_t)(mult.long_long >> 31);
 23e8b1a:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e8b1e:	f04f 0001 	mov.w	r0, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e8b22:	bfd8      	it	le
 23e8b24:	4264      	negle	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e8b26:	fa00 f604 	lsl.w	r6, r0, r4
 23e8b2a:	3e01      	subs	r6, #1
    q31_t threshold = remainder_mask >> 1;
 23e8b2c:	fa46 f700 	asr.w	r7, r6, r0
    int32_t remainder = remainder_mask & dividend;
 23e8b30:	ea03 0806 	and.w	r8, r3, r6
    if (result < 0)
 23e8b34:	4123      	asrs	r3, r4
    q31_t threshold = remainder_mask >> 1;
 23e8b36:	bf54      	ite	pl
 23e8b38:	4638      	movpl	r0, r7
        threshold++;
 23e8b3a:	1838      	addmi	r0, r7, r0
    if (remainder > threshold)
 23e8b3c:	4580      	cmp	r8, r0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e8b3e:	fa0b fe0e 	lsl.w	lr, fp, lr
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8b42:	f04f 0800 	mov.w	r8, #0
 23e8b46:	f04f 4b80 	mov.w	fp, #1073741824	; 0x40000000
 23e8b4a:	980d      	ldr	r0, [sp, #52]	; 0x34
        result++;
 23e8b4c:	bfc8      	it	gt
 23e8b4e:	3301      	addgt	r3, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8b50:	fbce b800 	smlal	fp, r8, lr, r0
 23e8b54:	4658      	mov	r0, fp
    result = (int32_t)(mult.long_long >> 31);
 23e8b56:	0fc0      	lsrs	r0, r0, #31
 23e8b58:	ea40 0048 	orr.w	r0, r0, r8, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23e8b5c:	ea00 0a0a 	and.w	sl, r0, sl
    if (result < 0)
 23e8b60:	4128      	asrs	r0, r5
        threshold++;
 23e8b62:	bf48      	it	mi
 23e8b64:	f10c 0c01 	addmi.w	ip, ip, #1
    if (remainder > threshold)
 23e8b68:	45e2      	cmp	sl, ip
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8b6a:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 23e8b6e:	f04f 0c00 	mov.w	ip, #0
 23e8b72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e8b74:	fa09 f101 	lsl.w	r1, r9, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8b78:	fbc1 ec05 	smlal	lr, ip, r1, r5
 23e8b7c:	4675      	mov	r5, lr
    result = (int32_t)(mult.long_long >> 31);
 23e8b7e:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 23e8b82:	ea45 054c 	orr.w	r5, r5, ip, lsl #1
        result++;
 23e8b86:	bfc8      	it	gt
 23e8b88:	3001      	addgt	r0, #1
    if (result < 0)
 23e8b8a:	fa55 f404 	asrs.w	r4, r5, r4
    int32_t remainder = remainder_mask & dividend;
 23e8b8e:	ea06 0605 	and.w	r6, r6, r5
        threshold++;
 23e8b92:	bf48      	it	mi
 23e8b94:	3701      	addmi	r7, #1
            res00 += dst_offset;
 23e8b96:	992a      	ldr	r1, [sp, #168]	; 0xa8
    if (remainder > threshold)
 23e8b98:	42be      	cmp	r6, r7
        result++;
 23e8b9a:	bfc8      	it	gt
 23e8b9c:	3401      	addgt	r4, #1
 23e8b9e:	440a      	add	r2, r1
            res01 += dst_offset;
 23e8ba0:	440b      	add	r3, r1
            res10 += dst_offset;
 23e8ba2:	4408      	add	r0, r1
            res11 += dst_offset;
 23e8ba4:	440c      	add	r4, r1
            res00 = MAX(res00, activation_min);
 23e8ba6:	992b      	ldr	r1, [sp, #172]	; 0xac
 23e8ba8:	428a      	cmp	r2, r1
 23e8baa:	bfb8      	it	lt
 23e8bac:	460a      	movlt	r2, r1
            res01 = MAX(res01, activation_min);
 23e8bae:	428b      	cmp	r3, r1
 23e8bb0:	bfb8      	it	lt
 23e8bb2:	460b      	movlt	r3, r1
            res10 = MAX(res10, activation_min);
 23e8bb4:	4288      	cmp	r0, r1
 23e8bb6:	bfb8      	it	lt
 23e8bb8:	4608      	movlt	r0, r1
            res11 = MAX(res11, activation_min);
 23e8bba:	428c      	cmp	r4, r1
 23e8bbc:	bfb8      	it	lt
 23e8bbe:	460c      	movlt	r4, r1
            res00 = MIN(res00, activation_max);
 23e8bc0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 23e8bc2:	428a      	cmp	r2, r1
 23e8bc4:	bfa8      	it	ge
 23e8bc6:	460a      	movge	r2, r1
            dst_ptr[0] = (q7_t)res00;
 23e8bc8:	9907      	ldr	r1, [sp, #28]
 23e8bca:	700a      	strb	r2, [r1, #0]
            res01 = MIN(res01, activation_max);
 23e8bcc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 23e8bce:	4293      	cmp	r3, r2
 23e8bd0:	bfa8      	it	ge
 23e8bd2:	4613      	movge	r3, r2
            dst_ptr[1] = (q7_t)res01;
 23e8bd4:	704b      	strb	r3, [r1, #1]
            res10 = MIN(res10, activation_max);
 23e8bd6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
            dst_ptr[0] = (q7_t)res10;
 23e8bd8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
            res10 = MIN(res10, activation_max);
 23e8bda:	4298      	cmp	r0, r3
 23e8bdc:	bfa8      	it	ge
 23e8bde:	4618      	movge	r0, r3
            res11 = MIN(res11, activation_max);
 23e8be0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
            dst_ptr[0] = (q7_t)res10;
 23e8be2:	5488      	strb	r0, [r1, r2]
            res11 = MIN(res11, activation_max);
 23e8be4:	429c      	cmp	r4, r3
 23e8be6:	bfa8      	it	ge
 23e8be8:	461c      	movge	r4, r3
            dst_ptr[1] = (q7_t)res11;
 23e8bea:	460b      	mov	r3, r1
 23e8bec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23e8bee:	548c      	strb	r4, [r1, r2]
            dst_ptr += rhs_rows;
 23e8bf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23e8bf2:	4413      	add	r3, r2
 23e8bf4:	9307      	str	r3, [sp, #28]
            lhs_rows_idx--;
 23e8bf6:	9b06      	ldr	r3, [sp, #24]
 23e8bf8:	3b01      	subs	r3, #1
 23e8bfa:	9306      	str	r3, [sp, #24]
 23e8bfc:	e67f      	b.n	23e88fe <arm_nn_mat_mult_nt_t_s8+0xde>
                q7_t rhs_value0 = rhs_ptr[0];
 23e8bfe:	f910 cf01 	ldrsb.w	ip, [r0, #1]!
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 23e8c02:	9d28      	ldr	r5, [sp, #160]	; 0xa0
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23e8c04:	3201      	adds	r2, #1
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 23e8c06:	5746      	ldrsb	r6, [r0, r5]
                q7_t lhs_value = lhs_ptr[0];
 23e8c08:	f911 5f01 	ldrsb.w	r5, [r1, #1]!
                res00 += lhs_value * rhs_value0;
 23e8c0c:	fb15 330c 	smlabb	r3, r5, ip, r3
                res01 += lhs_value * rhs_value1;
 23e8c10:	fb15 7706 	smlabb	r7, r5, r6, r7
                lhs_value = lhs_ptr[rhs_cols];
 23e8c14:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 23e8c16:	574d      	ldrsb	r5, [r1, r5]
                res10 += lhs_value * rhs_value0;
 23e8c18:	fb1c bb05 	smlabb	fp, ip, r5, fp
                res11 += lhs_value * rhs_value1;
 23e8c1c:	fb16 9905 	smlabb	r9, r6, r5, r9
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23e8c20:	e734      	b.n	23e8a8c <arm_nn_mat_mult_nt_t_s8+0x26c>
        if (lhs_rows % 2)
 23e8c22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23e8c24:	07d8      	lsls	r0, r3, #31
 23e8c26:	d57a      	bpl.n	23e8d1e <arm_nn_mat_mult_nt_t_s8+0x4fe>
 23e8c28:	9b00      	ldr	r3, [sp, #0]
 23e8c2a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 23e8c2c:	1898      	adds	r0, r3, r2
            int32_t rhs_cols_idx = 0;
 23e8c2e:	9b06      	ldr	r3, [sp, #24]
 23e8c30:	9a04      	ldr	r2, [sp, #16]
 23e8c32:	18d6      	adds	r6, r2, r3
 23e8c34:	9a00      	ldr	r2, [sp, #0]
 23e8c36:	18d5      	adds	r5, r2, r3
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23e8c38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23e8c3a:	429a      	cmp	r2, r3
 23e8c3c:	dc7d      	bgt.n	23e8d3a <arm_nn_mat_mult_nt_t_s8+0x51a>
 23e8c3e:	9a08      	ldr	r2, [sp, #32]
 23e8c40:	9b04      	ldr	r3, [sp, #16]
 23e8c42:	4413      	add	r3, r2
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23e8c44:	9a04      	ldr	r2, [sp, #16]
 23e8c46:	4251      	negs	r1, r2
 23e8c48:	9828      	ldr	r0, [sp, #160]	; 0xa0
 23e8c4a:	185a      	adds	r2, r3, r1
 23e8c4c:	4290      	cmp	r0, r2
 23e8c4e:	f300 80de 	bgt.w	23e8e0e <arm_nn_mat_mult_nt_t_s8+0x5ee>
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 23e8c52:	9b25      	ldr	r3, [sp, #148]	; 0x94
 23e8c54:	9a01      	ldr	r2, [sp, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8c56:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23e8c5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e8c5e:	9b02      	ldr	r3, [sp, #8]
 23e8c60:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
 23e8c64:	40a3      	lsls	r3, r4
 23e8c66:	461c      	mov	r4, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8c68:	2500      	movs	r5, #0
 23e8c6a:	9901      	ldr	r1, [sp, #4]
 23e8c6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e8c6e:	2a00      	cmp	r2, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8c70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 23e8c74:	fbc4 0503 	smlal	r0, r5, r4, r3
    result = (int32_t)(mult.long_long >> 31);
 23e8c78:	ea4f 71d0 	mov.w	r1, r0, lsr #31
 23e8c7c:	ea41 0545 	orr.w	r5, r1, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e8c80:	f04f 0301 	mov.w	r3, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e8c84:	bfcc      	ite	gt
 23e8c86:	2100      	movgt	r1, #0
 23e8c88:	4251      	negle	r1, r2
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e8c8a:	408b      	lsls	r3, r1
 23e8c8c:	3b01      	subs	r3, #1
    if (result < 0)
 23e8c8e:	fa55 f101 	asrs.w	r1, r5, r1
    int32_t remainder = remainder_mask & dividend;
 23e8c92:	ea05 0003 	and.w	r0, r5, r3
    q31_t threshold = remainder_mask >> 1;
 23e8c96:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 23e8c9a:	bf48      	it	mi
 23e8c9c:	3301      	addmi	r3, #1
    if (remainder > threshold)
 23e8c9e:	4298      	cmp	r0, r3
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 23e8ca0:	9a05      	ldr	r2, [sp, #20]
 23e8ca2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8ca4:	f04f 0500 	mov.w	r5, #0
 23e8ca8:	589c      	ldr	r4, [r3, r2]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e8caa:	9b03      	ldr	r3, [sp, #12]
 23e8cac:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
 23e8cb0:	fa03 f300 	lsl.w	r3, r3, r0
 23e8cb4:	4618      	mov	r0, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8cb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
        result++;
 23e8cb8:	bfc8      	it	gt
 23e8cba:	3101      	addgt	r1, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8cbc:	589b      	ldr	r3, [r3, r2]
 23e8cbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 23e8cc2:	fbc0 2503 	smlal	r2, r5, r0, r3
    result = (int32_t)(mult.long_long >> 31);
 23e8cc6:	0fd2      	lsrs	r2, r2, #31
 23e8cc8:	ea42 0545 	orr.w	r5, r2, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e8ccc:	2201      	movs	r2, #1
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e8cce:	2c00      	cmp	r4, #0
 23e8cd0:	bfdc      	itt	le
 23e8cd2:	4263      	negle	r3, r4
 23e8cd4:	9306      	strle	r3, [sp, #24]
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e8cd6:	9b06      	ldr	r3, [sp, #24]
 23e8cd8:	fa02 f303 	lsl.w	r3, r2, r3
 23e8cdc:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 23e8cde:	ea05 0003 	and.w	r0, r5, r3
    q31_t threshold = remainder_mask >> 1;
 23e8ce2:	4113      	asrs	r3, r2
    if (result < 0)
 23e8ce4:	9a06      	ldr	r2, [sp, #24]
 23e8ce6:	4115      	asrs	r5, r2
        threshold++;
 23e8ce8:	bf48      	it	mi
 23e8cea:	3301      	addmi	r3, #1
    if (remainder > threshold)
 23e8cec:	4298      	cmp	r0, r3
            res00 += dst_offset;
 23e8cee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
        result++;
 23e8cf0:	bfc8      	it	gt
 23e8cf2:	3501      	addgt	r5, #1
 23e8cf4:	4419      	add	r1, r3
            res01 += dst_offset;
 23e8cf6:	441d      	add	r5, r3
            res00 = MAX(res00, activation_min);
 23e8cf8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 23e8cfa:	4299      	cmp	r1, r3
 23e8cfc:	bfb8      	it	lt
 23e8cfe:	4619      	movlt	r1, r3
            res01 = MAX(res01, activation_min);
 23e8d00:	429d      	cmp	r5, r3
 23e8d02:	bfb8      	it	lt
 23e8d04:	461d      	movlt	r5, r3
            res00 = MIN(res00, activation_max);
 23e8d06:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 23e8d08:	4299      	cmp	r1, r3
 23e8d0a:	bfa8      	it	ge
 23e8d0c:	4619      	movge	r1, r3
            dst_ptr[0] = (q7_t)res00;
 23e8d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23e8d10:	7019      	strb	r1, [r3, #0]
            res01 = MIN(res01, activation_max);
 23e8d12:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 23e8d14:	429d      	cmp	r5, r3
 23e8d16:	bfa8      	it	ge
 23e8d18:	461d      	movge	r5, r3
            dst_ptr[1] = (q7_t)res01;
 23e8d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23e8d1c:	705d      	strb	r5, [r3, #1]
        rhs += 2 * rhs_cols;
 23e8d1e:	9b00      	ldr	r3, [sp, #0]
 23e8d20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 23e8d22:	4413      	add	r3, r2
 23e8d24:	9300      	str	r3, [sp, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 23e8d26:	9b01      	ldr	r3, [sp, #4]
 23e8d28:	3302      	adds	r3, #2
 23e8d2a:	9301      	str	r3, [sp, #4]
 23e8d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23e8d2e:	3302      	adds	r3, #2
 23e8d30:	930a      	str	r3, [sp, #40]	; 0x28
 23e8d32:	9b05      	ldr	r3, [sp, #20]
 23e8d34:	3308      	adds	r3, #8
 23e8d36:	9305      	str	r3, [sp, #20]
 23e8d38:	e5a7      	b.n	23e888a <arm_nn_mat_mult_nt_t_s8+0x6a>
    memcpy(&val, *in_q7, 4);
 23e8d3a:	9a00      	ldr	r2, [sp, #0]
 23e8d3c:	6801      	ldr	r1, [r0, #0]
 23e8d3e:	58d7      	ldr	r7, [r2, r3]
 23e8d40:	9a04      	ldr	r2, [sp, #16]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e8d42:	fa2f f887 	sxtb16	r8, r7
 23e8d46:	58d2      	ldr	r2, [r2, r3]
 23e8d48:	fa2f fe81 	sxtb16	lr, r1
 23e8d4c:	fa2f fc82 	sxtb16	ip, r2
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e8d50:	fa2f f797 	sxtb16	r7, r7, ror #8
 23e8d54:	fa2f f292 	sxtb16	r2, r2, ror #8
 23e8d58:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e8d5c:	9c02      	ldr	r4, [sp, #8]
 23e8d5e:	fb2c 4808 	smlad	r8, ip, r8, r4
 23e8d62:	fb22 8707 	smlad	r7, r2, r7, r8
 23e8d66:	9c03      	ldr	r4, [sp, #12]
 23e8d68:	fb2c 4c0e 	smlad	ip, ip, lr, r4
 23e8d6c:	fb22 c101 	smlad	r1, r2, r1, ip
 23e8d70:	686c      	ldr	r4, [r5, #4]
    memcpy(&val, in_q7, 4);
 23e8d72:	f8d0 c004 	ldr.w	ip, [r0, #4]
    memcpy(&val, *in_q7, 4);
 23e8d76:	6872      	ldr	r2, [r6, #4]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e8d78:	fa2f f984 	sxtb16	r9, r4
 23e8d7c:	fa2f fe82 	sxtb16	lr, r2
 23e8d80:	fa2f f88c 	sxtb16	r8, ip
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e8d84:	fa2f f494 	sxtb16	r4, r4, ror #8
 23e8d88:	fa2f f292 	sxtb16	r2, r2, ror #8
 23e8d8c:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e8d90:	fb2e 7709 	smlad	r7, lr, r9, r7
 23e8d94:	fb22 7404 	smlad	r4, r2, r4, r7
 23e8d98:	fb2e 1108 	smlad	r1, lr, r8, r1
 23e8d9c:	fb22 120c 	smlad	r2, r2, ip, r1
 23e8da0:	f8d5 8008 	ldr.w	r8, [r5, #8]
    memcpy(&val, in_q7, 4);
 23e8da4:	f8d0 e008 	ldr.w	lr, [r0, #8]
    memcpy(&val, *in_q7, 4);
 23e8da8:	f8d6 c008 	ldr.w	ip, [r6, #8]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e8dac:	fa2f f788 	sxtb16	r7, r8
 23e8db0:	fa2f f18c 	sxtb16	r1, ip
 23e8db4:	fa2f f98e 	sxtb16	r9, lr
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e8db8:	fa2f f898 	sxtb16	r8, r8, ror #8
 23e8dbc:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 23e8dc0:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e8dc4:	fb21 4407 	smlad	r4, r1, r7, r4
 23e8dc8:	fb2c 4808 	smlad	r8, ip, r8, r4
 23e8dcc:	fb21 2209 	smlad	r2, r1, r9, r2
 23e8dd0:	fb2c 2e0e 	smlad	lr, ip, lr, r2
 23e8dd4:	68ea      	ldr	r2, [r5, #12]
    memcpy(&val, in_q7, 4);
 23e8dd6:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    memcpy(&val, *in_q7, 4);
 23e8dda:	68f5      	ldr	r5, [r6, #12]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e8ddc:	fa2f f482 	sxtb16	r4, r2
 23e8de0:	fa2f fc85 	sxtb16	ip, r5
 23e8de4:	fa2f f18a 	sxtb16	r1, sl
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e8de8:	fa2f f292 	sxtb16	r2, r2, ror #8
 23e8dec:	fa2f f595 	sxtb16	r5, r5, ror #8
 23e8df0:	fa2f fa9a 	sxtb16	sl, sl, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e8df4:	fb2c 8804 	smlad	r8, ip, r4, r8
 23e8df8:	fb25 8202 	smlad	r2, r5, r2, r8
 23e8dfc:	9202      	str	r2, [sp, #8]
 23e8dfe:	fb2c ee01 	smlad	lr, ip, r1, lr
 23e8e02:	fb25 e20a 	smlad	r2, r5, sl, lr
 23e8e06:	9203      	str	r2, [sp, #12]
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 23e8e08:	3310      	adds	r3, #16
 23e8e0a:	3010      	adds	r0, #16
 23e8e0c:	e710      	b.n	23e8c30 <arm_nn_mat_mult_nt_t_s8+0x410>
                res00 += lhs_value * rhs_value0;
 23e8e0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
                q7_t lhs_value = lhs_ptr[0];
 23e8e10:	f913 2b01 	ldrsb.w	r2, [r3], #1
                res00 += lhs_value * rhs_value0;
 23e8e14:	f914 0f01 	ldrsb.w	r0, [r4, #1]!
 23e8e18:	940b      	str	r4, [sp, #44]	; 0x2c
 23e8e1a:	9c02      	ldr	r4, [sp, #8]
 23e8e1c:	fb12 4000 	smlabb	r0, r2, r0, r4
                res01 += lhs_value * rhs_value1;
 23e8e20:	9c28      	ldr	r4, [sp, #160]	; 0xa0
                res00 += lhs_value * rhs_value0;
 23e8e22:	9002      	str	r0, [sp, #8]
                res01 += lhs_value * rhs_value1;
 23e8e24:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23e8e26:	5700      	ldrsb	r0, [r0, r4]
 23e8e28:	9c03      	ldr	r4, [sp, #12]
 23e8e2a:	fb12 4200 	smlabb	r2, r2, r0, r4
 23e8e2e:	9203      	str	r2, [sp, #12]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23e8e30:	e70a      	b.n	23e8c48 <arm_nn_mat_mult_nt_t_s8+0x428>
 23e8e32:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23e8e34:	9810      	ldr	r0, [sp, #64]	; 0x40
 23e8e36:	2b00      	cmp	r3, #0
 23e8e38:	ea4f 0253 	mov.w	r2, r3, lsr #1
 23e8e3c:	bfac      	ite	ge
 23e8e3e:	4611      	movge	r1, r2
 23e8e40:	2100      	movlt	r1, #0
 23e8e42:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23e8e46:	bfb8      	it	lt
 23e8e48:	2200      	movlt	r2, #0
 23e8e4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23e8e4c:	fb00 3301 	mla	r3, r0, r1, r3
 23e8e50:	9300      	str	r3, [sp, #0]
 23e8e52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23e8e54:	4413      	add	r3, r2
 23e8e56:	461a      	mov	r2, r3
        dst += 2;
    }

    if (rhs_rows % 2)
 23e8e58:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 23e8e5a:	07d9      	lsls	r1, r3, #31
 23e8e5c:	d517      	bpl.n	23e8e8e <arm_nn_mat_mult_nt_t_s8+0x66e>
    {
        const q7_t *lhs_ptr = &lhs[0];
        q7_t *dst_ptr = &dst[0];

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 23e8e5e:	2700      	movs	r7, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8e60:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 23e8e64:	46b8      	mov	r8, r7
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e8e66:	f04f 0901 	mov.w	r9, #1
        {
            const q7_t *rhs_ptr = &rhs[0];
            q31_t res00 = 0;
            if (bias)
            {
                res00 = bias[rhs_rows - 1];
 23e8e6a:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 23e8e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23e8e70:	3c01      	subs	r4, #1
 23e8e72:	eb03 0b84 	add.w	fp, r3, r4, lsl #2
                ++rhs_ptr;
                ++lhs_ptr;
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 23e8e76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23e8e78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 23e8e7c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 23e8e7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 23e8e82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 23e8e84:	ea23 7ee3 	bic.w	lr, r3, r3, asr #31
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 23e8e88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23e8e8a:	429f      	cmp	r7, r3
 23e8e8c:	db03      	blt.n	23e8e96 <arm_nn_mat_mult_nt_t_s8+0x676>
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_CMSIS_NN_SUCCESS;
}
 23e8e8e:	2000      	movs	r0, #0
 23e8e90:	b01b      	add	sp, #108	; 0x6c
 23e8e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (bias)
 23e8e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23e8e98:	2b00      	cmp	r3, #0
 23e8e9a:	d038      	beq.n	23e8f0e <arm_nn_mat_mult_nt_t_s8+0x6ee>
                res00 = bias[rhs_rows - 1];
 23e8e9c:	f8db 5000 	ldr.w	r5, [fp]
            q31_t res00 = 0;
 23e8ea0:	2300      	movs	r3, #0
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23e8ea2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 23e8ea4:	428b      	cmp	r3, r1
 23e8ea6:	db34      	blt.n	23e8f12 <arm_nn_mat_mult_nt_t_s8+0x6f2>
 23e8ea8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 23e8eaa:	6821      	ldr	r1, [r4, #0]
 23e8eac:	4473      	add	r3, lr
 23e8eae:	930c      	str	r3, [sp, #48]	; 0x30
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e8eb0:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 23e8eb4:	409d      	lsls	r5, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8eb6:	46c2      	mov	sl, r8
 23e8eb8:	4663      	mov	r3, ip
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e8eba:	2900      	cmp	r1, #0
 23e8ebc:	bfc8      	it	gt
 23e8ebe:	2100      	movgt	r1, #0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8ec0:	6806      	ldr	r6, [r0, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e8ec2:	bfd8      	it	le
 23e8ec4:	4249      	negle	r1, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e8ec6:	fbc5 3a06 	smlal	r3, sl, r5, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e8eca:	fa09 f501 	lsl.w	r5, r9, r1
    result = (int32_t)(mult.long_long >> 31);
 23e8ece:	0fdb      	lsrs	r3, r3, #31
 23e8ed0:	ea43 0a4a 	orr.w	sl, r3, sl, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e8ed4:	3d01      	subs	r5, #1
    int32_t remainder = remainder_mask & dividend;
 23e8ed6:	ea0a 0605 	and.w	r6, sl, r5
    if (result < 0)
 23e8eda:	fa5a fa01 	asrs.w	sl, sl, r1
    q31_t threshold = remainder_mask >> 1;
 23e8ede:	ea4f 0565 	mov.w	r5, r5, asr #1
        threshold++;
 23e8ee2:	bf48      	it	mi
 23e8ee4:	3501      	addmi	r5, #1
            res00 += dst_offset;
 23e8ee6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    if (remainder > threshold)
 23e8ee8:	42ae      	cmp	r6, r5
        result++;
 23e8eea:	bfc8      	it	gt
 23e8eec:	f10a 0a01 	addgt.w	sl, sl, #1
 23e8ef0:	449a      	add	sl, r3
            res00 = MAX(res00, activation_min);
 23e8ef2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 23e8ef4:	3701      	adds	r7, #1
            res00 = MAX(res00, activation_min);
 23e8ef6:	459a      	cmp	sl, r3
 23e8ef8:	bfb8      	it	lt
 23e8efa:	469a      	movlt	sl, r3
            res00 = MIN(res00, activation_max);
 23e8efc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 23e8efe:	459a      	cmp	sl, r3
 23e8f00:	bfa8      	it	ge
 23e8f02:	469a      	movge	sl, r3
            dst_ptr += rhs_rows;
 23e8f04:	9b27      	ldr	r3, [sp, #156]	; 0x9c
            dst_ptr[0] = (q7_t)res00;
 23e8f06:	f882 a000 	strb.w	sl, [r2]
            dst_ptr += rhs_rows;
 23e8f0a:	441a      	add	r2, r3
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 23e8f0c:	e7bc      	b.n	23e8e88 <arm_nn_mat_mult_nt_t_s8+0x668>
            q31_t res00 = 0;
 23e8f0e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23e8f10:	e7c6      	b.n	23e8ea0 <arm_nn_mat_mult_nt_t_s8+0x680>
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 23e8f12:	990c      	ldr	r1, [sp, #48]	; 0x30
 23e8f14:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 23e8f16:	56c9      	ldrsb	r1, [r1, r3]
 23e8f18:	4431      	add	r1, r6
                q31_t rhs_value = rhs_ptr[0];
 23e8f1a:	9e00      	ldr	r6, [sp, #0]
 23e8f1c:	56f6      	ldrsb	r6, [r6, r3]
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23e8f1e:	3301      	adds	r3, #1
                res00 += lhs_value * rhs_value;
 23e8f20:	fb06 5501 	mla	r5, r6, r1, r5
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 23e8f24:	e7bd      	b.n	23e8ea2 <arm_nn_mat_mult_nt_t_s8+0x682>

023e8f26 <arm_nn_vec_mat_mult_t_s16>:
                                              const int32_t dst_shift,
                                              const int32_t rhs_cols,
                                              const int32_t rhs_rows,
                                              const int32_t activation_min,
                                              const int32_t activation_max)
{
 23e8f26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e8f2a:	b095      	sub	sp, #84	; 0x54
 23e8f2c:	930e      	str	r3, [sp, #56]	; 0x38
        rhs += rhs_cols;
    }

#else // ARM_MATH_MVEI

    const int32_t row_loop_cnt = rhs_rows / 2;
 23e8f2e:	e9dd 9320 	ldrd	r9, r3, [sp, #128]	; 0x80
 23e8f32:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 23e8f36:	105b      	asrs	r3, r3, #1
        q63_t acc_64_0 = 0;
        q63_t acc_64_1 = 0;
        int32_t acc_0 = 0;
        int32_t acc_1 = 0;

        const int32_t col_loop_cnt = rhs_cols_fast / 4;
 23e8f38:	f5b9 7f00 	cmp.w	r9, #512	; 0x200
    const int32_t row_loop_cnt = rhs_rows / 2;
 23e8f3c:	930c      	str	r3, [sp, #48]	; 0x30
        const int32_t col_loop_cnt = rhs_cols_fast / 4;
 23e8f3e:	464b      	mov	r3, r9
 23e8f40:	bfa8      	it	ge
 23e8f42:	f44f 7300 	movge.w	r3, #512	; 0x200
 23e8f46:	2b00      	cmp	r3, #0
 23e8f48:	bfb8      	it	lt
 23e8f4a:	3303      	addlt	r3, #3
 23e8f4c:	ea4f 0ea3 	mov.w	lr, r3, asr #2
        }

        acc_64_0 += acc_0;
        acc_64_1 += acc_1;

        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 23e8f50:	f023 0303 	bic.w	r3, r3, #3
 23e8f54:	930b      	str	r3, [sp, #44]	; 0x2c
 23e8f56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
{
 23e8f58:	9105      	str	r1, [sp, #20]
 23e8f5a:	3304      	adds	r3, #4
        rhs += 2 * rhs_cols;
 23e8f5c:	ea4f 0149 	mov.w	r1, r9, lsl #1
 23e8f60:	9108      	str	r1, [sp, #32]
 23e8f62:	9304      	str	r3, [sp, #16]
 23e8f64:	9905      	ldr	r1, [sp, #20]
 23e8f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    for (int32_t i = 0; i < row_loop_cnt; i++)
 23e8f68:	460d      	mov	r5, r1
 23e8f6a:	440b      	add	r3, r1
 23e8f6c:	930d      	str	r3, [sp, #52]	; 0x34
 23e8f6e:	424b      	negs	r3, r1
 23e8f70:	930a      	str	r3, [sp, #40]	; 0x28
 23e8f72:	eb00 03ce 	add.w	r3, r0, lr, lsl #3
 23e8f76:	9309      	str	r3, [sp, #36]	; 0x24
 23e8f78:	2300      	movs	r3, #0
{
 23e8f7a:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
    for (int32_t i = 0; i < row_loop_cnt; i++)
 23e8f7e:	9306      	str	r3, [sp, #24]
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize_s64(const q63_t val, const q31_t reduced_multiplier, const q31_t shift)
{
    const q63_t new_val = val * reduced_multiplier;
 23e8f80:	ea4f 73e8 	mov.w	r3, r8, asr #31
 23e8f84:	9311      	str	r3, [sp, #68]	; 0x44

    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 23e8f86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
{
 23e8f88:	4682      	mov	sl, r0
    const q63_t new_val = val * reduced_multiplier;
 23e8f8a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 23e8f8e:	f1c3 000e 	rsb	r0, r3, #14
    for (int32_t i = 0; i < row_loop_cnt; i++)
 23e8f92:	9b06      	ldr	r3, [sp, #24]
 23e8f94:	990c      	ldr	r1, [sp, #48]	; 0x30
 23e8f96:	428b      	cmp	r3, r1
 23e8f98:	db0d      	blt.n	23e8fb6 <arm_nn_vec_mat_mult_t_s16+0x90>
 23e8f9a:	9b08      	ldr	r3, [sp, #32]
 23e8f9c:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
 23e8fa0:	9905      	ldr	r1, [sp, #20]
 23e8fa2:	fb04 1603 	mla	r6, r4, r3, r1
        tmp = MAX(tmp, activation_min);
        tmp = MIN(tmp, activation_max);
        *dst++ = (q15_t)tmp;
    }

    if (rhs_rows & 0x1)
 23e8fa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 23e8fa8:	07db      	lsls	r3, r3, #31
 23e8faa:	f100 8128 	bmi.w	23e91fe <arm_nn_vec_mat_mult_t_s16+0x2d8>
        rhs += rhs_cols;
    }
#endif // ARM_MATH_DSP

    return ARM_CMSIS_NN_SUCCESS;
}
 23e8fae:	2000      	movs	r0, #0
 23e8fb0:	b015      	add	sp, #84	; 0x54
 23e8fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int32_t acc_1 = 0;
 23e8fb6:	2600      	movs	r6, #0
        const int16_t *lhs_vec = lhs;
 23e8fb8:	46d4      	mov	ip, sl
        int32_t acc_0 = 0;
 23e8fba:	4637      	mov	r7, r6
 23e8fbc:	eb05 0309 	add.w	r3, r5, r9
 23e8fc0:	469b      	mov	fp, r3
        rhs += 2 * rhs_cols;
 23e8fc2:	9b08      	ldr	r3, [sp, #32]
        for (int j = col_loop_cnt; j != 0; j--)
 23e8fc4:	f8cd e01c 	str.w	lr, [sp, #28]
        rhs += 2 * rhs_cols;
 23e8fc8:	18eb      	adds	r3, r5, r3
 23e8fca:	9312      	str	r3, [sp, #72]	; 0x48
        for (int j = col_loop_cnt; j != 0; j--)
 23e8fcc:	9b07      	ldr	r3, [sp, #28]
 23e8fce:	2b00      	cmp	r3, #0
 23e8fd0:	f040 8081 	bne.w	23e90d6 <arm_nn_vec_mat_mult_t_s16+0x1b0>
 23e8fd4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
        acc_64_0 += acc_0;
 23e8fd6:	17f9      	asrs	r1, r7, #31
 23e8fd8:	eb09 0504 	add.w	r5, r9, r4
 23e8fdc:	462b      	mov	r3, r5
        acc_64_1 += acc_1;
 23e8fde:	e9cd 1601 	strd	r1, r6, [sp, #4]
 23e8fe2:	17f1      	asrs	r1, r6, #31
 23e8fe4:	9103      	str	r1, [sp, #12]
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 23e8fe6:	9909      	ldr	r1, [sp, #36]	; 0x24
        acc_64_0 += acc_0;
 23e8fe8:	9700      	str	r7, [sp, #0]
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 23e8fea:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 23e8fec:	19a6      	adds	r6, r4, r6
 23e8fee:	454e      	cmp	r6, r9
 23e8ff0:	f2c0 80a1 	blt.w	23e9136 <arm_nn_vec_mat_mult_t_s16+0x210>
        if (bias)
 23e8ff4:	b19a      	cbz	r2, 23e901e <arm_nn_vec_mat_mult_t_s16+0xf8>
            acc_64_0 += *bias++;
 23e8ff6:	e9d2 3100 	ldrd	r3, r1, [r2]
 23e8ffa:	9c00      	ldr	r4, [sp, #0]
 23e8ffc:	18e3      	adds	r3, r4, r3
 23e8ffe:	9c01      	ldr	r4, [sp, #4]
 23e9000:	eb41 0104 	adc.w	r1, r1, r4
            acc_64_1 += *bias++;
 23e9004:	9c02      	ldr	r4, [sp, #8]
            acc_64_0 += *bias++;
 23e9006:	e9cd 3100 	strd	r3, r1, [sp]
            acc_64_1 += *bias++;
 23e900a:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 23e900e:	18e3      	adds	r3, r4, r3
 23e9010:	9c03      	ldr	r4, [sp, #12]
 23e9012:	f102 0210 	add.w	r2, r2, #16
 23e9016:	eb41 0104 	adc.w	r1, r1, r4
 23e901a:	e9cd 3102 	strd	r3, r1, [sp, #8]
    const q63_t new_val = val * reduced_multiplier;
 23e901e:	9b00      	ldr	r3, [sp, #0]
 23e9020:	9911      	ldr	r1, [sp, #68]	; 0x44
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 23e9022:	f1c0 0620 	rsb	r6, r0, #32
    const q63_t new_val = val * reduced_multiplier;
 23e9026:	4359      	muls	r1, r3
 23e9028:	9b01      	ldr	r3, [sp, #4]
 23e902a:	fb08 1103 	mla	r1, r8, r3, r1
 23e902e:	9b00      	ldr	r3, [sp, #0]
 23e9030:	fba3 3408 	umull	r3, r4, r3, r8
 23e9034:	4421      	add	r1, r4
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 23e9036:	fa01 f606 	lsl.w	r6, r1, r6
 23e903a:	f1b0 0420 	subs.w	r4, r0, #32
 23e903e:	fa23 f300 	lsr.w	r3, r3, r0
 23e9042:	bf58      	it	pl
 23e9044:	fa41 f404 	asrpl.w	r4, r1, r4
 23e9048:	ea43 0306 	orr.w	r3, r3, r6
 23e904c:	bf58      	it	pl
 23e904e:	4323      	orrpl	r3, r4
        tmp = MAX(tmp, activation_min);
 23e9050:	9922      	ldr	r1, [sp, #136]	; 0x88
    result = (result + 1) >> 1;             // Last shift position and insert round
 23e9052:	3301      	adds	r3, #1
 23e9054:	105b      	asrs	r3, r3, #1
 23e9056:	428b      	cmp	r3, r1
 23e9058:	bfb8      	it	lt
 23e905a:	460b      	movlt	r3, r1
        tmp = MIN(tmp, activation_max);
 23e905c:	9923      	ldr	r1, [sp, #140]	; 0x8c
    const q63_t new_val = val * reduced_multiplier;
 23e905e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 23e9060:	428b      	cmp	r3, r1
 23e9062:	bfa8      	it	ge
 23e9064:	460b      	movge	r3, r1
        *dst++ = (q15_t)tmp;
 23e9066:	9904      	ldr	r1, [sp, #16]
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 23e9068:	f1c0 0620 	rsb	r6, r0, #32
 23e906c:	f821 3c04 	strh.w	r3, [r1, #-4]
    const q63_t new_val = val * reduced_multiplier;
 23e9070:	9b02      	ldr	r3, [sp, #8]
 23e9072:	9911      	ldr	r1, [sp, #68]	; 0x44
 23e9074:	4359      	muls	r1, r3
 23e9076:	9b03      	ldr	r3, [sp, #12]
 23e9078:	fb08 1103 	mla	r1, r8, r3, r1
 23e907c:	9b02      	ldr	r3, [sp, #8]
 23e907e:	fba3 3404 	umull	r3, r4, r3, r4
 23e9082:	4421      	add	r1, r4
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 23e9084:	fa01 f606 	lsl.w	r6, r1, r6
 23e9088:	f1b0 0420 	subs.w	r4, r0, #32
 23e908c:	fa23 f300 	lsr.w	r3, r3, r0
 23e9090:	bf58      	it	pl
 23e9092:	fa41 f404 	asrpl.w	r4, r1, r4
 23e9096:	ea43 0306 	orr.w	r3, r3, r6
 23e909a:	bf58      	it	pl
 23e909c:	4323      	orrpl	r3, r4
        tmp = MAX(tmp, activation_min);
 23e909e:	9922      	ldr	r1, [sp, #136]	; 0x88
    result = (result + 1) >> 1;             // Last shift position and insert round
 23e90a0:	3301      	adds	r3, #1
 23e90a2:	105b      	asrs	r3, r3, #1
 23e90a4:	428b      	cmp	r3, r1
 23e90a6:	bfb8      	it	lt
 23e90a8:	460b      	movlt	r3, r1
        tmp = MIN(tmp, activation_max);
 23e90aa:	9923      	ldr	r1, [sp, #140]	; 0x8c
 23e90ac:	428b      	cmp	r3, r1
 23e90ae:	bfa8      	it	ge
 23e90b0:	460b      	movge	r3, r1
        *dst++ = (q15_t)tmp;
 23e90b2:	9904      	ldr	r1, [sp, #16]
 23e90b4:	f821 3c02 	strh.w	r3, [r1, #-2]
    for (int32_t i = 0; i < row_loop_cnt; i++)
 23e90b8:	9b06      	ldr	r3, [sp, #24]
 23e90ba:	3301      	adds	r3, #1
 23e90bc:	9306      	str	r3, [sp, #24]
 23e90be:	460b      	mov	r3, r1
 23e90c0:	3304      	adds	r3, #4
 23e90c2:	9304      	str	r3, [sp, #16]
 23e90c4:	eb09 0305 	add.w	r3, r9, r5
 23e90c8:	9908      	ldr	r1, [sp, #32]
 23e90ca:	930d      	str	r3, [sp, #52]	; 0x34
 23e90cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        rhs += 2 * rhs_cols;
 23e90ce:	9d12      	ldr	r5, [sp, #72]	; 0x48
 23e90d0:	1a5b      	subs	r3, r3, r1
 23e90d2:	930a      	str	r3, [sp, #40]	; 0x28
 23e90d4:	e75d      	b.n	23e8f92 <arm_nn_vec_mat_mult_t_s16+0x6c>
    memcpy(&val, *in_q15, 4);
 23e90d6:	f8dc 3000 	ldr.w	r3, [ip]
 23e90da:	f855 1b04 	ldr.w	r1, [r5], #4
 23e90de:	930f      	str	r3, [sp, #60]	; 0x3c
 23e90e0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 23e90e4:	f10c 0c08 	add.w	ip, ip, #8
 23e90e8:	9310      	str	r3, [sp, #64]	; 0x40
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e90ea:	fa2f f391 	sxtb16	r3, r1, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e90ee:	fa2f f181 	sxtb16	r1, r1
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 23e90f2:	eac3 4421 	pkhtb	r4, r3, r1, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 23e90f6:	eac1 4303 	pkhbt	r3, r1, r3, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e90fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23e90fc:	fb23 7301 	smlad	r3, r3, r1, r7
 23e9100:	4621      	mov	r1, r4
 23e9102:	9c10      	ldr	r4, [sp, #64]	; 0x40
 23e9104:	fb21 3704 	smlad	r7, r1, r4, r3
    memcpy(&val, *in_q7, 4);
 23e9108:	4659      	mov	r1, fp
 23e910a:	f851 3b04 	ldr.w	r3, [r1], #4
 23e910e:	468b      	mov	fp, r1
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e9110:	fa2f f193 	sxtb16	r1, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e9114:	fa2f f383 	sxtb16	r3, r3
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 23e9118:	eac1 4423 	pkhtb	r4, r1, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 23e911c:	eac3 4301 	pkhbt	r3, r3, r1, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e9120:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23e9122:	fb23 6301 	smlad	r3, r3, r1, r6
 23e9126:	4621      	mov	r1, r4
 23e9128:	9c10      	ldr	r4, [sp, #64]	; 0x40
 23e912a:	fb21 3604 	smlad	r6, r1, r4, r3
        for (int j = col_loop_cnt; j != 0; j--)
 23e912e:	9b07      	ldr	r3, [sp, #28]
 23e9130:	3b01      	subs	r3, #1
 23e9132:	9307      	str	r3, [sp, #28]
 23e9134:	e74a      	b.n	23e8fcc <arm_nn_vec_mat_mult_t_s16+0xa6>
            const int32_t lhs_temp = (*lhs_vec);
 23e9136:	f931 6b02 	ldrsh.w	r6, [r1], #2
            acc_64_0 += lhs_temp * (*rhs_0);
 23e913a:	f914 7b01 	ldrsb.w	r7, [r4], #1
 23e913e:	e9dd bc00 	ldrd	fp, ip, [sp]
 23e9142:	fbc6 bc87 	smlalbb	fp, ip, r6, r7
            acc_64_1 += lhs_temp * (*rhs_1);
 23e9146:	f913 7b01 	ldrsb.w	r7, [r3], #1
            acc_64_0 += lhs_temp * (*rhs_0);
 23e914a:	e9cd bc00 	strd	fp, ip, [sp]
            acc_64_1 += lhs_temp * (*rhs_1);
 23e914e:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 23e9152:	fbc6 bc87 	smlalbb	fp, ip, r6, r7
 23e9156:	e9cd bc02 	strd	fp, ip, [sp, #8]
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 23e915a:	e746      	b.n	23e8fea <arm_nn_vec_mat_mult_t_s16+0xc4>
    memcpy(&val, *in_q7, 4);
 23e915c:	f851 3b04 	ldr.w	r3, [r1], #4
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e9160:	fa2f f793 	sxtb16	r7, r3, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e9164:	fa2f f383 	sxtb16	r3, r3
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 23e9168:	eac7 4023 	pkhtb	r0, r7, r3, asr #16
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 23e916c:	eac3 4307 	pkhbt	r3, r3, r7, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e9170:	f8da 7000 	ldr.w	r7, [sl]
 23e9174:	fb23 5307 	smlad	r3, r3, r7, r5
    memcpy(&val, *in_q15, 4);
 23e9178:	f8da 5004 	ldr.w	r5, [sl, #4]
    *in_q15 += 2;
 23e917c:	f10a 0a08 	add.w	sl, sl, #8
 23e9180:	fb20 3505 	smlad	r5, r0, r5, r3
        for (int i = col_loop_cnt; i != 0; i--)
 23e9184:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 23e9188:	f1be 0f00 	cmp.w	lr, #0
 23e918c:	d1e6      	bne.n	23e915c <arm_nn_vec_mat_mult_t_s16+0x236>
        acc_64_0 += acc_0;
 23e918e:	4628      	mov	r0, r5
        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 23e9190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        acc_64_0 += acc_0;
 23e9192:	17e9      	asrs	r1, r5, #31
        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 23e9194:	4433      	add	r3, r6
 23e9196:	4276      	negs	r6, r6
 23e9198:	199d      	adds	r5, r3, r6
 23e919a:	45a9      	cmp	r9, r5
 23e919c:	dc32      	bgt.n	23e9204 <arm_nn_vec_mat_mult_t_s16+0x2de>
        if (bias)
 23e919e:	b132      	cbz	r2, 23e91ae <arm_nn_vec_mat_mult_t_s16+0x288>
            acc_64_0 += *bias++;
 23e91a0:	e9d2 3200 	ldrd	r3, r2, [r2]
 23e91a4:	18c3      	adds	r3, r0, r3
 23e91a6:	eb42 0201 	adc.w	r2, r2, r1
 23e91aa:	4618      	mov	r0, r3
 23e91ac:	4611      	mov	r1, r2
    const q63_t new_val = val * reduced_multiplier;
 23e91ae:	fb08 f301 	mul.w	r3, r8, r1
 23e91b2:	ea4f 72e8 	mov.w	r2, r8, asr #31
 23e91b6:	fb02 3200 	mla	r2, r2, r0, r3
 23e91ba:	fba8 0300 	umull	r0, r3, r8, r0
 23e91be:	4413      	add	r3, r2
    q31_t result = new_val >> (14 - shift); // 64->32 bit reduction
 23e91c0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 23e91c2:	f1c2 050e 	rsb	r5, r2, #14
 23e91c6:	3212      	adds	r2, #18
 23e91c8:	f1b5 0120 	subs.w	r1, r5, #32
 23e91cc:	fa03 f202 	lsl.w	r2, r3, r2
 23e91d0:	fa20 f005 	lsr.w	r0, r0, r5
 23e91d4:	bf58      	it	pl
 23e91d6:	fa43 f101 	asrpl.w	r1, r3, r1
 23e91da:	ea40 0002 	orr.w	r0, r0, r2
 23e91de:	bf58      	it	pl
 23e91e0:	4308      	orrpl	r0, r1
        tmp = MAX(tmp, activation_min);
 23e91e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    result = (result + 1) >> 1;             // Last shift position and insert round
 23e91e4:	3001      	adds	r0, #1
 23e91e6:	1040      	asrs	r0, r0, #1
 23e91e8:	4298      	cmp	r0, r3
 23e91ea:	bfb8      	it	lt
 23e91ec:	4618      	movlt	r0, r3
        tmp = MIN(tmp, activation_max);
 23e91ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 23e91f0:	4298      	cmp	r0, r3
 23e91f2:	bfa8      	it	ge
 23e91f4:	4618      	movge	r0, r3
        *dst++ = (q15_t)tmp;
 23e91f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 23e91f8:	f823 0024 	strh.w	r0, [r3, r4, lsl #2]
 23e91fc:	e6d7      	b.n	23e8fae <arm_nn_vec_mat_mult_t_s16+0x88>
 23e91fe:	4631      	mov	r1, r6
        int32_t acc_0 = 0;
 23e9200:	2500      	movs	r5, #0
 23e9202:	e7c1      	b.n	23e9188 <arm_nn_vec_mat_mult_t_s16+0x262>
            const int32_t lhs_temp = (*lhs_vec);
 23e9204:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23e9206:	f935 7b02 	ldrsh.w	r7, [r5], #2
 23e920a:	9509      	str	r5, [sp, #36]	; 0x24
            acc_64_0 += lhs_temp * (*rhs_0);
 23e920c:	f913 5b01 	ldrsb.w	r5, [r3], #1
 23e9210:	fbc7 0185 	smlalbb	r0, r1, r7, r5
        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 23e9214:	e7c0      	b.n	23e9198 <arm_nn_vec_mat_mult_t_s16+0x272>

023e9216 <arm_nn_vec_mat_mult_t_s8>:
                                             const int32_t rhs_cols,
                                             const int32_t rhs_rows,
                                             const int32_t activation_min,
                                             const int32_t activation_max,
                                             const int32_t address_offset)
{
 23e9216:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23e921a:	b095      	sub	sp, #84	; 0x54
 23e921c:	9107      	str	r1, [sp, #28]
 23e921e:	930f      	str	r3, [sp, #60]	; 0x3c
        *dst = MIN(acc_0, activation_max);
        dst += address_offset;
    }

#elif defined(ARM_MATH_DSP)
    const int32_t row_loop_cnt = rhs_rows / 2;
 23e9220:	e9dd 3123 	ldrd	r3, r1, [sp, #140]	; 0x8c
 23e9224:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23e9228:	1049      	asrs	r1, r1, #1
 23e922a:	910a      	str	r1, [sp, #40]	; 0x28
    const int16_t lhs_offset_s16 = (int16_t)lhs_offset;
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 23e922c:	991e      	ldr	r1, [sp, #120]	; 0x78
        {
            acc_0 = *bias++;
            acc_1 = *bias++;
        }

        const int32_t col_loop_cnt = rhs_cols / 4;
 23e922e:	2b00      	cmp	r3, #0
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 23e9230:	b209      	sxth	r1, r1
 23e9232:	eac1 4b01 	pkhbt	fp, r1, r1, lsl #16
        const int32_t col_loop_cnt = rhs_cols / 4;
 23e9236:	4619      	mov	r1, r3
 23e9238:	bfb8      	it	lt
 23e923a:	1cd9      	addlt	r1, r3, #3
{
 23e923c:	4681      	mov	r9, r0
        const int32_t col_loop_cnt = rhs_cols / 4;
 23e923e:	1088      	asrs	r0, r1, #2
 23e9240:	9001      	str	r0, [sp, #4]

        const int8_t *lhs_vec = lhs;
        const int8_t *rhs_0 = rhs;
        const int8_t *rhs_1 = rhs + rhs_cols;
        rhs += 2 * rhs_cols;
 23e9242:	0058      	lsls	r0, r3, #1
 23e9244:	9009      	str	r0, [sp, #36]	; 0x24
 23e9246:	9822      	ldr	r0, [sp, #136]	; 0x88

            acc_1 = __SMLAD(ker_1, vec_1, acc_1);
            acc_1 = __SMLAD(ker_0, vec_0, acc_1);
        }

        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 23e9248:	f021 0a03 	bic.w	sl, r1, #3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e924c:	9922      	ldr	r1, [sp, #136]	; 0x88
 23e924e:	2800      	cmp	r0, #0
 23e9250:	f1c1 0100 	rsb	r1, r1, #0
 23e9254:	bfc8      	it	gt
 23e9256:	2100      	movgt	r1, #0
 23e9258:	9104      	str	r1, [sp, #16]
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e925a:	2101      	movs	r1, #1
 23e925c:	9804      	ldr	r0, [sp, #16]
    for (int32_t i = 0; i < row_loop_cnt; i++)
 23e925e:	9e07      	ldr	r6, [sp, #28]
 23e9260:	4081      	lsls	r1, r0
 23e9262:	3901      	subs	r1, #1
 23e9264:	9105      	str	r1, [sp, #20]
    q31_t threshold = remainder_mask >> 1;
 23e9266:	1049      	asrs	r1, r1, #1
 23e9268:	9106      	str	r1, [sp, #24]
        threshold++;
 23e926a:	3101      	adds	r1, #1
 23e926c:	910b      	str	r1, [sp, #44]	; 0x2c
        acc_0 = MIN(acc_0, activation_max);
        acc_1 = MAX(acc_1, activation_min);
        acc_1 = MIN(acc_1, activation_max);
        *dst = (int8_t)acc_0;
        *(dst + address_offset) = (int8_t)acc_1;
        dst += 2 * address_offset;
 23e926e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 23e9270:	0049      	lsls	r1, r1, #1
 23e9272:	9108      	str	r1, [sp, #32]
 23e9274:	9907      	ldr	r1, [sp, #28]
 23e9276:	eb01 050a 	add.w	r5, r1, sl
 23e927a:	eb09 010a 	add.w	r1, r9, sl
 23e927e:	910e      	str	r1, [sp, #56]	; 0x38
    for (int32_t i = 0; i < row_loop_cnt; i++)
 23e9280:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23e9282:	9102      	str	r1, [sp, #8]
 23e9284:	2100      	movs	r1, #0
 23e9286:	9103      	str	r1, [sp, #12]
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 23e9288:	f1c9 0100 	rsb	r1, r9, #0
 23e928c:	9113      	str	r1, [sp, #76]	; 0x4c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e928e:	9922      	ldr	r1, [sp, #136]	; 0x88
 23e9290:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 23e9294:	9111      	str	r1, [sp, #68]	; 0x44
    for (int32_t i = 0; i < row_loop_cnt; i++)
 23e9296:	9903      	ldr	r1, [sp, #12]
 23e9298:	980a      	ldr	r0, [sp, #40]	; 0x28
 23e929a:	4281      	cmp	r1, r0
 23e929c:	db4d      	blt.n	23e933a <arm_nn_vec_mat_mult_t_s8+0x124>
 23e929e:	9d08      	ldr	r5, [sp, #32]
 23e92a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23e92a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 23e92a6:	9907      	ldr	r1, [sp, #28]
 23e92a8:	4345      	muls	r5, r0
 23e92aa:	fb00 1104 	mla	r1, r0, r4, r1
    }

    if (rhs_rows & 0x1)
 23e92ae:	9c24      	ldr	r4, [sp, #144]	; 0x90
 23e92b0:	4628      	mov	r0, r5
 23e92b2:	07e4      	lsls	r4, r4, #31
 23e92b4:	d53d      	bpl.n	23e9332 <arm_nn_vec_mat_mult_t_s8+0x11c>
    {
        int32_t acc_0 = 0;
        if (bias)
 23e92b6:	b102      	cbz	r2, 23e92ba <arm_nn_vec_mat_mult_t_s8+0xa4>
        {
            acc_0 = *bias++;
 23e92b8:	6812      	ldr	r2, [r2, #0]
        const int32_t col_loop_cnt = rhs_cols / 4;

        const int8_t *lhs_vec = lhs;
        const int8_t *rhs_0 = rhs;

        for (int i = col_loop_cnt; i != 0; i--)
 23e92ba:	468c      	mov	ip, r1
 23e92bc:	9c01      	ldr	r4, [sp, #4]
 23e92be:	2c00      	cmp	r4, #0
 23e92c0:	f040 80db 	bne.w	23e947a <arm_nn_vec_mat_mult_t_s8+0x264>

            acc_0 = __SMLAD(ker_1, vec_1, acc_0);
            acc_0 = __SMLAD(ker_0, vec_0, acc_0);
        }

        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 23e92c4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 23e92c6:	4451      	add	r1, sl
 23e92c8:	ebaa 0506 	sub.w	r5, sl, r6
 23e92cc:	1977      	adds	r7, r6, r5
 23e92ce:	42bb      	cmp	r3, r7
 23e92d0:	f300 80e7 	bgt.w	23e94a2 <arm_nn_vec_mat_mult_t_s8+0x28c>
 23e92d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e92d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e92da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 23e92de:	409a      	lsls	r2, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e92e0:	2300      	movs	r3, #0
 23e92e2:	9c21      	ldr	r4, [sp, #132]	; 0x84
 23e92e4:	fbc2 1304 	smlal	r1, r3, r2, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e92e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e92ea:	461d      	mov	r5, r3
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e92ec:	2a00      	cmp	r2, #0
 23e92ee:	bfdc      	itt	le
 23e92f0:	4252      	negle	r2, r2
 23e92f2:	9201      	strle	r2, [sp, #4]
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e92f4:	2201      	movs	r2, #1
    result = (int32_t)(mult.long_long >> 31);
 23e92f6:	0fcb      	lsrs	r3, r1, #31
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e92f8:	9901      	ldr	r1, [sp, #4]
    if (result < 0)
 23e92fa:	9c01      	ldr	r4, [sp, #4]
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e92fc:	408a      	lsls	r2, r1
    result = (int32_t)(mult.long_long >> 31);
 23e92fe:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e9302:	3a01      	subs	r2, #1
    if (result < 0)
 23e9304:	fa53 f404 	asrs.w	r4, r3, r4
    int32_t remainder = remainder_mask & dividend;
 23e9308:	ea03 0102 	and.w	r1, r3, r2
    q31_t threshold = remainder_mask >> 1;
 23e930c:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 23e9310:	bf48      	it	mi
 23e9312:	3201      	addmi	r2, #1
        }

        acc_0 = arm_nn_requantize(acc_0, dst_multiplier, dst_shift);

        // Add offset
        acc_0 += dst_offset;
 23e9314:	9b20      	ldr	r3, [sp, #128]	; 0x80
    if (remainder > threshold)
 23e9316:	4291      	cmp	r1, r2
        result++;
 23e9318:	bfc8      	it	gt
 23e931a:	3401      	addgt	r4, #1
 23e931c:	441c      	add	r4, r3
        // Clamp the result
        acc_0 = MAX(acc_0, activation_min);
 23e931e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 23e9320:	429c      	cmp	r4, r3
 23e9322:	bfb8      	it	lt
 23e9324:	461c      	movlt	r4, r3
        acc_0 = MIN(acc_0, activation_max);
 23e9326:	9b26      	ldr	r3, [sp, #152]	; 0x98
 23e9328:	429c      	cmp	r4, r3
 23e932a:	bfa8      	it	ge
 23e932c:	461c      	movge	r4, r3
        *dst = (int8_t)acc_0;
 23e932e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23e9330:	541c      	strb	r4, [r3, r0]
        dst += address_offset;
        rhs += rhs_cols;
    }
#endif
    return ARM_CMSIS_NN_SUCCESS;
}
 23e9332:	2000      	movs	r0, #0
 23e9334:	b015      	add	sp, #84	; 0x54
 23e9336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (bias)
 23e933a:	2a00      	cmp	r2, #0
 23e933c:	d06a      	beq.n	23e9414 <arm_nn_vec_mat_mult_t_s8+0x1fe>
            acc_0 = *bias++;
 23e933e:	4617      	mov	r7, r2
 23e9340:	f857 0b08 	ldr.w	r0, [r7], #8
            acc_1 = *bias++;
 23e9344:	6851      	ldr	r1, [r2, #4]
 23e9346:	463a      	mov	r2, r7
        const int8_t *rhs_1 = rhs + rhs_cols;
 23e9348:	18f7      	adds	r7, r6, r3
 23e934a:	970d      	str	r7, [sp, #52]	; 0x34
        rhs += 2 * rhs_cols;
 23e934c:	9f09      	ldr	r7, [sp, #36]	; 0x24
        for (int j = col_loop_cnt; j != 0; j--)
 23e934e:	f8dd e004 	ldr.w	lr, [sp, #4]
        rhs += 2 * rhs_cols;
 23e9352:	19f7      	adds	r7, r6, r7
 23e9354:	9712      	str	r7, [sp, #72]	; 0x48
        const int8_t *lhs_vec = lhs;
 23e9356:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
        for (int j = col_loop_cnt; j != 0; j--)
 23e935a:	f1be 0f00 	cmp.w	lr, #0
 23e935e:	d15c      	bne.n	23e941a <arm_nn_vec_mat_mult_t_s8+0x204>
 23e9360:	eb05 0c03 	add.w	ip, r5, r3
 23e9364:	46e6      	mov	lr, ip
 23e9366:	9f0e      	ldr	r7, [sp, #56]	; 0x38
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 23e9368:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 23e936a:	193e      	adds	r6, r7, r4
 23e936c:	42b3      	cmp	r3, r6
 23e936e:	dc77      	bgt.n	23e9460 <arm_nn_vec_mat_mult_t_s8+0x24a>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e9370:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 23e9374:	2500      	movs	r5, #0
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e9376:	9c11      	ldr	r4, [sp, #68]	; 0x44
 23e9378:	40a0      	lsls	r0, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e937a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 23e937c:	fbc0 6504 	smlal	r6, r5, r0, r4
    int32_t remainder = remainder_mask & dividend;
 23e9380:	9c05      	ldr	r4, [sp, #20]
    result = (int32_t)(mult.long_long >> 31);
 23e9382:	0ff0      	lsrs	r0, r6, #31
 23e9384:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23e9388:	ea00 0504 	and.w	r5, r0, r4
    q31_t threshold = remainder_mask >> 1;
 23e938c:	9c04      	ldr	r4, [sp, #16]
 23e938e:	9e06      	ldr	r6, [sp, #24]
 23e9390:	4120      	asrs	r0, r4
 23e9392:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 23e9394:	bf48      	it	mi
 23e9396:	4626      	movmi	r6, r4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e9398:	9c11      	ldr	r4, [sp, #68]	; 0x44
    if (remainder > threshold)
 23e939a:	42b5      	cmp	r5, r6
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23e939c:	fa01 f604 	lsl.w	r6, r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e93a0:	f04f 0500 	mov.w	r5, #0
 23e93a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 23e93a8:	9c21      	ldr	r4, [sp, #132]	; 0x84
        result++;
 23e93aa:	bfc8      	it	gt
 23e93ac:	3001      	addgt	r0, #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23e93ae:	fbc6 1504 	smlal	r1, r5, r6, r4
    int32_t remainder = remainder_mask & dividend;
 23e93b2:	9c05      	ldr	r4, [sp, #20]
    result = (int32_t)(mult.long_long >> 31);
 23e93b4:	0fc9      	lsrs	r1, r1, #31
 23e93b6:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23e93ba:	ea01 0504 	and.w	r5, r1, r4
    q31_t threshold = remainder_mask >> 1;
 23e93be:	9c04      	ldr	r4, [sp, #16]
 23e93c0:	9e06      	ldr	r6, [sp, #24]
 23e93c2:	4121      	asrs	r1, r4
 23e93c4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 23e93c6:	bf48      	it	mi
 23e93c8:	4626      	movmi	r6, r4
        acc_0 += dst_offset;
 23e93ca:	9c20      	ldr	r4, [sp, #128]	; 0x80
    if (remainder > threshold)
 23e93cc:	42b5      	cmp	r5, r6
        result++;
 23e93ce:	bfc8      	it	gt
 23e93d0:	3101      	addgt	r1, #1
 23e93d2:	4420      	add	r0, r4
        acc_1 += dst_offset;
 23e93d4:	4421      	add	r1, r4
        acc_0 = MAX(acc_0, activation_min);
 23e93d6:	9c25      	ldr	r4, [sp, #148]	; 0x94
        rhs += 2 * rhs_cols;
 23e93d8:	9e12      	ldr	r6, [sp, #72]	; 0x48
        acc_0 = MAX(acc_0, activation_min);
 23e93da:	42a0      	cmp	r0, r4
 23e93dc:	bfb8      	it	lt
 23e93de:	4620      	movlt	r0, r4
        acc_1 = MAX(acc_1, activation_min);
 23e93e0:	42a1      	cmp	r1, r4
 23e93e2:	bfb8      	it	lt
 23e93e4:	4621      	movlt	r1, r4
        acc_0 = MIN(acc_0, activation_max);
 23e93e6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 23e93e8:	eb03 050c 	add.w	r5, r3, ip
 23e93ec:	42a0      	cmp	r0, r4
 23e93ee:	bfa8      	it	ge
 23e93f0:	4620      	movge	r0, r4
        *dst = (int8_t)acc_0;
 23e93f2:	9c02      	ldr	r4, [sp, #8]
 23e93f4:	7020      	strb	r0, [r4, #0]
        acc_1 = MIN(acc_1, activation_max);
 23e93f6:	9826      	ldr	r0, [sp, #152]	; 0x98
 23e93f8:	4281      	cmp	r1, r0
 23e93fa:	bfa8      	it	ge
 23e93fc:	4601      	movge	r1, r0
        *(dst + address_offset) = (int8_t)acc_1;
 23e93fe:	4620      	mov	r0, r4
 23e9400:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 23e9402:	5501      	strb	r1, [r0, r4]
        dst += 2 * address_offset;
 23e9404:	4601      	mov	r1, r0
 23e9406:	9808      	ldr	r0, [sp, #32]
 23e9408:	4401      	add	r1, r0
 23e940a:	9102      	str	r1, [sp, #8]
    for (int32_t i = 0; i < row_loop_cnt; i++)
 23e940c:	9903      	ldr	r1, [sp, #12]
 23e940e:	3101      	adds	r1, #1
 23e9410:	9103      	str	r1, [sp, #12]
 23e9412:	e740      	b.n	23e9296 <arm_nn_vec_mat_mult_t_s8+0x80>
        int32_t acc_1 = 0;
 23e9414:	4611      	mov	r1, r2
        int32_t acc_0 = 0;
 23e9416:	4610      	mov	r0, r2
 23e9418:	e796      	b.n	23e9348 <arm_nn_vec_mat_mult_t_s8+0x132>
    memcpy(&val, *in_q7, 4);
 23e941a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23e941c:	f854 7b04 	ldr.w	r7, [r4], #4
 23e9420:	940c      	str	r4, [sp, #48]	; 0x30
    __ASM volatile ("sxtab16 %0, %1, %2, ROR %3" : "=r" (result) : "r" (op1) , "r" (op2) , "i" (rotate));
 23e9422:	fa2b f497 	sxtab16	r4, fp, r7, ror #8
 23e9426:	f856 cb04 	ldr.w	ip, [r6], #4
 23e942a:	9410      	str	r4, [sp, #64]	; 0x40
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23e942c:	fa2b f787 	sxtab16	r7, fp, r7
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e9430:	fa2f f89c 	sxtb16	r8, ip, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e9434:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e9438:	fb28 0004 	smlad	r0, r8, r4, r0
 23e943c:	fb2c 0007 	smlad	r0, ip, r7, r0
 23e9440:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 23e9442:	f854 cb04 	ldr.w	ip, [r4], #4
 23e9446:	940d      	str	r4, [sp, #52]	; 0x34
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e9448:	fa2f f89c 	sxtb16	r8, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e944c:	9c10      	ldr	r4, [sp, #64]	; 0x40
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e944e:	fa2f fc8c 	sxtb16	ip, ip
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e9452:	fb28 1104 	smlad	r1, r8, r4, r1
 23e9456:	fb2c 1107 	smlad	r1, ip, r7, r1
        for (int j = col_loop_cnt; j != 0; j--)
 23e945a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 23e945e:	e77c      	b.n	23e935a <arm_nn_vec_mat_mult_t_s8+0x144>
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 23e9460:	f917 6b01 	ldrsb.w	r6, [r7], #1
 23e9464:	9c1e      	ldr	r4, [sp, #120]	; 0x78
            acc_0 += lhs_temp * (*rhs_0);
 23e9466:	f915 8b01 	ldrsb.w	r8, [r5], #1
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 23e946a:	4426      	add	r6, r4
            acc_0 += lhs_temp * (*rhs_0);
 23e946c:	fb06 0008 	mla	r0, r6, r8, r0
            acc_1 += lhs_temp * (*rhs_1);
 23e9470:	f91e 8b01 	ldrsb.w	r8, [lr], #1
 23e9474:	fb06 1108 	mla	r1, r6, r8, r1
        for (int k = col_loop_cnt * 4; k < rhs_cols; k++)
 23e9478:	e776      	b.n	23e9368 <arm_nn_vec_mat_mult_t_s8+0x152>
 23e947a:	f859 6b04 	ldr.w	r6, [r9], #4
    __ASM volatile ("sxtab16 %0, %1, %2, ROR %3" : "=r" (result) : "r" (op1) , "r" (op2) , "i" (rotate));
 23e947e:	fa2b fe96 	sxtab16	lr, fp, r6, ror #8
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 23e9482:	f85c 5b04 	ldr.w	r5, [ip], #4
 23e9486:	fa2b f686 	sxtab16	r6, fp, r6
    __ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 23e948a:	fa2f f795 	sxtb16	r7, r5, ror #8
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 23e948e:	fa2f f585 	sxtb16	r5, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 23e9492:	fb27 220e 	smlad	r2, r7, lr, r2
 23e9496:	fb25 2206 	smlad	r2, r5, r6, r2
        for (int i = col_loop_cnt; i != 0; i--)
 23e949a:	9c01      	ldr	r4, [sp, #4]
 23e949c:	3c01      	subs	r4, #1
 23e949e:	9401      	str	r4, [sp, #4]
 23e94a0:	e70c      	b.n	23e92bc <arm_nn_vec_mat_mult_t_s8+0xa6>
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 23e94a2:	f916 7b01 	ldrsb.w	r7, [r6], #1
 23e94a6:	9c1e      	ldr	r4, [sp, #120]	; 0x78
            acc_0 += lhs_temp * (*rhs_0);
 23e94a8:	f911 cb01 	ldrsb.w	ip, [r1], #1
            const int32_t lhs_temp = (*lhs_vec + lhs_offset);
 23e94ac:	4427      	add	r7, r4
            acc_0 += lhs_temp * (*rhs_0);
 23e94ae:	fb07 220c 	mla	r2, r7, ip, r2
        for (int j = col_loop_cnt * 4; j < rhs_cols; j++)
 23e94b2:	e70b      	b.n	23e92cc <arm_nn_vec_mat_mult_t_s8+0xb6>

023e94b4 <arm_nn_softmax_common_s8>:
                              const int32_t mult,
                              const int32_t shift,
                              const int32_t diff_min,
                              const bool int16_output,
                              void *output)
{
 23e94b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 23e94b8:	f04f 0b00 	mov.w	fp, #0
{
 23e94bc:	b091      	sub	sp, #68	; 0x44
 23e94be:	9203      	str	r2, [sp, #12]
 23e94c0:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 23e94c4:	900a      	str	r0, [sp, #40]	; 0x28
 23e94c6:	910c      	str	r1, [sp, #48]	; 0x30
 23e94c8:	9301      	str	r3, [sp, #4]
 23e94ca:	920d      	str	r2, [sp, #52]	; 0x34
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 23e94cc:	f8cd b018 	str.w	fp, [sp, #24]
 23e94d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23e94d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 23e94d4:	445b      	add	r3, fp
 23e94d6:	9305      	str	r3, [sp, #20]
 23e94d8:	9b06      	ldr	r3, [sp, #24]
 23e94da:	4293      	cmp	r3, r2
 23e94dc:	db02      	blt.n	23e94e4 <arm_nn_softmax_common_s8+0x30>
            }
        }

        input += row_size;
    }
}
 23e94de:	b011      	add	sp, #68	; 0x44
 23e94e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        int8_t max = *input;
 23e94e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23e94e6:	f912 200b 	ldrsb.w	r2, [r2, fp]
 23e94ea:	9202      	str	r2, [sp, #8]
        for (col = 1; col < row_size; ++col)
 23e94ec:	2201      	movs	r2, #1
 23e94ee:	9903      	ldr	r1, [sp, #12]
 23e94f0:	428a      	cmp	r2, r1
 23e94f2:	f2c0 817b 	blt.w	23e97ec <arm_nn_softmax_common_s8+0x338>
        int32_t sum = 0;
 23e94f6:	2500      	movs	r5, #0
        for (col = 0; col < row_size; ++col)
 23e94f8:	46ae      	mov	lr, r5
        mult = 1 - mult;
 23e94fa:	f8df 8304 	ldr.w	r8, [pc, #772]	; 23e9800 <arm_nn_softmax_common_s8+0x34c>
 23e94fe:	9b03      	ldr	r3, [sp, #12]
 23e9500:	459e      	cmp	lr, r3
 23e9502:	f2c0 8181 	blt.w	23e9808 <arm_nn_softmax_common_s8+0x354>
  if (value == 0U)
 23e9506:	2d00      	cmp	r5, #0
 23e9508:	f000 82dd 	beq.w	23e9ac6 <arm_nn_softmax_common_s8+0x612>
  return __builtin_clz(value);
 23e950c:	fab5 f785 	clz	r7, r5
        const int32_t shifted_scale = ONE_OVER1((sum > 0 ? sum << headroom : 0) - (1 << 31));
 23e9510:	40bd      	lsls	r5, r7
 23e9512:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    return result;
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)NN_Q31_MAX;
 23e9516:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 23e951a:	17e8      	asrs	r0, r5, #31
 23e951c:	18ad      	adds	r5, r5, r2
 23e951e:	f140 0000 	adc.w	r0, r0, #0
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 23e9522:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 23e9526:	bf08      	it	eq
 23e9528:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
 23e952c:	bf0b      	itete	eq
 23e952e:	462a      	moveq	r2, r5
 23e9530:	2201      	movne	r2, #1
 23e9532:	4601      	moveq	r1, r0
 23e9534:	2100      	movne	r1, #0
 23e9536:	18aa      	adds	r2, r5, r2
 23e9538:	eb40 0101 	adc.w	r1, r0, r1
 23e953c:	0fcd      	lsrs	r5, r1, #31
 23e953e:	18aa      	adds	r2, r5, r2
 23e9540:	f141 0100 	adc.w	r1, r1, #0
 23e9544:	0852      	lsrs	r2, r2, #1
 23e9546:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
        mult = 1 - mult;
 23e954a:	1c53      	adds	r3, r2, #1
 23e954c:	4cac      	ldr	r4, [pc, #688]	; (23e9800 <arm_nn_softmax_common_s8+0x34c>)
 23e954e:	bf06      	itte	eq
 23e9550:	f04f 4480 	moveq.w	r4, #1073741824	; 0x40000000
 23e9554:	2600      	moveq	r6, #0
 23e9556:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23e955a:	48aa      	ldr	r0, [pc, #680]	; (23e9804 <arm_nn_softmax_common_s8+0x350>)
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 23e955c:	1049      	asrs	r1, r1, #1
    mult = mult + (q63_t)m1 * m2;
 23e955e:	4255      	negs	r5, r2
 23e9560:	fb00 5501 	mla	r5, r0, r1, r5
 23e9564:	fba2 0c00 	umull	r0, ip, r2, r0
 23e9568:	1900      	adds	r0, r0, r4
 23e956a:	4465      	add	r5, ip
    result = (int32_t)(mult / (1ll << 31));
 23e956c:	eb45 0506 	adc.w	r5, r5, r6
 23e9570:	2d00      	cmp	r5, #0
 23e9572:	da04      	bge.n	23e957e <arm_nn_softmax_common_s8+0xca>
 23e9574:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 23e9578:	1900      	adds	r0, r0, r4
 23e957a:	f145 0500 	adc.w	r5, r5, #0
 23e957e:	0fc0      	lsrs	r0, r0, #31
 23e9580:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
        mult = 1 - mult;
 23e9584:	1c55      	adds	r5, r2, #1
 23e9586:	4e9e      	ldr	r6, [pc, #632]	; (23e9800 <arm_nn_softmax_common_s8+0x34c>)
 23e9588:	bf1a      	itte	ne
 23e958a:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 23e958e:	f04f 0e00 	movne.w	lr, #0
 23e9592:	f04f 3eff 	moveq.w	lr, #4294967295	; 0xffffffff
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 23e9596:	f100 305a 	add.w	r0, r0, #1515870810	; 0x5a5a5a5a
    mult = mult + (q63_t)m1 * m2;
 23e959a:	fb00 f501 	mul.w	r5, r0, r1
 23e959e:	17c4      	asrs	r4, r0, #31
 23e95a0:	fb02 5504 	mla	r5, r2, r4, r5
 23e95a4:	fba0 4802 	umull	r4, r8, r0, r2
 23e95a8:	19a4      	adds	r4, r4, r6
 23e95aa:	4445      	add	r5, r8
    result = (int32_t)(mult / (1ll << 31));
 23e95ac:	eb45 050e 	adc.w	r5, r5, lr
 23e95b0:	2d00      	cmp	r5, #0
    if ((m1 < 0) ^ (m2 < 0))
 23e95b2:	ea4f 7cd2 	mov.w	ip, r2, lsr #31
    result = (int32_t)(mult / (1ll << 31));
 23e95b6:	da04      	bge.n	23e95c2 <arm_nn_softmax_common_s8+0x10e>
 23e95b8:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 23e95bc:	19a4      	adds	r4, r4, r6
 23e95be:	f145 0500 	adc.w	r5, r5, #0
 23e95c2:	0fe4      	lsrs	r4, r4, #31
 23e95c4:	ea44 0445 	orr.w	r4, r4, r5, lsl #1

    const int32_t shift = (1 << 29);
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23e95c8:	f1c4 5400 	rsb	r4, r4, #536870912	; 0x20000000
        mult = 1 - mult;
 23e95cc:	2c00      	cmp	r4, #0
 23e95ce:	bfac      	ite	ge
 23e95d0:	2600      	movge	r6, #0
 23e95d2:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 23e95d6:	4d8a      	ldr	r5, [pc, #552]	; (23e9800 <arm_nn_softmax_common_s8+0x34c>)
 23e95d8:	bfa8      	it	ge
 23e95da:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23e95de:	fbc0 5604 	smlal	r5, r6, r0, r4
 23e95e2:	2e00      	cmp	r6, #0
 23e95e4:	da04      	bge.n	23e95f0 <arm_nn_softmax_common_s8+0x13c>
 23e95e6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 23e95ea:	192d      	adds	r5, r5, r4
 23e95ec:	f146 0600 	adc.w	r6, r6, #0
 23e95f0:	0fed      	lsrs	r5, r5, #31
 23e95f2:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 23e95f6:	f1b5 4f60 	cmp.w	r5, #3758096384	; 0xe0000000
 23e95fa:	bfcb      	itete	gt
 23e95fc:	f04f 36ff 	movgt.w	r6, #4294967295	; 0xffffffff
 23e9600:	2600      	movle	r6, #0
 23e9602:	f04f 0e00 	movgt.w	lr, #0
 23e9606:	f04f 4e00 	movle.w	lr, #2147483648	; 0x80000000
 23e960a:	ea06 0585 	and.w	r5, r6, r5, lsl #2
 23e960e:	ea85 050e 	eor.w	r5, r5, lr
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23e9612:	182c      	adds	r4, r5, r0
    if ((m1 < 0) ^ (m2 < 0))
 23e9614:	ea4f 7ed4 	mov.w	lr, r4, lsr #31
        mult = 1 - mult;
 23e9618:	45f4      	cmp	ip, lr
 23e961a:	4e79      	ldr	r6, [pc, #484]	; (23e9800 <arm_nn_softmax_common_s8+0x34c>)
 23e961c:	bf06      	itte	eq
 23e961e:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
 23e9622:	f04f 0800 	moveq.w	r8, #0
 23e9626:	f04f 38ff 	movne.w	r8, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23e962a:	fb04 f501 	mul.w	r5, r4, r1
 23e962e:	17e0      	asrs	r0, r4, #31
 23e9630:	fb02 5500 	mla	r5, r2, r0, r5
 23e9634:	fba4 0902 	umull	r0, r9, r4, r2
 23e9638:	1980      	adds	r0, r0, r6
 23e963a:	444d      	add	r5, r9
    result = (int32_t)(mult / (1ll << 31));
 23e963c:	eb45 0508 	adc.w	r5, r5, r8
 23e9640:	2d00      	cmp	r5, #0
 23e9642:	da04      	bge.n	23e964e <arm_nn_softmax_common_s8+0x19a>
 23e9644:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 23e9648:	1980      	adds	r0, r0, r6
 23e964a:	f145 0500 	adc.w	r5, r5, #0
 23e964e:	0fc0      	lsrs	r0, r0, #31
 23e9650:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23e9654:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
        mult = 1 - mult;
 23e9658:	4d69      	ldr	r5, [pc, #420]	; (23e9800 <arm_nn_softmax_common_s8+0x34c>)
 23e965a:	ebbe 7fd0 	cmp.w	lr, r0, lsr #31
 23e965e:	bf13      	iteet	ne
 23e9660:	46ae      	movne	lr, r5
 23e9662:	f04f 4e80 	moveq.w	lr, #1073741824	; 0x40000000
 23e9666:	2500      	moveq	r5, #0
 23e9668:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23e966c:	fbc4 e500 	smlal	lr, r5, r4, r0
 23e9670:	462e      	mov	r6, r5
 23e9672:	2e00      	cmp	r6, #0
 23e9674:	4675      	mov	r5, lr
 23e9676:	da04      	bge.n	23e9682 <arm_nn_softmax_common_s8+0x1ce>
 23e9678:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23e967c:	182d      	adds	r5, r5, r0
 23e967e:	f146 0600 	adc.w	r6, r6, #0
 23e9682:	0fed      	lsrs	r5, r5, #31
 23e9684:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 23e9688:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
 23e968c:	bfab      	itete	ge
 23e968e:	2000      	movge	r0, #0
 23e9690:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
 23e9694:	f06f 4600 	mvnge.w	r6, #2147483648	; 0x80000000
 23e9698:	2600      	movlt	r6, #0
 23e969a:	ea00 0085 	and.w	r0, r0, r5, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 23e969e:	f1b5 4f60 	cmp.w	r5, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 23e96a2:	ea80 0006 	eor.w	r0, r0, r6
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 23e96a6:	bfd5      	itete	le
 23e96a8:	2600      	movle	r6, #0
 23e96aa:	f04f 36ff 	movgt.w	r6, #4294967295	; 0xffffffff
 23e96ae:	f04f 4500 	movle.w	r5, #2147483648	; 0x80000000
 23e96b2:	2500      	movgt	r5, #0
 23e96b4:	4030      	ands	r0, r6
 23e96b6:	4068      	eors	r0, r5
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23e96b8:	4404      	add	r4, r0
    if ((m1 < 0) ^ (m2 < 0))
 23e96ba:	0fe5      	lsrs	r5, r4, #31
        mult = 1 - mult;
 23e96bc:	45ac      	cmp	ip, r5
 23e96be:	4850      	ldr	r0, [pc, #320]	; (23e9800 <arm_nn_softmax_common_s8+0x34c>)
 23e96c0:	bf06      	itte	eq
 23e96c2:	f04f 4080 	moveq.w	r0, #1073741824	; 0x40000000
 23e96c6:	2600      	moveq	r6, #0
 23e96c8:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23e96cc:	4361      	muls	r1, r4
 23e96ce:	ea4f 7ce4 	mov.w	ip, r4, asr #31
 23e96d2:	fb02 110c 	mla	r1, r2, ip, r1
 23e96d6:	fba4 2c02 	umull	r2, ip, r4, r2
 23e96da:	1812      	adds	r2, r2, r0
 23e96dc:	4461      	add	r1, ip
    result = (int32_t)(mult / (1ll << 31));
 23e96de:	eb41 0106 	adc.w	r1, r1, r6
 23e96e2:	2900      	cmp	r1, #0
 23e96e4:	da04      	bge.n	23e96f0 <arm_nn_softmax_common_s8+0x23c>
 23e96e6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23e96ea:	1812      	adds	r2, r2, r0
 23e96ec:	f141 0100 	adc.w	r1, r1, #0
 23e96f0:	0fd2      	lsrs	r2, r2, #31
 23e96f2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23e96f6:	f1c2 5200 	rsb	r2, r2, #536870912	; 0x20000000
        mult = 1 - mult;
 23e96fa:	ebb5 7fd2 	cmp.w	r5, r2, lsr #31
 23e96fe:	bf0c      	ite	eq
 23e9700:	2000      	moveq	r0, #0
 23e9702:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23e9706:	493e      	ldr	r1, [pc, #248]	; (23e9800 <arm_nn_softmax_common_s8+0x34c>)
 23e9708:	bf08      	it	eq
 23e970a:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23e970e:	fbc4 1002 	smlal	r1, r0, r4, r2
 23e9712:	2800      	cmp	r0, #0
 23e9714:	da04      	bge.n	23e9720 <arm_nn_softmax_common_s8+0x26c>
 23e9716:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 23e971a:	1889      	adds	r1, r1, r2
 23e971c:	f140 0000 	adc.w	r0, r0, #0
 23e9720:	0fc9      	lsrs	r1, r1, #31
 23e9722:	ea41 0040 	orr.w	r0, r1, r0, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 23e9726:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 23e972a:	bfb5      	itete	lt
 23e972c:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 23e9730:	2200      	movge	r2, #0
 23e9732:	2100      	movlt	r1, #0
 23e9734:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 23e9738:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 23e973c:	ea02 0280 	and.w	r2, r2, r0, lsl #2
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 23e9740:	bfd4      	ite	le
 23e9742:	2000      	movle	r0, #0
 23e9744:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 23e9748:	ea82 0201 	eor.w	r2, r2, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 23e974c:	bfd4      	ite	le
 23e974e:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
 23e9752:	2100      	movgt	r1, #0
 23e9754:	4010      	ands	r0, r2
 23e9756:	4048      	eors	r0, r1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 23e9758:	4404      	add	r4, r0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 23e975a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 23e975e:	bfab      	itete	ge
 23e9760:	2200      	movge	r2, #0
 23e9762:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 23e9766:	f06f 4100 	mvnge.w	r1, #2147483648	; 0x80000000
 23e976a:	2100      	movlt	r1, #0
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 23e976c:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
 23e9770:	bfd4      	ite	le
 23e9772:	2000      	movle	r0, #0
 23e9774:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), NN_Q31_MAX, result);
 23e9778:	ea02 0244 	and.w	r2, r2, r4, lsl #1
 23e977c:	ea82 0201 	eor.w	r2, r2, r1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), NN_Q31_MIN, result);
 23e9780:	bfd4      	ite	le
 23e9782:	f04f 4100 	movle.w	r1, #2147483648	; 0x80000000
 23e9786:	2100      	movgt	r1, #0
 23e9788:	4002      	ands	r2, r0
 23e978a:	ea82 0301 	eor.w	r3, r2, r1
 23e978e:	9304      	str	r3, [sp, #16]
        if (int16_output)
 23e9790:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23e9792:	2b00      	cmp	r3, #0
 23e9794:	f000 833a 	beq.w	23e9e0c <arm_nn_softmax_common_s8+0x958>
            int16_t *output_s16 = (int16_t *)output + row_idx * row_size;
 23e9798:	9b1d      	ldr	r3, [sp, #116]	; 0x74
            for (col = 0; col < row_size; ++col)
 23e979a:	f04f 0c00 	mov.w	ip, #0
 23e979e:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 23e97a2:	9309      	str	r3, [sp, #36]	; 0x24
            bits_over_unit = ACCUM_BITS - headroom + 15;
 23e97a4:	f1c7 031b 	rsb	r3, r7, #27
 23e97a8:	9307      	str	r3, [sp, #28]
            for (col = 0; col < row_size; ++col)
 23e97aa:	9b04      	ldr	r3, [sp, #16]
        mult = 1 - mult;
 23e97ac:	f8df e050 	ldr.w	lr, [pc, #80]	; 23e9800 <arm_nn_softmax_common_s8+0x34c>
 23e97b0:	2b00      	cmp	r3, #0
 23e97b2:	bfb3      	iteet	lt
 23e97b4:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 23e97b8:	2200      	movge	r2, #0
 23e97ba:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
 23e97be:	4910      	ldrlt	r1, [pc, #64]	; (23e9800 <arm_nn_softmax_common_s8+0x34c>)
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e97c0:	9b07      	ldr	r3, [sp, #28]
 23e97c2:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 23e97c6:	2201      	movs	r2, #1
 23e97c8:	409a      	lsls	r2, r3
 23e97ca:	1e53      	subs	r3, r2, #1
    q31_t threshold = remainder_mask >> 1;
 23e97cc:	ea4f 0863 	mov.w	r8, r3, asr #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e97d0:	9308      	str	r3, [sp, #32]
        threshold++;
 23e97d2:	f108 0301 	add.w	r3, r8, #1
 23e97d6:	930b      	str	r3, [sp, #44]	; 0x2c
 23e97d8:	9b03      	ldr	r3, [sp, #12]
 23e97da:	459c      	cmp	ip, r3
 23e97dc:	f2c0 8188 	blt.w	23e9af0 <arm_nn_softmax_common_s8+0x63c>
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 23e97e0:	9a06      	ldr	r2, [sp, #24]
 23e97e2:	9b03      	ldr	r3, [sp, #12]
 23e97e4:	3201      	adds	r2, #1
 23e97e6:	9206      	str	r2, [sp, #24]
 23e97e8:	449b      	add	fp, r3
 23e97ea:	e671      	b.n	23e94d0 <arm_nn_softmax_common_s8+0x1c>
            max = MAX(max, input[col]);
 23e97ec:	9905      	ldr	r1, [sp, #20]
 23e97ee:	9802      	ldr	r0, [sp, #8]
 23e97f0:	5689      	ldrsb	r1, [r1, r2]
        for (col = 1; col < row_size; ++col)
 23e97f2:	3201      	adds	r2, #1
            max = MAX(max, input[col]);
 23e97f4:	4288      	cmp	r0, r1
 23e97f6:	bfb8      	it	lt
 23e97f8:	4608      	movlt	r0, r1
 23e97fa:	9002      	str	r0, [sp, #8]
        for (col = 1; col < row_size; ++col)
 23e97fc:	e677      	b.n	23e94ee <arm_nn_softmax_common_s8+0x3a>
 23e97fe:	bf00      	nop
 23e9800:	c0000001 	.word	0xc0000001
 23e9804:	c3c3c3c4 	.word	0xc3c3c3c4
            diff = input[col] - max;
 23e9808:	9a05      	ldr	r2, [sp, #20]
 23e980a:	f912 000e 	ldrsb.w	r0, [r2, lr]
 23e980e:	9a02      	ldr	r2, [sp, #8]
 23e9810:	1a80      	subs	r0, r0, r2
            if (diff >= diff_min)
 23e9812:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 23e9814:	4282      	cmp	r2, r0
 23e9816:	f300 8153 	bgt.w	23e9ac0 <arm_nn_softmax_common_s8+0x60c>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 23e981a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
        mult = 1 - mult;
 23e981c:	9b01      	ldr	r3, [sp, #4]
 23e981e:	4090      	lsls	r0, r2
    if ((m1 < 0) ^ (m2 < 0))
 23e9820:	0fc2      	lsrs	r2, r0, #31
        mult = 1 - mult;
 23e9822:	ebb2 7fd3 	cmp.w	r2, r3, lsr #31
 23e9826:	bf0b      	itete	eq
 23e9828:	f04f 4180 	moveq.w	r1, #1073741824	; 0x40000000
 23e982c:	4641      	movne	r1, r8
 23e982e:	2200      	moveq	r2, #0
 23e9830:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23e9834:	fbc0 1203 	smlal	r1, r2, r0, r3
 23e9838:	2a00      	cmp	r2, #0
 23e983a:	4614      	mov	r4, r2
 23e983c:	da04      	bge.n	23e9848 <arm_nn_softmax_common_s8+0x394>
 23e983e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 23e9842:	1889      	adds	r1, r1, r2
 23e9844:	f144 0400 	adc.w	r4, r4, #0
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 23e9848:	9b01      	ldr	r3, [sp, #4]
    result = (int32_t)(mult / (1ll << 31));
 23e984a:	0fca      	lsrs	r2, r1, #31
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 23e984c:	4298      	cmp	r0, r3
    result = (int32_t)(mult / (1ll << 31));
 23e984e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 23e9852:	d104      	bne.n	23e985e <arm_nn_softmax_common_s8+0x3aa>
        result = NN_Q31_MAX;
 23e9854:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23e9858:	bf08      	it	eq
 23e985a:	f06f 4200 	mvneq.w	r2, #2147483648	; 0x80000000
    mult = mult + (q63_t)m1 * m2;
 23e985e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23e9862:	2400      	movs	r4, #0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 23e9864:	f042 4c7f 	orr.w	ip, r2, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
 23e9868:	ebac 0602 	sub.w	r6, ip, r2
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 23e986c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 23e9870:	f10c 5c80 	add.w	ip, ip, #268435456	; 0x10000000
    result = (int32_t)(mult / (1ll << 31));
 23e9874:	fbcc 140c 	smlal	r1, r4, ip, ip
 23e9878:	2c00      	cmp	r4, #0
    mult = mult + (q63_t)m1 * m2;
 23e987a:	ea4f 77ec 	mov.w	r7, ip, asr #31
    result = (int32_t)(mult / (1ll << 31));
 23e987e:	da04      	bge.n	23e988a <arm_nn_softmax_common_s8+0x3d6>
 23e9880:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23e9884:	1809      	adds	r1, r1, r0
 23e9886:	f144 0400 	adc.w	r4, r4, #0
 23e988a:	0fc9      	lsrs	r1, r1, #31
 23e988c:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23e9890:	fba1 0901 	umull	r0, r9, r1, r1
    result = (int32_t)(mult / (1ll << 31));
 23e9894:	17e4      	asrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 23e9896:	fb01 fa04 	mul.w	sl, r1, r4
 23e989a:	f110 4080 	adds.w	r0, r0, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23e989e:	eb49 094a 	adc.w	r9, r9, sl, lsl #1
 23e98a2:	f1b9 0f00 	cmp.w	r9, #0
 23e98a6:	da05      	bge.n	23e98b4 <arm_nn_softmax_common_s8+0x400>
 23e98a8:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 23e98ac:	eb10 000a 	adds.w	r0, r0, sl
 23e98b0:	f149 0900 	adc.w	r9, r9, #0
 23e98b4:	0fc0      	lsrs	r0, r0, #31
 23e98b6:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23e98ba:	f000 0903 	and.w	r9, r0, #3
        threshold++;
 23e98be:	1080      	asrs	r0, r0, #2
 23e98c0:	bf54      	ite	pl
 23e98c2:	f04f 0a01 	movpl.w	sl, #1
 23e98c6:	f04f 0a02 	movmi.w	sl, #2
    if (remainder > threshold)
 23e98ca:	45d1      	cmp	r9, sl
    if ((m1 < 0) ^ (m2 < 0))
 23e98cc:	ea4f 79d1 	mov.w	r9, r1, lsr #31
        result++;
 23e98d0:	bfc8      	it	gt
 23e98d2:	3001      	addgt	r0, #1
        mult = 1 - mult;
 23e98d4:	ebb9 7fdc 	cmp.w	r9, ip, lsr #31
 23e98d8:	bf0b      	itete	eq
 23e98da:	f04f 4980 	moveq.w	r9, #1073741824	; 0x40000000
 23e98de:	46c1      	movne	r9, r8
 23e98e0:	f04f 0a00 	moveq.w	sl, #0
 23e98e4:	f04f 3aff 	movne.w	sl, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23e98e8:	fb0c f404 	mul.w	r4, ip, r4
 23e98ec:	fb01 4407 	mla	r4, r1, r7, r4
 23e98f0:	fbac 7301 	umull	r7, r3, ip, r1
 23e98f4:	eb17 0709 	adds.w	r7, r7, r9
 23e98f8:	441c      	add	r4, r3
    result = (int32_t)(mult / (1ll << 31));
 23e98fa:	eb44 040a 	adc.w	r4, r4, sl
 23e98fe:	2c00      	cmp	r4, #0
 23e9900:	da05      	bge.n	23e990e <arm_nn_softmax_common_s8+0x45a>
 23e9902:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 23e9906:	eb17 0709 	adds.w	r7, r7, r9
 23e990a:	f144 0400 	adc.w	r4, r4, #0
 23e990e:	0fff      	lsrs	r7, r7, #31
 23e9910:	ea47 0744 	orr.w	r7, r7, r4, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23e9914:	4438      	add	r0, r7
        mult = 1 - mult;
 23e9916:	2800      	cmp	r0, #0
 23e9918:	bfab      	itete	ge
 23e991a:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
 23e991e:	4644      	movlt	r4, r8
 23e9920:	2700      	movge	r7, #0
 23e9922:	f04f 37ff 	movlt.w	r7, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23e9926:	4b6a      	ldr	r3, [pc, #424]	; (23e9ad0 <arm_nn_softmax_common_s8+0x61c>)
 23e9928:	fbc0 4703 	smlal	r4, r7, r0, r3
 23e992c:	2f00      	cmp	r7, #0
 23e992e:	da04      	bge.n	23e993a <arm_nn_softmax_common_s8+0x486>
 23e9930:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23e9934:	1824      	adds	r4, r4, r0
 23e9936:	f147 0700 	adc.w	r7, r7, #0
 23e993a:	0fe4      	lsrs	r4, r4, #31
 23e993c:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23e9940:	440c      	add	r4, r1
    if (result < 0)
 23e9942:	1061      	asrs	r1, r4, #1
 23e9944:	d402      	bmi.n	23e994c <arm_nn_softmax_common_s8+0x498>
    if (remainder > threshold)
 23e9946:	07e0      	lsls	r0, r4, #31
        result++;
 23e9948:	bf48      	it	mi
 23e994a:	3101      	addmi	r1, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23e994c:	448c      	add	ip, r1
        mult = 1 - mult;
 23e994e:	f1bc 0f00 	cmp.w	ip, #0
 23e9952:	bfab      	itete	ge
 23e9954:	f04f 4480 	movge.w	r4, #1073741824	; 0x40000000
 23e9958:	4644      	movlt	r4, r8
 23e995a:	2100      	movge	r1, #0
 23e995c:	f04f 31ff 	movlt.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23e9960:	4b5c      	ldr	r3, [pc, #368]	; (23e9ad4 <arm_nn_softmax_common_s8+0x620>)
 23e9962:	fbcc 4103 	smlal	r4, r1, ip, r3
 23e9966:	2900      	cmp	r1, #0
 23e9968:	da04      	bge.n	23e9974 <arm_nn_softmax_common_s8+0x4c0>
 23e996a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 23e996e:	1824      	adds	r4, r4, r0
 23e9970:	f141 0100 	adc.w	r1, r1, #0
 23e9974:	0fe4      	lsrs	r4, r4, #31
    mult = mult + (q63_t)m1 * m2;
 23e9976:	2000      	movs	r0, #0
    result = (int32_t)(mult / (1ll << 31));
 23e9978:	ea44 0441 	orr.w	r4, r4, r1, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23e997c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 23e9980:	4682      	mov	sl, r0
 23e9982:	468c      	mov	ip, r1
    int32_t result = 1895147668 +
 23e9984:	f104 44e2 	add.w	r4, r4, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
 23e9988:	4b53      	ldr	r3, [pc, #332]	; (23e9ad8 <arm_nn_softmax_common_s8+0x624>)
    int32_t result = 1895147668 +
 23e998a:	f5a4 2425 	sub.w	r4, r4, #675840	; 0xa5000
 23e998e:	f2a4 746c 	subw	r4, r4, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
 23e9992:	fbc4 ca03 	smlal	ip, sl, r4, r3
    SELECT_IF_NON_ZERO(1672461947)
 23e9996:	f3c6 6700 	ubfx	r7, r6, #24, #1
    result = (int32_t)(mult / (1ll << 31));
 23e999a:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 23e999e:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
 23e99a2:	f346 6900 	sbfx	r9, r6, #24, #1
 23e99a6:	3f01      	subs	r7, #1
 23e99a8:	ea09 090c 	and.w	r9, r9, ip
 23e99ac:	403c      	ands	r4, r7
    mult = mult + (q63_t)m1 * m2;
 23e99ae:	468c      	mov	ip, r1
 23e99b0:	4607      	mov	r7, r0
 23e99b2:	4b4a      	ldr	r3, [pc, #296]	; (23e9adc <arm_nn_softmax_common_s8+0x628>)
    SELECT_IF_NON_ZERO(1672461947)
 23e99b4:	ea89 0404 	eor.w	r4, r9, r4
    mult = mult + (q63_t)m1 * m2;
 23e99b8:	fbc4 c703 	smlal	ip, r7, r4, r3
    SELECT_IF_NON_ZERO(1302514674)
 23e99bc:	f3c6 6a40 	ubfx	sl, r6, #25, #1
    result = (int32_t)(mult / (1ll << 31));
 23e99c0:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    SELECT_IF_NON_ZERO(1302514674)
 23e99c4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23e99c8:	ea4c 0c47 	orr.w	ip, ip, r7, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 23e99cc:	ea0a 0a04 	and.w	sl, sl, r4
    mult = mult + (q63_t)m1 * m2;
 23e99d0:	460f      	mov	r7, r1
 23e99d2:	4604      	mov	r4, r0
    SELECT_IF_NON_ZERO(1302514674)
 23e99d4:	f346 6940 	sbfx	r9, r6, #25, #1
    mult = mult + (q63_t)m1 * m2;
 23e99d8:	4b41      	ldr	r3, [pc, #260]	; (23e9ae0 <arm_nn_softmax_common_s8+0x62c>)
    SELECT_IF_NON_ZERO(1302514674)
 23e99da:	ea09 090c 	and.w	r9, r9, ip
 23e99de:	ea89 090a 	eor.w	r9, r9, sl
    mult = mult + (q63_t)m1 * m2;
 23e99e2:	fbc9 7403 	smlal	r7, r4, r9, r3
    SELECT_IF_NON_ZERO(790015084)
 23e99e6:	f3c6 6a80 	ubfx	sl, r6, #26, #1
    result = (int32_t)(mult / (1ll << 31));
 23e99ea:	0fff      	lsrs	r7, r7, #31
 23e99ec:	ea47 0744 	orr.w	r7, r7, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
 23e99f0:	f346 6c80 	sbfx	ip, r6, #26, #1
 23e99f4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23e99f8:	ea0a 0a09 	and.w	sl, sl, r9
 23e99fc:	ea0c 0c07 	and.w	ip, ip, r7
 23e9a00:	ea8c 0c0a 	eor.w	ip, ip, sl
    mult = mult + (q63_t)m1 * m2;
 23e9a04:	460c      	mov	r4, r1
 23e9a06:	4682      	mov	sl, r0
 23e9a08:	4b36      	ldr	r3, [pc, #216]	; (23e9ae4 <arm_nn_softmax_common_s8+0x630>)
    SELECT_IF_NON_ZERO(290630308)
 23e9a0a:	f3c6 69c0 	ubfx	r9, r6, #27, #1
    mult = mult + (q63_t)m1 * m2;
 23e9a0e:	fbcc 4a03 	smlal	r4, sl, ip, r3
    result = (int32_t)(mult / (1ll << 31));
 23e9a12:	0fe4      	lsrs	r4, r4, #31
 23e9a14:	ea44 044a 	orr.w	r4, r4, sl, lsl #1
    SELECT_IF_NON_ZERO(290630308)
 23e9a18:	f346 67c0 	sbfx	r7, r6, #27, #1
 23e9a1c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 23e9a20:	ea09 090c 	and.w	r9, r9, ip
 23e9a24:	4027      	ands	r7, r4
 23e9a26:	ea87 0709 	eor.w	r7, r7, r9
    mult = mult + (q63_t)m1 * m2;
 23e9a2a:	4682      	mov	sl, r0
 23e9a2c:	4689      	mov	r9, r1
 23e9a2e:	4b2e      	ldr	r3, [pc, #184]	; (23e9ae8 <arm_nn_softmax_common_s8+0x634>)
    SELECT_IF_NON_ZERO(39332535)
 23e9a30:	f3c6 7c00 	ubfx	ip, r6, #28, #1
    mult = mult + (q63_t)m1 * m2;
 23e9a34:	fbc7 9a03 	smlal	r9, sl, r7, r3
    result = (int32_t)(mult / (1ll << 31));
 23e9a38:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 23e9a3c:	ea49 094a 	orr.w	r9, r9, sl, lsl #1
    SELECT_IF_NON_ZERO(39332535)
 23e9a40:	f346 7400 	sbfx	r4, r6, #28, #1
 23e9a44:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 23e9a48:	ea0c 0c07 	and.w	ip, ip, r7
 23e9a4c:	ea04 0409 	and.w	r4, r4, r9
 23e9a50:	ea84 040c 	eor.w	r4, r4, ip
    mult = mult + (q63_t)m1 * m2;
 23e9a54:	4682      	mov	sl, r0
 23e9a56:	468c      	mov	ip, r1
 23e9a58:	f8df 9090 	ldr.w	r9, [pc, #144]	; 23e9aec <arm_nn_softmax_common_s8+0x638>
    SELECT_IF_NON_ZERO(720401)
 23e9a5c:	f3c6 7740 	ubfx	r7, r6, #29, #1
 23e9a60:	3f01      	subs	r7, #1
    mult = mult + (q63_t)m1 * m2;
 23e9a62:	fbc4 ca09 	smlal	ip, sl, r4, r9
    SELECT_IF_NON_ZERO(720401)
 23e9a66:	4027      	ands	r7, r4
    mult = mult + (q63_t)m1 * m2;
 23e9a68:	24f2      	movs	r4, #242	; 0xf2
    mask = MASK_IF_ZERO(val);
 23e9a6a:	fab2 f282 	clz	r2, r2
    result = (int32_t)(mult / (1ll << 31));
 23e9a6e:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 23e9a72:	ea4c 0c4a 	orr.w	ip, ip, sl, lsl #1
    SELECT_IF_NON_ZERO(720401)
 23e9a76:	f346 7940 	sbfx	r9, r6, #29, #1
 23e9a7a:	ea09 0c0c 	and.w	ip, r9, ip
 23e9a7e:	ea8c 0c07 	eor.w	ip, ip, r7
    mult = mult + (q63_t)m1 * m2;
 23e9a82:	fbcc 1004 	smlal	r1, r0, ip, r4
    SELECT_IF_NON_ZERO(242)
 23e9a86:	f3c6 7a80 	ubfx	sl, r6, #30, #1
    result = (int32_t)(mult / (1ll << 31));
 23e9a8a:	0fc9      	lsrs	r1, r1, #31
 23e9a8c:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(242)
 23e9a90:	f346 7680 	sbfx	r6, r6, #30, #1
 23e9a94:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23e9a98:	ea0a 0a0c 	and.w	sl, sl, ip
    mask = MASK_IF_ZERO(val);
 23e9a9c:	0952      	lsrs	r2, r2, #5
    SELECT_IF_NON_ZERO(242)
 23e9a9e:	4031      	ands	r1, r6
 23e9aa0:	ea81 010a 	eor.w	r1, r1, sl
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
 23e9aa4:	1e50      	subs	r0, r2, #1
    mask = MASK_IF_ZERO(val);
 23e9aa6:	4252      	negs	r2, r2
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
 23e9aa8:	f022 4a00 	bic.w	sl, r2, #2147483648	; 0x80000000
 23e9aac:	4001      	ands	r1, r0
 23e9aae:	ea81 0a0a 	eor.w	sl, r1, sl
    result = dividend >> exponent;
 23e9ab2:	ea4f 322a 	mov.w	r2, sl, asr #12
    if (remainder > threshold)
 23e9ab6:	f41a 6f00 	tst.w	sl, #2048	; 0x800
        result++;
 23e9aba:	bf18      	it	ne
 23e9abc:	3201      	addne	r2, #1
 23e9abe:	4415      	add	r5, r2
        for (col = 0; col < row_size; ++col)
 23e9ac0:	f10e 0e01 	add.w	lr, lr, #1
 23e9ac4:	e51b      	b.n	23e94fe <arm_nn_softmax_common_s8+0x4a>
    return 32U;
 23e9ac6:	2720      	movs	r7, #32
        const int32_t shifted_scale = ONE_OVER1((sum > 0 ? sum << headroom : 0) - (1 << 31));
 23e9ac8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 23e9acc:	e523      	b.n	23e9516 <arm_nn_softmax_common_s8+0x62>
 23e9ace:	bf00      	nop
 23e9ad0:	2aaaaaab 	.word	0x2aaaaaab
 23e9ad4:	70f5a894 	.word	0x70f5a894
 23e9ad8:	63afbe7b 	.word	0x63afbe7b
 23e9adc:	4da2cbf2 	.word	0x4da2cbf2
 23e9ae0:	2f16ac6c 	.word	0x2f16ac6c
 23e9ae4:	1152aaa4 	.word	0x1152aaa4
 23e9ae8:	02582ab7 	.word	0x02582ab7
 23e9aec:	000afe11 	.word	0x000afe11
                diff = input[col] - max;
 23e9af0:	9b05      	ldr	r3, [sp, #20]
 23e9af2:	f913 000c 	ldrsb.w	r0, [r3, ip]
 23e9af6:	9b02      	ldr	r3, [sp, #8]
 23e9af8:	1ac0      	subs	r0, r0, r3
                if (diff >= diff_min)
 23e9afa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 23e9afc:	4283      	cmp	r3, r0
 23e9afe:	f300 8170 	bgt.w	23e9de2 <arm_nn_softmax_common_s8+0x92e>
                        DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) +
 23e9b02:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 23e9b04:	4098      	lsls	r0, r3
        mult = 1 - mult;
 23e9b06:	9b01      	ldr	r3, [sp, #4]
    if ((m1 < 0) ^ (m2 < 0))
 23e9b08:	0fc2      	lsrs	r2, r0, #31
        mult = 1 - mult;
 23e9b0a:	ebb2 7fd3 	cmp.w	r2, r3, lsr #31
 23e9b0e:	bf0b      	itete	eq
 23e9b10:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 23e9b14:	4672      	movne	r2, lr
 23e9b16:	2100      	moveq	r1, #0
 23e9b18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23e9b1c:	fbc0 2103 	smlal	r2, r1, r0, r3
 23e9b20:	2900      	cmp	r1, #0
 23e9b22:	460c      	mov	r4, r1
 23e9b24:	da04      	bge.n	23e9b30 <arm_nn_softmax_common_s8+0x67c>
 23e9b26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 23e9b2a:	1852      	adds	r2, r2, r1
 23e9b2c:	f144 0400 	adc.w	r4, r4, #0
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 23e9b30:	9b01      	ldr	r3, [sp, #4]
    result = (int32_t)(mult / (1ll << 31));
 23e9b32:	0fd1      	lsrs	r1, r2, #31
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 23e9b34:	4298      	cmp	r0, r3
    result = (int32_t)(mult / (1ll << 31));
 23e9b36:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 23e9b3a:	d104      	bne.n	23e9b46 <arm_nn_softmax_common_s8+0x692>
        result = NN_Q31_MAX;
 23e9b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23e9b40:	bf08      	it	eq
 23e9b42:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    mult = mult + (q63_t)m1 * m2;
 23e9b46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23e9b4a:	2500      	movs	r5, #0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 23e9b4c:	f041 477f 	orr.w	r7, r1, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
 23e9b50:	1a7a      	subs	r2, r7, r1
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 23e9b52:	017f      	lsls	r7, r7, #5
 23e9b54:	f107 5780 	add.w	r7, r7, #268435456	; 0x10000000
    result = (int32_t)(mult / (1ll << 31));
 23e9b58:	fbc7 0507 	smlal	r0, r5, r7, r7
 23e9b5c:	2d00      	cmp	r5, #0
    mult = mult + (q63_t)m1 * m2;
 23e9b5e:	ea4f 76e7 	mov.w	r6, r7, asr #31
    result = (int32_t)(mult / (1ll << 31));
 23e9b62:	da04      	bge.n	23e9b6e <arm_nn_softmax_common_s8+0x6ba>
 23e9b64:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 23e9b68:	1900      	adds	r0, r0, r4
 23e9b6a:	f145 0500 	adc.w	r5, r5, #0
 23e9b6e:	0fc0      	lsrs	r0, r0, #31
 23e9b70:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23e9b74:	fba0 4900 	umull	r4, r9, r0, r0
    result = (int32_t)(mult / (1ll << 31));
 23e9b78:	17ed      	asrs	r5, r5, #31
    mult = mult + (q63_t)m1 * m2;
 23e9b7a:	fb00 fa05 	mul.w	sl, r0, r5
 23e9b7e:	f114 4480 	adds.w	r4, r4, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23e9b82:	eb49 094a 	adc.w	r9, r9, sl, lsl #1
 23e9b86:	f1b9 0f00 	cmp.w	r9, #0
 23e9b8a:	da05      	bge.n	23e9b98 <arm_nn_softmax_common_s8+0x6e4>
 23e9b8c:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 23e9b90:	eb14 040a 	adds.w	r4, r4, sl
 23e9b94:	f149 0900 	adc.w	r9, r9, #0
 23e9b98:	0fe4      	lsrs	r4, r4, #31
 23e9b9a:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23e9b9e:	f004 0903 	and.w	r9, r4, #3
        threshold++;
 23e9ba2:	10a4      	asrs	r4, r4, #2
 23e9ba4:	bf54      	ite	pl
 23e9ba6:	f04f 0a01 	movpl.w	sl, #1
 23e9baa:	f04f 0a02 	movmi.w	sl, #2
    if (remainder > threshold)
 23e9bae:	45d1      	cmp	r9, sl
    if ((m1 < 0) ^ (m2 < 0))
 23e9bb0:	ea4f 79d0 	mov.w	r9, r0, lsr #31
        result++;
 23e9bb4:	bfc8      	it	gt
 23e9bb6:	3401      	addgt	r4, #1
        mult = 1 - mult;
 23e9bb8:	ebb9 7fd7 	cmp.w	r9, r7, lsr #31
 23e9bbc:	bf0b      	itete	eq
 23e9bbe:	f04f 4980 	moveq.w	r9, #1073741824	; 0x40000000
 23e9bc2:	46f1      	movne	r9, lr
 23e9bc4:	f04f 0a00 	moveq.w	sl, #0
 23e9bc8:	f04f 3aff 	movne.w	sl, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23e9bcc:	437d      	muls	r5, r7
 23e9bce:	fb00 5506 	mla	r5, r0, r6, r5
 23e9bd2:	fba7 6300 	umull	r6, r3, r7, r0
 23e9bd6:	eb16 0609 	adds.w	r6, r6, r9
 23e9bda:	441d      	add	r5, r3
    result = (int32_t)(mult / (1ll << 31));
 23e9bdc:	eb45 050a 	adc.w	r5, r5, sl
 23e9be0:	2d00      	cmp	r5, #0
 23e9be2:	da05      	bge.n	23e9bf0 <arm_nn_softmax_common_s8+0x73c>
 23e9be4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 23e9be8:	eb16 0609 	adds.w	r6, r6, r9
 23e9bec:	f145 0500 	adc.w	r5, r5, #0
 23e9bf0:	0ff6      	lsrs	r6, r6, #31
 23e9bf2:	ea46 0645 	orr.w	r6, r6, r5, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23e9bf6:	4434      	add	r4, r6
        mult = 1 - mult;
 23e9bf8:	2c00      	cmp	r4, #0
 23e9bfa:	bfab      	itete	ge
 23e9bfc:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
 23e9c00:	4675      	movlt	r5, lr
 23e9c02:	2600      	movge	r6, #0
 23e9c04:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23e9c08:	4b77      	ldr	r3, [pc, #476]	; (23e9de8 <arm_nn_softmax_common_s8+0x934>)
 23e9c0a:	fbc4 5603 	smlal	r5, r6, r4, r3
 23e9c0e:	2e00      	cmp	r6, #0
 23e9c10:	da04      	bge.n	23e9c1c <arm_nn_softmax_common_s8+0x768>
 23e9c12:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 23e9c16:	192d      	adds	r5, r5, r4
 23e9c18:	f146 0600 	adc.w	r6, r6, #0
 23e9c1c:	0fed      	lsrs	r5, r5, #31
 23e9c1e:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23e9c22:	4405      	add	r5, r0
    if (result < 0)
 23e9c24:	1068      	asrs	r0, r5, #1
 23e9c26:	d402      	bmi.n	23e9c2e <arm_nn_softmax_common_s8+0x77a>
    if (remainder > threshold)
 23e9c28:	07ec      	lsls	r4, r5, #31
        result++;
 23e9c2a:	bf48      	it	mi
 23e9c2c:	3001      	addmi	r0, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23e9c2e:	4407      	add	r7, r0
        mult = 1 - mult;
 23e9c30:	2f00      	cmp	r7, #0
 23e9c32:	bfab      	itete	ge
 23e9c34:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
 23e9c38:	4675      	movlt	r5, lr
 23e9c3a:	2000      	movge	r0, #0
 23e9c3c:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23e9c40:	4b6a      	ldr	r3, [pc, #424]	; (23e9dec <arm_nn_softmax_common_s8+0x938>)
 23e9c42:	fbc7 5003 	smlal	r5, r0, r7, r3
 23e9c46:	2800      	cmp	r0, #0
 23e9c48:	da04      	bge.n	23e9c54 <arm_nn_softmax_common_s8+0x7a0>
 23e9c4a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 23e9c4e:	192d      	adds	r5, r5, r4
 23e9c50:	f140 0000 	adc.w	r0, r0, #0
 23e9c54:	0fed      	lsrs	r5, r5, #31
    mult = mult + (q63_t)m1 * m2;
 23e9c56:	2400      	movs	r4, #0
    result = (int32_t)(mult / (1ll << 31));
 23e9c58:	ea45 0540 	orr.w	r5, r5, r0, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23e9c5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23e9c60:	46a2      	mov	sl, r4
 23e9c62:	4607      	mov	r7, r0
    int32_t result = 1895147668 +
 23e9c64:	f105 45e2 	add.w	r5, r5, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
 23e9c68:	4b61      	ldr	r3, [pc, #388]	; (23e9df0 <arm_nn_softmax_common_s8+0x93c>)
    int32_t result = 1895147668 +
 23e9c6a:	f5a5 2525 	sub.w	r5, r5, #675840	; 0xa5000
 23e9c6e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
 23e9c72:	fbc5 7a03 	smlal	r7, sl, r5, r3
    SELECT_IF_NON_ZERO(1672461947)
 23e9c76:	f3c2 6600 	ubfx	r6, r2, #24, #1
    result = (int32_t)(mult / (1ll << 31));
 23e9c7a:	0fff      	lsrs	r7, r7, #31
 23e9c7c:	ea47 074a 	orr.w	r7, r7, sl, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
 23e9c80:	f342 6900 	sbfx	r9, r2, #24, #1
 23e9c84:	3e01      	subs	r6, #1
 23e9c86:	ea09 0907 	and.w	r9, r9, r7
 23e9c8a:	4035      	ands	r5, r6
    mult = mult + (q63_t)m1 * m2;
 23e9c8c:	4607      	mov	r7, r0
 23e9c8e:	4626      	mov	r6, r4
 23e9c90:	4b58      	ldr	r3, [pc, #352]	; (23e9df4 <arm_nn_softmax_common_s8+0x940>)
    SELECT_IF_NON_ZERO(1672461947)
 23e9c92:	ea89 0505 	eor.w	r5, r9, r5
    mult = mult + (q63_t)m1 * m2;
 23e9c96:	fbc5 7603 	smlal	r7, r6, r5, r3
    SELECT_IF_NON_ZERO(1302514674)
 23e9c9a:	f3c2 6a40 	ubfx	sl, r2, #25, #1
    result = (int32_t)(mult / (1ll << 31));
 23e9c9e:	0fff      	lsrs	r7, r7, #31
    SELECT_IF_NON_ZERO(1302514674)
 23e9ca0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23e9ca4:	ea47 0746 	orr.w	r7, r7, r6, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 23e9ca8:	ea0a 0a05 	and.w	sl, sl, r5
    mult = mult + (q63_t)m1 * m2;
 23e9cac:	4606      	mov	r6, r0
 23e9cae:	4625      	mov	r5, r4
    SELECT_IF_NON_ZERO(1302514674)
 23e9cb0:	f342 6940 	sbfx	r9, r2, #25, #1
    mult = mult + (q63_t)m1 * m2;
 23e9cb4:	4b50      	ldr	r3, [pc, #320]	; (23e9df8 <arm_nn_softmax_common_s8+0x944>)
    SELECT_IF_NON_ZERO(1302514674)
 23e9cb6:	ea09 0907 	and.w	r9, r9, r7
 23e9cba:	ea89 090a 	eor.w	r9, r9, sl
    mult = mult + (q63_t)m1 * m2;
 23e9cbe:	fbc9 6503 	smlal	r6, r5, r9, r3
    SELECT_IF_NON_ZERO(790015084)
 23e9cc2:	f3c2 6a80 	ubfx	sl, r2, #26, #1
    result = (int32_t)(mult / (1ll << 31));
 23e9cc6:	0ff6      	lsrs	r6, r6, #31
 23e9cc8:	ea46 0645 	orr.w	r6, r6, r5, lsl #1
    SELECT_IF_NON_ZERO(790015084)
 23e9ccc:	f342 6780 	sbfx	r7, r2, #26, #1
 23e9cd0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23e9cd4:	ea0a 0a09 	and.w	sl, sl, r9
 23e9cd8:	4037      	ands	r7, r6
 23e9cda:	ea87 070a 	eor.w	r7, r7, sl
    mult = mult + (q63_t)m1 * m2;
 23e9cde:	4605      	mov	r5, r0
 23e9ce0:	46a2      	mov	sl, r4
 23e9ce2:	4b46      	ldr	r3, [pc, #280]	; (23e9dfc <arm_nn_softmax_common_s8+0x948>)
    SELECT_IF_NON_ZERO(290630308)
 23e9ce4:	f3c2 69c0 	ubfx	r9, r2, #27, #1
    mult = mult + (q63_t)m1 * m2;
 23e9ce8:	fbc7 5a03 	smlal	r5, sl, r7, r3
    result = (int32_t)(mult / (1ll << 31));
 23e9cec:	0fed      	lsrs	r5, r5, #31
 23e9cee:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
    SELECT_IF_NON_ZERO(290630308)
 23e9cf2:	f342 66c0 	sbfx	r6, r2, #27, #1
 23e9cf6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 23e9cfa:	ea09 0907 	and.w	r9, r9, r7
 23e9cfe:	402e      	ands	r6, r5
 23e9d00:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
 23e9d04:	46a2      	mov	sl, r4
 23e9d06:	4681      	mov	r9, r0
 23e9d08:	4b3d      	ldr	r3, [pc, #244]	; (23e9e00 <arm_nn_softmax_common_s8+0x94c>)
    SELECT_IF_NON_ZERO(39332535)
 23e9d0a:	f3c2 7700 	ubfx	r7, r2, #28, #1
    mult = mult + (q63_t)m1 * m2;
 23e9d0e:	fbc6 9a03 	smlal	r9, sl, r6, r3
    result = (int32_t)(mult / (1ll << 31));
 23e9d12:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 23e9d16:	ea49 094a 	orr.w	r9, r9, sl, lsl #1
    SELECT_IF_NON_ZERO(39332535)
 23e9d1a:	f342 7500 	sbfx	r5, r2, #28, #1
 23e9d1e:	3f01      	subs	r7, #1
 23e9d20:	4037      	ands	r7, r6
 23e9d22:	ea05 0509 	and.w	r5, r5, r9
 23e9d26:	407d      	eors	r5, r7
    mult = mult + (q63_t)m1 * m2;
 23e9d28:	46a2      	mov	sl, r4
 23e9d2a:	4607      	mov	r7, r0
 23e9d2c:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 23e9e08 <arm_nn_softmax_common_s8+0x954>
    SELECT_IF_NON_ZERO(720401)
 23e9d30:	f3c2 7640 	ubfx	r6, r2, #29, #1
 23e9d34:	3e01      	subs	r6, #1
    mult = mult + (q63_t)m1 * m2;
 23e9d36:	fbc5 7a09 	smlal	r7, sl, r5, r9
    SELECT_IF_NON_ZERO(720401)
 23e9d3a:	402e      	ands	r6, r5
    mult = mult + (q63_t)m1 * m2;
 23e9d3c:	25f2      	movs	r5, #242	; 0xf2
    mask = MASK_IF_ZERO(val);
 23e9d3e:	fab1 f181 	clz	r1, r1
    result = (int32_t)(mult / (1ll << 31));
 23e9d42:	0fff      	lsrs	r7, r7, #31
 23e9d44:	ea47 074a 	orr.w	r7, r7, sl, lsl #1
    SELECT_IF_NON_ZERO(720401)
 23e9d48:	f342 7940 	sbfx	r9, r2, #29, #1
 23e9d4c:	ea09 0707 	and.w	r7, r9, r7
 23e9d50:	4077      	eors	r7, r6
    mult = mult + (q63_t)m1 * m2;
 23e9d52:	fbc7 0405 	smlal	r0, r4, r7, r5
    SELECT_IF_NON_ZERO(242)
 23e9d56:	f3c2 7a80 	ubfx	sl, r2, #30, #1
    result = (int32_t)(mult / (1ll << 31));
 23e9d5a:	0fc0      	lsrs	r0, r0, #31
 23e9d5c:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    SELECT_IF_NON_ZERO(242)
 23e9d60:	f342 7280 	sbfx	r2, r2, #30, #1
 23e9d64:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23e9d68:	4010      	ands	r0, r2
    mask = MASK_IF_ZERO(val);
 23e9d6a:	0949      	lsrs	r1, r1, #5
    SELECT_IF_NON_ZERO(242)
 23e9d6c:	ea0a 0707 	and.w	r7, sl, r7
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
 23e9d70:	1e4c      	subs	r4, r1, #1
    SELECT_IF_NON_ZERO(242)
 23e9d72:	4078      	eors	r0, r7
    mask = MASK_IF_ZERO(val);
 23e9d74:	4249      	negs	r1, r1
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
 23e9d76:	4020      	ands	r0, r4
 23e9d78:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 23e9d7c:	4044      	eors	r4, r0
    result = (int32_t)(mult / (1ll << 31));
 23e9d7e:	9804      	ldr	r0, [sp, #16]
 23e9d80:	e9dd 310e 	ldrd	r3, r1, [sp, #56]	; 0x38
 23e9d84:	fbc0 3104 	smlal	r3, r1, r0, r4
 23e9d88:	2900      	cmp	r1, #0
 23e9d8a:	460d      	mov	r5, r1
 23e9d8c:	461a      	mov	r2, r3
 23e9d8e:	da04      	bge.n	23e9d9a <arm_nn_softmax_common_s8+0x8e6>
 23e9d90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 23e9d94:	185a      	adds	r2, r3, r1
 23e9d96:	f145 0500 	adc.w	r5, r5, #0
    int32_t remainder = remainder_mask & dividend;
 23e9d9a:	9b08      	ldr	r3, [sp, #32]
    result = (int32_t)(mult / (1ll << 31));
 23e9d9c:	0fd2      	lsrs	r2, r2, #31
 23e9d9e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23e9da2:	ea03 0102 	and.w	r1, r3, r2
    q31_t threshold = remainder_mask >> 1;
 23e9da6:	9b07      	ldr	r3, [sp, #28]
 23e9da8:	411a      	asrs	r2, r3
 23e9daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23e9dac:	bf54      	ite	pl
 23e9dae:	4640      	movpl	r0, r8
 23e9db0:	4618      	movmi	r0, r3
    if (remainder > threshold)
 23e9db2:	4281      	cmp	r1, r0
        result++;
 23e9db4:	bfc8      	it	gt
 23e9db6:	3201      	addgt	r2, #1
                    const int32_t res =
 23e9db8:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
                    output_s16[col] = (int16_t)CLAMP(res, (int32_t)NN_Q15_MAX, (int32_t)NN_Q15_MIN);
 23e9dbc:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 23e9dc0:	dd0a      	ble.n	23e9dd8 <arm_nn_softmax_common_s8+0x924>
 23e9dc2:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 23e9dc6:	428a      	cmp	r2, r1
 23e9dc8:	dc08      	bgt.n	23e9ddc <arm_nn_softmax_common_s8+0x928>
 23e9dca:	b212      	sxth	r2, r2
                    output_s16[col] = NN_Q15_MIN;
 23e9dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23e9dce:	f823 201c 	strh.w	r2, [r3, ip, lsl #1]
            for (col = 0; col < row_size; ++col)
 23e9dd2:	f10c 0c01 	add.w	ip, ip, #1
 23e9dd6:	e4ff      	b.n	23e97d8 <arm_nn_softmax_common_s8+0x324>
                    output_s16[col] = (int16_t)CLAMP(res, (int32_t)NN_Q15_MAX, (int32_t)NN_Q15_MIN);
 23e9dd8:	4a0a      	ldr	r2, [pc, #40]	; (23e9e04 <arm_nn_softmax_common_s8+0x950>)
 23e9dda:	e7f7      	b.n	23e9dcc <arm_nn_softmax_common_s8+0x918>
 23e9ddc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 23e9de0:	e7f4      	b.n	23e9dcc <arm_nn_softmax_common_s8+0x918>
                    output_s16[col] = NN_Q15_MIN;
 23e9de2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 23e9de6:	e7f1      	b.n	23e9dcc <arm_nn_softmax_common_s8+0x918>
 23e9de8:	2aaaaaab 	.word	0x2aaaaaab
 23e9dec:	70f5a894 	.word	0x70f5a894
 23e9df0:	63afbe7b 	.word	0x63afbe7b
 23e9df4:	4da2cbf2 	.word	0x4da2cbf2
 23e9df8:	2f16ac6c 	.word	0x2f16ac6c
 23e9dfc:	1152aaa4 	.word	0x1152aaa4
 23e9e00:	02582ab7 	.word	0x02582ab7
 23e9e04:	ffff8000 	.word	0xffff8000
 23e9e08:	000afe11 	.word	0x000afe11
            int8_t *output_s8 = (int8_t *)output + row_idx * row_size;
 23e9e0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
            for (col = 0; col < row_size; ++col)
 23e9e0e:	f04f 0c00 	mov.w	ip, #0
 23e9e12:	445b      	add	r3, fp
 23e9e14:	9309      	str	r3, [sp, #36]	; 0x24
            bits_over_unit = ACCUM_BITS - headroom + 23;
 23e9e16:	f1c7 0323 	rsb	r3, r7, #35	; 0x23
 23e9e1a:	9307      	str	r3, [sp, #28]
            for (col = 0; col < row_size; ++col)
 23e9e1c:	9b04      	ldr	r3, [sp, #16]
        mult = 1 - mult;
 23e9e1e:	f8df e324 	ldr.w	lr, [pc, #804]	; 23ea144 <arm_nn_softmax_common_s8+0xc90>
 23e9e22:	2b00      	cmp	r3, #0
 23e9e24:	bfb3      	iteet	lt
 23e9e26:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 23e9e2a:	2200      	movge	r2, #0
 23e9e2c:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
 23e9e30:	49c4      	ldrlt	r1, [pc, #784]	; (23ea144 <arm_nn_softmax_common_s8+0xc90>)
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e9e32:	9b07      	ldr	r3, [sp, #28]
 23e9e34:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 23e9e38:	2201      	movs	r2, #1
 23e9e3a:	409a      	lsls	r2, r3
 23e9e3c:	1e53      	subs	r3, r2, #1
    q31_t threshold = remainder_mask >> 1;
 23e9e3e:	ea4f 0863 	mov.w	r8, r3, asr #1
    const q31_t remainder_mask = (1 << exponent) - 1;
 23e9e42:	9308      	str	r3, [sp, #32]
        threshold++;
 23e9e44:	f108 0301 	add.w	r3, r8, #1
 23e9e48:	930b      	str	r3, [sp, #44]	; 0x2c
 23e9e4a:	9b03      	ldr	r3, [sp, #12]
 23e9e4c:	459c      	cmp	ip, r3
 23e9e4e:	f6bf acc7 	bge.w	23e97e0 <arm_nn_softmax_common_s8+0x32c>
                diff = input[col] - max;
 23e9e52:	9b05      	ldr	r3, [sp, #20]
 23e9e54:	f913 000c 	ldrsb.w	r0, [r3, ip]
 23e9e58:	9b02      	ldr	r3, [sp, #8]
 23e9e5a:	1ac0      	subs	r0, r0, r3
                if (diff >= diff_min)
 23e9e5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 23e9e5e:	4298      	cmp	r0, r3
 23e9e60:	f2c0 816d 	blt.w	23ea13e <arm_nn_softmax_common_s8+0xc8a>
                        DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) +
 23e9e64:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 23e9e66:	4098      	lsls	r0, r3
        mult = 1 - mult;
 23e9e68:	9b01      	ldr	r3, [sp, #4]
    if ((m1 < 0) ^ (m2 < 0))
 23e9e6a:	0fc2      	lsrs	r2, r0, #31
        mult = 1 - mult;
 23e9e6c:	ebb2 7fd3 	cmp.w	r2, r3, lsr #31
 23e9e70:	bf0b      	itete	eq
 23e9e72:	f04f 4280 	moveq.w	r2, #1073741824	; 0x40000000
 23e9e76:	4672      	movne	r2, lr
 23e9e78:	2100      	moveq	r1, #0
 23e9e7a:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23e9e7e:	fbc0 2103 	smlal	r2, r1, r0, r3
 23e9e82:	2900      	cmp	r1, #0
 23e9e84:	460c      	mov	r4, r1
 23e9e86:	da04      	bge.n	23e9e92 <arm_nn_softmax_common_s8+0x9de>
 23e9e88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 23e9e8c:	1852      	adds	r2, r2, r1
 23e9e8e:	f144 0400 	adc.w	r4, r4, #0
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 23e9e92:	9b01      	ldr	r3, [sp, #4]
    result = (int32_t)(mult / (1ll << 31));
 23e9e94:	0fd1      	lsrs	r1, r2, #31
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 23e9e96:	4298      	cmp	r0, r3
    result = (int32_t)(mult / (1ll << 31));
 23e9e98:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)NN_Q31_MIN))
 23e9e9c:	d104      	bne.n	23e9ea8 <arm_nn_softmax_common_s8+0x9f4>
        result = NN_Q31_MAX;
 23e9e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23e9ea2:	bf08      	it	eq
 23e9ea4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    mult = mult + (q63_t)m1 * m2;
 23e9ea8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23e9eac:	2500      	movs	r5, #0
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 23e9eae:	f041 477f 	orr.w	r7, r1, #4278190080	; 0xff000000
    const int32_t remainder = val_mod_minus_quarter - val;
 23e9eb2:	1a7a      	subs	r2, r7, r1
    const int32_t x = (val_mod_minus_quarter << 5) + (1 << 28);
 23e9eb4:	017f      	lsls	r7, r7, #5
 23e9eb6:	f107 5780 	add.w	r7, r7, #268435456	; 0x10000000
    result = (int32_t)(mult / (1ll << 31));
 23e9eba:	fbc7 0507 	smlal	r0, r5, r7, r7
 23e9ebe:	2d00      	cmp	r5, #0
    mult = mult + (q63_t)m1 * m2;
 23e9ec0:	ea4f 76e7 	mov.w	r6, r7, asr #31
    result = (int32_t)(mult / (1ll << 31));
 23e9ec4:	da04      	bge.n	23e9ed0 <arm_nn_softmax_common_s8+0xa1c>
 23e9ec6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 23e9eca:	1900      	adds	r0, r0, r4
 23e9ecc:	f145 0500 	adc.w	r5, r5, #0
 23e9ed0:	0fc0      	lsrs	r0, r0, #31
 23e9ed2:	ea40 0045 	orr.w	r0, r0, r5, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23e9ed6:	fba0 4900 	umull	r4, r9, r0, r0
    result = (int32_t)(mult / (1ll << 31));
 23e9eda:	17ed      	asrs	r5, r5, #31
    mult = mult + (q63_t)m1 * m2;
 23e9edc:	fb00 fa05 	mul.w	sl, r0, r5
 23e9ee0:	f114 4480 	adds.w	r4, r4, #1073741824	; 0x40000000
    result = (int32_t)(mult / (1ll << 31));
 23e9ee4:	eb49 094a 	adc.w	r9, r9, sl, lsl #1
 23e9ee8:	f1b9 0f00 	cmp.w	r9, #0
 23e9eec:	da05      	bge.n	23e9efa <arm_nn_softmax_common_s8+0xa46>
 23e9eee:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 23e9ef2:	eb14 040a 	adds.w	r4, r4, sl
 23e9ef6:	f149 0900 	adc.w	r9, r9, #0
 23e9efa:	0fe4      	lsrs	r4, r4, #31
 23e9efc:	ea44 0449 	orr.w	r4, r4, r9, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23e9f00:	f004 0903 	and.w	r9, r4, #3
        threshold++;
 23e9f04:	10a4      	asrs	r4, r4, #2
 23e9f06:	bf54      	ite	pl
 23e9f08:	f04f 0a01 	movpl.w	sl, #1
 23e9f0c:	f04f 0a02 	movmi.w	sl, #2
    if (remainder > threshold)
 23e9f10:	45d1      	cmp	r9, sl
    if ((m1 < 0) ^ (m2 < 0))
 23e9f12:	ea4f 79d0 	mov.w	r9, r0, lsr #31
        result++;
 23e9f16:	bfc8      	it	gt
 23e9f18:	3401      	addgt	r4, #1
        mult = 1 - mult;
 23e9f1a:	ebb9 7fd7 	cmp.w	r9, r7, lsr #31
 23e9f1e:	bf0b      	itete	eq
 23e9f20:	f04f 4980 	moveq.w	r9, #1073741824	; 0x40000000
 23e9f24:	46f1      	movne	r9, lr
 23e9f26:	f04f 0a00 	moveq.w	sl, #0
 23e9f2a:	f04f 3aff 	movne.w	sl, #4294967295	; 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 23e9f2e:	437d      	muls	r5, r7
 23e9f30:	fb00 5506 	mla	r5, r0, r6, r5
 23e9f34:	fba7 6300 	umull	r6, r3, r7, r0
 23e9f38:	eb16 0609 	adds.w	r6, r6, r9
 23e9f3c:	441d      	add	r5, r3
    result = (int32_t)(mult / (1ll << 31));
 23e9f3e:	eb45 050a 	adc.w	r5, r5, sl
 23e9f42:	2d00      	cmp	r5, #0
 23e9f44:	da05      	bge.n	23e9f52 <arm_nn_softmax_common_s8+0xa9e>
 23e9f46:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 23e9f4a:	eb16 0609 	adds.w	r6, r6, r9
 23e9f4e:	f145 0500 	adc.w	r5, r5, #0
 23e9f52:	0ff6      	lsrs	r6, r6, #31
 23e9f54:	ea46 0645 	orr.w	r6, r6, r5, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23e9f58:	4434      	add	r4, r6
        mult = 1 - mult;
 23e9f5a:	2c00      	cmp	r4, #0
 23e9f5c:	bfab      	itete	ge
 23e9f5e:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
 23e9f62:	4675      	movlt	r5, lr
 23e9f64:	2600      	movge	r6, #0
 23e9f66:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23e9f6a:	4b77      	ldr	r3, [pc, #476]	; (23ea148 <arm_nn_softmax_common_s8+0xc94>)
 23e9f6c:	fbc4 5603 	smlal	r5, r6, r4, r3
 23e9f70:	2e00      	cmp	r6, #0
 23e9f72:	da04      	bge.n	23e9f7e <arm_nn_softmax_common_s8+0xaca>
 23e9f74:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 23e9f78:	192d      	adds	r5, r5, r4
 23e9f7a:	f146 0600 	adc.w	r6, r6, #0
 23e9f7e:	0fed      	lsrs	r5, r5, #31
 23e9f80:	ea45 0546 	orr.w	r5, r5, r6, lsl #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23e9f84:	4405      	add	r5, r0
    if (result < 0)
 23e9f86:	1068      	asrs	r0, r5, #1
 23e9f88:	d402      	bmi.n	23e9f90 <arm_nn_softmax_common_s8+0xadc>
    if (remainder > threshold)
 23e9f8a:	07eb      	lsls	r3, r5, #31
        result++;
 23e9f8c:	bf48      	it	mi
 23e9f8e:	3001      	addmi	r0, #1
        MUL_SAT(1895147668, x + DIV_POW2(MUL_SAT(DIV_POW2(MUL_SAT(x2, x2), 2) + MUL_SAT(x2, x), 715827883) + x2, 1));
 23e9f90:	4407      	add	r7, r0
        mult = 1 - mult;
 23e9f92:	2f00      	cmp	r7, #0
 23e9f94:	bfab      	itete	ge
 23e9f96:	f04f 4580 	movge.w	r5, #1073741824	; 0x40000000
 23e9f9a:	4675      	movlt	r5, lr
 23e9f9c:	2000      	movge	r0, #0
 23e9f9e:	f04f 30ff 	movlt.w	r0, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23e9fa2:	4b6a      	ldr	r3, [pc, #424]	; (23ea14c <arm_nn_softmax_common_s8+0xc98>)
 23e9fa4:	fbc7 5003 	smlal	r5, r0, r7, r3
 23e9fa8:	2800      	cmp	r0, #0
 23e9faa:	da04      	bge.n	23e9fb6 <arm_nn_softmax_common_s8+0xb02>
 23e9fac:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 23e9fb0:	192d      	adds	r5, r5, r4
 23e9fb2:	f140 0000 	adc.w	r0, r0, #0
 23e9fb6:	0fed      	lsrs	r5, r5, #31
    mult = mult + (q63_t)m1 * m2;
 23e9fb8:	2400      	movs	r4, #0
    result = (int32_t)(mult / (1ll << 31));
 23e9fba:	ea45 0540 	orr.w	r5, r5, r0, lsl #1
    mult = mult + (q63_t)m1 * m2;
 23e9fbe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23e9fc2:	46a2      	mov	sl, r4
 23e9fc4:	4607      	mov	r7, r0
    int32_t result = 1895147668 +
 23e9fc6:	f105 45e2 	add.w	r5, r5, #1895825408	; 0x71000000
    mult = mult + (q63_t)m1 * m2;
 23e9fca:	4b61      	ldr	r3, [pc, #388]	; (23ea150 <arm_nn_softmax_common_s8+0xc9c>)
    int32_t result = 1895147668 +
 23e9fcc:	f5a5 2525 	sub.w	r5, r5, #675840	; 0xa5000
 23e9fd0:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
    mult = mult + (q63_t)m1 * m2;
 23e9fd4:	fbc5 7a03 	smlal	r7, sl, r5, r3
    SELECT_IF_NON_ZERO(1672461947)
 23e9fd8:	f3c2 6600 	ubfx	r6, r2, #24, #1
    result = (int32_t)(mult / (1ll << 31));
 23e9fdc:	0fff      	lsrs	r7, r7, #31
 23e9fde:	ea47 074a 	orr.w	r7, r7, sl, lsl #1
    SELECT_IF_NON_ZERO(1672461947)
 23e9fe2:	f342 6900 	sbfx	r9, r2, #24, #1
 23e9fe6:	3e01      	subs	r6, #1
 23e9fe8:	ea09 0907 	and.w	r9, r9, r7
 23e9fec:	4035      	ands	r5, r6
    mult = mult + (q63_t)m1 * m2;
 23e9fee:	4607      	mov	r7, r0
 23e9ff0:	4626      	mov	r6, r4
 23e9ff2:	4b58      	ldr	r3, [pc, #352]	; (23ea154 <arm_nn_softmax_common_s8+0xca0>)
    SELECT_IF_NON_ZERO(1672461947)
 23e9ff4:	ea89 0505 	eor.w	r5, r9, r5
    mult = mult + (q63_t)m1 * m2;
 23e9ff8:	fbc5 7603 	smlal	r7, r6, r5, r3
    SELECT_IF_NON_ZERO(1302514674)
 23e9ffc:	f3c2 6a40 	ubfx	sl, r2, #25, #1
    result = (int32_t)(mult / (1ll << 31));
 23ea000:	0fff      	lsrs	r7, r7, #31
    SELECT_IF_NON_ZERO(1302514674)
 23ea002:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    result = (int32_t)(mult / (1ll << 31));
 23ea006:	ea47 0746 	orr.w	r7, r7, r6, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 23ea00a:	ea0a 0a05 	and.w	sl, sl, r5
    mult = mult + (q63_t)m1 * m2;
 23ea00e:	4606      	mov	r6, r0
 23ea010:	4625      	mov	r5, r4
    SELECT_IF_NON_ZERO(1302514674)
 23ea012:	f342 6940 	sbfx	r9, r2, #25, #1
    mult = mult + (q63_t)m1 * m2;
 23ea016:	4b50      	ldr	r3, [pc, #320]	; (23ea158 <arm_nn_softmax_common_s8+0xca4>)
    SELECT_IF_NON_ZERO(1302514674)
 23ea018:	ea09 0907 	and.w	r9, r9, r7
 23ea01c:	ea89 090a 	eor.w	r9, r9, sl
    mult = mult + (q63_t)m1 * m2;
 23ea020:	fbc9 6503 	smlal	r6, r5, r9, r3
    SELECT_IF_NON_ZERO(790015084)
 23ea024:	f3c2 6a80 	ubfx	sl, r2, #26, #1
    result = (int32_t)(mult / (1ll << 31));
 23ea028:	0ff6      	lsrs	r6, r6, #31
 23ea02a:	ea46 0645 	orr.w	r6, r6, r5, lsl #1
    SELECT_IF_NON_ZERO(790015084)
 23ea02e:	f342 6780 	sbfx	r7, r2, #26, #1
 23ea032:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23ea036:	ea0a 0a09 	and.w	sl, sl, r9
 23ea03a:	4037      	ands	r7, r6
 23ea03c:	ea87 070a 	eor.w	r7, r7, sl
    mult = mult + (q63_t)m1 * m2;
 23ea040:	4605      	mov	r5, r0
 23ea042:	46a2      	mov	sl, r4
 23ea044:	4b45      	ldr	r3, [pc, #276]	; (23ea15c <arm_nn_softmax_common_s8+0xca8>)
    SELECT_IF_NON_ZERO(290630308)
 23ea046:	f3c2 69c0 	ubfx	r9, r2, #27, #1
    mult = mult + (q63_t)m1 * m2;
 23ea04a:	fbc7 5a03 	smlal	r5, sl, r7, r3
    result = (int32_t)(mult / (1ll << 31));
 23ea04e:	0fed      	lsrs	r5, r5, #31
 23ea050:	ea45 054a 	orr.w	r5, r5, sl, lsl #1
    SELECT_IF_NON_ZERO(290630308)
 23ea054:	f342 66c0 	sbfx	r6, r2, #27, #1
 23ea058:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 23ea05c:	ea09 0907 	and.w	r9, r9, r7
 23ea060:	402e      	ands	r6, r5
 23ea062:	ea86 0609 	eor.w	r6, r6, r9
    mult = mult + (q63_t)m1 * m2;
 23ea066:	46a2      	mov	sl, r4
 23ea068:	4681      	mov	r9, r0
 23ea06a:	4b3d      	ldr	r3, [pc, #244]	; (23ea160 <arm_nn_softmax_common_s8+0xcac>)
    SELECT_IF_NON_ZERO(39332535)
 23ea06c:	f3c2 7700 	ubfx	r7, r2, #28, #1
    mult = mult + (q63_t)m1 * m2;
 23ea070:	fbc6 9a03 	smlal	r9, sl, r6, r3
    result = (int32_t)(mult / (1ll << 31));
 23ea074:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 23ea078:	ea49 094a 	orr.w	r9, r9, sl, lsl #1
    SELECT_IF_NON_ZERO(39332535)
 23ea07c:	f342 7500 	sbfx	r5, r2, #28, #1
 23ea080:	3f01      	subs	r7, #1
 23ea082:	4037      	ands	r7, r6
 23ea084:	ea05 0509 	and.w	r5, r5, r9
 23ea088:	407d      	eors	r5, r7
    mult = mult + (q63_t)m1 * m2;
 23ea08a:	46a2      	mov	sl, r4
 23ea08c:	4607      	mov	r7, r0
 23ea08e:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 23ea164 <arm_nn_softmax_common_s8+0xcb0>
    SELECT_IF_NON_ZERO(720401)
 23ea092:	f3c2 7640 	ubfx	r6, r2, #29, #1
 23ea096:	3e01      	subs	r6, #1
    mult = mult + (q63_t)m1 * m2;
 23ea098:	fbc5 7a09 	smlal	r7, sl, r5, r9
    SELECT_IF_NON_ZERO(720401)
 23ea09c:	402e      	ands	r6, r5
    mult = mult + (q63_t)m1 * m2;
 23ea09e:	25f2      	movs	r5, #242	; 0xf2
    mask = MASK_IF_ZERO(val);
 23ea0a0:	fab1 f181 	clz	r1, r1
    result = (int32_t)(mult / (1ll << 31));
 23ea0a4:	0fff      	lsrs	r7, r7, #31
 23ea0a6:	ea47 074a 	orr.w	r7, r7, sl, lsl #1
    SELECT_IF_NON_ZERO(720401)
 23ea0aa:	f342 7940 	sbfx	r9, r2, #29, #1
 23ea0ae:	ea09 0707 	and.w	r7, r9, r7
 23ea0b2:	4077      	eors	r7, r6
    mult = mult + (q63_t)m1 * m2;
 23ea0b4:	fbc7 0405 	smlal	r0, r4, r7, r5
    SELECT_IF_NON_ZERO(242)
 23ea0b8:	f3c2 7a80 	ubfx	sl, r2, #30, #1
    result = (int32_t)(mult / (1ll << 31));
 23ea0bc:	0fc0      	lsrs	r0, r0, #31
 23ea0be:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    SELECT_IF_NON_ZERO(242)
 23ea0c2:	f342 7280 	sbfx	r2, r2, #30, #1
 23ea0c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23ea0ca:	4010      	ands	r0, r2
    mask = MASK_IF_ZERO(val);
 23ea0cc:	0949      	lsrs	r1, r1, #5
    SELECT_IF_NON_ZERO(242)
 23ea0ce:	ea0a 0707 	and.w	r7, sl, r7
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
 23ea0d2:	1e4c      	subs	r4, r1, #1
    SELECT_IF_NON_ZERO(242)
 23ea0d4:	4078      	eors	r0, r7
    mask = MASK_IF_ZERO(val);
 23ea0d6:	4249      	negs	r1, r1
    return SELECT_USING_MASK(mask, NN_Q31_MAX, result);
 23ea0d8:	4020      	ands	r0, r4
 23ea0da:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 23ea0de:	4044      	eors	r4, r0
    result = (int32_t)(mult / (1ll << 31));
 23ea0e0:	9804      	ldr	r0, [sp, #16]
 23ea0e2:	e9dd 310e 	ldrd	r3, r1, [sp, #56]	; 0x38
 23ea0e6:	fbc0 3104 	smlal	r3, r1, r0, r4
 23ea0ea:	2900      	cmp	r1, #0
 23ea0ec:	460d      	mov	r5, r1
 23ea0ee:	461a      	mov	r2, r3
 23ea0f0:	da04      	bge.n	23ea0fc <arm_nn_softmax_common_s8+0xc48>
 23ea0f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 23ea0f6:	185a      	adds	r2, r3, r1
 23ea0f8:	f145 0500 	adc.w	r5, r5, #0
    int32_t remainder = remainder_mask & dividend;
 23ea0fc:	9b08      	ldr	r3, [sp, #32]
    result = (int32_t)(mult / (1ll << 31));
 23ea0fe:	0fd2      	lsrs	r2, r2, #31
 23ea100:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23ea104:	ea03 0102 	and.w	r1, r3, r2
    q31_t threshold = remainder_mask >> 1;
 23ea108:	9b07      	ldr	r3, [sp, #28]
 23ea10a:	411a      	asrs	r2, r3
 23ea10c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23ea10e:	bf54      	ite	pl
 23ea110:	4640      	movpl	r0, r8
 23ea112:	4618      	movmi	r0, r3
    if (remainder > threshold)
 23ea114:	4281      	cmp	r1, r0
        result++;
 23ea116:	bfc8      	it	gt
 23ea118:	3201      	addgt	r2, #1
                    const int32_t res =
 23ea11a:	3a80      	subs	r2, #128	; 0x80
                    output_s8[col] = (int8_t)CLAMP(res, (int32_t)NN_Q7_MAX, (int32_t)NN_Q7_MIN);
 23ea11c:	f112 0f7f 	cmn.w	r2, #127	; 0x7f
 23ea120:	db08      	blt.n	23ea134 <arm_nn_softmax_common_s8+0xc80>
 23ea122:	2a7e      	cmp	r2, #126	; 0x7e
 23ea124:	dc09      	bgt.n	23ea13a <arm_nn_softmax_common_s8+0xc86>
 23ea126:	b252      	sxtb	r2, r2
                    output_s8[col] = NN_Q7_MIN;
 23ea128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ea12a:	f803 200c 	strb.w	r2, [r3, ip]
            for (col = 0; col < row_size; ++col)
 23ea12e:	f10c 0c01 	add.w	ip, ip, #1
 23ea132:	e68a      	b.n	23e9e4a <arm_nn_softmax_common_s8+0x996>
                    output_s8[col] = (int8_t)CLAMP(res, (int32_t)NN_Q7_MAX, (int32_t)NN_Q7_MIN);
 23ea134:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 23ea138:	e7f6      	b.n	23ea128 <arm_nn_softmax_common_s8+0xc74>
 23ea13a:	227f      	movs	r2, #127	; 0x7f
 23ea13c:	e7f4      	b.n	23ea128 <arm_nn_softmax_common_s8+0xc74>
                    output_s8[col] = NN_Q7_MIN;
 23ea13e:	2280      	movs	r2, #128	; 0x80
 23ea140:	e7f2      	b.n	23ea128 <arm_nn_softmax_common_s8+0xc74>
 23ea142:	bf00      	nop
 23ea144:	c0000001 	.word	0xc0000001
 23ea148:	2aaaaaab 	.word	0x2aaaaaab
 23ea14c:	70f5a894 	.word	0x70f5a894
 23ea150:	63afbe7b 	.word	0x63afbe7b
 23ea154:	4da2cbf2 	.word	0x4da2cbf2
 23ea158:	2f16ac6c 	.word	0x2f16ac6c
 23ea15c:	1152aaa4 	.word	0x1152aaa4
 23ea160:	02582ab7 	.word	0x02582ab7
 23ea164:	000afe11 	.word	0x000afe11

023ea168 <arm_softmax_s16>:
                                    const int32_t row_size,
                                    const int32_t mult,
                                    const int32_t shift,
                                    const cmsis_nn_softmax_lut_s16 *softmax_params,
                                    int16_t *output)
{
 23ea168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ea16c:	b087      	sub	sp, #28
 23ea16e:	e9cd 1303 	strd	r1, r3, [sp, #12]
 23ea172:	e9dd 3c10 	ldrd	r3, ip, [sp, #64]	; 0x40
    int32_t col = 0;
    int32_t row_idx;

    if (softmax_params->exp_lut == NULL || softmax_params->one_by_one_lut == NULL)
 23ea176:	f8dc 1000 	ldr.w	r1, [ip]
 23ea17a:	2900      	cmp	r1, #0
 23ea17c:	f000 80b1 	beq.w	23ea2e2 <arm_softmax_s16+0x17a>
 23ea180:	f8dc 1004 	ldr.w	r1, [ip, #4]
 23ea184:	2900      	cmp	r1, #0
 23ea186:	f000 80ac 	beq.w	23ea2e2 <arm_softmax_s16+0x17a>
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ea18a:	4259      	negs	r1, r3
 23ea18c:	2b00      	cmp	r3, #0
 23ea18e:	bfd4      	ite	le
 23ea190:	468a      	movle	sl, r1
 23ea192:	f04f 0a00 	movgt.w	sl, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 23ea196:	2101      	movs	r1, #1
 23ea198:	fa01 f10a 	lsl.w	r1, r1, sl
 23ea19c:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
    q31_t threshold = remainder_mask >> 1;
 23ea1a0:	ea4f 016b 	mov.w	r1, fp, asr #1
 23ea1a4:	9101      	str	r1, [sp, #4]
        threshold++;
 23ea1a6:	3101      	adds	r1, #1
 23ea1a8:	9102      	str	r1, [sp, #8]
    {
        return ARM_CMSIS_NN_ARG_ERROR;
    }

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 23ea1aa:	2100      	movs	r1, #0

        for (col = 0; col < row_size; ++col)
        {
            diff = input[col] - max;
            const int32_t scaled_diff = arm_nn_requantize(diff, mult, shift);
            const int32_t symmetric_scaled_diff = scaled_diff + NN_Q15_MAX;
 23ea1ac:	f647 79ff 	movw	r9, #32767	; 0x7fff
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ea1b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
            int32_t result = (cached_exp_results[col] * one_by_one_result) >> right_shift;
            result = (result + 1) >> 1; // Last shift position and insert round
            output[col] = (int16_t)result;
        }

        output += row_size;
 23ea1b4:	ea4f 0842 	mov.w	r8, r2, lsl #1
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 23ea1b8:	9100      	str	r1, [sp, #0]
 23ea1ba:	9305      	str	r3, [sp, #20]
 23ea1bc:	9b03      	ldr	r3, [sp, #12]
 23ea1be:	9900      	ldr	r1, [sp, #0]
 23ea1c0:	428b      	cmp	r3, r1
 23ea1c2:	dc03      	bgt.n	23ea1cc <arm_softmax_s16+0x64>
 23ea1c4:	2000      	movs	r0, #0
        input += row_size;
    }

    return ARM_CMSIS_NN_SUCCESS;
}
 23ea1c6:	b007      	add	sp, #28
 23ea1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (col = 1; col < row_size; ++col)
 23ea1cc:	2301      	movs	r3, #1
        int16_t max = *input;
 23ea1ce:	f9b0 e000 	ldrsh.w	lr, [r0]
        for (col = 1; col < row_size; ++col)
 23ea1d2:	429a      	cmp	r2, r3
 23ea1d4:	dc33      	bgt.n	23ea23e <arm_softmax_s16+0xd6>
        int32_t sum = 0;
 23ea1d6:	2100      	movs	r1, #0
        for (col = 0; col < row_size; ++col)
 23ea1d8:	460e      	mov	r6, r1
 23ea1da:	42b2      	cmp	r2, r6
 23ea1dc:	dc36      	bgt.n	23ea24c <arm_softmax_s16+0xe4>
  return __builtin_clz(value);
 23ea1de:	fab1 f381 	clz	r3, r1
        const int32_t shifted_sum = (((sum) << (headroom - 1)) + (1 << 13)) >> 14;
 23ea1e2:	1e5c      	subs	r4, r3, #1
 23ea1e4:	40a1      	lsls	r1, r4
 23ea1e6:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 23ea1ea:	1389      	asrs	r1, r1, #14
        const int16_t symmetric_shifted_sum = shifted_sum - 98304;
 23ea1ec:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
        const int16_t index = (256 + (symmetric_shifted_sum >> 7));
 23ea1f0:	f341 14c8 	sbfx	r4, r1, #7, #9
 23ea1f4:	b2a4      	uxth	r4, r4
        const int16_t base = softmax_params->one_by_one_lut[index];
 23ea1f6:	f8dc 6004 	ldr.w	r6, [ip, #4]
        const int16_t index = (256 + (symmetric_shifted_sum >> 7));
 23ea1fa:	f504 7580 	add.w	r5, r4, #256	; 0x100
        const int16_t slope = softmax_params->one_by_one_lut[index + 1] - softmax_params->one_by_one_lut[index];
 23ea1fe:	f204 1401 	addw	r4, r4, #257	; 0x101
        const int16_t base = softmax_params->one_by_one_lut[index];
 23ea202:	b2ad      	uxth	r5, r5
        const int16_t slope = softmax_params->one_by_one_lut[index + 1] - softmax_params->one_by_one_lut[index];
 23ea204:	b2a4      	uxth	r4, r4
 23ea206:	f836 5015 	ldrh.w	r5, [r6, r5, lsl #1]
 23ea20a:	f836 4014 	ldrh.w	r4, [r6, r4, lsl #1]
        const int16_t delta = (slope * offset + 64) >> 7;
 23ea20e:	2640      	movs	r6, #64	; 0x40
        const int16_t slope = softmax_params->one_by_one_lut[index + 1] - softmax_params->one_by_one_lut[index];
 23ea210:	1b64      	subs	r4, r4, r5
        const int16_t offset = symmetric_shifted_sum & 0x7f;
 23ea212:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        const int16_t delta = (slope * offset + 64) >> 7;
 23ea216:	fb14 6101 	smlabb	r1, r4, r1, r6
 23ea21a:	9c12      	ldr	r4, [sp, #72]	; 0x48
        const int16_t one_by_one_result = (base + delta);
 23ea21c:	eb05 11e1 	add.w	r1, r5, r1, asr #7
 23ea220:	1ea5      	subs	r5, r4, #2
        for (col = 0; col < row_size; ++col)
 23ea222:	2400      	movs	r4, #0
        const int16_t one_by_one_result = (base + delta);
 23ea224:	b209      	sxth	r1, r1
            int32_t result = (cached_exp_results[col] * one_by_one_result) >> right_shift;
 23ea226:	f1c3 061e 	rsb	r6, r3, #30
        for (col = 0; col < row_size; ++col)
 23ea22a:	42a2      	cmp	r2, r4
 23ea22c:	dc4f      	bgt.n	23ea2ce <arm_softmax_s16+0x166>
        output += row_size;
 23ea22e:	9b12      	ldr	r3, [sp, #72]	; 0x48
        input += row_size;
 23ea230:	4440      	add	r0, r8
        output += row_size;
 23ea232:	4443      	add	r3, r8
 23ea234:	9312      	str	r3, [sp, #72]	; 0x48
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 23ea236:	9b00      	ldr	r3, [sp, #0]
 23ea238:	3301      	adds	r3, #1
 23ea23a:	9300      	str	r3, [sp, #0]
 23ea23c:	e7be      	b.n	23ea1bc <arm_softmax_s16+0x54>
            max = MAX(max, input[col]);
 23ea23e:	f930 1013 	ldrsh.w	r1, [r0, r3, lsl #1]
        for (col = 1; col < row_size; ++col)
 23ea242:	3301      	adds	r3, #1
            max = MAX(max, input[col]);
 23ea244:	458e      	cmp	lr, r1
 23ea246:	bfb8      	it	lt
 23ea248:	468e      	movlt	lr, r1
        for (col = 1; col < row_size; ++col)
 23ea24a:	e7c2      	b.n	23ea1d2 <arm_softmax_s16+0x6a>
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ea24c:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 23ea250:	2400      	movs	r4, #0
            diff = input[col] - max;
 23ea252:	f930 5016 	ldrsh.w	r5, [r0, r6, lsl #1]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 23ea256:	9b05      	ldr	r3, [sp, #20]
 23ea258:	eba5 050e 	sub.w	r5, r5, lr
 23ea25c:	409d      	lsls	r5, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 23ea25e:	9b04      	ldr	r3, [sp, #16]
 23ea260:	fbc5 7403 	smlal	r7, r4, r5, r3
    q31_t threshold = remainder_mask >> 1;
 23ea264:	9d02      	ldr	r5, [sp, #8]
    result = (int32_t)(mult.long_long >> 31);
 23ea266:	0ffb      	lsrs	r3, r7, #31
    q31_t threshold = remainder_mask >> 1;
 23ea268:	462f      	mov	r7, r5
    result = (int32_t)(mult.long_long >> 31);
 23ea26a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    int32_t remainder = remainder_mask & dividend;
 23ea26e:	ea03 040b 	and.w	r4, r3, fp
    q31_t threshold = remainder_mask >> 1;
 23ea272:	fa53 f30a 	asrs.w	r3, r3, sl
 23ea276:	9d01      	ldr	r5, [sp, #4]
 23ea278:	bf48      	it	mi
 23ea27a:	463d      	movmi	r5, r7
    if (remainder > threshold)
 23ea27c:	42ac      	cmp	r4, r5
        result++;
 23ea27e:	bfc8      	it	gt
 23ea280:	3301      	addgt	r3, #1
            const int16_t saturated_symmetric_scaled_diff = MIN(MAX(symmetric_scaled_diff, NN_Q15_MIN), NN_Q15_MAX);
 23ea282:	4c19      	ldr	r4, [pc, #100]	; (23ea2e8 <arm_softmax_s16+0x180>)
            const int32_t symmetric_scaled_diff = scaled_diff + NN_Q15_MAX;
 23ea284:	444b      	add	r3, r9
            const int16_t saturated_symmetric_scaled_diff = MIN(MAX(symmetric_scaled_diff, NN_Q15_MIN), NN_Q15_MAX);
 23ea286:	42a3      	cmp	r3, r4
 23ea288:	bfb8      	it	lt
 23ea28a:	4623      	movlt	r3, r4
 23ea28c:	454b      	cmp	r3, r9
 23ea28e:	bfa8      	it	ge
 23ea290:	464b      	movge	r3, r9
            const int16_t index = (256 + (saturated_symmetric_scaled_diff >> 7));
 23ea292:	f343 14c8 	sbfx	r4, r3, #7, #9
 23ea296:	b2a4      	uxth	r4, r4
            const int16_t slope = softmax_params->exp_lut[index + 1] - softmax_params->exp_lut[index];
 23ea298:	f8dc 7000 	ldr.w	r7, [ip]
            const int16_t index = (256 + (saturated_symmetric_scaled_diff >> 7));
 23ea29c:	f504 7580 	add.w	r5, r4, #256	; 0x100
            const int16_t slope = softmax_params->exp_lut[index + 1] - softmax_params->exp_lut[index];
 23ea2a0:	f204 1401 	addw	r4, r4, #257	; 0x101
            const int16_t base = softmax_params->exp_lut[index];
 23ea2a4:	b2ad      	uxth	r5, r5
            const int16_t slope = softmax_params->exp_lut[index + 1] - softmax_params->exp_lut[index];
 23ea2a6:	b2a4      	uxth	r4, r4
 23ea2a8:	f837 5015 	ldrh.w	r5, [r7, r5, lsl #1]
 23ea2ac:	f837 4014 	ldrh.w	r4, [r7, r4, lsl #1]
            const int16_t delta = (slope * offset + 64) >> 7;
 23ea2b0:	2740      	movs	r7, #64	; 0x40
            const int16_t slope = softmax_params->exp_lut[index + 1] - softmax_params->exp_lut[index];
 23ea2b2:	1b64      	subs	r4, r4, r5
            const int16_t offset = saturated_symmetric_scaled_diff & 0x7f;
 23ea2b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
            const int16_t delta = (slope * offset + 64) >> 7;
 23ea2b8:	fb14 7303 	smlabb	r3, r4, r3, r7
            cached_exp_results[col] = result;
 23ea2bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
            const int16_t result = (base + delta);
 23ea2be:	eb05 13e3 	add.w	r3, r5, r3, asr #7
 23ea2c2:	b21b      	sxth	r3, r3
            cached_exp_results[col] = result;
 23ea2c4:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
            sum += cached_exp_results[col];
 23ea2c8:	4419      	add	r1, r3
        for (col = 0; col < row_size; ++col)
 23ea2ca:	3601      	adds	r6, #1
 23ea2cc:	e785      	b.n	23ea1da <arm_softmax_s16+0x72>
            int32_t result = (cached_exp_results[col] * one_by_one_result) >> right_shift;
 23ea2ce:	f835 3f02 	ldrh.w	r3, [r5, #2]!
        for (col = 0; col < row_size; ++col)
 23ea2d2:	3401      	adds	r4, #1
            int32_t result = (cached_exp_results[col] * one_by_one_result) >> right_shift;
 23ea2d4:	fb13 f301 	smulbb	r3, r3, r1
 23ea2d8:	4133      	asrs	r3, r6
            result = (result + 1) >> 1; // Last shift position and insert round
 23ea2da:	3301      	adds	r3, #1
 23ea2dc:	105b      	asrs	r3, r3, #1
            output[col] = (int16_t)result;
 23ea2de:	802b      	strh	r3, [r5, #0]
        for (col = 0; col < row_size; ++col)
 23ea2e0:	e7a3      	b.n	23ea22a <arm_softmax_s16+0xc2>
        return ARM_CMSIS_NN_ARG_ERROR;
 23ea2e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ea2e6:	e76e      	b.n	23ea1c6 <arm_softmax_s16+0x5e>
 23ea2e8:	ffff8000 	.word	0xffff8000

023ea2ec <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 23ea2ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}

        input += row_size;
        output += row_size;
    }
#else
    arm_nn_softmax_common_s8(input, num_rows, row_size, mult, shift, diff_min, false, (void *)output);
 23ea2ee:	9c08      	ldr	r4, [sp, #32]
 23ea2f0:	9403      	str	r4, [sp, #12]
 23ea2f2:	2400      	movs	r4, #0
 23ea2f4:	9402      	str	r4, [sp, #8]
 23ea2f6:	9c07      	ldr	r4, [sp, #28]
 23ea2f8:	9401      	str	r4, [sp, #4]
 23ea2fa:	9c06      	ldr	r4, [sp, #24]
 23ea2fc:	9400      	str	r4, [sp, #0]
 23ea2fe:	f7ff f8d9 	bl	23e94b4 <arm_nn_softmax_common_s8>
#endif
}
 23ea302:	b004      	add	sp, #16
 23ea304:	bd10      	pop	{r4, pc}

023ea306 <arm_softmax_s8_s16>:
                        const int32_t row_size,
                        const int32_t mult,
                        const int32_t shift,
                        const int32_t diff_min,
                        int16_t *output)
{
 23ea306:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    arm_nn_softmax_common_s8(input, num_rows, row_size, mult, shift, diff_min, true, (void *)output);
 23ea308:	9c08      	ldr	r4, [sp, #32]
 23ea30a:	9403      	str	r4, [sp, #12]
 23ea30c:	2401      	movs	r4, #1
 23ea30e:	9402      	str	r4, [sp, #8]
 23ea310:	9c07      	ldr	r4, [sp, #28]
 23ea312:	9401      	str	r4, [sp, #4]
 23ea314:	9c06      	ldr	r4, [sp, #24]
 23ea316:	9400      	str	r4, [sp, #0]
 23ea318:	f7ff f8cc 	bl	23e94b4 <arm_nn_softmax_common_s8>
}
 23ea31c:	b004      	add	sp, #16
 23ea31e:	bd10      	pop	{r4, pc}

023ea320 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 23ea320:	4770      	bx	lr

023ea322 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23ea322:	4770      	bx	lr

023ea324 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  // WARNING: This API is deprecated, GetDelegateCreators is preferred.
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
    return {};
 23ea324:	2200      	movs	r2, #0
 23ea326:	e9c0 2200 	strd	r2, r2, [r0]
 23ea32a:	6082      	str	r2, [r0, #8]
  }
 23ea32c:	4770      	bx	lr

023ea32e <_ZNK6tflite10OpResolver19GetDelegateCreatorsEv>:
  // addition to the standard TfLiteRegistration lookup for graph resolution.
  //
  // Note that this method is not used (will not be called) if you are using
  // TF Lite in Google Play Services; the GetOpaqueDelegateCreators method
  // (see below) is used for that case.
  virtual TfLiteDelegateCreators GetDelegateCreators() const { return {}; }
 23ea32e:	2200      	movs	r2, #0
 23ea330:	e9c0 2200 	strd	r2, r2, [r0]
 23ea334:	6082      	str	r2, [r0, #8]
 23ea336:	4770      	bx	lr

023ea338 <_ZNK6tflite10OpResolver25GetOpaqueDelegateCreatorsEv>:
  // Google Play Services; if you are using regular TF Lite, GetDelegateCreators
  // (see above) is used instead.
  //
  // WARNING: Experimental interface, subject to change.
  virtual TfLiteOpaqueDelegateCreators GetOpaqueDelegateCreators() const {
    return {};
 23ea338:	2200      	movs	r2, #0
 23ea33a:	e9c0 2200 	strd	r2, r2, [r0]
 23ea33e:	6082      	str	r2, [r0, #8]
  }
 23ea340:	4770      	bx	lr

023ea342 <_ZNK6tflite10OpResolver24MayContainUserDefinedOpsEv>:
  /// user-defined ops can't be guaranteed.
  ///
  /// Note that "user-defined" ops are not the same as "custom" ops;
  /// BuiltinOpResolver may support certain "custom" ops, in addition to
  /// "builtin" ops, and may not support all of the "builtin" op enum values.
  virtual bool MayContainUserDefinedOps() const { return true; }
 23ea342:	2001      	movs	r0, #1
 23ea344:	4770      	bx	lr

023ea346 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
                                   int version) const final {
    return FindOp(op);
 23ea346:	6803      	ldr	r3, [r0, #0]
 23ea348:	6a1b      	ldr	r3, [r3, #32]
 23ea34a:	4718      	bx	r3

023ea34c <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:
  }

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
    return FindOp(op);
 23ea34c:	6803      	ldr	r3, [r0, #0]
 23ea34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23ea350:	4718      	bx	r3

023ea352 <__tcf_3>:
        }
        tflite_first_run = false;
    }

#ifdef EI_TFLITE_RESOLVER
    EI_TFLITE_RESOLVER
 23ea352:	4770      	bx	lr

023ea354 <_ZN6tflite22MicroMutableOpResolverILj2EED1Ev>:

namespace tflite {
TfLiteRegistration* Register_DETECTION_POSTPROCESS();

template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 23ea354:	4770      	bx	lr
	...

023ea358 <_Z20raw_feature_get_datajjPf>:
 * @param[in]  length   The length
 * @param      out_ptr  The out pointer
 *
 * @return     0
 */
int raw_feature_get_data(size_t offset, size_t length, float *out_ptr) {
 23ea358:	b508      	push	{r3, lr}
 23ea35a:	4613      	mov	r3, r2
    memcpy(out_ptr, features + offset, length * sizeof(float));
 23ea35c:	008a      	lsls	r2, r1, #2
 23ea35e:	4904      	ldr	r1, [pc, #16]	; (23ea370 <_Z20raw_feature_get_datajjPf+0x18>)
 23ea360:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 23ea364:	4618      	mov	r0, r3
 23ea366:	f00e fcb5 	bl	23f8cd4 <memcpy>
    return 0;
}
 23ea36a:	2000      	movs	r0, #0
 23ea36c:	bd08      	pop	{r3, pc}
 23ea36e:	bf00      	nop
 23ea370:	1007a6d4 	.word	0x1007a6d4

023ea374 <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpEPKc>:
      }
    }
    return nullptr;
  }

  const TfLiteRegistration* FindOp(const char* op) const override {
 23ea374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ea378:	4604      	mov	r4, r0
 23ea37a:	4688      	mov	r8, r1
 23ea37c:	4605      	mov	r5, r0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 23ea37e:	2600      	movs	r6, #0
 23ea380:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 23ea382:	42b7      	cmp	r7, r6
 23ea384:	d010      	beq.n	23ea3a8 <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpEPKc+0x34>
      const TfLiteRegistration& registration = registrations_[i];
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 23ea386:	69ab      	ldr	r3, [r5, #24]
 23ea388:	2b20      	cmp	r3, #32
 23ea38a:	d10a      	bne.n	23ea3a2 <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpEPKc+0x2e>
          (strcmp(registration.custom_name, op) == 0)) {
 23ea38c:	4641      	mov	r1, r8
 23ea38e:	69e8      	ldr	r0, [r5, #28]
 23ea390:	f7fe f8c8 	bl	23e8524 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 23ea394:	b928      	cbnz	r0, 23ea3a2 <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpEPKc+0x2e>
      const TfLiteRegistration& registration = registrations_[i];
 23ea396:	2024      	movs	r0, #36	; 0x24
 23ea398:	fb00 4006 	mla	r0, r0, r6, r4
 23ea39c:	3004      	adds	r0, #4
        return &registration;
      }
    }
    return nullptr;
  }
 23ea39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 23ea3a2:	3601      	adds	r6, #1
 23ea3a4:	3524      	adds	r5, #36	; 0x24
 23ea3a6:	e7ec      	b.n	23ea382 <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpEPKc+0xe>
    return nullptr;
 23ea3a8:	2000      	movs	r0, #0
 23ea3aa:	e7f8      	b.n	23ea39e <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpEPKc+0x2a>
 23ea3ac:	0000      	movs	r0, r0
	...

023ea3b0 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_lowpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 23ea3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ea3b4:	ed2d 8b06 	vpush	{d8-d10}
 23ea3b8:	b093      	sub	sp, #76	; 0x4c
 23ea3ba:	4683      	mov	fp, r0
 23ea3bc:	ed8d 0a10 	vstr	s0, [sp, #64]	; 0x40
 23ea3c0:	edcd 0a11 	vstr	s1, [sp, #68]	; 0x44
        for (size_t row = 0; row < matrix->rows; row++) {
 23ea3c4:	2300      	movs	r3, #0
    {
 23ea3c6:	9105      	str	r1, [sp, #20]
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
        int n_steps = filter_order / 2;
 23ea3c8:	ea4f 0a61 	mov.w	sl, r1, asr #1
        for (size_t row = 0; row < matrix->rows; row++) {
 23ea3cc:	9301      	str	r3, [sp, #4]
 23ea3ce:	9a01      	ldr	r2, [sp, #4]
 23ea3d0:	f8db 3004 	ldr.w	r3, [fp, #4]
 23ea3d4:	4293      	cmp	r3, r2
 23ea3d6:	f240 8162 	bls.w	23ea69e <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x2ee>
            filters::butterworth_lowpass(
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 23ea3da:	f8db 3000 	ldr.w	r3, [fp]
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 23ea3de:	9811      	ldr	r0, [sp, #68]	; 0x44
 23ea3e0:	9306      	str	r3, [sp, #24]
 23ea3e2:	f8db 3008 	ldr.w	r3, [fp, #8]
        // Calculate the filter parameters
        for(int ix = 0; ix < n_steps; ix++) {
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
            A[ix] = a2 / sampling_freq;
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 23ea3e6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 23ea3ea:	9307      	str	r3, [sp, #28]
 23ea3ec:	4353      	muls	r3, r2
 23ea3ee:	9308      	str	r3, [sp, #32]
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 23ea3f0:	f7fd fafa 	bl	23e79e8 <__aeabi_f2d>
 23ea3f4:	a3ae      	add	r3, pc, #696	; (adr r3, 23ea6b0 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x300>)
 23ea3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ea3fa:	f7fd fb4d 	bl	23e7a98 <__aeabi_dmul>
 23ea3fe:	4604      	mov	r4, r0
 23ea400:	9810      	ldr	r0, [sp, #64]	; 0x40
 23ea402:	460d      	mov	r5, r1
 23ea404:	f7fd faf0 	bl	23e79e8 <__aeabi_f2d>
 23ea408:	460b      	mov	r3, r1
 23ea40a:	4602      	mov	r2, r0
 23ea40c:	4629      	mov	r1, r5
 23ea40e:	4620      	mov	r0, r4
 23ea410:	f7fd fc6c 	bl	23e7cec <__aeabi_ddiv>
 23ea414:	ec41 0b10 	vmov	d0, r0, r1
 23ea418:	f00c fd62 	bl	23f6ee0 <tan>
 23ea41c:	ec51 0b10 	vmov	r0, r1, d0
 23ea420:	f7fd fe32 	bl	23e8088 <__aeabi_d2f>
 23ea424:	ee08 0a10 	vmov	s16, r0
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 23ea428:	f7fd fade 	bl	23e79e8 <__aeabi_f2d>
 23ea42c:	ec41 0b1a 	vmov	d10, r0, r1
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 23ea430:	2104      	movs	r1, #4
 23ea432:	4650      	mov	r0, sl
 23ea434:	f005 fe31 	bl	23f009a <_Z9ei_callocjj>
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 23ea438:	2104      	movs	r1, #4
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 23ea43a:	9002      	str	r0, [sp, #8]
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 23ea43c:	4650      	mov	r0, sl
 23ea43e:	f005 fe2c 	bl	23f009a <_Z9ei_callocjj>
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 23ea442:	2104      	movs	r1, #4
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 23ea444:	9003      	str	r0, [sp, #12]
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 23ea446:	4650      	mov	r0, sl
 23ea448:	f005 fe27 	bl	23f009a <_Z9ei_callocjj>
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 23ea44c:	2104      	movs	r1, #4
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 23ea44e:	9004      	str	r0, [sp, #16]
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 23ea450:	4650      	mov	r0, sl
 23ea452:	f005 fe22 	bl	23f009a <_Z9ei_callocjj>
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 23ea456:	2104      	movs	r1, #4
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 23ea458:	9009      	str	r0, [sp, #36]	; 0x24
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 23ea45a:	4650      	mov	r0, sl
 23ea45c:	f005 fe1d 	bl	23f009a <_Z9ei_callocjj>
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 23ea460:	2104      	movs	r1, #4
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 23ea462:	900a      	str	r0, [sp, #40]	; 0x28
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 23ea464:	4650      	mov	r0, sl
 23ea466:	f005 fe18 	bl	23f009a <_Z9ei_callocjj>
 23ea46a:	e9dd 3503 	ldrd	r3, r5, [sp, #12]
 23ea46e:	ee28 8a08 	vmul.f32	s16, s16, s16
        for(int ix = 0; ix < n_steps; ix++) {
 23ea472:	2400      	movs	r4, #0
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 23ea474:	930d      	str	r3, [sp, #52]	; 0x34
 23ea476:	9b02      	ldr	r3, [sp, #8]
 23ea478:	900b      	str	r0, [sp, #44]	; 0x2c
 23ea47a:	930c      	str	r3, [sp, #48]	; 0x30
        for(int ix = 0; ix < n_steps; ix++) {
 23ea47c:	45a2      	cmp	sl, r4
 23ea47e:	dc6f      	bgt.n	23ea560 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x1b0>
 23ea480:	9a08      	ldr	r2, [sp, #32]
 23ea482:	9b06      	ldr	r3, [sp, #24]
 23ea484:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 23ea488:	9b07      	ldr	r3, [sp, #28]
 23ea48a:	4413      	add	r3, r2
 23ea48c:	461e      	mov	r6, r3
 23ea48e:	9b06      	ldr	r3, [sp, #24]
 23ea490:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 23ea494:	9308      	str	r3, [sp, #32]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 23ea496:	9b08      	ldr	r3, [sp, #32]
 23ea498:	4599      	cmp	r9, r3
 23ea49a:	f000 80eb 	beq.w	23ea674 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x2c4>
            dest[sx] = src[sx];

            for (int i = 0; i < n_steps; i++) {
 23ea49e:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 23ea4a2:	2700      	movs	r7, #0
        for (size_t sx = 0; sx < size; sx++) {
 23ea4a4:	9b04      	ldr	r3, [sp, #16]
 23ea4a6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 23ea4aa:	9307      	str	r3, [sp, #28]
 23ea4ac:	9b03      	ldr	r3, [sp, #12]
 23ea4ae:	9e02      	ldr	r6, [sp, #8]
 23ea4b0:	9306      	str	r3, [sp, #24]
            for (int i = 0; i < n_steps; i++) {
 23ea4b2:	45ba      	cmp	sl, r7
 23ea4b4:	f340 80db 	ble.w	23ea66e <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x2be>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 23ea4b8:	9b06      	ldr	r3, [sp, #24]
 23ea4ba:	edd5 6a00 	vldr	s13, [r5]
 23ea4be:	ecb3 7a01 	vldmia	r3!, {s14}
 23ea4c2:	9306      	str	r3, [sp, #24]
 23ea4c4:	9b07      	ldr	r3, [sp, #28]
 23ea4c6:	edd4 7a00 	vldr	s15, [r4]
 23ea4ca:	ecb3 8a01 	vldmia	r3!, {s16}
 23ea4ce:	ee28 8a26 	vmul.f32	s16, s16, s13
 23ea4d2:	eea7 8a27 	vfma.f32	s16, s14, s15
 23ea4d6:	edd9 7a00 	vldr	s15, [r9]
 23ea4da:	ee38 8a27 	vadd.f32	s16, s16, s15
 23ea4de:	ed88 8a00 	vstr	s16, [r8]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
 23ea4e2:	ecf6 7a01 	vldmia	r6!, {s15}
 23ea4e6:	f854 0b04 	ldr.w	r0, [r4], #4
 23ea4ea:	eef0 8a67 	vmov.f32	s17, s15
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 23ea4ee:	9307      	str	r3, [sp, #28]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
 23ea4f0:	f7fd fa7a 	bl	23e79e8 <__aeabi_f2d>
 23ea4f4:	4602      	mov	r2, r0
 23ea4f6:	460b      	mov	r3, r1
 23ea4f8:	f7fd f918 	bl	23e772c <__adddf3>
 23ea4fc:	ec41 0b19 	vmov	d9, r0, r1
 23ea500:	ee18 0a10 	vmov	r0, s16
 23ea504:	f7fd fa70 	bl	23e79e8 <__aeabi_f2d>
 23ea508:	4602      	mov	r2, r0
 23ea50a:	460b      	mov	r3, r1
 23ea50c:	ec51 0b19 	vmov	r0, r1, d9
 23ea510:	f7fd f90c 	bl	23e772c <__adddf3>
 23ea514:	ec41 0b19 	vmov	d9, r0, r1
 23ea518:	f855 0b04 	ldr.w	r0, [r5], #4
 23ea51c:	f7fd fa64 	bl	23e79e8 <__aeabi_f2d>
 23ea520:	4602      	mov	r2, r0
 23ea522:	460b      	mov	r3, r1
 23ea524:	ec51 0b19 	vmov	r0, r1, d9
 23ea528:	f7fd f900 	bl	23e772c <__adddf3>
 23ea52c:	ec41 0b19 	vmov	d9, r0, r1
 23ea530:	ee18 0a90 	vmov	r0, s17
 23ea534:	f7fd fa58 	bl	23e79e8 <__aeabi_f2d>
 23ea538:	460b      	mov	r3, r1
 23ea53a:	4602      	mov	r2, r0
 23ea53c:	ec51 0b19 	vmov	r0, r1, d9
 23ea540:	f7fd faaa 	bl	23e7a98 <__aeabi_dmul>
 23ea544:	f7fd fda0 	bl	23e8088 <__aeabi_d2f>
 23ea548:	f8c9 0000 	str.w	r0, [r9]
                w2[i] = w1[i];
 23ea54c:	f854 3c04 	ldr.w	r3, [r4, #-4]
            for (int i = 0; i < n_steps; i++) {
 23ea550:	3701      	adds	r7, #1
                w2[i] = w1[i];
 23ea552:	f845 3c04 	str.w	r3, [r5, #-4]
                w1[i] = w0[i];
 23ea556:	f858 3b04 	ldr.w	r3, [r8], #4
 23ea55a:	f844 3c04 	str.w	r3, [r4, #-4]
            for (int i = 0; i < n_steps; i++) {
 23ea55e:	e7a8      	b.n	23ea4b2 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x102>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 23ea560:	4620      	mov	r0, r4
 23ea562:	f7fd fa2f 	bl	23e79c4 <__aeabi_i2d>
 23ea566:	4602      	mov	r2, r0
 23ea568:	460b      	mov	r3, r1
 23ea56a:	f7fd f8df 	bl	23e772c <__adddf3>
 23ea56e:	2200      	movs	r2, #0
 23ea570:	4b51      	ldr	r3, [pc, #324]	; (23ea6b8 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x308>)
 23ea572:	f7fd f8db 	bl	23e772c <__adddf3>
 23ea576:	a34e      	add	r3, pc, #312	; (adr r3, 23ea6b0 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x300>)
 23ea578:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ea57c:	f7fd fa8c 	bl	23e7a98 <__aeabi_dmul>
 23ea580:	4606      	mov	r6, r0
 23ea582:	9805      	ldr	r0, [sp, #20]
 23ea584:	460f      	mov	r7, r1
 23ea586:	f7fd fa1d 	bl	23e79c4 <__aeabi_i2d>
 23ea58a:	4602      	mov	r2, r0
 23ea58c:	460b      	mov	r3, r1
 23ea58e:	f7fd f8cd 	bl	23e772c <__adddf3>
 23ea592:	4602      	mov	r2, r0
 23ea594:	460b      	mov	r3, r1
 23ea596:	4630      	mov	r0, r6
 23ea598:	4639      	mov	r1, r7
 23ea59a:	f7fd fba7 	bl	23e7cec <__aeabi_ddiv>
 23ea59e:	ec41 0b10 	vmov	d0, r0, r1
 23ea5a2:	f00c fc49 	bl	23f6e38 <sin>
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 23ea5a6:	ee18 0a10 	vmov	r0, s16
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 23ea5aa:	ec59 8b10 	vmov	r8, r9, d0
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 23ea5ae:	f7fd fa1b 	bl	23e79e8 <__aeabi_f2d>
 23ea5b2:	ec53 2b1a 	vmov	r2, r3, d10
 23ea5b6:	ec41 0b19 	vmov	d9, r0, r1
 23ea5ba:	ec51 0b1a 	vmov	r0, r1, d10
 23ea5be:	f7fd f8b5 	bl	23e772c <__adddf3>
 23ea5c2:	4606      	mov	r6, r0
 23ea5c4:	460f      	mov	r7, r1
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 23ea5c6:	4640      	mov	r0, r8
 23ea5c8:	4649      	mov	r1, r9
 23ea5ca:	f7fd fd5d 	bl	23e8088 <__aeabi_d2f>
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 23ea5ce:	f7fd fa0b 	bl	23e79e8 <__aeabi_f2d>
 23ea5d2:	4602      	mov	r2, r0
 23ea5d4:	460b      	mov	r3, r1
 23ea5d6:	4630      	mov	r0, r6
 23ea5d8:	4639      	mov	r1, r7
 23ea5da:	f7fd fa5d 	bl	23e7a98 <__aeabi_dmul>
 23ea5de:	4602      	mov	r2, r0
 23ea5e0:	460b      	mov	r3, r1
 23ea5e2:	4680      	mov	r8, r0
 23ea5e4:	4689      	mov	r9, r1
 23ea5e6:	ec51 0b19 	vmov	r0, r1, d9
 23ea5ea:	f7fd f89f 	bl	23e772c <__adddf3>
 23ea5ee:	2200      	movs	r2, #0
 23ea5f0:	4b31      	ldr	r3, [pc, #196]	; (23ea6b8 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x308>)
 23ea5f2:	f7fd f89b 	bl	23e772c <__adddf3>
 23ea5f6:	f7fd fd47 	bl	23e8088 <__aeabi_d2f>
 23ea5fa:	ee07 0a10 	vmov	s14, r0
            A[ix] = a2 / sampling_freq;
 23ea5fe:	eec8 7a07 	vdiv.f32	s15, s16, s14
 23ea602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        for(int ix = 0; ix < n_steps; ix++) {
 23ea604:	3401      	adds	r4, #1
            A[ix] = a2 / sampling_freq;
 23ea606:	ece3 7a01 	vstmia	r3!, {s15}
 23ea60a:	930c      	str	r3, [sp, #48]	; 0x30
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 23ea60c:	f7fd f9ec 	bl	23e79e8 <__aeabi_f2d>
 23ea610:	ee78 7ac8 	vsub.f32	s15, s17, s16
 23ea614:	4606      	mov	r6, r0
 23ea616:	ee17 0a90 	vmov	r0, s15
 23ea61a:	460f      	mov	r7, r1
 23ea61c:	f7fd f9e4 	bl	23e79e8 <__aeabi_f2d>
 23ea620:	4602      	mov	r2, r0
 23ea622:	460b      	mov	r3, r1
 23ea624:	f7fd f882 	bl	23e772c <__adddf3>
 23ea628:	4632      	mov	r2, r6
 23ea62a:	463b      	mov	r3, r7
 23ea62c:	f7fd fb5e 	bl	23e7cec <__aeabi_ddiv>
 23ea630:	f7fd fd2a 	bl	23e8088 <__aeabi_d2f>
 23ea634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 23ea636:	4642      	mov	r2, r8
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 23ea638:	f843 0b04 	str.w	r0, [r3], #4
 23ea63c:	930d      	str	r3, [sp, #52]	; 0x34
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 23ea63e:	ec51 0b19 	vmov	r0, r1, d9
 23ea642:	464b      	mov	r3, r9
 23ea644:	f7fd f870 	bl	23e7728 <__aeabi_dsub>
 23ea648:	2200      	movs	r2, #0
 23ea64a:	4b1b      	ldr	r3, [pc, #108]	; (23ea6b8 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x308>)
 23ea64c:	f7fd f86e 	bl	23e772c <__adddf3>
 23ea650:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23ea654:	930f      	str	r3, [sp, #60]	; 0x3c
 23ea656:	900e      	str	r0, [sp, #56]	; 0x38
 23ea658:	4632      	mov	r2, r6
 23ea65a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 23ea65e:	463b      	mov	r3, r7
 23ea660:	f7fd fb44 	bl	23e7cec <__aeabi_ddiv>
 23ea664:	f7fd fd10 	bl	23e8088 <__aeabi_d2f>
 23ea668:	f845 0b04 	str.w	r0, [r5], #4
        for(int ix = 0; ix < n_steps; ix++) {
 23ea66c:	e706      	b.n	23ea47c <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0xcc>
        for (size_t sx = 0; sx < size; sx++) {
 23ea66e:	f109 0904 	add.w	r9, r9, #4
 23ea672:	e710      	b.n	23ea496 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0xe6>
            }
        }

        ei_free(A);
 23ea674:	9802      	ldr	r0, [sp, #8]
 23ea676:	f005 fd12 	bl	23f009e <_Z7ei_freePv>
        ei_free(d1);
 23ea67a:	9803      	ldr	r0, [sp, #12]
 23ea67c:	f005 fd0f 	bl	23f009e <_Z7ei_freePv>
        ei_free(d2);
 23ea680:	9804      	ldr	r0, [sp, #16]
 23ea682:	f005 fd0c 	bl	23f009e <_Z7ei_freePv>
        ei_free(w0);
 23ea686:	9809      	ldr	r0, [sp, #36]	; 0x24
 23ea688:	f005 fd09 	bl	23f009e <_Z7ei_freePv>
        ei_free(w1);
 23ea68c:	980a      	ldr	r0, [sp, #40]	; 0x28
 23ea68e:	f005 fd06 	bl	23f009e <_Z7ei_freePv>
        ei_free(w2);
 23ea692:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23ea694:	f005 fd03 	bl	23f009e <_Z7ei_freePv>
        for (size_t row = 0; row < matrix->rows; row++) {
 23ea698:	9b01      	ldr	r3, [sp, #4]
 23ea69a:	3301      	adds	r3, #1
 23ea69c:	e696      	b.n	23ea3cc <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x1c>
                matrix->buffer + (row * matrix->cols),
                matrix->cols);
        }

        return EIDSP_OK;
    }
 23ea69e:	2000      	movs	r0, #0
 23ea6a0:	b013      	add	sp, #76	; 0x4c
 23ea6a2:	ecbd 8b06 	vpop	{d8-d10}
 23ea6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ea6aa:	bf00      	nop
 23ea6ac:	f3af 8000 	nop.w
 23ea6b0:	54442d18 	.word	0x54442d18
 23ea6b4:	400921fb 	.word	0x400921fb
 23ea6b8:	3ff00000 	.word	0x3ff00000

023ea6bc <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 23ea6bc:	b510      	push	{r4, lr}
 23ea6be:	4604      	mov	r4, r0
  }
 23ea6c0:	2110      	movs	r1, #16
 23ea6c2:	f7fd ff62 	bl	23e858a <_ZdlPvj>
 23ea6c6:	4620      	mov	r0, r4
 23ea6c8:	bd10      	pop	{r4, pc}

023ea6ca <_ZN6tflite22MicroMutableOpResolverILj2EED0Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 23ea6ca:	b510      	push	{r4, lr}
 23ea6cc:	4604      	mov	r4, r0
 23ea6ce:	2164      	movs	r1, #100	; 0x64
 23ea6d0:	f7fd ff5b 	bl	23e858a <_ZdlPvj>
 23ea6d4:	4620      	mov	r0, r4
 23ea6d6:	bd10      	pop	{r4, pc}

023ea6d8 <_ZNK6tflite22MicroMutableOpResolverILj2EE15GetOpDataParserENS_15BuiltinOperatorE>:

  TfLiteBridgeBuiltinParseFunction GetOpDataParser(
 23ea6d8:	b538      	push	{r3, r4, r5, lr}
      BuiltinOperator op) const override {
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 23ea6da:	6e02      	ldr	r2, [r0, #96]	; 0x60
 23ea6dc:	2a02      	cmp	r2, #2
 23ea6de:	d80c      	bhi.n	23ea6fa <_ZNK6tflite22MicroMutableOpResolverILj2EE15GetOpDataParserENS_15BuiltinOperatorE+0x22>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 23ea6e0:	2300      	movs	r3, #0
 23ea6e2:	f100 0450 	add.w	r4, r0, #80	; 0x50
 23ea6e6:	429a      	cmp	r2, r3
 23ea6e8:	d00b      	beq.n	23ea702 <_ZNK6tflite22MicroMutableOpResolverILj2EE15GetOpDataParserENS_15BuiltinOperatorE+0x2a>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 23ea6ea:	f854 5b04 	ldr.w	r5, [r4], #4
 23ea6ee:	428d      	cmp	r5, r1
 23ea6f0:	d105      	bne.n	23ea6fe <_ZNK6tflite22MicroMutableOpResolverILj2EE15GetOpDataParserENS_15BuiltinOperatorE+0x26>
 23ea6f2:	3316      	adds	r3, #22
 23ea6f4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    }
    return nullptr;
  }
 23ea6f8:	bd38      	pop	{r3, r4, r5, pc}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 23ea6fa:	f00a f857 	bl	23f47ac <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 23ea6fe:	3301      	adds	r3, #1
 23ea700:	e7f1      	b.n	23ea6e6 <_ZNK6tflite22MicroMutableOpResolverILj2EE15GetOpDataParserENS_15BuiltinOperatorE+0xe>
    return nullptr;
 23ea702:	2000      	movs	r0, #0
 23ea704:	e7f8      	b.n	23ea6f8 <_ZNK6tflite22MicroMutableOpResolverILj2EE15GetOpDataParserENS_15BuiltinOperatorE+0x20>

023ea706 <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 23ea706:	2920      	cmp	r1, #32
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 23ea708:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 23ea70a:	d010      	beq.n	23ea72e <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpENS_15BuiltinOperatorE+0x28>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 23ea70c:	2300      	movs	r3, #0
 23ea70e:	2524      	movs	r5, #36	; 0x24
 23ea710:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
      if (registration.builtin_code == op) {
 23ea712:	f100 0618 	add.w	r6, r0, #24
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 23ea716:	429c      	cmp	r4, r3
 23ea718:	d009      	beq.n	23ea72e <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpENS_15BuiltinOperatorE+0x28>
 23ea71a:	fb05 f203 	mul.w	r2, r5, r3
      if (registration.builtin_code == op) {
 23ea71e:	58b7      	ldr	r7, [r6, r2]
 23ea720:	42b9      	cmp	r1, r7
 23ea722:	d102      	bne.n	23ea72a <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpENS_15BuiltinOperatorE+0x24>
      const TfLiteRegistration& registration = registrations_[i];
 23ea724:	3204      	adds	r2, #4
 23ea726:	4410      	add	r0, r2
  }
 23ea728:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 23ea72a:	3301      	adds	r3, #1
 23ea72c:	e7f3      	b.n	23ea716 <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpENS_15BuiltinOperatorE+0x10>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 23ea72e:	2000      	movs	r0, #0
 23ea730:	e7fa      	b.n	23ea728 <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpENS_15BuiltinOperatorE+0x22>
	...

023ea734 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 23ea734:	b508      	push	{r3, lr}
	assert(ptr);
 23ea736:	b928      	cbnz	r0, 23ea744 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x10>
 23ea738:	215a      	movs	r1, #90	; 0x5a
 23ea73a:	4b06      	ldr	r3, [pc, #24]	; (23ea754 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x20>)
 23ea73c:	4a06      	ldr	r2, [pc, #24]	; (23ea758 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x24>)
 23ea73e:	4807      	ldr	r0, [pc, #28]	; (23ea75c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x28>)
 23ea740:	f00a f85e 	bl	23f4800 <__assert_func>
	offset_t offset = *((offset_t *)ptr - 1);

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 23ea744:	f830 3c02 	ldrh.w	r3, [r0, #-2]
	ei_free(p);
 23ea748:	1ac0      	subs	r0, r0, r3
}
 23ea74a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ei_free(p);
 23ea74e:	f005 bca6 	b.w	23f009e <_Z7ei_freePv>
 23ea752:	bf00      	nop
 23ea754:	023ff5e7 	.word	0x023ff5e7
 23ea758:	023fae3e 	.word	0x023fae3e
 23ea75c:	023fae67 	.word	0x023fae67

023ea760 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 23ea760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (scale == 1.0f) return EIDSP_OK;

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 23ea762:	6842      	ldr	r2, [r0, #4]
 23ea764:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 23ea768:	d217      	bcs.n	23ea79a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
 23ea76a:	6883      	ldr	r3, [r0, #8]
 23ea76c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 23ea770:	d213      	bcs.n	23ea79a <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x3a>
            return EIDSP_NARROWING;
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23ea772:	6801      	ldr	r1, [r0, #0]
 23ea774:	b292      	uxth	r2, r2
 23ea776:	b29b      	uxth	r3, r3
 23ea778:	9101      	str	r1, [sp, #4]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23ea77a:	9103      	str	r1, [sp, #12]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 23ea77c:	4668      	mov	r0, sp
 23ea77e:	a902      	add	r1, sp, #8
        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23ea780:	f8ad 2000 	strh.w	r2, [sp]
 23ea784:	f8ad 3002 	strh.w	r3, [sp, #2]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 23ea788:	f8ad 2008 	strh.w	r2, [sp, #8]
 23ea78c:	f8ad 300a 	strh.w	r3, [sp, #10]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 23ea790:	f7fd ff12 	bl	23e85b8 <arm_mat_scale_f32>
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
    }
 23ea794:	b005      	add	sp, #20
 23ea796:	f85d fb04 	ldr.w	pc, [sp], #4
            return EIDSP_NARROWING;
 23ea79a:	4801      	ldr	r0, [pc, #4]	; (23ea7a0 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x40>)
 23ea79c:	e7fa      	b.n	23ea794 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0+0x34>
 23ea79e:	bf00      	nop
 23ea7a0:	fffffc0c 	.word	0xfffffc0c

023ea7a4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj.part.0>:
    constexpr EiAlloc(const EiAlloc<U> &) noexcept {}

    T *allocate(size_t n)
    {
        auto bytes = n * sizeof(T);
        auto ptr = ei_dsp_malloc(bytes);
 23ea7a4:	0080      	lsls	r0, r0, #2
 23ea7a6:	f005 bc76 	b.w	23f0096 <_Z9ei_mallocj>

023ea7aa <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0>:

  template<typename _RandomAccessIterator, typename _Distance,
	   typename _Tp, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 23ea7aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		  _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 23ea7ac:	1e53      	subs	r3, r2, #1
 23ea7ae:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 23ea7b2:	105f      	asrs	r7, r3, #1
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 23ea7b4:	4604      	mov	r4, r0
 23ea7b6:	460d      	mov	r5, r1
 23ea7b8:	ed8d 0a00 	vstr	s0, [sp]
 23ea7bc:	edcd 0a01 	vstr	s1, [sp, #4]
      while (__secondChild < (__len - 1) / 2)
 23ea7c0:	460b      	mov	r3, r1
 23ea7c2:	429f      	cmp	r7, r3
 23ea7c4:	ea4f 06c3 	mov.w	r6, r3, lsl #3
 23ea7c8:	dd17      	ble.n	23ea7fa <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0+0x50>
	{
	  __secondChild = 2 * (__secondChild + 1);
 23ea7ca:	1c59      	adds	r1, r3, #1
 23ea7cc:	004b      	lsls	r3, r1, #1
	  if (__comp(__first + __secondChild,
 23ea7ce:	1e58      	subs	r0, r3, #1
            peaks.push_back(d);
        }
        sort(peaks.begin(), peaks.end(),
            [](const freq_peak_t & a, const freq_peak_t & b) -> bool
        {
            return a.amplitude > b.amplitude;
 23ea7d0:	eb04 1101 	add.w	r1, r4, r1, lsl #4
 23ea7d4:	eb04 0cc0 	add.w	ip, r4, r0, lsl #3
 23ea7d8:	ed91 7a01 	vldr	s14, [r1, #4]
 23ea7dc:	eddc 7a01 	vldr	s15, [ip, #4]
		     __first + (__secondChild - 1)))
	    __secondChild--;
 23ea7e0:	eeb4 7a67 	vcmp.f32	s14, s15
 23ea7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea7e8:	bfc8      	it	gt
 23ea7ea:	4603      	movgt	r3, r0
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 23ea7ec:	4426      	add	r6, r4
 23ea7ee:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 23ea7f2:	c903      	ldmia	r1, {r0, r1}
 23ea7f4:	e886 0003 	stmia.w	r6, {r0, r1}
      while (__secondChild < (__len - 1) / 2)
 23ea7f8:	e7e3      	b.n	23ea7c2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0+0x18>
	  __holeIndex = __secondChild;
	}
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 23ea7fa:	07d1      	lsls	r1, r2, #31
 23ea7fc:	d40d      	bmi.n	23ea81a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0+0x70>
 23ea7fe:	3a02      	subs	r2, #2
 23ea800:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 23ea804:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 23ea808:	d107      	bne.n	23ea81a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0+0x70>
	{
	  __secondChild = 2 * (__secondChild + 1);
 23ea80a:	005b      	lsls	r3, r3, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 23ea80c:	3301      	adds	r3, #1
 23ea80e:	19a2      	adds	r2, r4, r6
 23ea810:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 23ea814:	c903      	ldmia	r1, {r0, r1}
 23ea816:	e882 0003 	stmia.w	r2, {r0, r1}
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 23ea81a:	eddd 7a01 	vldr	s15, [sp, #4]
      _Distance __parent = (__holeIndex - 1) / 2;
 23ea81e:	1e5a      	subs	r2, r3, #1
 23ea820:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 23ea824:	9f00      	ldr	r7, [sp, #0]
 23ea826:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 23ea828:	429d      	cmp	r5, r3
      { _M_current += __n; return *this; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current + __n); }
 23ea82a:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
 23ea82e:	da12      	bge.n	23ea856 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0+0xac>
 23ea830:	eb04 03c2 	add.w	r3, r4, r2, lsl #3
 23ea834:	ed93 7a01 	vldr	s14, [r3, #4]
 23ea838:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23ea83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea840:	dd09      	ble.n	23ea856 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0+0xac>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 23ea842:	e893 0003 	ldmia.w	r3, {r0, r1}
	  __parent = (__holeIndex - 1) / 2;
 23ea846:	1e53      	subs	r3, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 23ea848:	e886 0003 	stmia.w	r6, {r0, r1}
	  __parent = (__holeIndex - 1) / 2;
 23ea84c:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
	  __holeIndex = __parent;
 23ea850:	4613      	mov	r3, r2
	  __parent = (__holeIndex - 1) / 2;
 23ea852:	104a      	asrs	r2, r1, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 23ea854:	e7e8      	b.n	23ea828 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0+0x7e>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 23ea856:	edc6 7a01 	vstr	s15, [r6, #4]
 23ea85a:	6037      	str	r7, [r6, #0]
	}
      __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
	__cmp(_GLIBCXX_MOVE(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
		       _GLIBCXX_MOVE(__value), __cmp);
    }
 23ea85c:	b003      	add	sp, #12
 23ea85e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ea860 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>:

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 23ea860:	4603      	mov	r3, r0
 23ea862:	b417      	push	{r0, r1, r2, r4}
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
	_ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
	_DistanceType;

      _ValueType __value = _GLIBCXX_MOVE(*__result);
 23ea864:	f10d 0c08 	add.w	ip, sp, #8
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 23ea868:	460c      	mov	r4, r1
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 23ea86a:	e892 0003 	ldmia.w	r2, {r0, r1}
 23ea86e:	e90c 0003 	stmdb	ip, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 23ea872:	e893 0003 	ldmia.w	r3, {r0, r1}
      std::__adjust_heap(__first, _DistanceType(0),
 23ea876:	ed9d 0a00 	vldr	s0, [sp]
      *__result = _GLIBCXX_MOVE(*__first);
 23ea87a:	e882 0003 	stmia.w	r2, {r0, r1}
      std::__adjust_heap(__first, _DistanceType(0),
 23ea87e:	eddd 0a01 	vldr	s1, [sp, #4]
 23ea882:	2100      	movs	r1, #0
 23ea884:	4618      	mov	r0, r3
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 23ea886:	1ae2      	subs	r2, r4, r3
 23ea888:	10d2      	asrs	r2, r2, #3
			 _DistanceType(__last - __first),
			 _GLIBCXX_MOVE(__value), __comp);
    }
 23ea88a:	b003      	add	sp, #12
 23ea88c:	f85d 4b04 	ldr.w	r4, [sp], #4
      std::__adjust_heap(__first, _DistanceType(0),
 23ea890:	f7ff bf8b 	b.w	23ea7aa <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0>

023ea894 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_.constprop.0>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
 23ea894:	b510      	push	{r4, lr}
 23ea896:	4603      	mov	r3, r0
			      _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
	__val = _GLIBCXX_MOVE(*__last);
 23ea898:	edd0 7a01 	vldr	s15, [r0, #4]
 23ea89c:	6804      	ldr	r4, [r0, #0]
      operator--() _GLIBCXX_NOEXCEPT
 23ea89e:	461a      	mov	r2, r3
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, __next))
 23ea8a0:	ed13 7a01 	vldr	s14, [r3, #-4]
 23ea8a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 23ea8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea8ac:	f1a3 0308 	sub.w	r3, r3, #8
 23ea8b0:	dd06      	ble.n	23ea8c0 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_.constprop.0+0x2c>
	{
	  *__last = _GLIBCXX_MOVE(*__next);
 23ea8b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 23ea8b6:	f103 0208 	add.w	r2, r3, #8
 23ea8ba:	e882 0003 	stmia.w	r2, {r0, r1}
	return *this;
 23ea8be:	e7ee      	b.n	23ea89e <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_.constprop.0+0xa>
	  __last = __next;
	  --__next;
	}
      *__last = _GLIBCXX_MOVE(__val);
 23ea8c0:	edc2 7a01 	vstr	s15, [r2, #4]
 23ea8c4:	6014      	str	r4, [r2, #0]
    }
 23ea8c6:	bd10      	pop	{r4, pc}

023ea8c8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __insertion_sort(_RandomAccessIterator __first,
 23ea8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;
 23ea8ca:	4288      	cmp	r0, r1
    __insertion_sort(_RandomAccessIterator __first,
 23ea8cc:	ed2d 8b02 	vpush	{d8}
 23ea8d0:	4604      	mov	r4, r0
 23ea8d2:	460e      	mov	r6, r1
      if (__first == __last) return;
 23ea8d4:	d01e      	beq.n	23ea914 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0+0x4c>
      { return __normal_iterator(_M_current + __n); }
 23ea8d6:	f100 0508 	add.w	r5, r0, #8

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 23ea8da:	42ae      	cmp	r6, r5
 23ea8dc:	d01a      	beq.n	23ea914 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0+0x4c>
 23ea8de:	ed95 8a01 	vldr	s16, [r5, #4]
	{
	  if (__comp(__i, __first))
 23ea8e2:	edd4 7a01 	vldr	s15, [r4, #4]
 23ea8e6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23ea8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea8ee:	dd0d      	ble.n	23ea90c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0+0x44>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 23ea8f0:	42ac      	cmp	r4, r5
	    {
	      typename iterator_traits<_RandomAccessIterator>::value_type
		__val = _GLIBCXX_MOVE(*__i);
 23ea8f2:	682f      	ldr	r7, [r5, #0]
 23ea8f4:	d005      	beq.n	23ea902 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0+0x3a>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 23ea8f6:	4621      	mov	r1, r4
 23ea8f8:	1b2a      	subs	r2, r5, r4
 23ea8fa:	f104 0008 	add.w	r0, r4, #8
 23ea8fe:	f00e f9f6 	bl	23f8cee <memmove>
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
	      *__first = _GLIBCXX_MOVE(__val);
 23ea902:	ed84 8a01 	vstr	s16, [r4, #4]
 23ea906:	6027      	str	r7, [r4, #0]
	return *this;
 23ea908:	3508      	adds	r5, #8
 23ea90a:	e7e6      	b.n	23ea8da <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0+0x12>
	    }
	  else
	    std::__unguarded_linear_insert(__i,
 23ea90c:	4628      	mov	r0, r5
 23ea90e:	f7ff ffc1 	bl	23ea894 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_.constprop.0>
 23ea912:	e7f9      	b.n	23ea908 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0+0x40>
				__gnu_cxx::__ops::__val_comp_iter(__comp));
	}
    }
 23ea914:	ecbd 8b02 	vpop	{d8}
 23ea918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ea91a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0>:
      while (__secondChild < (__len - 1) / 2)
 23ea91a:	1e53      	subs	r3, r2, #1
 23ea91c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 23ea920:	b5f0      	push	{r4, r5, r6, r7, lr}
      while (__secondChild < (__len - 1) / 2)
 23ea922:	105d      	asrs	r5, r3, #1
 23ea924:	460b      	mov	r3, r1
 23ea926:	429d      	cmp	r5, r3
 23ea928:	ea4f 0483 	mov.w	r4, r3, lsl #2
 23ea92c:	dd16      	ble.n	23ea95c <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0+0x42>
	  __secondChild = 2 * (__secondChild + 1);
 23ea92e:	1c5e      	adds	r6, r3, #1
 23ea930:	0073      	lsls	r3, r6, #1
	  if (__comp(__first + __secondChild,
 23ea932:	1e5f      	subs	r7, r3, #1
  {
    template<typename _Iterator1, typename _Iterator2>
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
 23ea934:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 23ea938:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 23ea93c:	ed96 7a00 	vldr	s14, [r6]
 23ea940:	eddc 7a00 	vldr	s15, [ip]
	    __secondChild--;
 23ea944:	eeb4 7a67 	vcmp.f32	s14, s15
 23ea948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea94c:	bf48      	it	mi
 23ea94e:	463b      	movmi	r3, r7
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 23ea950:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 23ea954:	6836      	ldr	r6, [r6, #0]
 23ea956:	4404      	add	r4, r0
 23ea958:	6026      	str	r6, [r4, #0]
      while (__secondChild < (__len - 1) / 2)
 23ea95a:	e7e4      	b.n	23ea926 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0+0xc>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 23ea95c:	07d5      	lsls	r5, r2, #31
 23ea95e:	d40c      	bmi.n	23ea97a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0+0x60>
 23ea960:	3a02      	subs	r2, #2
 23ea962:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 23ea966:	ebb3 0f62 	cmp.w	r3, r2, asr #1
 23ea96a:	d106      	bne.n	23ea97a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0+0x60>
	  __secondChild = 2 * (__secondChild + 1);
 23ea96c:	005b      	lsls	r3, r3, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 23ea96e:	3301      	adds	r3, #1
 23ea970:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 23ea974:	6812      	ldr	r2, [r2, #0]
 23ea976:	4404      	add	r4, r0
 23ea978:	6022      	str	r2, [r4, #0]
      _Distance __parent = (__holeIndex - 1) / 2;
 23ea97a:	1e5a      	subs	r2, r3, #1
 23ea97c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 23ea980:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 23ea982:	4299      	cmp	r1, r3
      { return __normal_iterator(_M_current + __n); }
 23ea984:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 23ea988:	da10      	bge.n	23ea9ac <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0+0x92>

    template<typename _Iterator, typename _Value>
      _GLIBCXX20_CONSTEXPR
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
 23ea98a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 23ea98e:	edd3 7a00 	vldr	s15, [r3]
 23ea992:	eeb4 0ae7 	vcmpe.f32	s0, s15
 23ea996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ea99a:	dd07      	ble.n	23ea9ac <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0+0x92>
	  __parent = (__holeIndex - 1) / 2;
 23ea99c:	1e53      	subs	r3, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 23ea99e:	edc4 7a00 	vstr	s15, [r4]
	  __parent = (__holeIndex - 1) / 2;
 23ea9a2:	eb03 74d3 	add.w	r4, r3, r3, lsr #31
	  __holeIndex = __parent;
 23ea9a6:	4613      	mov	r3, r2
	  __parent = (__holeIndex - 1) / 2;
 23ea9a8:	1062      	asrs	r2, r4, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 23ea9aa:	e7ea      	b.n	23ea982 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0+0x68>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 23ea9ac:	ed84 0a00 	vstr	s0, [r4]
    }
 23ea9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ea9b2 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 23ea9b2:	b530      	push	{r4, r5, lr}
	_ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
 23ea9b4:	4603      	mov	r3, r0
 23ea9b6:	4614      	mov	r4, r2
      for (; __first != __last; ++__first, (void)++__cur)
 23ea9b8:	428b      	cmp	r3, r1
 23ea9ba:	d005      	beq.n	23ea9c8 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0+0x16>
			       is_constructible<_Tp, _Args...>>>
	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 23ea9bc:	b10c      	cbz	r4, 23ea9c2 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0+0x10>
 23ea9be:	681d      	ldr	r5, [r3, #0]
 23ea9c0:	6025      	str	r5, [r4, #0]
 23ea9c2:	3304      	adds	r3, #4
 23ea9c4:	3404      	adds	r4, #4
 23ea9c6:	e7f7      	b.n	23ea9b8 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0+0x6>
	std::__relocate_object_a(std::__addressof(*__cur),
				 std::__addressof(*__first), __alloc);
      return __cur;
 23ea9c8:	1a18      	subs	r0, r3, r0
    }
 23ea9ca:	4410      	add	r0, r2
 23ea9cc:	bd30      	pop	{r4, r5, pc}

023ea9ce <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
 23ea9ce:	2a01      	cmp	r2, #1
 23ea9d0:	d102      	bne.n	23ea9d8 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23ea9d2:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
 23ea9d4:	2000      	movs	r0, #0
 23ea9d6:	4770      	bx	lr
	  switch (__op)
 23ea9d8:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23ea9da:	bf04      	itt	eq
 23ea9dc:	680b      	ldreq	r3, [r1, #0]
 23ea9de:	6003      	streq	r3, [r0, #0]
	      break;
 23ea9e0:	e7f8      	b.n	23ea9d4 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x6>

023ea9e2 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
 23ea9e2:	2a01      	cmp	r2, #1
 23ea9e4:	d102      	bne.n	23ea9ec <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23ea9e6:	6001      	str	r1, [r0, #0]
      }
 23ea9e8:	2000      	movs	r0, #0
 23ea9ea:	4770      	bx	lr
	  switch (__op)
 23ea9ec:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23ea9ee:	bf04      	itt	eq
 23ea9f0:	680b      	ldreq	r3, [r1, #0]
 23ea9f2:	6003      	streq	r3, [r0, #0]
	      break;
 23ea9f4:	e7f8      	b.n	23ea9e8 <_ZNSt17_Function_handlerIFijjPfEPS1_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

023ea9f6 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23ea9f6:	b430      	push	{r4, r5}
 23ea9f8:	460d      	mov	r5, r1
 23ea9fa:	4611      	mov	r1, r2
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23ea9fc:	6804      	ldr	r4, [r0, #0]
 23ea9fe:	681a      	ldr	r2, [r3, #0]
 23eaa00:	6828      	ldr	r0, [r5, #0]
 23eaa02:	4623      	mov	r3, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 23eaa04:	bc30      	pop	{r4, r5}
 23eaa06:	6809      	ldr	r1, [r1, #0]
 23eaa08:	4718      	bx	r3

023eaa0a <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>:

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
                          const TfLiteRegistration& registration,
                          TfLiteBridgeBuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 23eaa0a:	2920      	cmp	r1, #32
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 23eaa0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23eaa10:	4606      	mov	r6, r0
 23eaa12:	460f      	mov	r7, r1
 23eaa14:	4614      	mov	r4, r2
 23eaa16:	4698      	mov	r8, r3
    if (op == BuiltinOperator_CUSTOM) {
 23eaa18:	d021      	beq.n	23eaa5e <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0x54>
      MicroPrintf("Invalid parameter BuiltinOperator_CUSTOM to the ");
      MicroPrintf("AddBuiltin function.");
      return kTfLiteError;
    }

    if (FindOp(op) != nullptr) {
 23eaa1a:	6803      	ldr	r3, [r0, #0]
 23eaa1c:	6a1b      	ldr	r3, [r3, #32]
 23eaa1e:	4798      	blx	r3
 23eaa20:	b9e8      	cbnz	r0, 23eaa5e <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0x54>
      MicroPrintf("Calling AddBuiltin with the same op more than ");
      MicroPrintf("once is not supported (Op: #%d).", op);
      return kTfLiteError;
    }

    if (registrations_len_ >= tOpCount) {
 23eaa22:	f8d6 c04c 	ldr.w	ip, [r6, #76]	; 0x4c
 23eaa26:	f1bc 0f01 	cmp.w	ip, #1
 23eaa2a:	d818      	bhi.n	23eaa5e <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0+0x54>
      MicroPrintf("Couldn't register builtin op #%d, resolver size ", op);
      MicroPrintf("is too small (%d).", tOpCount);
      return kTfLiteError;
    }

    registrations_[registrations_len_] = registration;
 23eaa2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23eaa2e:	f04f 0e24 	mov.w	lr, #36	; 0x24
 23eaa32:	fb0e 6e0c 	mla	lr, lr, ip, r6
 23eaa36:	f10e 0504 	add.w	r5, lr, #4
 23eaa3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23eaa3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23eaa3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23eaa40:	6823      	ldr	r3, [r4, #0]
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
    registrations_len_++;
 23eaa42:	f10c 0201 	add.w	r2, ip, #1
    registrations_[registrations_len_] = registration;
 23eaa46:	602b      	str	r3, [r5, #0]
    registrations_[registrations_len_].builtin_code = op;
 23eaa48:	f8ce 7018 	str.w	r7, [lr, #24]

    builtin_codes_[num_buitin_ops_] = op;
 23eaa4c:	6e33      	ldr	r3, [r6, #96]	; 0x60
    registrations_len_++;
 23eaa4e:	64f2      	str	r2, [r6, #76]	; 0x4c
 23eaa50:	eb06 0283 	add.w	r2, r6, r3, lsl #2
    builtin_parsers_[num_buitin_ops_] = parser;
    num_buitin_ops_++;
 23eaa54:	3301      	adds	r3, #1
    builtin_codes_[num_buitin_ops_] = op;
 23eaa56:	6517      	str	r7, [r2, #80]	; 0x50
    builtin_parsers_[num_buitin_ops_] = parser;
 23eaa58:	f8c2 8058 	str.w	r8, [r2, #88]	; 0x58
    num_buitin_ops_++;
 23eaa5c:	6633      	str	r3, [r6, #96]	; 0x60

    return kTfLiteOk;
  }
 23eaa5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023eaa64 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23eaa64:	b510      	push	{r4, lr}
 23eaa66:	4604      	mov	r4, r0
 23eaa68:	4b09      	ldr	r3, [pc, #36]	; (23eaa90 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23eaa6a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23eaa6c:	f00a fb8c 	bl	23f5188 <_ZN5spark10LogManager8instanceEv>
 23eaa70:	4621      	mov	r1, r4
 23eaa72:	f00a fdc3 	bl	23f55fc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23eaa76:	f00b fe03 	bl	23f6680 <_Z16_fetch_usbserialv>
 23eaa7a:	f00b fdf3 	bl	23f6664 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23eaa7e:	4620      	mov	r0, r4
 23eaa80:	4b04      	ldr	r3, [pc, #16]	; (23eaa94 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23eaa82:	f840 3b04 	str.w	r3, [r0], #4
 23eaa86:	f00a fc55 	bl	23f5334 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23eaa8a:	4620      	mov	r0, r4
 23eaa8c:	bd10      	pop	{r4, pc}
 23eaa8e:	bf00      	nop
 23eaa90:	023fbb08 	.word	0x023fbb08
 23eaa94:	023fbaf0 	.word	0x023fbaf0

023eaa98 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23eaa98:	b510      	push	{r4, lr}
 23eaa9a:	4604      	mov	r4, r0
    }
 23eaa9c:	f7ff ffe2 	bl	23eaa64 <_ZN5spark16SerialLogHandlerD1Ev>
 23eaaa0:	4620      	mov	r0, r4
 23eaaa2:	2124      	movs	r1, #36	; 0x24
 23eaaa4:	f7fd fd71 	bl	23e858a <_ZdlPvj>
 23eaaa8:	4620      	mov	r0, r4
 23eaaaa:	bd10      	pop	{r4, pc}

023eaaac <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0>:
    __insertion_sort(_RandomAccessIterator __first,
 23eaaac:	b570      	push	{r4, r5, r6, lr}
      if (__first == __last) return;
 23eaaae:	4288      	cmp	r0, r1
    __insertion_sort(_RandomAccessIterator __first,
 23eaab0:	ed2d 8b02 	vpush	{d8}
 23eaab4:	4604      	mov	r4, r0
 23eaab6:	460e      	mov	r6, r1
      if (__first == __last) return;
 23eaab8:	d025      	beq.n	23eab06 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0+0x5a>
 23eaaba:	1d05      	adds	r5, r0, #4
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 23eaabc:	42ae      	cmp	r6, r5
 23eaabe:	d022      	beq.n	23eab06 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0+0x5a>
      { return *__it1 < *__it2; }
 23eaac0:	ed95 8a00 	vldr	s16, [r5]
	  if (__comp(__i, __first))
 23eaac4:	edd4 7a00 	vldr	s15, [r4]
 23eaac8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23eaacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaad0:	d50a      	bpl.n	23eaae8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0+0x3c>
	  if (_Num)
 23eaad2:	42ac      	cmp	r4, r5
 23eaad4:	d004      	beq.n	23eaae0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0+0x34>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 23eaad6:	4621      	mov	r1, r4
 23eaad8:	1b2a      	subs	r2, r5, r4
 23eaada:	1d20      	adds	r0, r4, #4
 23eaadc:	f00e f907 	bl	23f8cee <memmove>
	      *__first = _GLIBCXX_MOVE(__val);
 23eaae0:	ed84 8a00 	vstr	s16, [r4]
	return *this;
 23eaae4:	3504      	adds	r5, #4
 23eaae6:	e7e9      	b.n	23eaabc <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0+0x10>
 23eaae8:	462b      	mov	r3, r5
 23eaaea:	461a      	mov	r2, r3

    template<typename _Value, typename _Iterator>
      _GLIBCXX20_CONSTEXPR
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
 23eaaec:	ed73 7a01 	vldmdb	r3!, {s15}
      while (__comp(__val, __next))
 23eaaf0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23eaaf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaaf8:	d502      	bpl.n	23eab00 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0+0x54>
	  *__last = _GLIBCXX_MOVE(*__next);
 23eaafa:	edc3 7a01 	vstr	s15, [r3, #4]
	return *this;
 23eaafe:	e7f4      	b.n	23eaaea <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0+0x3e>
      *__last = _GLIBCXX_MOVE(__val);
 23eab00:	ed82 8a00 	vstr	s16, [r2]
 23eab04:	e7ee      	b.n	23eaae4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0+0x38>
    }
 23eab06:	ecbd 8b02 	vpop	{d8}
 23eab0a:	bd70      	pop	{r4, r5, r6, pc}

023eab0c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __introsort_loop(_RandomAccessIterator __first,
 23eab0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 23eab10:	4604      	mov	r4, r0
 23eab12:	4617      	mov	r7, r2
 23eab14:	4699      	mov	r9, r3
 23eab16:	460d      	mov	r5, r1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23eab18:	f100 0808 	add.w	r8, r0, #8
    { return __lhs.base() - __rhs.base(); }
 23eab1c:	1b2e      	subs	r6, r5, r4
		     _RandomAccessIterator __last,
		     _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 23eab1e:	2e80      	cmp	r6, #128	; 0x80
 23eab20:	f340 8093 	ble.w	23eac4a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x13e>
 23eab24:	ea4f 0ae6 	mov.w	sl, r6, asr #3
	{
	  if (__depth_limit == 0)
 23eab28:	bb1f      	cbnz	r7, 23eab72 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x66>

      if (__last - __first < 2)
	return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
 23eab2a:	f1aa 0602 	sub.w	r6, sl, #2
 23eab2e:	f88d 9004 	strb.w	r9, [sp, #4]
 23eab32:	1076      	asrs	r6, r6, #1
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 23eab34:	af02      	add	r7, sp, #8
 23eab36:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 23eab3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 23eab3e:	e887 0003 	stmia.w	r7, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 23eab42:	4652      	mov	r2, sl
 23eab44:	ed9d 0a02 	vldr	s0, [sp, #8]
 23eab48:	eddd 0a03 	vldr	s1, [sp, #12]
 23eab4c:	4631      	mov	r1, r6
 23eab4e:	4620      	mov	r0, r4
 23eab50:	f7ff fe2b 	bl	23ea7aa <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_SL_T1_T2_.constprop.0>
			     __comp);
	  if (__parent == 0)
 23eab54:	b10e      	cbz	r6, 23eab5a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x4e>
	    return;
	  __parent--;
 23eab56:	3e01      	subs	r6, #1
      while (true)
 23eab58:	e7ed      	b.n	23eab36 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x2a>
 23eab5a:	1b2b      	subs	r3, r5, r4
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare& __comp)
    {
      while (__last - __first > 1)
 23eab5c:	2b08      	cmp	r3, #8
 23eab5e:	f1a5 0508 	sub.w	r5, r5, #8
 23eab62:	dd72      	ble.n	23eac4a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x13e>
	{
	  --__last;
	  std::__pop_heap(__first, __last, __last, __comp);
 23eab64:	462a      	mov	r2, r5
 23eab66:	4629      	mov	r1, r5
 23eab68:	4620      	mov	r0, r4
 23eab6a:	ab01      	add	r3, sp, #4
 23eab6c:	f7ff fe78 	bl	23ea860 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_SK_RT0_>
      while (__last - __first > 1)
 23eab70:	e7f3      	b.n	23eab5a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x4e>
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 23eab72:	1136      	asrs	r6, r6, #4
      { return __normal_iterator(_M_current + __n); }
 23eab74:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 23eab78:	edd4 6a03 	vldr	s13, [r4, #12]
 23eab7c:	ed96 7a01 	vldr	s14, [r6, #4]
      if (__comp(__a, __b))
 23eab80:	eef4 6ac7 	vcmpe.f32	s13, s14
 23eab84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eab88:	ed55 7a01 	vldr	s15, [r5, #-4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23eab8c:	6822      	ldr	r2, [r4, #0]
 23eab8e:	6863      	ldr	r3, [r4, #4]
	    {
	      std::__partial_sort(__first, __last, __last, __comp);
	      return;
	    }
	  --__depth_limit;
 23eab90:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
      if (__comp(__a, __b))
 23eab94:	dd19      	ble.n	23eabca <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xbe>
	  if (__comp(__b, __c))
 23eab96:	eef4 7ac7 	vcmpe.f32	s15, s14
 23eab9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eab9e:	d506      	bpl.n	23eabae <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xa2>
      __a = _GLIBCXX_MOVE(__b);
 23eaba0:	e896 0003 	ldmia.w	r6, {r0, r1}
 23eaba4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23eaba8:	6032      	str	r2, [r6, #0]
 23eabaa:	6073      	str	r3, [r6, #4]
    }
 23eabac:	e018      	b.n	23eabe0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xd4>
	  else if (__comp(__a, __c))
 23eabae:	eef4 7ae6 	vcmpe.f32	s15, s13
 23eabb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eabb6:	d50d      	bpl.n	23eabd4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xc8>
      __a = _GLIBCXX_MOVE(__b);
 23eabb8:	e915 0003 	ldmdb	r5, {r0, r1}
 23eabbc:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23eabc0:	f845 2c08 	str.w	r2, [r5, #-8]
 23eabc4:	f845 3c04 	str.w	r3, [r5, #-4]
    }
 23eabc8:	e00a      	b.n	23eabe0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xd4>
      else if (__comp(__a, __c))
 23eabca:	eef4 7ae6 	vcmpe.f32	s15, s13
 23eabce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eabd2:	d529      	bpl.n	23eac28 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x11c>
      __a = _GLIBCXX_MOVE(__b);
 23eabd4:	e898 0003 	ldmia.w	r8, {r0, r1}
 23eabd8:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23eabdc:	60a2      	str	r2, [r4, #8]
 23eabde:	60e3      	str	r3, [r4, #12]
      while (__last - __first > int(_S_threshold))
 23eabe0:	462e      	mov	r6, r5
 23eabe2:	f104 0310 	add.w	r3, r4, #16
 23eabe6:	ed53 7a01 	vldr	s15, [r3, #-4]
 23eabea:	ed94 7a01 	vldr	s14, [r4, #4]
	  while (__comp(__first, __pivot))
 23eabee:	eef4 7ac7 	vcmpe.f32	s15, s14
 23eabf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eabf6:	f1a3 0a08 	sub.w	sl, r3, #8
 23eabfa:	dc24      	bgt.n	23eac46 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x13a>
	--_M_current;
 23eabfc:	f1a6 0208 	sub.w	r2, r6, #8
 23eac00:	4616      	mov	r6, r2
	  while (__comp(__pivot, __last))
 23eac02:	edd2 6a01 	vldr	s13, [r2, #4]
 23eac06:	eeb4 7ae6 	vcmpe.f32	s14, s13
 23eac0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eac0e:	f1a2 0208 	sub.w	r2, r2, #8
 23eac12:	dcf5      	bgt.n	23eac00 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xf4>
	  if (!(__first < __last))
 23eac14:	4556      	cmp	r6, sl
 23eac16:	d80d      	bhi.n	23eac34 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x128>
	  _RandomAccessIterator __cut =
	    std::__unguarded_partition_pivot(__first, __last, __comp);
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 23eac18:	4629      	mov	r1, r5
 23eac1a:	464b      	mov	r3, r9
 23eac1c:	463a      	mov	r2, r7
 23eac1e:	4650      	mov	r0, sl
 23eac20:	f7ff ff74 	bl	23eab0c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
      while (__last - __first > int(_S_threshold))
 23eac24:	4655      	mov	r5, sl
 23eac26:	e779      	b.n	23eab1c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x10>
      else if (__comp(__b, __c))
 23eac28:	eef4 7ac7 	vcmpe.f32	s15, s14
 23eac2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eac30:	d5b6      	bpl.n	23eaba0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0x94>
 23eac32:	e7c1      	b.n	23eabb8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xac>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23eac34:	f853 2c08 	ldr.w	r2, [r3, #-8]
      __a = _GLIBCXX_MOVE(__b);
 23eac38:	e896 0003 	ldmia.w	r6, {r0, r1}
 23eac3c:	e88a 0003 	stmia.w	sl, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23eac40:	edc6 7a01 	vstr	s15, [r6, #4]
 23eac44:	6032      	str	r2, [r6, #0]
 23eac46:	3308      	adds	r3, #8
 23eac48:	e7cd      	b.n	23eabe6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_+0xda>
	  __last = __cut;
	}
    }
 23eac4a:	b004      	add	sp, #16
 23eac4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023eac50 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0>:
    __introsort_loop(_RandomAccessIterator __first,
 23eac50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23eac54:	4604      	mov	r4, r0
 23eac56:	4616      	mov	r6, r2
 23eac58:	460d      	mov	r5, r1
      { return __normal_iterator(_M_current + __n); }
 23eac5a:	1d07      	adds	r7, r0, #4
    { return __lhs.base() - __rhs.base(); }
 23eac5c:	1b2b      	subs	r3, r5, r4
      while (__last - __first > int(_S_threshold))
 23eac5e:	2b40      	cmp	r3, #64	; 0x40
 23eac60:	dd76      	ble.n	23ead50 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x100>
 23eac62:	ea4f 08a3 	mov.w	r8, r3, asr #2
	  if (__depth_limit == 0)
 23eac66:	b9e6      	cbnz	r6, 23eaca2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x52>
      _DistanceType __parent = (__len - 2) / 2;
 23eac68:	f1a8 0102 	sub.w	r1, r8, #2
 23eac6c:	1049      	asrs	r1, r1, #1
 23eac6e:	1c4e      	adds	r6, r1, #1
 23eac70:	eb04 0686 	add.w	r6, r4, r6, lsl #2
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 23eac74:	ed36 0a01 	vldmdb	r6!, {s0}
 23eac78:	4642      	mov	r2, r8
 23eac7a:	4620      	mov	r0, r4
 23eac7c:	f7ff fe4d 	bl	23ea91a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0>
	  if (__parent == 0)
 23eac80:	b109      	cbz	r1, 23eac86 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x36>
	  __parent--;
 23eac82:	3901      	subs	r1, #1
      while (true)
 23eac84:	e7f6      	b.n	23eac74 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x24>
 23eac86:	1b2b      	subs	r3, r5, r4
      while (__last - __first > 1)
 23eac88:	2b04      	cmp	r3, #4
 23eac8a:	dd61      	ble.n	23ead50 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x100>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 23eac8c:	ed35 0a01 	vldmdb	r5!, {s0}
      *__result = _GLIBCXX_MOVE(*__first);
 23eac90:	6823      	ldr	r3, [r4, #0]
 23eac92:	1b2a      	subs	r2, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 23eac94:	2100      	movs	r1, #0
 23eac96:	4620      	mov	r0, r4
      *__result = _GLIBCXX_MOVE(*__first);
 23eac98:	602b      	str	r3, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 23eac9a:	1092      	asrs	r2, r2, #2
 23eac9c:	f7ff fe3d 	bl	23ea91a <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEifNS0_5__ops15_Iter_less_iterEEvT_T0_SC_T1_T2_.isra.0>
      while (__last - __first > 1)
 23eaca0:	e7f1      	b.n	23eac86 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x36>
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 23eaca2:	10db      	asrs	r3, r3, #3
      { return __normal_iterator(_M_current + __n); }
 23eaca4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
      { return *__it1 < *__it2; }
 23eaca8:	edd4 6a01 	vldr	s13, [r4, #4]
 23eacac:	ed93 7a00 	vldr	s14, [r3]
      if (__comp(__a, __b))
 23eacb0:	eef4 6ac7 	vcmpe.f32	s13, s14
 23eacb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eacb8:	ed55 7a01 	vldr	s15, [r5, #-4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23eacbc:	6822      	ldr	r2, [r4, #0]
	  --__depth_limit;
 23eacbe:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
      if (__comp(__a, __b))
 23eacc2:	d512      	bpl.n	23eacea <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x9a>
	  if (__comp(__b, __c))
 23eacc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23eacc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eaccc:	d503      	bpl.n	23eacd6 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x86>
      __a = _GLIBCXX_MOVE(__b);
 23eacce:	ed84 7a00 	vstr	s14, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 23eacd2:	601a      	str	r2, [r3, #0]
 23eacd4:	e011      	b.n	23eacfa <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xaa>
	  else if (__comp(__a, __c))
 23eacd6:	eef4 6ae7 	vcmpe.f32	s13, s15
 23eacda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eacde:	d509      	bpl.n	23eacf4 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xa4>
      __a = _GLIBCXX_MOVE(__b);
 23eace0:	edc4 7a00 	vstr	s15, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 23eace4:	f845 2c04 	str.w	r2, [r5, #-4]
 23eace8:	e007      	b.n	23eacfa <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xaa>
      else if (__comp(__a, __c))
 23eacea:	eef4 6ae7 	vcmpe.f32	s13, s15
 23eacee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eacf2:	d522      	bpl.n	23ead3a <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xea>
      __a = _GLIBCXX_MOVE(__b);
 23eacf4:	edc4 6a00 	vstr	s13, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 23eacf8:	6062      	str	r2, [r4, #4]
    __unguarded_partition(_RandomAccessIterator __first,
 23eacfa:	463a      	mov	r2, r7
      while (__last - __first > int(_S_threshold))
 23eacfc:	4629      	mov	r1, r5
 23eacfe:	4690      	mov	r8, r2
 23ead00:	edd4 6a00 	vldr	s13, [r4]
 23ead04:	ecf2 7a01 	vldmia	r2!, {s15}
	  while (__comp(__first, __pivot))
 23ead08:	eef4 7ae6 	vcmpe.f32	s15, s13
 23ead0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ead10:	d4f5      	bmi.n	23eacfe <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xae>
 23ead12:	460b      	mov	r3, r1
 23ead14:	ed13 7a01 	vldr	s14, [r3, #-4]
	  while (__comp(__pivot, __last))
 23ead18:	eef4 6ac7 	vcmpe.f32	s13, s14
 23ead1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ead20:	f1a3 0304 	sub.w	r3, r3, #4
 23ead24:	4619      	mov	r1, r3
 23ead26:	d4f5      	bmi.n	23ead14 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xc4>
	  if (!(__first < __last))
 23ead28:	4598      	cmp	r8, r3
 23ead2a:	d30c      	bcc.n	23ead46 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xf6>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 23ead2c:	4629      	mov	r1, r5
 23ead2e:	4632      	mov	r2, r6
 23ead30:	4640      	mov	r0, r8
 23ead32:	f7ff ff8d 	bl	23eac50 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0>
      while (__last - __first > int(_S_threshold))
 23ead36:	4645      	mov	r5, r8
 23ead38:	e790      	b.n	23eac5c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xc>
      else if (__comp(__b, __c))
 23ead3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23ead3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ead42:	d5c4      	bpl.n	23eacce <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x7e>
 23ead44:	e7cc      	b.n	23eace0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0x90>
      __a = _GLIBCXX_MOVE(__b);
 23ead46:	ed02 7a01 	vstr	s14, [r2, #-4]
      __b = _GLIBCXX_MOVE(__tmp);
 23ead4a:	edc3 7a00 	vstr	s15, [r3]
	return *this;
 23ead4e:	e7d6      	b.n	23eacfe <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0+0xae>
    }
 23ead50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ead54:	0000      	movs	r0, r0
	...

023ead58 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>:
    {
 23ead58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ead5c:	ed2d 8b06 	vpush	{d8-d10}
 23ead60:	b093      	sub	sp, #76	; 0x4c
 23ead62:	4683      	mov	fp, r0
 23ead64:	ed8d 0a10 	vstr	s0, [sp, #64]	; 0x40
 23ead68:	edcd 0a11 	vstr	s1, [sp, #68]	; 0x44
        for (size_t row = 0; row < matrix->rows; row++) {
 23ead6c:	2300      	movs	r3, #0
    {
 23ead6e:	9105      	str	r1, [sp, #20]
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
        int n_steps = filter_order / 2;
 23ead70:	ea4f 0a61 	mov.w	sl, r1, asr #1
        for (size_t row = 0; row < matrix->rows; row++) {
 23ead74:	9301      	str	r3, [sp, #4]
 23ead76:	9a01      	ldr	r2, [sp, #4]
 23ead78:	f8db 3004 	ldr.w	r3, [fp, #4]
 23ead7c:	4293      	cmp	r3, r2
 23ead7e:	f240 8162 	bls.w	23eb046 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x2ee>
                matrix->buffer + (row * matrix->cols),
 23ead82:	f8db 3000 	ldr.w	r3, [fp]
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 23ead86:	9811      	ldr	r0, [sp, #68]	; 0x44
 23ead88:	9306      	str	r3, [sp, #24]
 23ead8a:	f8db 3008 	ldr.w	r3, [fp, #8]

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
            A[ix] = 1.0f / sampling_freq;
 23ead8e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 23ead92:	9307      	str	r3, [sp, #28]
 23ead94:	4353      	muls	r3, r2
 23ead96:	9308      	str	r3, [sp, #32]
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 23ead98:	f7fc fe26 	bl	23e79e8 <__aeabi_f2d>
 23ead9c:	a3ae      	add	r3, pc, #696	; (adr r3, 23eb058 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x300>)
 23ead9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23eada2:	f7fc fe79 	bl	23e7a98 <__aeabi_dmul>
 23eada6:	4604      	mov	r4, r0
 23eada8:	9810      	ldr	r0, [sp, #64]	; 0x40
 23eadaa:	460d      	mov	r5, r1
 23eadac:	f7fc fe1c 	bl	23e79e8 <__aeabi_f2d>
 23eadb0:	460b      	mov	r3, r1
 23eadb2:	4602      	mov	r2, r0
 23eadb4:	4629      	mov	r1, r5
 23eadb6:	4620      	mov	r0, r4
 23eadb8:	f7fc ff98 	bl	23e7cec <__aeabi_ddiv>
 23eadbc:	ec41 0b10 	vmov	d0, r0, r1
 23eadc0:	f00c f88e 	bl	23f6ee0 <tan>
 23eadc4:	ec51 0b10 	vmov	r0, r1, d0
 23eadc8:	f7fd f95e 	bl	23e8088 <__aeabi_d2f>
 23eadcc:	ee08 0a10 	vmov	s16, r0
 23eadd0:	f7fc fe0a 	bl	23e79e8 <__aeabi_f2d>
 23eadd4:	ec41 0b1a 	vmov	d10, r0, r1
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 23eadd8:	2104      	movs	r1, #4
 23eadda:	4650      	mov	r0, sl
 23eaddc:	f005 f95d 	bl	23f009a <_Z9ei_callocjj>
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 23eade0:	2104      	movs	r1, #4
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 23eade2:	9002      	str	r0, [sp, #8]
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 23eade4:	4650      	mov	r0, sl
 23eade6:	f005 f958 	bl	23f009a <_Z9ei_callocjj>
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 23eadea:	2104      	movs	r1, #4
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 23eadec:	9003      	str	r0, [sp, #12]
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 23eadee:	4650      	mov	r0, sl
 23eadf0:	f005 f953 	bl	23f009a <_Z9ei_callocjj>
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 23eadf4:	2104      	movs	r1, #4
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 23eadf6:	9004      	str	r0, [sp, #16]
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 23eadf8:	4650      	mov	r0, sl
 23eadfa:	f005 f94e 	bl	23f009a <_Z9ei_callocjj>
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 23eadfe:	2104      	movs	r1, #4
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 23eae00:	9009      	str	r0, [sp, #36]	; 0x24
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 23eae02:	4650      	mov	r0, sl
 23eae04:	f005 f949 	bl	23f009a <_Z9ei_callocjj>
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 23eae08:	2104      	movs	r1, #4
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 23eae0a:	900a      	str	r0, [sp, #40]	; 0x28
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 23eae0c:	4650      	mov	r0, sl
 23eae0e:	f005 f944 	bl	23f009a <_Z9ei_callocjj>
 23eae12:	e9dd 3503 	ldrd	r3, r5, [sp, #12]
 23eae16:	ee28 8a08 	vmul.f32	s16, s16, s16
        for (int ix = 0; ix < n_steps; ix++) {
 23eae1a:	2400      	movs	r4, #0
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 23eae1c:	930d      	str	r3, [sp, #52]	; 0x34
 23eae1e:	9b02      	ldr	r3, [sp, #8]
 23eae20:	900b      	str	r0, [sp, #44]	; 0x2c
 23eae22:	930c      	str	r3, [sp, #48]	; 0x30
        for (int ix = 0; ix < n_steps; ix++) {
 23eae24:	45a2      	cmp	sl, r4
 23eae26:	dc6f      	bgt.n	23eaf08 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x1b0>
 23eae28:	9a08      	ldr	r2, [sp, #32]
 23eae2a:	9b06      	ldr	r3, [sp, #24]
 23eae2c:	eb03 0982 	add.w	r9, r3, r2, lsl #2
 23eae30:	9b07      	ldr	r3, [sp, #28]
 23eae32:	4413      	add	r3, r2
 23eae34:	461e      	mov	r6, r3
 23eae36:	9b06      	ldr	r3, [sp, #24]
 23eae38:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 23eae3c:	9308      	str	r3, [sp, #32]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 23eae3e:	9b08      	ldr	r3, [sp, #32]
 23eae40:	4599      	cmp	r9, r3
 23eae42:	f000 80eb 	beq.w	23eb01c <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x2c4>
            dest[sx] = src[sx];

            for (int i = 0; i < n_steps; i++) {
 23eae46:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 23eae4a:	2700      	movs	r7, #0
        for (size_t sx = 0; sx < size; sx++) {
 23eae4c:	9b04      	ldr	r3, [sp, #16]
 23eae4e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 23eae52:	9307      	str	r3, [sp, #28]
 23eae54:	9b03      	ldr	r3, [sp, #12]
 23eae56:	9e02      	ldr	r6, [sp, #8]
 23eae58:	9306      	str	r3, [sp, #24]
            for (int i = 0; i < n_steps; i++) {
 23eae5a:	45ba      	cmp	sl, r7
 23eae5c:	f340 80db 	ble.w	23eb016 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x2be>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 23eae60:	9b06      	ldr	r3, [sp, #24]
 23eae62:	ed95 6a00 	vldr	s12, [r5]
 23eae66:	ecf3 6a01 	vldmia	r3!, {s13}
 23eae6a:	9306      	str	r3, [sp, #24]
 23eae6c:	9b07      	ldr	r3, [sp, #28]
 23eae6e:	ed94 7a00 	vldr	s14, [r4]
 23eae72:	ecf3 7a01 	vldmia	r3!, {s15}
 23eae76:	ee67 7a86 	vmul.f32	s15, s15, s12
 23eae7a:	eee6 7a87 	vfma.f32	s15, s13, s14
 23eae7e:	ed99 7a00 	vldr	s14, [r9]
 23eae82:	ee77 7a87 	vadd.f32	s15, s15, s14
 23eae86:	edc8 7a00 	vstr	s15, [r8]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
 23eae8a:	ecb6 7a01 	vldmia	r6!, {s14}
 23eae8e:	ee17 0a90 	vmov	r0, s15
 23eae92:	eeb0 8a47 	vmov.f32	s16, s14
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 23eae96:	9307      	str	r3, [sp, #28]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
 23eae98:	f7fc fda6 	bl	23e79e8 <__aeabi_f2d>
 23eae9c:	ec41 0b19 	vmov	d9, r0, r1
 23eaea0:	f854 0b04 	ldr.w	r0, [r4], #4
 23eaea4:	f7fc fda0 	bl	23e79e8 <__aeabi_f2d>
 23eaea8:	4602      	mov	r2, r0
 23eaeaa:	460b      	mov	r3, r1
 23eaeac:	f7fc fc3e 	bl	23e772c <__adddf3>
 23eaeb0:	4602      	mov	r2, r0
 23eaeb2:	460b      	mov	r3, r1
 23eaeb4:	ec51 0b19 	vmov	r0, r1, d9
 23eaeb8:	f7fc fc36 	bl	23e7728 <__aeabi_dsub>
 23eaebc:	ec41 0b19 	vmov	d9, r0, r1
 23eaec0:	f855 0b04 	ldr.w	r0, [r5], #4
 23eaec4:	f7fc fd90 	bl	23e79e8 <__aeabi_f2d>
 23eaec8:	4602      	mov	r2, r0
 23eaeca:	460b      	mov	r3, r1
 23eaecc:	ec51 0b19 	vmov	r0, r1, d9
 23eaed0:	f7fc fc2c 	bl	23e772c <__adddf3>
 23eaed4:	ec41 0b19 	vmov	d9, r0, r1
 23eaed8:	ee18 0a10 	vmov	r0, s16
 23eaedc:	f7fc fd84 	bl	23e79e8 <__aeabi_f2d>
 23eaee0:	460b      	mov	r3, r1
 23eaee2:	4602      	mov	r2, r0
 23eaee4:	ec51 0b19 	vmov	r0, r1, d9
 23eaee8:	f7fc fdd6 	bl	23e7a98 <__aeabi_dmul>
 23eaeec:	f7fd f8cc 	bl	23e8088 <__aeabi_d2f>
 23eaef0:	f8c9 0000 	str.w	r0, [r9]
                w2[i] = w1[i];
 23eaef4:	f854 3c04 	ldr.w	r3, [r4, #-4]
            for (int i = 0; i < n_steps; i++) {
 23eaef8:	3701      	adds	r7, #1
                w2[i] = w1[i];
 23eaefa:	f845 3c04 	str.w	r3, [r5, #-4]
                w1[i] = w0[i];
 23eaefe:	f858 3b04 	ldr.w	r3, [r8], #4
 23eaf02:	f844 3c04 	str.w	r3, [r4, #-4]
            for (int i = 0; i < n_steps; i++) {
 23eaf06:	e7a8      	b.n	23eae5a <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x102>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 23eaf08:	4620      	mov	r0, r4
 23eaf0a:	f7fc fd5b 	bl	23e79c4 <__aeabi_i2d>
 23eaf0e:	4602      	mov	r2, r0
 23eaf10:	460b      	mov	r3, r1
 23eaf12:	f7fc fc0b 	bl	23e772c <__adddf3>
 23eaf16:	2200      	movs	r2, #0
 23eaf18:	4b51      	ldr	r3, [pc, #324]	; (23eb060 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x308>)
 23eaf1a:	f7fc fc07 	bl	23e772c <__adddf3>
 23eaf1e:	a34e      	add	r3, pc, #312	; (adr r3, 23eb058 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x300>)
 23eaf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 23eaf24:	f7fc fdb8 	bl	23e7a98 <__aeabi_dmul>
 23eaf28:	4606      	mov	r6, r0
 23eaf2a:	9805      	ldr	r0, [sp, #20]
 23eaf2c:	460f      	mov	r7, r1
 23eaf2e:	f7fc fd49 	bl	23e79c4 <__aeabi_i2d>
 23eaf32:	4602      	mov	r2, r0
 23eaf34:	460b      	mov	r3, r1
 23eaf36:	f7fc fbf9 	bl	23e772c <__adddf3>
 23eaf3a:	4602      	mov	r2, r0
 23eaf3c:	460b      	mov	r3, r1
 23eaf3e:	4630      	mov	r0, r6
 23eaf40:	4639      	mov	r1, r7
 23eaf42:	f7fc fed3 	bl	23e7cec <__aeabi_ddiv>
 23eaf46:	ec41 0b10 	vmov	d0, r0, r1
 23eaf4a:	f00b ff75 	bl	23f6e38 <sin>
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 23eaf4e:	ee18 0a10 	vmov	r0, s16
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 23eaf52:	ec59 8b10 	vmov	r8, r9, d0
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 23eaf56:	f7fc fd47 	bl	23e79e8 <__aeabi_f2d>
 23eaf5a:	ec53 2b1a 	vmov	r2, r3, d10
 23eaf5e:	ec41 0b19 	vmov	d9, r0, r1
 23eaf62:	ec51 0b1a 	vmov	r0, r1, d10
 23eaf66:	f7fc fbe1 	bl	23e772c <__adddf3>
 23eaf6a:	4606      	mov	r6, r0
 23eaf6c:	460f      	mov	r7, r1
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 23eaf6e:	4640      	mov	r0, r8
 23eaf70:	4649      	mov	r1, r9
 23eaf72:	f7fd f889 	bl	23e8088 <__aeabi_d2f>
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 23eaf76:	f7fc fd37 	bl	23e79e8 <__aeabi_f2d>
 23eaf7a:	4602      	mov	r2, r0
 23eaf7c:	460b      	mov	r3, r1
 23eaf7e:	4630      	mov	r0, r6
 23eaf80:	4639      	mov	r1, r7
 23eaf82:	f7fc fd89 	bl	23e7a98 <__aeabi_dmul>
 23eaf86:	4602      	mov	r2, r0
 23eaf88:	460b      	mov	r3, r1
 23eaf8a:	4680      	mov	r8, r0
 23eaf8c:	4689      	mov	r9, r1
 23eaf8e:	ec51 0b19 	vmov	r0, r1, d9
 23eaf92:	f7fc fbcb 	bl	23e772c <__adddf3>
 23eaf96:	2200      	movs	r2, #0
 23eaf98:	4b31      	ldr	r3, [pc, #196]	; (23eb060 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x308>)
 23eaf9a:	f7fc fbc7 	bl	23e772c <__adddf3>
 23eaf9e:	f7fd f873 	bl	23e8088 <__aeabi_d2f>
 23eafa2:	ee07 0a10 	vmov	s14, r0
            A[ix] = 1.0f / sampling_freq;
 23eafa6:	eec8 7a87 	vdiv.f32	s15, s17, s14
 23eafaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        for (int ix = 0; ix < n_steps; ix++) {
 23eafac:	3401      	adds	r4, #1
            A[ix] = 1.0f / sampling_freq;
 23eafae:	ece3 7a01 	vstmia	r3!, {s15}
 23eafb2:	930c      	str	r3, [sp, #48]	; 0x30
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 23eafb4:	f7fc fd18 	bl	23e79e8 <__aeabi_f2d>
 23eafb8:	ee78 7ac8 	vsub.f32	s15, s17, s16
 23eafbc:	4606      	mov	r6, r0
 23eafbe:	ee17 0a90 	vmov	r0, s15
 23eafc2:	460f      	mov	r7, r1
 23eafc4:	f7fc fd10 	bl	23e79e8 <__aeabi_f2d>
 23eafc8:	4602      	mov	r2, r0
 23eafca:	460b      	mov	r3, r1
 23eafcc:	f7fc fbae 	bl	23e772c <__adddf3>
 23eafd0:	4632      	mov	r2, r6
 23eafd2:	463b      	mov	r3, r7
 23eafd4:	f7fc fe8a 	bl	23e7cec <__aeabi_ddiv>
 23eafd8:	f7fd f856 	bl	23e8088 <__aeabi_d2f>
 23eafdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 23eafde:	4642      	mov	r2, r8
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 23eafe0:	f843 0b04 	str.w	r0, [r3], #4
 23eafe4:	930d      	str	r3, [sp, #52]	; 0x34
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 23eafe6:	ec51 0b19 	vmov	r0, r1, d9
 23eafea:	464b      	mov	r3, r9
 23eafec:	f7fc fb9c 	bl	23e7728 <__aeabi_dsub>
 23eaff0:	2200      	movs	r2, #0
 23eaff2:	4b1b      	ldr	r3, [pc, #108]	; (23eb060 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x308>)
 23eaff4:	f7fc fb9a 	bl	23e772c <__adddf3>
 23eaff8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23eaffc:	930f      	str	r3, [sp, #60]	; 0x3c
 23eaffe:	900e      	str	r0, [sp, #56]	; 0x38
 23eb000:	4632      	mov	r2, r6
 23eb002:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 23eb006:	463b      	mov	r3, r7
 23eb008:	f7fc fe70 	bl	23e7cec <__aeabi_ddiv>
 23eb00c:	f7fd f83c 	bl	23e8088 <__aeabi_d2f>
 23eb010:	f845 0b04 	str.w	r0, [r5], #4
        for (int ix = 0; ix < n_steps; ix++) {
 23eb014:	e706      	b.n	23eae24 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0xcc>
        for (size_t sx = 0; sx < size; sx++) {
 23eb016:	f109 0904 	add.w	r9, r9, #4
 23eb01a:	e710      	b.n	23eae3e <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0xe6>
            }
        }

        ei_free(A);
 23eb01c:	9802      	ldr	r0, [sp, #8]
 23eb01e:	f005 f83e 	bl	23f009e <_Z7ei_freePv>
        ei_free(d1);
 23eb022:	9803      	ldr	r0, [sp, #12]
 23eb024:	f005 f83b 	bl	23f009e <_Z7ei_freePv>
        ei_free(d2);
 23eb028:	9804      	ldr	r0, [sp, #16]
 23eb02a:	f005 f838 	bl	23f009e <_Z7ei_freePv>
        ei_free(w0);
 23eb02e:	9809      	ldr	r0, [sp, #36]	; 0x24
 23eb030:	f005 f835 	bl	23f009e <_Z7ei_freePv>
        ei_free(w1);
 23eb034:	980a      	ldr	r0, [sp, #40]	; 0x28
 23eb036:	f005 f832 	bl	23f009e <_Z7ei_freePv>
        ei_free(w2);
 23eb03a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 23eb03c:	f005 f82f 	bl	23f009e <_Z7ei_freePv>
        for (size_t row = 0; row < matrix->rows; row++) {
 23eb040:	9b01      	ldr	r3, [sp, #4]
 23eb042:	3301      	adds	r3, #1
 23eb044:	e696      	b.n	23ead74 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x1c>
    }
 23eb046:	2000      	movs	r0, #0
 23eb048:	b013      	add	sp, #76	; 0x4c
 23eb04a:	ecbd 8b06 	vpop	{d8-d10}
 23eb04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23eb052:	bf00      	nop
 23eb054:	f3af 8000 	nop.w
 23eb058:	54442d18 	.word	0x54442d18
 23eb05c:	400921fb 	.word	0x400921fb
 23eb060:	3ff00000 	.word	0x3ff00000

023eb064 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 23eb064:	b40e      	push	{r1, r2, r3}
 23eb066:	b503      	push	{r0, r1, lr}
 23eb068:	ab03      	add	r3, sp, #12
 23eb06a:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 23eb06e:	2100      	movs	r1, #0
        va_start(args, format);
 23eb070:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 23eb072:	f00b f8a0 	bl	23f61b6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 23eb076:	b002      	add	sp, #8
 23eb078:	f85d eb04 	ldr.w	lr, [sp], #4
 23eb07c:	b003      	add	sp, #12
 23eb07e:	4770      	bx	lr

023eb080 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 23eb080:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23eb082:	4604      	mov	r4, r0
  {
    if (default_ && clock_ == 0)
 23eb084:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 23eb086:	4608      	mov	r0, r1
    if (default_ && clock_ == 0)
 23eb088:	68a3      	ldr	r3, [r4, #8]
 23eb08a:	b132      	cbz	r2, 23eb09a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 23eb08c:	b9a3      	cbnz	r3, 23eb0b8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 23eb08e:	490b      	ldr	r1, [pc, #44]	; (23eb0bc <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
 23eb090:	b002      	add	sp, #8
 23eb092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 23eb096:	f00a bf85 	b.w	23f5fa4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23eb09a:	4a09      	ldr	r2, [pc, #36]	; (23eb0c0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 23eb09c:	7b26      	ldrb	r6, [r4, #12]
 23eb09e:	4d09      	ldr	r5, [pc, #36]	; (23eb0c4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 23eb0a0:	4909      	ldr	r1, [pc, #36]	; (23eb0c8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 23eb0a2:	7b64      	ldrb	r4, [r4, #13]
 23eb0a4:	2e01      	cmp	r6, #1
 23eb0a6:	bf18      	it	ne
 23eb0a8:	4629      	movne	r1, r5
 23eb0aa:	e9cd 1400 	strd	r1, r4, [sp]
 23eb0ae:	4907      	ldr	r1, [pc, #28]	; (23eb0cc <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 23eb0b0:	f7ff ffd8 	bl	23eb064 <_ZN5Print6printfEPKcz>
  }
 23eb0b4:	b002      	add	sp, #8
 23eb0b6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23eb0b8:	4a05      	ldr	r2, [pc, #20]	; (23eb0d0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 23eb0ba:	e7ef      	b.n	23eb09c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 23eb0bc:	023faef2 	.word	0x023faef2
 23eb0c0:	023fb03b 	.word	0x023fb03b
 23eb0c4:	023faeee 	.word	0x023faeee
 23eb0c8:	023faeea 	.word	0x023faeea
 23eb0cc:	023faf08 	.word	0x023faf08
 23eb0d0:	023faee1 	.word	0x023faee1

023eb0d4 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23eb0d4:	b510      	push	{r4, lr}
      if (_M_manager)
 23eb0d6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23eb0d8:	4604      	mov	r4, r0
      if (_M_manager)
 23eb0da:	b113      	cbz	r3, 23eb0e2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23eb0dc:	2203      	movs	r2, #3
 23eb0de:	4601      	mov	r1, r0
 23eb0e0:	4798      	blx	r3
    }
 23eb0e2:	4620      	mov	r0, r4
 23eb0e4:	bd10      	pop	{r4, pc}

023eb0e6 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 23eb0e6:	b570      	push	{r4, r5, r6, lr}
 23eb0e8:	4604      	mov	r4, r0
 23eb0ea:	460e      	mov	r6, r1
 23eb0ec:	4615      	mov	r5, r2
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 23eb0ee:	b133      	cbz	r3, 23eb0fe <_ZN2ei9ei_matrixC1EmmPf+0x18>
            buffer = a_buffer;
 23eb0f0:	6003      	str	r3, [r0, #0]
            buffer_managed_by_me = false;
 23eb0f2:	2300      	movs	r3, #0
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 23eb0f4:	4620      	mov	r0, r4
        cols = n_cols;
 23eb0f6:	e9c4 6501 	strd	r6, r5, [r4, #4]
            buffer_managed_by_me = true;
 23eb0fa:	7323      	strb	r3, [r4, #12]
    }
 23eb0fc:	bd70      	pop	{r4, r5, r6, pc}
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 23eb0fe:	fb02 f001 	mul.w	r0, r2, r1
 23eb102:	2101      	movs	r1, #1
 23eb104:	0080      	lsls	r0, r0, #2
 23eb106:	f004 ffc8 	bl	23f009a <_Z9ei_callocjj>
            buffer_managed_by_me = true;
 23eb10a:	2301      	movs	r3, #1
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 23eb10c:	6020      	str	r0, [r4, #0]
            buffer_managed_by_me = true;
 23eb10e:	e7f1      	b.n	23eb0f4 <_ZN2ei9ei_matrixC1EmmPf+0xe>

023eb110 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 23eb110:	b510      	push	{r4, lr}
 23eb112:	4604      	mov	r4, r0
        if (buffer && buffer_managed_by_me) {
 23eb114:	6800      	ldr	r0, [r0, #0]
 23eb116:	b118      	cbz	r0, 23eb120 <_ZN2ei9ei_matrixD1Ev+0x10>
 23eb118:	7b23      	ldrb	r3, [r4, #12]
 23eb11a:	b10b      	cbz	r3, 23eb120 <_ZN2ei9ei_matrixD1Ev+0x10>
            ei_free(buffer);
 23eb11c:	f004 ffbf 	bl	23f009e <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 23eb120:	4620      	mov	r0, r4
 23eb122:	bd10      	pop	{r4, pc}

023eb124 <_ZN2ei5numpy3sumEPfj>:
        float res = 0.0f;
 23eb124:	ed9f 0a05 	vldr	s0, [pc, #20]	; 23eb13c <_ZN2ei5numpy3sumEPfj+0x18>
 23eb128:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        for (size_t ix = 0; ix < input_array_size; ix++) {
 23eb12c:	4288      	cmp	r0, r1
 23eb12e:	d004      	beq.n	23eb13a <_ZN2ei5numpy3sumEPfj+0x16>
            res += input_array[ix];
 23eb130:	ecf0 7a01 	vldmia	r0!, {s15}
 23eb134:	ee30 0a27 	vadd.f32	s0, s0, s15
        for (size_t ix = 0; ix < input_array_size; ix++) {
 23eb138:	e7f8      	b.n	23eb12c <_ZN2ei5numpy3sumEPfj+0x8>
    }
 23eb13a:	4770      	bx	lr
 23eb13c:	00000000 	.word	0x00000000

023eb140 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>:
    static void transpose_in_place(matrix_t *matrix) {
 23eb140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23eb142:	4604      	mov	r4, r0
        size_t size = matrix->cols * matrix->rows - 1;
 23eb144:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 23eb148:	fb00 f502 	mul.w	r5, r0, r2
 23eb14c:	1e6e      	subs	r6, r5, #1
      }

      void
      _M_initialize(size_type __n)
      {
	if (__n)
 23eb14e:	b16d      	cbz	r5, 23eb16c <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x2c>
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
 23eb150:	f105 021f 	add.w	r2, r5, #31
 23eb154:	0952      	lsrs	r2, r2, #5
        auto bytes = n * sizeof(T);
 23eb156:	0092      	lsls	r2, r2, #2
        auto ptr = ei_dsp_malloc(bytes);
 23eb158:	4610      	mov	r0, r2
 23eb15a:	9201      	str	r2, [sp, #4]
 23eb15c:	f004 ff9b 	bl	23f0096 <_Z9ei_mallocj>
 23eb160:	4605      	mov	r5, r0
      }

      void
      _M_initialize_value(bool __x)
      {
	if (_Bit_type* __p = this->_M_impl._M_start._M_p)
 23eb162:	b118      	cbz	r0, 23eb16c <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x2c>
	  __builtin_memset(__p, __x ? ~0 : 0,
 23eb164:	2100      	movs	r1, #0
 23eb166:	9a01      	ldr	r2, [sp, #4]
 23eb168:	f00d fddb 	bl	23f8d22 <memset>
	: _M_start(), _M_finish(), _M_end_of_storage()
 23eb16c:	2201      	movs	r2, #1
    { return reference(_M_p, 1UL << _M_offset); }
 23eb16e:	4610      	mov	r0, r2
            temp = matrix->buffer[i];
 23eb170:	6823      	ldr	r3, [r4, #0]
 23eb172:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23eb176:	f8d3 e000 	ldr.w	lr, [r3]
 23eb17a:	4613      	mov	r3, r2
                size_t col = i % matrix->cols;
 23eb17c:	68a1      	ldr	r1, [r4, #8]
 23eb17e:	fbb3 f7f1 	udiv	r7, r3, r1
 23eb182:	fb01 3317 	mls	r3, r1, r7, r3
                next = col*matrix->rows + row;
 23eb186:	6861      	ldr	r1, [r4, #4]
 23eb188:	fb01 7303 	mla	r3, r1, r3, r7
                float temp2 = matrix->buffer[next];
 23eb18c:	4677      	mov	r7, lr
 23eb18e:	6821      	ldr	r1, [r4, #0]
			 + __n / int(_S_word_bit), __n % int(_S_word_bit));
 23eb190:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 23eb194:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 23eb198:	f8d1 e000 	ldr.w	lr, [r1]
                matrix->buffer[next] = temp;
 23eb19c:	600f      	str	r7, [r1, #0]
	return *iterator(this->_M_impl._M_start._M_p
 23eb19e:	f003 011f 	and.w	r1, r3, #31
    { return reference(_M_p, 1UL << _M_offset); }
 23eb1a2:	fa00 f701 	lsl.w	r7, r0, r1
	*_M_p |= _M_mask;
 23eb1a6:	f855 102c 	ldr.w	r1, [r5, ip, lsl #2]
            while (i != cycleBegin);
 23eb1aa:	429a      	cmp	r2, r3
 23eb1ac:	ea41 0107 	orr.w	r1, r1, r7
 23eb1b0:	f845 102c 	str.w	r1, [r5, ip, lsl #2]
 23eb1b4:	d1e2      	bne.n	23eb17c <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x3c>
			 + __n / int(_S_word_bit), __n % int(_S_word_bit));
 23eb1b6:	0959      	lsrs	r1, r3, #5
    { return !!(*_M_p & _M_mask); }
 23eb1b8:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
	return *iterator(this->_M_impl._M_start._M_p
 23eb1bc:	f003 021f 	and.w	r2, r3, #31
    { return reference(_M_p, 1UL << _M_offset); }
 23eb1c0:	fa00 f202 	lsl.w	r2, r0, r2
            for (i = all_done_mark; done[i]; i++) {
 23eb1c4:	420a      	tst	r2, r1
 23eb1c6:	d00e      	beq.n	23eb1e6 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xa6>
                if(i>=size) { goto LOOP_END; }
 23eb1c8:	42b3      	cmp	r3, r6
                all_done_mark++; // move the high water mark so we don't look again
 23eb1ca:	f103 0201 	add.w	r2, r3, #1
                if(i>=size) { goto LOOP_END; }
 23eb1ce:	d30c      	bcc.n	23eb1ea <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xaa>
      __a = _GLIBCXX_MOVE(__b);
 23eb1d0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23eb1d4:	e9c4 2301 	strd	r2, r3, [r4, #4]
	if (_M_impl._M_start._M_p)
 23eb1d8:	b14d      	cbz	r5, 23eb1ee <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0xae>
#if EIDSP_TRACK_ALLOCATIONS
        auto size_p = get_allocs().find(p);
        ei_dsp_free(p,size_p->second);
        get_allocs().erase(size_p);
#else
        ei_dsp_free(p,0);
 23eb1da:	4628      	mov	r0, r5
    }
 23eb1dc:	b003      	add	sp, #12
 23eb1de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23eb1e2:	f004 bf5c 	b.w	23f009e <_Z7ei_freePv>
 23eb1e6:	461a      	mov	r2, r3
 23eb1e8:	e7c2      	b.n	23eb170 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x30>
            for (i = all_done_mark; done[i]; i++) {
 23eb1ea:	4613      	mov	r3, r2
 23eb1ec:	e7e3      	b.n	23eb1b6 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE+0x76>
    }
 23eb1ee:	b003      	add	sp, #12
 23eb1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023eb1f4 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
    static int transpose(matrix_t *matrix) {
 23eb1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23eb1f8:	b088      	sub	sp, #32
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 23eb1fa:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 23eb1fe:	2300      	movs	r3, #0
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 23eb200:	f8d0 8000 	ldr.w	r8, [r0]
    static int transpose(matrix_t *matrix) {
 23eb204:	4605      	mov	r5, r0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 23eb206:	463a      	mov	r2, r7
 23eb208:	4631      	mov	r1, r6
 23eb20a:	a804      	add	r0, sp, #16
 23eb20c:	f7ff ff6b 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23eb210:	9b04      	ldr	r3, [sp, #16]
 23eb212:	b363      	cbz	r3, 23eb26e <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x7a>
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 23eb214:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 23eb218:	da2b      	bge.n	23eb272 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x7e>
 23eb21a:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 23eb21e:	da28      	bge.n	23eb272 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x7e>
        };
 23eb220:	b2b1      	uxth	r1, r6
 23eb222:	b2ba      	uxth	r2, r7
 23eb224:	f8ad 1002 	strh.w	r1, [sp, #2]
        };
 23eb228:	f8ad 1008 	strh.w	r1, [sp, #8]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 23eb22c:	4668      	mov	r0, sp
 23eb22e:	a902      	add	r1, sp, #8
        };
 23eb230:	f8ad 2000 	strh.w	r2, [sp]
 23eb234:	f8cd 8004 	str.w	r8, [sp, #4]
        };
 23eb238:	f8ad 200a 	strh.w	r2, [sp, #10]
 23eb23c:	9303      	str	r3, [sp, #12]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 23eb23e:	f7fd f9ca 	bl	23e85d6 <arm_mat_trans_f32>
        if (status != ARM_MATH_SUCCESS) {
 23eb242:	4604      	mov	r4, r0
 23eb244:	b930      	cbnz	r0, 23eb254 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x60>
        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 23eb246:	fb07 f206 	mul.w	r2, r7, r6
 23eb24a:	4640      	mov	r0, r8
 23eb24c:	9904      	ldr	r1, [sp, #16]
 23eb24e:	0092      	lsls	r2, r2, #2
 23eb250:	f00d fd40 	bl	23f8cd4 <memcpy>
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 23eb254:	a804      	add	r0, sp, #16
 23eb256:	f7ff ff5b 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
        if (r != 0) {
 23eb25a:	b924      	cbnz	r4, 23eb266 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x72>
        uint16_t old_rows = matrix->rows;
 23eb25c:	686b      	ldr	r3, [r5, #4]
        matrix->rows = old_cols;
 23eb25e:	892a      	ldrh	r2, [r5, #8]
        matrix->cols = old_rows;
 23eb260:	b29b      	uxth	r3, r3
        matrix->rows = old_cols;
 23eb262:	606a      	str	r2, [r5, #4]
        matrix->cols = old_rows;
 23eb264:	60ab      	str	r3, [r5, #8]
    }
 23eb266:	4620      	mov	r0, r4
 23eb268:	b008      	add	sp, #32
 23eb26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 23eb26e:	4c02      	ldr	r4, [pc, #8]	; (23eb278 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x84>)
 23eb270:	e7f0      	b.n	23eb254 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x60>
            return EIDSP_NARROWING;
 23eb272:	4c02      	ldr	r4, [pc, #8]	; (23eb27c <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x88>)
 23eb274:	e7ee      	b.n	23eb254 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x60>
 23eb276:	bf00      	nop
 23eb278:	fffffc16 	.word	0xfffffc16
 23eb27c:	fffffc0c 	.word	0xfffffc0c

023eb280 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
        if (scale == 1.0f) return EIDSP_OK;
 23eb280:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 23eb284:	eeb4 0a67 	vcmp.f32	s0, s15
 23eb288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb28c:	d001      	beq.n	23eb292 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x12>
 23eb28e:	f7ff ba67 	b.w	23ea760 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf.part.0>
    }
 23eb292:	2000      	movs	r0, #0
 23eb294:	4770      	bx	lr

023eb296 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23eb296:	2300      	movs	r3, #0
 23eb298:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 23eb29c:	434a      	muls	r2, r1
 23eb29e:	429a      	cmp	r2, r3
 23eb2a0:	d90a      	bls.n	23eb2b8 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x22>
            matrix->buffer[ix] -= subtraction;
 23eb2a2:	6802      	ldr	r2, [r0, #0]
 23eb2a4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 23eb2a8:	edd2 7a00 	vldr	s15, [r2]
 23eb2ac:	ee77 7ac0 	vsub.f32	s15, s15, s0
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23eb2b0:	3301      	adds	r3, #1
            matrix->buffer[ix] -= subtraction;
 23eb2b2:	edc2 7a00 	vstr	s15, [r2]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23eb2b6:	e7ef      	b.n	23eb298 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x2>
        }
        return EIDSP_OK;
    }
 23eb2b8:	2000      	movs	r0, #0
 23eb2ba:	4770      	bx	lr

023eb2bc <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
     * Add on a matrix in place, per row
     * @param matrix Input matrix (MxN)
     * @param add Scale matrix (Mx1)
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 23eb2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (matrix->rows != subtract_matrix->rows) {
 23eb2be:	6842      	ldr	r2, [r0, #4]
 23eb2c0:	684b      	ldr	r3, [r1, #4]
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 23eb2c2:	4605      	mov	r5, r0
        if (matrix->rows != subtract_matrix->rows) {
 23eb2c4:	429a      	cmp	r2, r3
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 23eb2c6:	460f      	mov	r7, r1
 23eb2c8:	b085      	sub	sp, #20
        if (matrix->rows != subtract_matrix->rows) {
 23eb2ca:	d128      	bne.n	23eb31e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x62>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (subtract_matrix->cols != 1) {
 23eb2cc:	688b      	ldr	r3, [r1, #8]
 23eb2ce:	2b01      	cmp	r3, #1
 23eb2d0:	d125      	bne.n	23eb31e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x62>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 23eb2d2:	2600      	movs	r6, #0
 23eb2d4:	686b      	ldr	r3, [r5, #4]
 23eb2d6:	42b3      	cmp	r3, r6
 23eb2d8:	d923      	bls.n	23eb322 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x66>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 23eb2da:	68aa      	ldr	r2, [r5, #8]
 23eb2dc:	682b      	ldr	r3, [r5, #0]
 23eb2de:	fb06 f102 	mul.w	r1, r6, r2
 23eb2e2:	4668      	mov	r0, sp
 23eb2e4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 23eb2e8:	2101      	movs	r1, #1
 23eb2ea:	f7ff fefc 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23eb2ee:	9b00      	ldr	r3, [sp, #0]
 23eb2f0:	b173      	cbz	r3, 23eb310 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x54>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
 23eb2f2:	683b      	ldr	r3, [r7, #0]
 23eb2f4:	4668      	mov	r0, sp
 23eb2f6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 23eb2fa:	ed93 0a00 	vldr	s0, [r3]
 23eb2fe:	f7ff ffca 	bl	23eb296 <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
            if (ret != EIDSP_OK) {
 23eb302:	4604      	mov	r4, r0
 23eb304:	b928      	cbnz	r0, 23eb312 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x56>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 23eb306:	4668      	mov	r0, sp
 23eb308:	f7ff ff02 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
        for (size_t row = 0; row < matrix->rows; row++) {
 23eb30c:	3601      	adds	r6, #1
 23eb30e:	e7e1      	b.n	23eb2d4 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x18>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 23eb310:	4c05      	ldr	r4, [pc, #20]	; (23eb328 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x6c>)
 23eb312:	4668      	mov	r0, sp
 23eb314:	f7ff fefc 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
                EIDSP_ERR(ret);
            }
        }

        return EIDSP_OK;
    }
 23eb318:	4620      	mov	r0, r4
 23eb31a:	b005      	add	sp, #20
 23eb31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23eb31e:	4c03      	ldr	r4, [pc, #12]	; (23eb32c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x70>)
 23eb320:	e7fa      	b.n	23eb318 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x5c>
        return EIDSP_OK;
 23eb322:	2400      	movs	r4, #0
 23eb324:	e7f8      	b.n	23eb318 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x5c>
 23eb326:	bf00      	nop
 23eb328:	fffffc16 	.word	0xfffffc16
 23eb32c:	fffffc14 	.word	0xfffffc14

023eb330 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 23eb330:	b573      	push	{r0, r1, r4, r5, r6, lr}
        if (matrix->rows != output_matrix->rows) {
 23eb332:	6842      	ldr	r2, [r0, #4]
 23eb334:	684b      	ldr	r3, [r1, #4]
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 23eb336:	4604      	mov	r4, r0
        if (matrix->rows != output_matrix->rows) {
 23eb338:	429a      	cmp	r2, r3
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 23eb33a:	460e      	mov	r6, r1
        if (matrix->rows != output_matrix->rows) {
 23eb33c:	d116      	bne.n	23eb36c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x3c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        if (output_matrix->cols != 1) {
 23eb33e:	688b      	ldr	r3, [r1, #8]
 23eb340:	2b01      	cmp	r3, #1
 23eb342:	d113      	bne.n	23eb36c <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x3c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 23eb344:	2500      	movs	r5, #0
 23eb346:	6863      	ldr	r3, [r4, #4]
 23eb348:	42ab      	cmp	r3, r5
 23eb34a:	d912      	bls.n	23eb372 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x42>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 23eb34c:	68a1      	ldr	r1, [r4, #8]
 23eb34e:	6823      	ldr	r3, [r4, #0]
 23eb350:	fb01 f005 	mul.w	r0, r1, r5
 23eb354:	aa01      	add	r2, sp, #4
 23eb356:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 23eb35a:	f7fd f96f 	bl	23e863c <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 23eb35e:	6833      	ldr	r3, [r6, #0]
 23eb360:	9a01      	ldr	r2, [sp, #4]
 23eb362:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 23eb366:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 23eb368:	3501      	adds	r5, #1
 23eb36a:	e7ec      	b.n	23eb346 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x16>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23eb36c:	4802      	ldr	r0, [pc, #8]	; (23eb378 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x48>)
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
    }
 23eb36e:	b002      	add	sp, #8
 23eb370:	bd70      	pop	{r4, r5, r6, pc}
 23eb372:	2000      	movs	r0, #0
 23eb374:	e7fb      	b.n	23eb36e <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x3e>
 23eb376:	bf00      	nop
 23eb378:	fffffc14 	.word	0xfffffc14

023eb37c <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 23eb37c:	b573      	push	{r0, r1, r4, r5, r6, lr}
        if (input_matrix->rows != output_matrix->rows) {
 23eb37e:	6842      	ldr	r2, [r0, #4]
 23eb380:	684b      	ldr	r3, [r1, #4]
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 23eb382:	4604      	mov	r4, r0
        if (input_matrix->rows != output_matrix->rows) {
 23eb384:	429a      	cmp	r2, r3
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 23eb386:	460e      	mov	r6, r1
        if (input_matrix->rows != output_matrix->rows) {
 23eb388:	d116      	bne.n	23eb3b8 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x3c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }
        if (output_matrix->cols != 1) {
 23eb38a:	688b      	ldr	r3, [r1, #8]
 23eb38c:	2b01      	cmp	r3, #1
 23eb38e:	d113      	bne.n	23eb3b8 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x3c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 23eb390:	2500      	movs	r5, #0
 23eb392:	6863      	ldr	r3, [r4, #4]
 23eb394:	42ab      	cmp	r3, r5
 23eb396:	d912      	bls.n	23eb3be <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x42>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 23eb398:	68a1      	ldr	r1, [r4, #8]
 23eb39a:	6823      	ldr	r3, [r4, #0]
 23eb39c:	fb01 f005 	mul.w	r0, r1, r5
 23eb3a0:	aa01      	add	r2, sp, #4
 23eb3a2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 23eb3a6:	f7fd f931 	bl	23e860c <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 23eb3aa:	6833      	ldr	r3, [r6, #0]
 23eb3ac:	9a01      	ldr	r2, [sp, #4]
 23eb3ae:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 23eb3b2:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23eb3b4:	3501      	adds	r5, #1
 23eb3b6:	e7ec      	b.n	23eb392 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x16>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23eb3b8:	4802      	ldr	r0, [pc, #8]	; (23eb3c4 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x48>)
            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
    }
 23eb3ba:	b002      	add	sp, #8
 23eb3bc:	bd70      	pop	{r4, r5, r6, pc}
 23eb3be:	2000      	movs	r0, #0
 23eb3c0:	e7fb      	b.n	23eb3ba <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x3e>
 23eb3c2:	bf00      	nop
 23eb3c4:	fffffc14 	.word	0xfffffc14

023eb3c8 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>:
        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));

        return EIDSP_OK;
    }

    static int subtract_mean(matrix_t* input_matrix) {
 23eb3c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        // calculate the mean
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 23eb3ca:	2300      	movs	r3, #0
 23eb3cc:	6841      	ldr	r1, [r0, #4]
    static int subtract_mean(matrix_t* input_matrix) {
 23eb3ce:	4604      	mov	r4, r0
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 23eb3d0:	2201      	movs	r2, #1
 23eb3d2:	4668      	mov	r0, sp
 23eb3d4:	f7ff fe87 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23eb3d8:	9b00      	ldr	r3, [sp, #0]
 23eb3da:	b18b      	cbz	r3, 23eb400 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x38>
        int ret = numpy::mean(input_matrix, &mean_matrix);
 23eb3dc:	4669      	mov	r1, sp
 23eb3de:	4620      	mov	r0, r4
 23eb3e0:	f7ff ffcc 	bl	23eb37c <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
        if (ret != EIDSP_OK) {
 23eb3e4:	b928      	cbnz	r0, 23eb3f2 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x2a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        // scale by the mean
        ret = numpy::subtract(input_matrix, &mean_matrix);
 23eb3e6:	4620      	mov	r0, r4
 23eb3e8:	4669      	mov	r1, sp
 23eb3ea:	f7ff ff67 	bl	23eb2bc <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
        if (ret != EIDSP_OK) {
 23eb3ee:	4604      	mov	r4, r0
 23eb3f0:	b100      	cbz	r0, 23eb3f4 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x2c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23eb3f2:	4c04      	ldr	r4, [pc, #16]	; (23eb404 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x3c>)
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 23eb3f4:	4668      	mov	r0, sp
 23eb3f6:	f7ff fe8b 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
        }

        return EIDSP_OK;
    }
 23eb3fa:	4620      	mov	r0, r4
 23eb3fc:	b004      	add	sp, #16
 23eb3fe:	bd10      	pop	{r4, pc}
        EI_DSP_MATRIX(mean_matrix, input_matrix->rows, 1);
 23eb400:	4c01      	ldr	r4, [pc, #4]	; (23eb408 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x40>)
 23eb402:	e7f7      	b.n	23eb3f4 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE+0x2c>
 23eb404:	fffffc14 	.word	0xfffffc14
 23eb408:	fffffc16 	.word	0xfffffc16

023eb40c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 23eb40c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23eb410:	b089      	sub	sp, #36	; 0x24
 23eb412:	9c10      	ldr	r4, [sp, #64]	; 0x40
 23eb414:	4617      	mov	r7, r2
        size_t n_fft_out_features = (n_fft / 2) + 1;
 23eb416:	0862      	lsrs	r2, r4, #1
 23eb418:	3201      	adds	r2, #1
        if (output_size != n_fft_out_features) {
 23eb41a:	429a      	cmp	r2, r3
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 23eb41c:	4606      	mov	r6, r0
 23eb41e:	460d      	mov	r5, r1
        if (output_size != n_fft_out_features) {
 23eb420:	d152      	bne.n	23eb4c8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xbc>
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
        if (src_size == n_fft) {
            fft_input_buffer = (float*)src;
 23eb422:	428c      	cmp	r4, r1
 23eb424:	bf94      	ite	ls
 23eb426:	4680      	movls	r8, r0
 23eb428:	f04f 0800 	movhi.w	r8, #0
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 23eb42c:	4622      	mov	r2, r4
 23eb42e:	4643      	mov	r3, r8
 23eb430:	2101      	movs	r1, #1
 23eb432:	a804      	add	r0, sp, #16
 23eb434:	f7ff fe57 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23eb438:	9804      	ldr	r0, [sp, #16]
 23eb43a:	b390      	cbz	r0, 23eb4a2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x96>
        if (!fft_input.buffer) {
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
        }

        if (!fft_input_buffer) {
 23eb43c:	f1b8 0f00 	cmp.w	r8, #0
 23eb440:	d10f      	bne.n	23eb462 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 23eb442:	42a5      	cmp	r5, r4
 23eb444:	bf28      	it	cs
 23eb446:	4625      	movcs	r5, r4
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 23eb448:	ea4f 0985 	mov.w	r9, r5, lsl #2
 23eb44c:	464a      	mov	r2, r9
 23eb44e:	4631      	mov	r1, r6
 23eb450:	f00d fc40 	bl	23f8cd4 <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 23eb454:	9804      	ldr	r0, [sp, #16]
 23eb456:	1b65      	subs	r5, r4, r5
 23eb458:	4641      	mov	r1, r8
 23eb45a:	00aa      	lsls	r2, r5, #2
 23eb45c:	4448      	add	r0, r9
 23eb45e:	f00d fc60 	bl	23f8d22 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 23eb462:	2c20      	cmp	r4, #32
 23eb464:	d02e      	beq.n	23eb4c4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xb8>
 23eb466:	2c40      	cmp	r4, #64	; 0x40
 23eb468:	d02c      	beq.n	23eb4c4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xb8>
 23eb46a:	2c80      	cmp	r4, #128	; 0x80
 23eb46c:	d02a      	beq.n	23eb4c4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xb8>
 23eb46e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 23eb472:	d027      	beq.n	23eb4c4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xb8>
 23eb474:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 23eb478:	d024      	beq.n	23eb4c4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xb8>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 23eb47a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 23eb47e:	d021      	beq.n	23eb4c4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xb8>
 23eb480:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 23eb484:	d01e      	beq.n	23eb4c4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xb8>
 23eb486:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 23eb48a:	d01b      	beq.n	23eb4c4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xb8>
    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 23eb48c:	ab03      	add	r3, sp, #12
 23eb48e:	9300      	str	r3, [sp, #0]
 23eb490:	2300      	movs	r3, #0
 23eb492:	4620      	mov	r0, r4
 23eb494:	461a      	mov	r2, r3
 23eb496:	4619      	mov	r1, r3
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 23eb498:	9d04      	ldr	r5, [sp, #16]
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 23eb49a:	f004 fc79 	bl	23efd90 <kiss_fftr_alloc>
        if (!cfg) {
 23eb49e:	4604      	mov	r4, r0
 23eb4a0:	b908      	cbnz	r0, 23eb4a6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x9a>
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 23eb4a2:	4c0a      	ldr	r4, [pc, #40]	; (23eb4cc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xc0>)
 23eb4a4:	e007      	b.n	23eb4b6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xaa>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 23eb4a6:	463a      	mov	r2, r7
 23eb4a8:	4629      	mov	r1, r5
 23eb4aa:	f004 fd49 	bl	23eff40 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 23eb4ae:	4620      	mov	r0, r4
 23eb4b0:	f004 fdf5 	bl	23f009e <_Z7ei_freePv>
        return EIDSP_OK;
 23eb4b4:	2400      	movs	r4, #0
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 23eb4b6:	a804      	add	r0, sp, #16
 23eb4b8:	f7ff fe2a 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
    }
 23eb4bc:	4620      	mov	r0, r4
 23eb4be:	b009      	add	sp, #36	; 0x24
 23eb4c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23eb4c4:	4c02      	ldr	r4, [pc, #8]	; (23eb4d0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xc4>)
 23eb4c6:	e7f6      	b.n	23eb4b6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xaa>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 23eb4c8:	4c02      	ldr	r4, [pc, #8]	; (23eb4d4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xc8>)
 23eb4ca:	e7f7      	b.n	23eb4bc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xb0>
 23eb4cc:	fffffc16 	.word	0xfffffc16
 23eb4d0:	fffffc08 	.word	0xfffffc08
 23eb4d4:	fffffc11 	.word	0xfffffc11

023eb4d8 <_ZN2ei5numpy8linspaceEffmPf>:
    static int linspace(float start, float stop, uint32_t number, float *out)
 23eb4d8:	b510      	push	{r4, lr}
        if (number < 1 || !out) {
 23eb4da:	b318      	cbz	r0, 23eb524 <_ZN2ei5numpy8linspaceEffmPf+0x4c>
 23eb4dc:	b311      	cbz	r1, 23eb524 <_ZN2ei5numpy8linspaceEffmPf+0x4c>
        if (number == 1) {
 23eb4de:	2801      	cmp	r0, #1
 23eb4e0:	d103      	bne.n	23eb4ea <_ZN2ei5numpy8linspaceEffmPf+0x12>
            out[0] = start;
 23eb4e2:	ed81 0a00 	vstr	s0, [r1]
        return EIDSP_OK;
 23eb4e6:	2000      	movs	r0, #0
    }
 23eb4e8:	bd10      	pop	{r4, pc}
        float step = (stop - start) / (number - 1);
 23eb4ea:	1e42      	subs	r2, r0, #1
 23eb4ec:	ee07 2a10 	vmov	s14, r2
 23eb4f0:	ee70 7ac0 	vsub.f32	s15, s1, s0
 23eb4f4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 23eb4f8:	460c      	mov	r4, r1
 23eb4fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 23eb4fe:	2300      	movs	r3, #0
            out[ix] = start + ix * step;
 23eb500:	ee07 3a90 	vmov	s15, r3
 23eb504:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 23eb508:	eef0 7a40 	vmov.f32	s15, s0
 23eb50c:	eee6 7a87 	vfma.f32	s15, s13, s14
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 23eb510:	3301      	adds	r3, #1
 23eb512:	429a      	cmp	r2, r3
            out[ix] = start + ix * step;
 23eb514:	ece4 7a01 	vstmia	r4!, {s15}
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 23eb518:	d8f2      	bhi.n	23eb500 <_ZN2ei5numpy8linspaceEffmPf+0x28>
        out[number - 1] = stop;
 23eb51a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 23eb51e:	ed41 0a01 	vstr	s1, [r1, #-4]
 23eb522:	e7e0      	b.n	23eb4e6 <_ZN2ei5numpy8linspaceEffmPf+0xe>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 23eb524:	4800      	ldr	r0, [pc, #0]	; (23eb528 <_ZN2ei5numpy8linspaceEffmPf+0x50>)
 23eb526:	e7df      	b.n	23eb4e8 <_ZN2ei5numpy8linspaceEffmPf+0x10>
 23eb528:	fffffc10 	.word	0xfffffc10

023eb52c <_ZN2ei5numpy13software_rfftEPfS1_jj>:
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 23eb52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23eb530:	ed2d 8b02 	vpush	{d8}
 23eb534:	4607      	mov	r7, r0
 23eb536:	b089      	sub	sp, #36	; 0x24
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 23eb538:	00d8      	lsls	r0, r3, #3
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 23eb53a:	460c      	mov	r4, r1
 23eb53c:	4690      	mov	r8, r2
 23eb53e:	461e      	mov	r6, r3
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 23eb540:	f004 fda9 	bl	23f0096 <_Z9ei_mallocj>
        if (!fft_output) {
 23eb544:	4605      	mov	r5, r0
 23eb546:	b160      	cbz	r0, 23eb562 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x36>
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 23eb548:	ab07      	add	r3, sp, #28
 23eb54a:	9300      	str	r3, [sp, #0]
 23eb54c:	2300      	movs	r3, #0
 23eb54e:	4640      	mov	r0, r8
 23eb550:	461a      	mov	r2, r3
 23eb552:	4619      	mov	r1, r3
 23eb554:	f004 fc1c 	bl	23efd90 <kiss_fftr_alloc>
        if (!cfg) {
 23eb558:	4682      	mov	sl, r0
 23eb55a:	b920      	cbnz	r0, 23eb566 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x3a>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 23eb55c:	4628      	mov	r0, r5
 23eb55e:	f004 fd9e 	bl	23f009e <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23eb562:	4828      	ldr	r0, [pc, #160]	; (23eb604 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd8>)
 23eb564:	e048      	b.n	23eb5f8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xcc>
        kiss_fftr(cfg, fft_input, fft_output);
 23eb566:	46ab      	mov	fp, r5
 23eb568:	ed9f 8a27 	vldr	s16, [pc, #156]	; 23eb608 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xdc>
 23eb56c:	462a      	mov	r2, r5
 23eb56e:	4639      	mov	r1, r7
 23eb570:	f004 fce6 	bl	23eff40 <kiss_fftr>
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 23eb574:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 23eb578:	9303      	str	r3, [sp, #12]
 23eb57a:	9b03      	ldr	r3, [sp, #12]
 23eb57c:	429c      	cmp	r4, r3
 23eb57e:	d034      	beq.n	23eb5ea <_ZN2ei5numpy13software_rfftEPfS1_jj+0xbe>
 23eb580:	f8db 0000 	ldr.w	r0, [fp]
 23eb584:	f7fc fa30 	bl	23e79e8 <__aeabi_f2d>
 23eb588:	4602      	mov	r2, r0
 23eb58a:	460b      	mov	r3, r1
 23eb58c:	f8db 0004 	ldr.w	r0, [fp, #4]
 23eb590:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23eb594:	f7fc fa28 	bl	23e79e8 <__aeabi_f2d>
 23eb598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 23eb59c:	4680      	mov	r8, r0
 23eb59e:	4689      	mov	r9, r1
 23eb5a0:	4610      	mov	r0, r2
 23eb5a2:	4619      	mov	r1, r3
 23eb5a4:	f7fc fa78 	bl	23e7a98 <__aeabi_dmul>
 23eb5a8:	4642      	mov	r2, r8
 23eb5aa:	4606      	mov	r6, r0
 23eb5ac:	460f      	mov	r7, r1
 23eb5ae:	464b      	mov	r3, r9
 23eb5b0:	4640      	mov	r0, r8
 23eb5b2:	4649      	mov	r1, r9
 23eb5b4:	f7fc fa70 	bl	23e7a98 <__aeabi_dmul>
 23eb5b8:	4602      	mov	r2, r0
 23eb5ba:	460b      	mov	r3, r1
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 23eb5bc:	4630      	mov	r0, r6
 23eb5be:	4639      	mov	r1, r7
 23eb5c0:	f7fc f8b4 	bl	23e772c <__adddf3>
 23eb5c4:	f7fc fd60 	bl	23e8088 <__aeabi_d2f>
 23eb5c8:	ee00 0a10 	vmov	s0, r0
    if (in >= 0.0f)
 23eb5cc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23eb5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb5d4:	db06      	blt.n	23eb5e4 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xb8>
      *pOut = sqrtf(in);
 23eb5d6:	f00b fd93 	bl	23f7100 <sqrtf>
 23eb5da:	eca4 0a01 	vstmia	r4!, {s0}
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 23eb5de:	f10b 0b08 	add.w	fp, fp, #8
 23eb5e2:	e7ca      	b.n	23eb57a <_ZN2ei5numpy13software_rfftEPfS1_jj+0x4e>
      *pOut = 0.0f;
 23eb5e4:	eeb0 0a48 	vmov.f32	s0, s16
 23eb5e8:	e7f7      	b.n	23eb5da <_ZN2ei5numpy13software_rfftEPfS1_jj+0xae>
        ei_dsp_free(cfg, kiss_fftr_mem_length);
 23eb5ea:	4650      	mov	r0, sl
 23eb5ec:	f004 fd57 	bl	23f009e <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 23eb5f0:	4628      	mov	r0, r5
 23eb5f2:	f004 fd54 	bl	23f009e <_Z7ei_freePv>
        return EIDSP_OK;
 23eb5f6:	2000      	movs	r0, #0
    }
 23eb5f8:	b009      	add	sp, #36	; 0x24
 23eb5fa:	ecbd 8b02 	vpop	{d8}
 23eb5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23eb602:	bf00      	nop
 23eb604:	fffffc16 	.word	0xfffffc16
 23eb608:	00000000 	.word	0x00000000

023eb60c <_ZN2ei5numpy4rfftEPKfjPfjj>:
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 23eb60c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23eb610:	b085      	sub	sp, #20
 23eb612:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23eb614:	4680      	mov	r8, r0
        size_t n_fft_out_features = (n_fft / 2) + 1;
 23eb616:	0866      	lsrs	r6, r4, #1
 23eb618:	3601      	adds	r6, #1
        if (output_size != n_fft_out_features) {
 23eb61a:	429e      	cmp	r6, r3
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 23eb61c:	460d      	mov	r5, r1
 23eb61e:	4617      	mov	r7, r2
        if (output_size != n_fft_out_features) {
 23eb620:	d13e      	bne.n	23eb6a0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x94>
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 23eb622:	2300      	movs	r3, #0
 23eb624:	4622      	mov	r2, r4
 23eb626:	2101      	movs	r1, #1
 23eb628:	4668      	mov	r0, sp
 23eb62a:	f7ff fd5c 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23eb62e:	9800      	ldr	r0, [sp, #0]
 23eb630:	b390      	cbz	r0, 23eb698 <_ZN2ei5numpy4rfftEPKfjPfjj+0x8c>
 23eb632:	42a5      	cmp	r5, r4
 23eb634:	bf28      	it	cs
 23eb636:	4625      	movcs	r5, r4
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 23eb638:	ea4f 0985 	mov.w	r9, r5, lsl #2
 23eb63c:	464a      	mov	r2, r9
 23eb63e:	4641      	mov	r1, r8
 23eb640:	f00d fb48 	bl	23f8cd4 <memcpy>
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 23eb644:	9800      	ldr	r0, [sp, #0]
 23eb646:	1b65      	subs	r5, r4, r5
 23eb648:	2100      	movs	r1, #0
 23eb64a:	00aa      	lsls	r2, r5, #2
 23eb64c:	4448      	add	r0, r9
 23eb64e:	f00d fb68 	bl	23f8d22 <memset>
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 23eb652:	2c20      	cmp	r4, #32
 23eb654:	d022      	beq.n	23eb69c <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
 23eb656:	2c40      	cmp	r4, #64	; 0x40
 23eb658:	d020      	beq.n	23eb69c <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
 23eb65a:	2c80      	cmp	r4, #128	; 0x80
 23eb65c:	d01e      	beq.n	23eb69c <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
 23eb65e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 23eb662:	d01b      	beq.n	23eb69c <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
 23eb664:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 23eb668:	d018      	beq.n	23eb69c <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 23eb66a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 23eb66e:	d015      	beq.n	23eb69c <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
 23eb670:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 23eb674:	d012      	beq.n	23eb69c <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
 23eb676:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 23eb67a:	d00f      	beq.n	23eb69c <_ZN2ei5numpy4rfftEPKfjPfjj+0x90>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 23eb67c:	4622      	mov	r2, r4
 23eb67e:	4633      	mov	r3, r6
 23eb680:	4639      	mov	r1, r7
 23eb682:	9800      	ldr	r0, [sp, #0]
 23eb684:	f7ff ff52 	bl	23eb52c <_ZN2ei5numpy13software_rfftEPfS1_jj>
 23eb688:	4604      	mov	r4, r0
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 23eb68a:	4668      	mov	r0, sp
 23eb68c:	f7ff fd40 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
    }
 23eb690:	4620      	mov	r0, r4
 23eb692:	b005      	add	sp, #20
 23eb694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 23eb698:	4c02      	ldr	r4, [pc, #8]	; (23eb6a4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x98>)
 23eb69a:	e7f6      	b.n	23eb68a <_ZN2ei5numpy4rfftEPKfjPfjj+0x7e>
 23eb69c:	4c02      	ldr	r4, [pc, #8]	; (23eb6a8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x9c>)
 23eb69e:	e7f4      	b.n	23eb68a <_ZN2ei5numpy4rfftEPKfjPfjj+0x7e>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 23eb6a0:	4c02      	ldr	r4, [pc, #8]	; (23eb6ac <_ZN2ei5numpy4rfftEPKfjPfjj+0xa0>)
 23eb6a2:	e7f5      	b.n	23eb690 <_ZN2ei5numpy4rfftEPKfjPfjj+0x84>
 23eb6a4:	fffffc16 	.word	0xfffffc16
 23eb6a8:	fffffc08 	.word	0xfffffc08
 23eb6ac:	fffffc11 	.word	0xfffffc11

023eb6b0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
        float32_t sum = 0.0f;
        float32_t fSum = 0.0f;
        float32_t fMean, fValue;
        const float32_t *pInput = pSrc;

        if (blockSize <= 1U) {
 23eb6b0:	2901      	cmp	r1, #1
 23eb6b2:	eddf 7a2f 	vldr	s15, [pc, #188]	; 23eb770 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc0>
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 23eb6b6:	b570      	push	{r4, r5, r6, lr}
        if (blockSize <= 1U) {
 23eb6b8:	d802      	bhi.n	23eb6c0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x10>
            *pResult = 0;
 23eb6ba:	edc2 7a00 	vstr	s15, [r2]
            blkCnt--;
        }

        /* Variance */
        *pResult = fSum / (float32_t)(blockSize);
    }
 23eb6be:	bd70      	pop	{r4, r5, r6, pc}
        blkCnt = blockSize >> 2U;
 23eb6c0:	088d      	lsrs	r5, r1, #2
 23eb6c2:	4603      	mov	r3, r0
 23eb6c4:	4604      	mov	r4, r0
 23eb6c6:	462e      	mov	r6, r5
        while (blkCnt > 0U) {
 23eb6c8:	3410      	adds	r4, #16
 23eb6ca:	b18e      	cbz	r6, 23eb6f0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x40>
            sum += *pInput++;
 23eb6cc:	ed14 7a04 	vldr	s14, [r4, #-16]
 23eb6d0:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
 23eb6d4:	ed14 7a03 	vldr	s14, [r4, #-12]
 23eb6d8:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
 23eb6dc:	ed14 7a02 	vldr	s14, [r4, #-8]
 23eb6e0:	ee77 7a87 	vadd.f32	s15, s15, s14
            sum += *pInput++;
 23eb6e4:	ed14 7a01 	vldr	s14, [r4, #-4]
            blkCnt--;
 23eb6e8:	3e01      	subs	r6, #1
            sum += *pInput++;
 23eb6ea:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
 23eb6ee:	e7eb      	b.n	23eb6c8 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x18>
 23eb6f0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
        blkCnt = blockSize % 0x4U;
 23eb6f4:	4606      	mov	r6, r0
 23eb6f6:	f001 0403 	and.w	r4, r1, #3
 23eb6fa:	eb00 0484 	add.w	r4, r0, r4, lsl #2
        while (blkCnt > 0U) {
 23eb6fe:	42a6      	cmp	r6, r4
 23eb700:	d004      	beq.n	23eb70c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x5c>
            sum += *pInput++;
 23eb702:	ecb6 7a01 	vldmia	r6!, {s14}
 23eb706:	ee77 7a87 	vadd.f32	s15, s15, s14
        while (blkCnt > 0U) {
 23eb70a:	e7f8      	b.n	23eb6fe <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x4e>
        fMean = sum / (float32_t)blockSize;
 23eb70c:	ee07 1a10 	vmov	s14, r1
 23eb710:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 23eb714:	eec7 6a87 	vdiv.f32	s13, s15, s14
        float32_t fSum = 0.0f;
 23eb718:	eddf 7a15 	vldr	s15, [pc, #84]	; 23eb770 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc0>
        while (blkCnt > 0U) {
 23eb71c:	3310      	adds	r3, #16
 23eb71e:	b1cd      	cbz	r5, 23eb754 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa4>
            fValue = *pInput++ - fMean;
 23eb720:	ed13 6a04 	vldr	s12, [r3, #-16]
 23eb724:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
 23eb728:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
 23eb72c:	ed13 6a03 	vldr	s12, [r3, #-12]
 23eb730:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
 23eb734:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
 23eb738:	ed13 6a02 	vldr	s12, [r3, #-8]
 23eb73c:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
 23eb740:	eee6 7a06 	vfma.f32	s15, s12, s12
            fValue = *pInput++ - fMean;
 23eb744:	ed13 6a01 	vldr	s12, [r3, #-4]
 23eb748:	ee36 6a66 	vsub.f32	s12, s12, s13
            blkCnt--;
 23eb74c:	3d01      	subs	r5, #1
            fSum += fValue * fValue;
 23eb74e:	eee6 7a06 	vfma.f32	s15, s12, s12
        while (blkCnt > 0U) {
 23eb752:	e7e3      	b.n	23eb71c <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x6c>
        while (blkCnt > 0U) {
 23eb754:	42a0      	cmp	r0, r4
 23eb756:	d006      	beq.n	23eb766 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xb6>
            fValue = *pInput++ - fMean;
 23eb758:	ecb0 6a01 	vldmia	r0!, {s12}
 23eb75c:	ee36 6a66 	vsub.f32	s12, s12, s13
            fSum += fValue * fValue;
 23eb760:	eee6 7a06 	vfma.f32	s15, s12, s12
        while (blkCnt > 0U) {
 23eb764:	e7f6      	b.n	23eb754 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa4>
        *pResult = fSum / (float32_t)(blockSize);
 23eb766:	eec7 6a87 	vdiv.f32	s13, s15, s14
 23eb76a:	edc2 6a00 	vstr	s13, [r2]
 23eb76e:	e7a6      	b.n	23eb6be <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe>
 23eb770:	00000000 	.word	0x00000000

023eb774 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>:
    static int skew(matrix_t *input_matrix, matrix_t *output_matrix) {
 23eb774:	b5f0      	push	{r4, r5, r6, r7, lr}
 23eb776:	ed2d 8b02 	vpush	{d8}
        if (input_matrix->rows != output_matrix->rows) {
 23eb77a:	6842      	ldr	r2, [r0, #4]
 23eb77c:	684b      	ldr	r3, [r1, #4]
    static int skew(matrix_t *input_matrix, matrix_t *output_matrix) {
 23eb77e:	4604      	mov	r4, r0
        if (input_matrix->rows != output_matrix->rows) {
 23eb780:	429a      	cmp	r2, r3
    static int skew(matrix_t *input_matrix, matrix_t *output_matrix) {
 23eb782:	460f      	mov	r7, r1
 23eb784:	b083      	sub	sp, #12
        if (input_matrix->rows != output_matrix->rows) {
 23eb786:	f040 808a 	bne.w	23eb89e <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        if (output_matrix->cols != 1) {
 23eb78a:	688b      	ldr	r3, [r1, #8]
 23eb78c:	2b01      	cmp	r3, #1
 23eb78e:	f040 8086 	bne.w	23eb89e <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12a>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23eb792:	2500      	movs	r5, #0
 23eb794:	6863      	ldr	r3, [r4, #4]
 23eb796:	42ab      	cmp	r3, r5
 23eb798:	f240 8086 	bls.w	23eb8a8 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x134>
     * @param      pResult    The third central moment of the input
     */
    static void cmsis_arm_third_moment(const float32_t * pSrc, uint32_t blockSize, float32_t mean, float32_t * pResult)
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 23eb79c:	ed9f 8a43 	vldr	s16, [pc, #268]	; 23eb8ac <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x138>
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 23eb7a0:	68a1      	ldr	r1, [r4, #8]
 23eb7a2:	6823      	ldr	r3, [r4, #0]
 23eb7a4:	fb05 f001 	mul.w	r0, r5, r1
 23eb7a8:	466a      	mov	r2, sp
 23eb7aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 23eb7ae:	f7fc ff2d 	bl	23e860c <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 23eb7b2:	68a1      	ldr	r1, [r4, #8]
 23eb7b4:	6823      	ldr	r3, [r4, #0]
 23eb7b6:	fb05 f001 	mul.w	r0, r5, r1
 23eb7ba:	aa01      	add	r2, sp, #4
 23eb7bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 23eb7c0:	f7ff ff76 	bl	23eb6b0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            cmsis_arm_third_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_3);
 23eb7c4:	68a6      	ldr	r6, [r4, #8]
 23eb7c6:	6823      	ldr	r3, [r4, #0]
 23eb7c8:	fb05 f206 	mul.w	r2, r5, r6
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 23eb7cc:	08b0      	lsrs	r0, r6, #2
            cmsis_arm_third_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_3);
 23eb7ce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23eb7d2:	ed9d 7a00 	vldr	s14, [sp]
        blkCnt = blockSize >> 2U;
 23eb7d6:	461a      	mov	r2, r3
 23eb7d8:	4601      	mov	r1, r0
 23eb7da:	eef0 8a48 	vmov.f32	s17, s16

        while (blkCnt > 0U) {
 23eb7de:	3210      	adds	r2, #16
 23eb7e0:	b309      	cbz	r1, 23eb826 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xb2>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 23eb7e2:	ed52 7a04 	vldr	s15, [r2, #-16]
            in = in - mean;
 23eb7e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
            sum += in * in * in;
 23eb7ea:	ee67 6aa7 	vmul.f32	s13, s15, s15
 23eb7ee:	eea7 8aa6 	vfma.f32	s16, s15, s13

            in = *pSrc++;
 23eb7f2:	ed52 7a03 	vldr	s15, [r2, #-12]
            in = in - mean;
 23eb7f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
            sum += in * in * in;
 23eb7fa:	ee67 6aa7 	vmul.f32	s13, s15, s15
 23eb7fe:	eea7 8aa6 	vfma.f32	s16, s15, s13

            in = *pSrc++;
 23eb802:	ed52 7a02 	vldr	s15, [r2, #-8]
            in = in - mean;
 23eb806:	ee77 7ac7 	vsub.f32	s15, s15, s14
            sum += in * in * in;
 23eb80a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 23eb80e:	eea7 8aa6 	vfma.f32	s16, s15, s13

            in = *pSrc++;
 23eb812:	ed52 7a01 	vldr	s15, [r2, #-4]
            in = in - mean;
 23eb816:	ee77 7ac7 	vsub.f32	s15, s15, s14
            sum += in * in * in;
 23eb81a:	ee67 6aa7 	vmul.f32	s13, s15, s15

            /* Decrement loop counter */
            blkCnt--;
 23eb81e:	3901      	subs	r1, #1
            sum += in * in * in;
 23eb820:	eea7 8aa6 	vfma.f32	s16, s15, s13
        while (blkCnt > 0U) {
 23eb824:	e7db      	b.n	23eb7de <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x6a>
 23eb826:	eb03 1300 	add.w	r3, r3, r0, lsl #4
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 23eb82a:	f006 0203 	and.w	r2, r6, #3
 23eb82e:	eb03 0282 	add.w	r2, r3, r2, lsl #2

        while (blkCnt > 0U) {
 23eb832:	429a      	cmp	r2, r3
 23eb834:	d008      	beq.n	23eb848 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xd4>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 23eb836:	ecf3 7a01 	vldmia	r3!, {s15}
            in = in - mean;
 23eb83a:	ee77 7ac7 	vsub.f32	s15, s15, s14
            sum += in * in * in;
 23eb83e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 23eb842:	eea7 8aa6 	vfma.f32	s16, s15, s13
        while (blkCnt > 0U) {
 23eb846:	e7f4      	b.n	23eb832 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xbe>
            arm_sqrt_f32(var * var * var, &var);
 23eb848:	eddd 7a01 	vldr	s15, [sp, #4]
 23eb84c:	ee27 0aa7 	vmul.f32	s0, s15, s15
 23eb850:	ee20 0a27 	vmul.f32	s0, s0, s15
    if (in >= 0.0f)
 23eb854:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23eb858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eb85c:	db1c      	blt.n	23eb898 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x124>
      *pOut = sqrtf(in);
 23eb85e:	f00b fc4f 	bl	23f7100 <sqrtf>
 23eb862:	ed8d 0a01 	vstr	s0, [sp, #4]
            if (var == 0.0f) {
 23eb866:	ed9d 7a01 	vldr	s14, [sp, #4]
 23eb86a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 23eb86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

            /* Decrement loop counter */
            blkCnt--;
        }

        sum = sum / blockSize;
 23eb872:	bf1f      	itttt	ne
 23eb874:	ee07 6a90 	vmovne	s15, r6
 23eb878:	eef8 7a67 	vcvtne.f32.u32	s15, s15
 23eb87c:	eec8 6a27 	vdivne.f32	s13, s16, s15
                output_matrix->buffer[row] = m_3 / var;
 23eb880:	eec6 7a87 	vdivne.f32	s15, s13, s14
                output_matrix->buffer[row] = 0.0f;
 23eb884:	683b      	ldr	r3, [r7, #0]
 23eb886:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 23eb88a:	bf0c      	ite	eq
 23eb88c:	edc3 8a00 	vstreq	s17, [r3]
                output_matrix->buffer[row] = m_3 / var;
 23eb890:	edc3 7a00 	vstrne	s15, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23eb894:	3501      	adds	r5, #1
 23eb896:	e77d      	b.n	23eb794 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x20>
      *pOut = 0.0f;
 23eb898:	edcd 8a01 	vstr	s17, [sp, #4]
      return (ARM_MATH_ARGUMENT_ERROR);
 23eb89c:	e7e3      	b.n	23eb866 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0xf2>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23eb89e:	4804      	ldr	r0, [pc, #16]	; (23eb8b0 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x13c>)
    }
 23eb8a0:	b003      	add	sp, #12
 23eb8a2:	ecbd 8b02 	vpop	{d8}
 23eb8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return EIDSP_OK;
 23eb8a8:	2000      	movs	r0, #0
 23eb8aa:	e7f9      	b.n	23eb8a0 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_+0x12c>
 23eb8ac:	00000000 	.word	0x00000000
 23eb8b0:	fffffc14 	.word	0xfffffc14

023eb8b4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>:
    static int kurtosis(matrix_t *input_matrix, matrix_t *output_matrix) {
 23eb8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23eb8b6:	ed2d 8b02 	vpush	{d8}
        if (input_matrix->rows != output_matrix->rows) {
 23eb8ba:	6842      	ldr	r2, [r0, #4]
 23eb8bc:	684b      	ldr	r3, [r1, #4]
    static int kurtosis(matrix_t *input_matrix, matrix_t *output_matrix) {
 23eb8be:	4604      	mov	r4, r0
        if (input_matrix->rows != output_matrix->rows) {
 23eb8c0:	429a      	cmp	r2, r3
    static int kurtosis(matrix_t *input_matrix, matrix_t *output_matrix) {
 23eb8c2:	460e      	mov	r6, r1
 23eb8c4:	b083      	sub	sp, #12
        if (input_matrix->rows != output_matrix->rows) {
 23eb8c6:	d17e      	bne.n	23eb9c6 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x112>
        if (output_matrix->cols != 1) {
 23eb8c8:	688b      	ldr	r3, [r1, #8]
 23eb8ca:	2b01      	cmp	r3, #1
 23eb8cc:	d17b      	bne.n	23eb9c6 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x112>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23eb8ce:	2500      	movs	r5, #0
                output_matrix->buffer[row] = (m_4 / var) - 3.0f;
 23eb8d0:	eeb0 8a08 	vmov.f32	s16, #8	; 0x40400000  3.0
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23eb8d4:	6863      	ldr	r3, [r4, #4]
 23eb8d6:	42ab      	cmp	r3, r5
 23eb8d8:	d97a      	bls.n	23eb9d0 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x11c>
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 23eb8da:	68a1      	ldr	r1, [r4, #8]
 23eb8dc:	6823      	ldr	r3, [r4, #0]
 23eb8de:	fb05 f001 	mul.w	r0, r5, r1
 23eb8e2:	466a      	mov	r2, sp
 23eb8e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 23eb8e8:	f7fc fe90 	bl	23e860c <arm_mean_f32>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 23eb8ec:	68a1      	ldr	r1, [r4, #8]
 23eb8ee:	6823      	ldr	r3, [r4, #0]
 23eb8f0:	fb05 f001 	mul.w	r0, r5, r1
 23eb8f4:	aa01      	add	r2, sp, #4
 23eb8f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 23eb8fa:	f7ff fed9 	bl	23eb6b0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            cmsis_arm_fourth_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_4);
 23eb8fe:	68a2      	ldr	r2, [r4, #8]
 23eb900:	6823      	ldr	r3, [r4, #0]
 23eb902:	fb05 f102 	mul.w	r1, r5, r2
        uint32_t blkCnt;
        float32_t sum = 0.0f;
        float32_t in;

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 23eb906:	0897      	lsrs	r7, r2, #2
            cmsis_arm_fourth_moment(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, mean, &m_4);
 23eb908:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 23eb90c:	eddd 6a00 	vldr	s13, [sp]
        blkCnt = blockSize >> 2U;
 23eb910:	4618      	mov	r0, r3
 23eb912:	4639      	mov	r1, r7
        float32_t sum = 0.0f;
 23eb914:	eddf 7a2f 	vldr	s15, [pc, #188]	; 23eb9d4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x120>

        while (blkCnt > 0U) {
 23eb918:	3010      	adds	r0, #16
 23eb91a:	b309      	cbz	r1, 23eb960 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xac>

            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 23eb91c:	ed10 7a04 	vldr	s14, [r0, #-16]
            in = in - mean;
 23eb920:	ee37 7a66 	vsub.f32	s14, s14, s13
            float square;
            square = in * in;
 23eb924:	ee27 7a07 	vmul.f32	s14, s14, s14
            sum += square * square;
 23eb928:	eee7 7a07 	vfma.f32	s15, s14, s14

            in = *pSrc++;
 23eb92c:	ed10 7a03 	vldr	s14, [r0, #-12]
            in = in - mean;
 23eb930:	ee37 7a66 	vsub.f32	s14, s14, s13
            square = in * in;
 23eb934:	ee27 7a07 	vmul.f32	s14, s14, s14
            sum += square * square;
 23eb938:	eee7 7a07 	vfma.f32	s15, s14, s14

            in = *pSrc++;
 23eb93c:	ed10 7a02 	vldr	s14, [r0, #-8]
            in = in - mean;
 23eb940:	ee37 7a66 	vsub.f32	s14, s14, s13
            square = in * in;
 23eb944:	ee27 7a07 	vmul.f32	s14, s14, s14
            sum += square * square;
 23eb948:	eee7 7a07 	vfma.f32	s15, s14, s14

            in = *pSrc++;
 23eb94c:	ed10 7a01 	vldr	s14, [r0, #-4]
            in = in - mean;
 23eb950:	ee37 7a66 	vsub.f32	s14, s14, s13
            square = in * in;
 23eb954:	ee27 7a07 	vmul.f32	s14, s14, s14
            sum += square * square;

            /* Decrement loop counter */
            blkCnt--;
 23eb958:	3901      	subs	r1, #1
            sum += square * square;
 23eb95a:	eee7 7a07 	vfma.f32	s15, s14, s14
        while (blkCnt > 0U) {
 23eb95e:	e7db      	b.n	23eb918 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x64>
 23eb960:	eb03 1307 	add.w	r3, r3, r7, lsl #4
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 23eb964:	f002 0103 	and.w	r1, r2, #3
 23eb968:	eb03 0181 	add.w	r1, r3, r1, lsl #2

        while (blkCnt > 0U) {
 23eb96c:	4299      	cmp	r1, r3
 23eb96e:	d008      	beq.n	23eb982 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xce>
            /* Compute Power and store result in a temporary variable, sum. */
            in = *pSrc++;
 23eb970:	ecb3 7a01 	vldmia	r3!, {s14}
            in = in - mean;
 23eb974:	ee37 7a66 	vsub.f32	s14, s14, s13
            float square;
            square = in * in;
 23eb978:	ee27 7a07 	vmul.f32	s14, s14, s14
            sum += square * square;
 23eb97c:	eee7 7a07 	vfma.f32	s15, s14, s14
        while (blkCnt > 0U) {
 23eb980:	e7f4      	b.n	23eb96c <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0xb8>
            var = var * var;
 23eb982:	ed9d 7a01 	vldr	s14, [sp, #4]
 23eb986:	ee27 7a07 	vmul.f32	s14, s14, s14
            if (var == 0.0f) {
 23eb98a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 23eb98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

            /* Decrement loop counter */
            blkCnt--;
        }

        sum = sum / blockSize;
 23eb992:	bf1f      	itttt	ne
 23eb994:	ee06 2a90 	vmovne	s13, r2
 23eb998:	eef8 6a66 	vcvtne.f32.u32	s13, s13
 23eb99c:	ee87 6aa6 	vdivne.f32	s12, s15, s13
                output_matrix->buffer[row] = (m_4 / var) - 3.0f;
 23eb9a0:	eec6 7a07 	vdivne.f32	s15, s12, s14
 23eb9a4:	bf18      	it	ne
 23eb9a6:	ee77 7ac8 	vsubne.f32	s15, s15, s16
                output_matrix->buffer[row] = -3.0f;
 23eb9aa:	6833      	ldr	r3, [r6, #0]
 23eb9ac:	bf08      	it	eq
 23eb9ae:	4a0a      	ldreq	r2, [pc, #40]	; (23eb9d8 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x124>)
 23eb9b0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
            var = var * var;
 23eb9b4:	ed8d 7a01 	vstr	s14, [sp, #4]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23eb9b8:	f105 0501 	add.w	r5, r5, #1
                output_matrix->buffer[row] = (m_4 / var) - 3.0f;
 23eb9bc:	bf14      	ite	ne
 23eb9be:	edc3 7a00 	vstrne	s15, [r3]
                output_matrix->buffer[row] = -3.0f;
 23eb9c2:	601a      	streq	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23eb9c4:	e786      	b.n	23eb8d4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x20>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23eb9c6:	4805      	ldr	r0, [pc, #20]	; (23eb9dc <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x128>)
    }
 23eb9c8:	b003      	add	sp, #12
 23eb9ca:	ecbd 8b02 	vpop	{d8}
 23eb9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return EIDSP_OK;
 23eb9d0:	2000      	movs	r0, #0
 23eb9d2:	e7f9      	b.n	23eb9c8 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_+0x114>
 23eb9d4:	00000000 	.word	0x00000000
 23eb9d8:	c0400000 	.word	0xc0400000
 23eb9dc:	fffffc14 	.word	0xfffffc14

023eb9e0 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>:
     * @param out_buffer Out buffer, size should be fft_points
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(
 23eb9e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23eb9e4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 23eb9e8:	4614      	mov	r4, r2
        size_t frame_size,
        float *out_buffer,
        size_t out_buffer_size,
        uint16_t fft_points)
    {
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 23eb9ea:	0875      	lsrs	r5, r6, #1
 23eb9ec:	3501      	adds	r5, #1
 23eb9ee:	429d      	cmp	r5, r3
 23eb9f0:	d12c      	bne.n	23eba4c <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x6c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 23eb9f2:	9600      	str	r6, [sp, #0]
 23eb9f4:	f7ff fe0a 	bl	23eb60c <_ZN2ei5numpy4rfftEPKfjPfjj>
        if (r != EIDSP_OK) {
 23eb9f8:	4680      	mov	r8, r0
 23eb9fa:	bb18      	cbnz	r0, 23eba44 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x64>
            return r;
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 23eb9fc:	ee07 6a90 	vmov	s15, r6
 23eba00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23eba04:	ee17 0a90 	vmov	r0, s15
 23eba08:	f7fb ffee 	bl	23e79e8 <__aeabi_f2d>
 23eba0c:	4602      	mov	r2, r0
 23eba0e:	460b      	mov	r3, r1
 23eba10:	2000      	movs	r0, #0
 23eba12:	4910      	ldr	r1, [pc, #64]	; (23eba54 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x74>)
 23eba14:	f7fc f96a 	bl	23e7cec <__aeabi_ddiv>
 23eba18:	4606      	mov	r6, r0
 23eba1a:	460f      	mov	r7, r1
 23eba1c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
                (out_buffer[ix] * out_buffer[ix]);
 23eba20:	edd4 7a00 	vldr	s15, [r4]
 23eba24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 23eba28:	ee17 0a90 	vmov	r0, s15
 23eba2c:	f7fb ffdc 	bl	23e79e8 <__aeabi_f2d>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 23eba30:	4632      	mov	r2, r6
 23eba32:	463b      	mov	r3, r7
 23eba34:	f7fc f830 	bl	23e7a98 <__aeabi_dmul>
 23eba38:	f7fc fb26 	bl	23e8088 <__aeabi_d2f>
 23eba3c:	f844 0b04 	str.w	r0, [r4], #4
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 23eba40:	42a5      	cmp	r5, r4
 23eba42:	d1ed      	bne.n	23eba20 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x40>
        }

        return EIDSP_OK;
    }
 23eba44:	4640      	mov	r0, r8
 23eba46:	b002      	add	sp, #8
 23eba48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23eba4c:	f8df 8008 	ldr.w	r8, [pc, #8]	; 23eba58 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x78>
 23eba50:	e7f8      	b.n	23eba44 <_ZN2ei5numpy14power_spectrumEPfjS1_jt+0x64>
 23eba52:	bf00      	nop
 23eba54:	3ff00000 	.word	0x3ff00000
 23eba58:	fffffc14 	.word	0xfffffc14

023eba5c <_ZN2ei5numpy13zero_handlingEPfj>:
     */
    static void zero_handling(float *input, size_t input_size)
    {
        for (size_t ix = 0; ix < input_size; ix++) {
            if (input[ix] == 0) {
                input[ix] = 1e-10;
 23eba5c:	4b08      	ldr	r3, [pc, #32]	; (23eba80 <_ZN2ei5numpy13zero_handlingEPfj+0x24>)
 23eba5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        for (size_t ix = 0; ix < input_size; ix++) {
 23eba62:	4288      	cmp	r0, r1
 23eba64:	d00b      	beq.n	23eba7e <_ZN2ei5numpy13zero_handlingEPfj+0x22>
            if (input[ix] == 0) {
 23eba66:	edd0 7a00 	vldr	s15, [r0]
 23eba6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 23eba6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                input[ix] = 1e-10;
 23eba72:	f100 0004 	add.w	r0, r0, #4
 23eba76:	bf08      	it	eq
 23eba78:	f840 3c04 	streq.w	r3, [r0, #-4]
        for (size_t ix = 0; ix < input_size; ix++) {
 23eba7c:	e7f1      	b.n	23eba62 <_ZN2ei5numpy13zero_handlingEPfj+0x6>
            }
        }
    }
 23eba7e:	4770      	bx	lr
 23eba80:	2edbe6ff 	.word	0x2edbe6ff

023eba84 <_ZN2ei5numpy18underflow_handlingEPfjf>:
     */
    static void underflow_handling(float* input, size_t input_size, float epsilon = 1e-07f)
    {
        for (size_t ix = 0; ix < input_size; ix++) {
            if (fabs(input[ix]) < epsilon) {
                input[ix] = 0.0f;
 23eba84:	2300      	movs	r3, #0
 23eba86:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        for (size_t ix = 0; ix < input_size; ix++) {
 23eba8a:	4288      	cmp	r0, r1
 23eba8c:	d00d      	beq.n	23ebaaa <_ZN2ei5numpy18underflow_handlingEPfjf+0x26>
  { return __builtin_fabsf(__x); }
 23eba8e:	edd0 7a00 	vldr	s15, [r0]
 23eba92:	eef0 7ae7 	vabs.f32	s15, s15
            if (fabs(input[ix]) < epsilon) {
 23eba96:	eef4 7ac0 	vcmpe.f32	s15, s0
 23eba9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                input[ix] = 0.0f;
 23eba9e:	f100 0004 	add.w	r0, r0, #4
 23ebaa2:	bf48      	it	mi
 23ebaa4:	f840 3c04 	strmi.w	r3, [r0, #-4]
        for (size_t ix = 0; ix < input_size; ix++) {
 23ebaa8:	e7ef      	b.n	23eba8a <_ZN2ei5numpy18underflow_handlingEPfjf+0x6>
            }
        }
    }
 23ebaaa:	4770      	bx	lr

023ebaac <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
    ) {
 23ebaac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ebab0:	461e      	mov	r6, r3
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 23ebab2:	6843      	ldr	r3, [r0, #4]
    ) {
 23ebab4:	4607      	mov	r7, r0
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 23ebab6:	2b01      	cmp	r3, #1
    ) {
 23ebab8:	460d      	mov	r5, r1
 23ebaba:	4614      	mov	r4, r2
 23ebabc:	b08a      	sub	sp, #40	; 0x28
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 23ebabe:	f040 809a 	bne.w	23ebbf6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x14a>
 23ebac2:	684b      	ldr	r3, [r1, #4]
 23ebac4:	2b01      	cmp	r3, #1
 23ebac6:	f040 8096 	bne.w	23ebbf6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x14a>
        if (edges_matrix->cols != 1) {
 23ebaca:	6893      	ldr	r3, [r2, #8]
 23ebacc:	2b01      	cmp	r3, #1
 23ebace:	f040 8092 	bne.w	23ebbf6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x14a>
        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
 23ebad2:	6853      	ldr	r3, [r2, #4]
 23ebad4:	6872      	ldr	r2, [r6, #4]
 23ebad6:	3b01      	subs	r3, #1
 23ebad8:	429a      	cmp	r2, r3
 23ebada:	f040 808c 	bne.w	23ebbf6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x14a>
 23ebade:	68b1      	ldr	r1, [r6, #8]
 23ebae0:	2901      	cmp	r1, #1
 23ebae2:	f040 8088 	bne.w	23ebbf6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x14a>
        if (fft_matrix->cols != freq_matrix->cols) {
 23ebae6:	6880      	ldr	r0, [r0, #8]
 23ebae8:	68ab      	ldr	r3, [r5, #8]
 23ebaea:	4298      	cmp	r0, r3
 23ebaec:	f040 8083 	bne.w	23ebbf6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x14a>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 23ebaf0:	2300      	movs	r3, #0
 23ebaf2:	a802      	add	r0, sp, #8
 23ebaf4:	9101      	str	r1, [sp, #4]
 23ebaf6:	f7ff faf6 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23ebafa:	9b02      	ldr	r3, [sp, #8]
 23ebafc:	2b00      	cmp	r3, #0
 23ebafe:	d078      	beq.n	23ebbf2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x146>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 23ebb00:	6862      	ldr	r2, [r4, #4]
 23ebb02:	2300      	movs	r3, #0
 23ebb04:	9901      	ldr	r1, [sp, #4]
 23ebb06:	3a01      	subs	r2, #1
 23ebb08:	a806      	add	r0, sp, #24
 23ebb0a:	f7ff faec 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23ebb0e:	9b06      	ldr	r3, [sp, #24]
 23ebb10:	2b00      	cmp	r3, #0
 23ebb12:	d061      	beq.n	23ebbd8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x12c>
 23ebb14:	2100      	movs	r1, #0
                    bucket_count.buffer[ex]++;
 23ebb16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 23ebb1a:	6863      	ldr	r3, [r4, #4]
 23ebb1c:	b288      	uxth	r0, r1
 23ebb1e:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 23ebb22:	68ab      	ldr	r3, [r5, #8]
 23ebb24:	4283      	cmp	r3, r0
 23ebb26:	d935      	bls.n	23ebb94 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xe8>
            float t = freq_matrix->buffer[ix];
 23ebb28:	682a      	ldr	r2, [r5, #0]
 23ebb2a:	0083      	lsls	r3, r0, #2
 23ebb2c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 23ebb30:	edd2 7a00 	vldr	s15, [r2]
 23ebb34:	2000      	movs	r0, #0
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 23ebb36:	fa1f f880 	uxth.w	r8, r0
 23ebb3a:	45c4      	cmp	ip, r8
 23ebb3c:	d926      	bls.n	23ebb8c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xe0>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
 23ebb3e:	6822      	ldr	r2, [r4, #0]
 23ebb40:	ea4f 0e88 	mov.w	lr, r8, lsl #2
 23ebb44:	eb02 0288 	add.w	r2, r2, r8, lsl #2
 23ebb48:	edd2 6a00 	vldr	s13, [r2]
 23ebb4c:	eef4 6ae7 	vcmpe.f32	s13, s15
 23ebb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebb54:	d81c      	bhi.n	23ebb90 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xe4>
 23ebb56:	edd2 6a01 	vldr	s13, [r2, #4]
 23ebb5a:	eef4 6ae7 	vcmpe.f32	s13, s15
 23ebb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ebb62:	dd15      	ble.n	23ebb90 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xe4>
                    buckets.buffer[ex] += v;
 23ebb64:	9a02      	ldr	r2, [sp, #8]
            float v = fft_matrix->buffer[ix];
 23ebb66:	6838      	ldr	r0, [r7, #0]
                    buckets.buffer[ex] += v;
 23ebb68:	4472      	add	r2, lr
            float v = fft_matrix->buffer[ix];
 23ebb6a:	4418      	add	r0, r3
                    buckets.buffer[ex] += v;
 23ebb6c:	edd2 7a00 	vldr	s15, [r2]
 23ebb70:	edd0 6a00 	vldr	s13, [r0]
 23ebb74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 23ebb78:	edc2 7a00 	vstr	s15, [r2]
                    bucket_count.buffer[ex]++;
 23ebb7c:	9b06      	ldr	r3, [sp, #24]
 23ebb7e:	4473      	add	r3, lr
 23ebb80:	edd3 7a00 	vldr	s15, [r3]
 23ebb84:	ee77 7a87 	vadd.f32	s15, s15, s14
 23ebb88:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 23ebb8c:	3101      	adds	r1, #1
 23ebb8e:	e7c4      	b.n	23ebb1a <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x6e>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 23ebb90:	3001      	adds	r0, #1
 23ebb92:	e7d0      	b.n	23ebb36 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x8a>
 23ebb94:	2100      	movs	r1, #0
            if (bucket_count.buffer[ex] == 0.0f) {
 23ebb96:	2000      	movs	r0, #0
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 23ebb98:	6863      	ldr	r3, [r4, #4]
 23ebb9a:	b28a      	uxth	r2, r1
 23ebb9c:	3b01      	subs	r3, #1
 23ebb9e:	4293      	cmp	r3, r2
 23ebba0:	d925      	bls.n	23ebbee <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x142>
            if (bucket_count.buffer[ex] == 0.0f) {
 23ebba2:	9b06      	ldr	r3, [sp, #24]
 23ebba4:	0095      	lsls	r5, r2, #2
 23ebba6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23ebbaa:	edd3 7a00 	vldr	s15, [r3]
 23ebbae:	eef5 7a40 	vcmp.f32	s15, #0.0
 23ebbb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                output_matrix->buffer[ex] = 0.0f;
 23ebbb6:	6833      	ldr	r3, [r6, #0]
 23ebbb8:	f101 0101 	add.w	r1, r1, #1
 23ebbbc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
 23ebbc0:	bf17      	itett	ne
 23ebbc2:	9a02      	ldrne	r2, [sp, #8]
                output_matrix->buffer[ex] = 0.0f;
 23ebbc4:	6018      	streq	r0, [r3, #0]
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
 23ebbc6:	1952      	addne	r2, r2, r5
 23ebbc8:	edd2 6a00 	vldrne	s13, [r2]
 23ebbcc:	bf1c      	itt	ne
 23ebbce:	ee86 7aa7 	vdivne.f32	s14, s13, s15
 23ebbd2:	ed83 7a00 	vstrne	s14, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 23ebbd6:	e7df      	b.n	23ebb98 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xec>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 23ebbd8:	4c08      	ldr	r4, [pc, #32]	; (23ebbfc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x150>)
 23ebbda:	a806      	add	r0, sp, #24
 23ebbdc:	f7ff fa98 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 23ebbe0:	a802      	add	r0, sp, #8
 23ebbe2:	f7ff fa95 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
    }
 23ebbe6:	4620      	mov	r0, r4
 23ebbe8:	b00a      	add	sp, #40	; 0x28
 23ebbea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return EIDSP_OK;
 23ebbee:	2400      	movs	r4, #0
 23ebbf0:	e7f3      	b.n	23ebbda <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x12e>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 23ebbf2:	4c02      	ldr	r4, [pc, #8]	; (23ebbfc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x150>)
 23ebbf4:	e7f4      	b.n	23ebbe0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x134>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23ebbf6:	4c02      	ldr	r4, [pc, #8]	; (23ebc00 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x154>)
 23ebbf8:	e7f5      	b.n	23ebbe6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x13a>
 23ebbfa:	bf00      	nop
 23ebbfc:	fffffc16 	.word	0xfffffc16
 23ebc00:	fffffc14 	.word	0xfffffc14

023ebc04 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
    {
 23ebc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ebc08:	ed2d 8b02 	vpush	{d8}
 23ebc0c:	461e      	mov	r6, r3
        if (input_matrix->rows != 1) {
 23ebc0e:	6843      	ldr	r3, [r0, #4]
    {
 23ebc10:	4605      	mov	r5, r0
        if (input_matrix->rows != 1) {
 23ebc12:	2b01      	cmp	r3, #1
    {
 23ebc14:	4688      	mov	r8, r1
 23ebc16:	4614      	mov	r4, r2
 23ebc18:	eef0 8a40 	vmov.f32	s17, s0
 23ebc1c:	b08e      	sub	sp, #56	; 0x38
        if (input_matrix->rows != 1) {
 23ebc1e:	f040 80ca 	bne.w	23ebdb6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b2>
        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 23ebc22:	684b      	ldr	r3, [r1, #4]
 23ebc24:	2b01      	cmp	r3, #1
 23ebc26:	f040 80c6 	bne.w	23ebdb6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b2>
 23ebc2a:	688b      	ldr	r3, [r1, #8]
 23ebc2c:	ea4f 0956 	mov.w	r9, r6, lsr #1
 23ebc30:	f109 0a01 	add.w	sl, r9, #1
 23ebc34:	4553      	cmp	r3, sl
 23ebc36:	f040 80be 	bne.w	23ebdb6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b2>
        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 23ebc3a:	6851      	ldr	r1, [r2, #4]
 23ebc3c:	2901      	cmp	r1, #1
 23ebc3e:	f040 80ba 	bne.w	23ebdb6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b2>
 23ebc42:	6893      	ldr	r3, [r2, #8]
 23ebc44:	459a      	cmp	sl, r3
 23ebc46:	f040 80b6 	bne.w	23ebdb6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b2>
        if (input_matrix->buffer == NULL) {
 23ebc4a:	6803      	ldr	r3, [r0, #0]
 23ebc4c:	2b00      	cmp	r3, #0
 23ebc4e:	f000 80b4 	beq.w	23ebdba <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b6>
        if (out_fft_matrix->buffer == NULL) {
 23ebc52:	f8d8 2000 	ldr.w	r2, [r8]
 23ebc56:	2a00      	cmp	r2, #0
 23ebc58:	f000 80af 	beq.w	23ebdba <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b6>
        if (out_freq_matrix->buffer == NULL) {
 23ebc5c:	6822      	ldr	r2, [r4, #0]
 23ebc5e:	2a00      	cmp	r2, #0
 23ebc60:	f000 80ab 	beq.w	23ebdba <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1b6>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 23ebc64:	6882      	ldr	r2, [r0, #8]
 23ebc66:	a802      	add	r0, sp, #8
 23ebc68:	f7ff fa3d 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23ebc6c:	9b02      	ldr	r3, [sp, #8]
 23ebc6e:	2b00      	cmp	r3, #0
 23ebc70:	f000 809f 	beq.w	23ebdb2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1ae>
        if (n_fft > input_matrix->cols) {
 23ebc74:	68ad      	ldr	r5, [r5, #8]
 23ebc76:	42ae      	cmp	r6, r5
 23ebc78:	d917      	bls.n	23ebcaa <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xa6>
            nperseg = input_matrix->cols;
 23ebc7a:	b2ad      	uxth	r5, r5
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 23ebc7c:	2300      	movs	r3, #0
 23ebc7e:	462a      	mov	r2, r5
 23ebc80:	2101      	movs	r1, #1
 23ebc82:	a806      	add	r0, sp, #24
 23ebc84:	f7ff fa2f 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23ebc88:	9b06      	ldr	r3, [sp, #24]
 23ebc8a:	2b00      	cmp	r3, #0
 23ebc8c:	f000 808f 	beq.w	23ebdae <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1aa>
 23ebc90:	2300      	movs	r3, #0
 23ebc92:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 23ebc96:	b29a      	uxth	r2, r3
 23ebc98:	4295      	cmp	r5, r2
 23ebc9a:	d90a      	bls.n	23ebcb2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xae>
            triage_segments.buffer[ix] = 1.0f;
 23ebc9c:	9a06      	ldr	r2, [sp, #24]
 23ebc9e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 23ebca2:	ed82 8a00 	vstr	s16, [r2]
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 23ebca6:	3301      	adds	r3, #1
 23ebca8:	e7f5      	b.n	23ebc96 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x92>
        uint16_t nperseg = n_fft;
 23ebcaa:	4635      	mov	r5, r6
            welch_matrix.cols = n_fft;
 23ebcac:	bf38      	it	cc
 23ebcae:	9604      	strcc	r6, [sp, #16]
 23ebcb0:	e7e4      	b.n	23ebc7c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x78>
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
 23ebcb2:	ee07 6a90 	vmov	s15, r6
 23ebcb6:	ee88 7a28 	vdiv.f32	s14, s16, s17
 23ebcba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23ebcbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 23ebcc2:	2300      	movs	r3, #0
 23ebcc4:	ee88 7a27 	vdiv.f32	s14, s16, s15
 23ebcc8:	b299      	uxth	r1, r3
 23ebcca:	ee07 1a90 	vmov	s15, r1
 23ebcce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23ebcd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 23ebcd6:	6822      	ldr	r2, [r4, #0]
 23ebcd8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 23ebcdc:	3301      	adds	r3, #1
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
 23ebcde:	edc2 7a00 	vstr	s15, [r2]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 23ebce2:	b29a      	uxth	r2, r3
 23ebce4:	4591      	cmp	r9, r2
 23ebce6:	d2ef      	bcs.n	23ebcc8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 23ebce8:	2201      	movs	r2, #1
 23ebcea:	2300      	movs	r3, #0
 23ebcec:	4611      	mov	r1, r2
 23ebcee:	a80a      	add	r0, sp, #40	; 0x28
 23ebcf0:	f7ff f9f9 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23ebcf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23ebcf6:	2b00      	cmp	r3, #0
 23ebcf8:	d057      	beq.n	23ebdaa <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a6>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
 23ebcfa:	a90a      	add	r1, sp, #40	; 0x28
 23ebcfc:	a802      	add	r0, sp, #8
 23ebcfe:	f7ff fb3d 	bl	23eb37c <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
        if (ret != EIDSP_OK) {
 23ebd02:	4604      	mov	r4, r0
 23ebd04:	b9b8      	cbnz	r0, 23ebd36 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x132>
        ret = numpy::subtract(&welch_matrix, &mean_matrix);
 23ebd06:	a90a      	add	r1, sp, #40	; 0x28
 23ebd08:	a802      	add	r0, sp, #8
 23ebd0a:	f7ff fad7 	bl	23eb2bc <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
        if (ret != EIDSP_OK) {
 23ebd0e:	4604      	mov	r4, r0
 23ebd10:	b988      	cbnz	r0, 23ebd36 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x132>
        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
 23ebd12:	2101      	movs	r1, #1
 23ebd14:	ea4f 00ca 	mov.w	r0, sl, lsl #3
 23ebd18:	f004 f9bf 	bl	23f009a <_Z9ei_callocjj>
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
 23ebd1c:	4653      	mov	r3, sl
 23ebd1e:	4602      	mov	r2, r0
        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
 23ebd20:	4607      	mov	r7, r0
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
 23ebd22:	9904      	ldr	r1, [sp, #16]
 23ebd24:	9802      	ldr	r0, [sp, #8]
 23ebd26:	9600      	str	r6, [sp, #0]
 23ebd28:	f7ff fb70 	bl	23eb40c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
        if (ret != EIDSP_OK) {
 23ebd2c:	4604      	mov	r4, r0
 23ebd2e:	b188      	cbz	r0, 23ebd54 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x150>
        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 23ebd30:	4638      	mov	r0, r7
 23ebd32:	f004 f9b4 	bl	23f009e <_Z7ei_freePv>
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 23ebd36:	a80a      	add	r0, sp, #40	; 0x28
 23ebd38:	f7ff f9ea 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 23ebd3c:	a806      	add	r0, sp, #24
 23ebd3e:	f7ff f9e7 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 23ebd42:	a802      	add	r0, sp, #8
 23ebd44:	f7ff f9e4 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
    }
 23ebd48:	4620      	mov	r0, r4
 23ebd4a:	b00e      	add	sp, #56	; 0x38
 23ebd4c:	ecbd 8b02 	vpop	{d8}
 23ebd50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        float scale = 1.0f / (sampling_freq * nperseg);
 23ebd54:	ee07 5a90 	vmov	s15, r5
 23ebd58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23ebd5c:	ee27 0aa8 	vmul.f32	s0, s15, s17
 23ebd60:	4602      	mov	r2, r0
 23ebd62:	eec8 6a00 	vdiv.f32	s13, s16, s0
            fft_output[ix].i = 0.0f;
 23ebd66:	2500      	movs	r5, #0
 23ebd68:	1d3b      	adds	r3, r7, #4
                (abs(fft_output[ix].i * fft_output[ix].i));
 23ebd6a:	edd3 7a00 	vldr	s15, [r3]
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 23ebd6e:	ed13 7a01 	vldr	s14, [r3, #-4]
                (abs(fft_output[ix].i * fft_output[ix].i));
 23ebd72:	ee67 7aa7 	vmul.f32	s15, s15, s15
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 23ebd76:	eee7 7a07 	vfma.f32	s15, s14, s14
            fft_output[ix].r *= scale;
 23ebd7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
            if (ix != n_fft / 2) {
 23ebd7e:	b291      	uxth	r1, r2
 23ebd80:	4589      	cmp	r9, r1
                fft_output[ix].r *= 2;
 23ebd82:	bf18      	it	ne
 23ebd84:	ee77 7aa7 	vaddne.f32	s15, s15, s15
 23ebd88:	ed43 7a01 	vstr	s15, [r3, #-4]
            fft_output[ix].i = 0.0f;
 23ebd8c:	601d      	str	r5, [r3, #0]
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
 23ebd8e:	f8d8 1000 	ldr.w	r1, [r8]
 23ebd92:	f853 0c04 	ldr.w	r0, [r3, #-4]
 23ebd96:	eb01 0182 	add.w	r1, r1, r2, lsl #2
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 23ebd9a:	3201      	adds	r2, #1
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
 23ebd9c:	6008      	str	r0, [r1, #0]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 23ebd9e:	b291      	uxth	r1, r2
 23ebda0:	4589      	cmp	r9, r1
 23ebda2:	f103 0308 	add.w	r3, r3, #8
 23ebda6:	d2e0      	bcs.n	23ebd6a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x166>
 23ebda8:	e7c2      	b.n	23ebd30 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x12c>
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 23ebdaa:	4c05      	ldr	r4, [pc, #20]	; (23ebdc0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1bc>)
 23ebdac:	e7c3      	b.n	23ebd36 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x132>
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 23ebdae:	4c04      	ldr	r4, [pc, #16]	; (23ebdc0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1bc>)
 23ebdb0:	e7c4      	b.n	23ebd3c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x138>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 23ebdb2:	4c03      	ldr	r4, [pc, #12]	; (23ebdc0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1bc>)
 23ebdb4:	e7c5      	b.n	23ebd42 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x13e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23ebdb6:	4c03      	ldr	r4, [pc, #12]	; (23ebdc4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1c0>)
 23ebdb8:	e7c6      	b.n	23ebd48 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x144>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23ebdba:	4c01      	ldr	r4, [pc, #4]	; (23ebdc0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1bc>)
 23ebdbc:	e7c4      	b.n	23ebd48 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x144>
 23ebdbe:	bf00      	nop
 23ebdc0:	fffffc16 	.word	0xfffffc16
 23ebdc4:	fffffc14 	.word	0xfffffc14

023ebdc8 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>:
            }
        }
        features.push_back(entropy);
    }

    static float get_percentile_from_sorted(const fvec &sorted, float percentile)
 23ebdc8:	b510      	push	{r4, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23ebdca:	e9d0 4300 	ldrd	r4, r3, [r0]
 23ebdce:	1b1b      	subs	r3, r3, r4
 23ebdd0:	109b      	asrs	r3, r3, #2
    {
        // adding 0.5 is a trick to get rounding out of C flooring behavior during cast
        size_t index = (size_t) ((percentile * (sorted.size()-1)) + 0.5);
 23ebdd2:	3b01      	subs	r3, #1
 23ebdd4:	ee07 3a90 	vmov	s15, r3
 23ebdd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23ebddc:	ee67 7a80 	vmul.f32	s15, s15, s0
 23ebde0:	ee17 0a90 	vmov	r0, s15
 23ebde4:	f7fb fe00 	bl	23e79e8 <__aeabi_f2d>
 23ebde8:	2200      	movs	r2, #0
 23ebdea:	4b05      	ldr	r3, [pc, #20]	; (23ebe00 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf+0x38>)
 23ebdec:	f7fb fc9e 	bl	23e772c <__adddf3>
 23ebdf0:	f7fc f92a 	bl	23e8048 <__aeabi_d2uiz>
        return sorted[index];
 23ebdf4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    }
 23ebdf8:	ed90 0a00 	vldr	s0, [r0]
 23ebdfc:	bd10      	pop	{r4, pc}
 23ebdfe:	bf00      	nop
 23ebe00:	3fe00000 	.word	0x3fe00000

023ebe04 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>:
            }
            d[jx - 1] = b[jx] * xx - a[jx] * y[ix];
        }
    }

    static void iir2(const float *x, float *y, size_t n, const float *b, const float *a, float *d)
 23ebe04:	b530      	push	{r4, r5, lr}
        /*
         a[0]*y[n] = b[0] * x[n]               + d[0][n-1]
           d[0][n] = b[1] * x[n] - a[1] * y[n] + d[1][n-1]
           d[1][n] = b[2] * x[n] - a[2] * y[n]
         */
        const float one_over_a0 = 1.0f / a[0];
 23ebe06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    static void iir2(const float *x, float *y, size_t n, const float *b, const float *a, float *d)
 23ebe0a:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
        const float one_over_a0 = 1.0f / a[0];
 23ebe0e:	edd5 7a00 	vldr	s15, [r5]
 23ebe12:	ee87 6a27 	vdiv.f32	s12, s14, s15
        for (size_t ix = 0; ix < n; ix++) {
 23ebe16:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 23ebe1a:	4291      	cmp	r1, r2
 23ebe1c:	d026      	beq.n	23ebe6c <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_+0x68>
            const float xx = x[ix];
 23ebe1e:	ecf0 6a01 	vldmia	r0!, {s13}
            y[ix] = b[0] * xx + d[0];
 23ebe22:	ed93 7a00 	vldr	s14, [r3]
 23ebe26:	edd4 7a00 	vldr	s15, [r4]
 23ebe2a:	eee7 7a26 	vfma.f32	s15, s14, s13
            y[ix] *= one_over_a0;
 23ebe2e:	ee67 7a86 	vmul.f32	s15, s15, s12
 23ebe32:	edc1 7a00 	vstr	s15, [r1]
            d[0] = b[1] * xx - a[1] * y[ix] + d[1];
 23ebe36:	ed95 7a01 	vldr	s14, [r5, #4]
 23ebe3a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 23ebe3e:	ed93 7a01 	vldr	s14, [r3, #4]
 23ebe42:	eee7 7a26 	vfma.f32	s15, s14, s13
 23ebe46:	ed94 7a01 	vldr	s14, [r4, #4]
 23ebe4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 23ebe4e:	edc4 7a00 	vstr	s15, [r4]
            d[1] = b[2] * xx - a[2] * y[ix];
 23ebe52:	ed95 7a02 	vldr	s14, [r5, #8]
 23ebe56:	ecf1 7a01 	vldmia	r1!, {s15}
 23ebe5a:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 23ebe5e:	ed93 7a02 	vldr	s14, [r3, #8]
 23ebe62:	eee7 7a26 	vfma.f32	s15, s14, s13
 23ebe66:	edc4 7a01 	vstr	s15, [r4, #4]
        for (size_t ix = 0; ix < n; ix++) {
 23ebe6a:	e7d6      	b.n	23ebe1a <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_+0x16>
        }
    }
 23ebe6c:	bd30      	pop	{r4, r5, pc}
	...

023ebe70 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor>:
#endif // EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE

EI_IMPULSE_ERROR fill_input_tensor_from_matrix(
    matrix_t *fmatrix,
    TfLiteTensor *input
) {
 23ebe70:	b538      	push	{r3, r4, r5, lr}
 23ebe72:	460b      	mov	r3, r1
    const size_t matrix_els = fmatrix->rows * fmatrix->cols;
 23ebe74:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 23ebe78:	434a      	muls	r2, r1

    switch (input->type) {
 23ebe7a:	7819      	ldrb	r1, [r3, #0]
 23ebe7c:	2903      	cmp	r1, #3
 23ebe7e:	d04a      	beq.n	23ebf16 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xa6>
 23ebe80:	2909      	cmp	r1, #9
 23ebe82:	d021      	beq.n	23ebec8 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x58>
 23ebe84:	2901      	cmp	r1, #1
 23ebe86:	d166      	bne.n	23ebf56 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xe6>
        case kTfLiteFloat32: {
            if (input->bytes / 4 != matrix_els) {
 23ebe88:	6999      	ldr	r1, [r3, #24]
 23ebe8a:	ebb2 0f91 	cmp.w	r2, r1, lsr #2
 23ebe8e:	d009      	beq.n	23ebea4 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x34>
                ei_printf("ERR: input tensor has size %d, but input matrix has has size %d\n",
 23ebe90:	2900      	cmp	r1, #0
 23ebe92:	bfb8      	it	lt
 23ebe94:	3103      	addlt	r1, #3
 23ebe96:	1089      	asrs	r1, r1, #2
            }
            break;
        }
        case kTfLiteUInt8: {
            if (input->bytes != matrix_els) {
                ei_printf("ERR: input tensor has size %d, but input matrix has has size %d\n",
 23ebe98:	4832      	ldr	r0, [pc, #200]	; (23ebf64 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xf4>)
 23ebe9a:	f004 f8cf 	bl	23f003c <_Z9ei_printfPKcz>
                    (int)input->bytes, (int)matrix_els);
                return EI_IMPULSE_INVALID_SIZE;
 23ebe9e:	f06f 0017 	mvn.w	r0, #23
 23ebea2:	e006      	b.n	23ebeb2 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x42>
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23ebea4:	2200      	movs	r2, #0
 23ebea6:	e9d0 1401 	ldrd	r1, r4, [r0, #4]
 23ebeaa:	4361      	muls	r1, r4
 23ebeac:	4291      	cmp	r1, r2
 23ebeae:	d801      	bhi.n	23ebeb4 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x44>
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
        }
    }

    return EI_IMPULSE_OK;
 23ebeb0:	2000      	movs	r0, #0
}
 23ebeb2:	bd38      	pop	{r3, r4, r5, pc}
                input->data.f[ix] = fmatrix->buffer[ix];
 23ebeb4:	6801      	ldr	r1, [r0, #0]
 23ebeb6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 23ebeba:	680c      	ldr	r4, [r1, #0]
 23ebebc:	6859      	ldr	r1, [r3, #4]
 23ebebe:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 23ebec2:	600c      	str	r4, [r1, #0]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23ebec4:	3201      	adds	r2, #1
 23ebec6:	e7ee      	b.n	23ebea6 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x36>
            if (input->bytes != matrix_els) {
 23ebec8:	6999      	ldr	r1, [r3, #24]
 23ebeca:	4291      	cmp	r1, r2
 23ebecc:	d1e4      	bne.n	23ebe98 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x28>
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23ebece:	2100      	movs	r1, #0
                input->data.int8[ix] = static_cast<int8_t>(
 23ebed0:	f06f 057f 	mvn.w	r5, #127	; 0x7f
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23ebed4:	e9d0 2401 	ldrd	r2, r4, [r0, #4]
 23ebed8:	4362      	muls	r2, r4
 23ebeda:	428a      	cmp	r2, r1
 23ebedc:	d9e8      	bls.n	23ebeb0 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x40>
                float val = (float)fmatrix->buffer[ix];
 23ebede:	6802      	ldr	r2, [r0, #0]
static int32_t pre_cast_quantize(float value, float scale, int32_t zero_point, bool is_signed) {

    int32_t max_value = is_signed ? 127 : 255;
    int32_t min_value = is_signed ? -128 : 0;
    // Saturate/clip any overflows post scaling
    return std::min( std::max( static_cast<int32_t>(round(value / scale)) + zero_point, min_value), max_value);
 23ebee0:	ed93 7a03 	vldr	s14, [r3, #12]
 23ebee4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23ebee8:	edd2 6a00 	vldr	s13, [r2]
 23ebeec:	eec6 7a87 	vdiv.f32	s15, s13, s14
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 23ebef0:	fef8 7a67 	vrinta.f32	s15, s15
 23ebef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23ebef8:	ee17 ca90 	vmov	ip, s15
 23ebefc:	691a      	ldr	r2, [r3, #16]
                input->data.int8[ix] = static_cast<int8_t>(
 23ebefe:	685c      	ldr	r4, [r3, #4]
 23ebf00:	4494      	add	ip, r2
 23ebf02:	4662      	mov	r2, ip
 23ebf04:	2a7f      	cmp	r2, #127	; 0x7f
 23ebf06:	bfa8      	it	ge
 23ebf08:	227f      	movge	r2, #127	; 0x7f
 23ebf0a:	42aa      	cmp	r2, r5
 23ebf0c:	bfb8      	it	lt
 23ebf0e:	462a      	movlt	r2, r5
 23ebf10:	5462      	strb	r2, [r4, r1]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23ebf12:	3101      	adds	r1, #1
 23ebf14:	e7de      	b.n	23ebed4 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x64>
            if (input->bytes != matrix_els) {
 23ebf16:	6999      	ldr	r1, [r3, #24]
 23ebf18:	4291      	cmp	r1, r2
 23ebf1a:	d1bd      	bne.n	23ebe98 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x28>
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23ebf1c:	2100      	movs	r1, #0
 23ebf1e:	e9d0 2401 	ldrd	r2, r4, [r0, #4]
 23ebf22:	4362      	muls	r2, r4
 23ebf24:	428a      	cmp	r2, r1
 23ebf26:	d9c3      	bls.n	23ebeb0 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x40>
                float val = (float)fmatrix->buffer[ix];
 23ebf28:	6802      	ldr	r2, [r0, #0]
 23ebf2a:	ed93 7a03 	vldr	s14, [r3, #12]
 23ebf2e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23ebf32:	edd2 6a00 	vldr	s13, [r2]
 23ebf36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 23ebf3a:	fef8 7a67 	vrinta.f32	s15, s15
 23ebf3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23ebf42:	ee17 5a90 	vmov	r5, s15
 23ebf46:	691a      	ldr	r2, [r3, #16]
                input->data.uint8[ix] = static_cast<uint8_t>(
 23ebf48:	685c      	ldr	r4, [r3, #4]
 23ebf4a:	4415      	add	r5, r2
 23ebf4c:	f385 0208 	usat	r2, #8, r5
 23ebf50:	5462      	strb	r2, [r4, r1]
            for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 23ebf52:	3101      	adds	r1, #1
 23ebf54:	e7e3      	b.n	23ebf1e <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xae>
            ei_printf("ERR: Cannot handle input type (%d)\n", input->type);
 23ebf56:	4804      	ldr	r0, [pc, #16]	; (23ebf68 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0xf8>)
 23ebf58:	f004 f870 	bl	23f003c <_Z9ei_printfPKcz>
            return EI_IMPULSE_INPUT_TENSOR_WAS_NULL;
 23ebf5c:	f06f 000c 	mvn.w	r0, #12
 23ebf60:	e7a7      	b.n	23ebeb2 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor+0x42>
 23ebf62:	bf00      	nop
 23ebf64:	023faf25 	.word	0x023faf25
 23ebf68:	023faf66 	.word	0x023faf66

023ebf6c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb>:
    TfLiteTensor* output,
    TfLiteTensor* labels_tensor,
    TfLiteTensor* scores_tensor,
    ei_impulse_result_t *result,
    bool debug
) {
 23ebf6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ebf70:	ed2d 8b04 	vpush	{d8-d9}

    EI_IMPULSE_ERROR fill_res = EI_IMPULSE_OK;

    if (impulse->object_detection) {
 23ebf74:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
) {
 23ebf78:	4607      	mov	r7, r0
 23ebf7a:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
    if (impulse->object_detection) {
 23ebf7e:	b304      	cbz	r4, 23ebfc2 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x56>
        switch (impulse->object_detection_last_layer) {
 23ebf80:	f990 3044 	ldrsb.w	r3, [r0, #68]	; 0x44
 23ebf84:	1e5a      	subs	r2, r3, #1
 23ebf86:	2a05      	cmp	r2, #5
 23ebf88:	d818      	bhi.n	23ebfbc <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x50>
 23ebf8a:	e8df f002 	tbb	[pc, r2]
 23ebf8e:	7b03      	.short	0x7b03
 23ebf90:	7b0c7b0c 	.word	0x7b0c7b0c
                }
                break;
            }
#else
            case EI_CLASSIFIER_LAST_LAYER_SSD: {
                ei_printf("ERR: MobileNet SSD is not supported in EON or TensorFlow Lite Micro\n");
 23ebf94:	483d      	ldr	r0, [pc, #244]	; (23ec08c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x120>)
 23ebf96:	f004 f851 	bl	23f003c <_Z9ei_printfPKcz>
                        output->data.f,
                        impulse->tflite_output_features_count);
                }
                else {
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
                    return EI_IMPULSE_UNSUPPORTED_INFERENCING_ENGINE;
 23ebf9a:	f06f 0009 	mvn.w	r0, #9
            fill_res = fill_result_struct_f32(impulse, result, output->data.f, debug);
        }
    }

    return fill_res;
}
 23ebf9e:	ecbd 8b04 	vpop	{d8-d9}
 23ebfa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (output->type == kTfLiteInt8) {
 23ebfa6:	7809      	ldrb	r1, [r1, #0]
 23ebfa8:	2909      	cmp	r1, #9
 23ebfaa:	d06b      	beq.n	23ec084 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x118>
                else if (output->type == kTfLiteFloat32) {
 23ebfac:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 23ebfb0:	2b01      	cmp	r3, #1
 23ebfb2:	d067      	beq.n	23ec084 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x118>
                    ei_printf("ERR: Invalid output type (%d) for YOLOv5 last layer\n", output->type);
 23ebfb4:	4836      	ldr	r0, [pc, #216]	; (23ec090 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x124>)
 23ebfb6:	f004 f841 	bl	23f003c <_Z9ei_printfPKcz>
 23ebfba:	e7ee      	b.n	23ebf9a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x2e>
                ei_printf("ERR: Unsupported object detection last layer (%d)\n",
 23ebfbc:	4619      	mov	r1, r3
 23ebfbe:	4835      	ldr	r0, [pc, #212]	; (23ec094 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x128>)
 23ebfc0:	e7f9      	b.n	23ebfb6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x4a>
        if (int8_output) {
 23ebfc2:	780b      	ldrb	r3, [r1, #0]
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 23ebfc4:	f8d1 8004 	ldr.w	r8, [r1, #4]
        if (int8_output) {
 23ebfc8:	2b09      	cmp	r3, #9
 23ebfca:	d025      	beq.n	23ec018 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0xac>
 23ebfcc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
                                                                       bool debug) {
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
        float value = data[ix];

        if (debug) {
            ei_printf("%s:\t", impulse->categories[ix]);
 23ebfce:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 23ec098 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x12c>
            ei_printf_float(value);
            ei_printf("\n");
 23ebfd2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 23ec09c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x130>
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23ebfd6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 23ebfda:	42a3      	cmp	r3, r4
 23ebfdc:	d92b      	bls.n	23ec036 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0xca>
        float value = data[ix];
 23ebfde:	ecb8 8a01 	vldmia	r8!, {s16}
        if (debug) {
 23ebfe2:	ea4f 0984 	mov.w	r9, r4, lsl #2
 23ebfe6:	b16e      	cbz	r6, 23ec004 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x98>
            ei_printf("%s:\t", impulse->categories[ix]);
 23ebfe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 23ebfec:	4658      	mov	r0, fp
 23ebfee:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 23ebff2:	f004 f823 	bl	23f003c <_Z9ei_printfPKcz>
            ei_printf_float(value);
 23ebff6:	eeb0 0a48 	vmov.f32	s0, s16
 23ebffa:	f004 f83f 	bl	23f007c <_Z15ei_printf_floatf>
            ei_printf("\n");
 23ebffe:	4650      	mov	r0, sl
 23ec000:	f004 f81c 	bl	23f003c <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = impulse->categories[ix];
 23ec004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23ec008:	3401      	adds	r4, #1
        result->classification[ix].label = impulse->categories[ix];
 23ec00a:	f853 3009 	ldr.w	r3, [r3, r9]
 23ec00e:	3508      	adds	r5, #8
 23ec010:	602b      	str	r3, [r5, #0]
        result->classification[ix].value = value;
 23ec012:	ed85 8a01 	vstr	s16, [r5, #4]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23ec016:	e7de      	b.n	23ebfd6 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x6a>
            fill_res = fill_result_struct_i8(impulse, result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 23ec018:	edd1 7a04 	vldr	s15, [r1, #16]
 23ec01c:	ed91 9a03 	vldr	s18, [r1, #12]
 23ec020:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23ec024:	9d0e      	ldr	r5, [sp, #56]	; 0x38
            ei_printf("%s:\t", impulse->categories[ix]);
 23ec026:	f8df b070 	ldr.w	fp, [pc, #112]	; 23ec098 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x12c>
            ei_printf("\n");
 23ec02a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 23ec09c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x130>
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23ec02e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 23ec032:	42a3      	cmp	r3, r4
 23ec034:	d801      	bhi.n	23ec03a <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0xce>
 23ec036:	2000      	movs	r0, #0
 23ec038:	e7b1      	b.n	23ebf9e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x32>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 23ec03a:	f918 3004 	ldrsb.w	r3, [r8, r4]
 23ec03e:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 23ec042:	ee08 3a10 	vmov	s16, r3
 23ec046:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 23ec04a:	ee38 8a68 	vsub.f32	s16, s16, s17
 23ec04e:	ee28 8a09 	vmul.f32	s16, s16, s18
        if (debug) {
 23ec052:	b16e      	cbz	r6, 23ec070 <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x104>
            ei_printf("%s:\t", impulse->categories[ix]);
 23ec054:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 23ec058:	4658      	mov	r0, fp
 23ec05a:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 23ec05e:	f003 ffed 	bl	23f003c <_Z9ei_printfPKcz>
            ei_printf_float(value);
 23ec062:	eeb0 0a48 	vmov.f32	s0, s16
 23ec066:	f004 f809 	bl	23f007c <_Z15ei_printf_floatf>
            ei_printf("\n");
 23ec06a:	4648      	mov	r0, r9
 23ec06c:	f003 ffe6 	bl	23f003c <_Z9ei_printfPKcz>
        result->classification[ix].label = impulse->categories[ix];
 23ec070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23ec074:	3401      	adds	r4, #1
        result->classification[ix].label = impulse->categories[ix];
 23ec076:	f853 300a 	ldr.w	r3, [r3, sl]
 23ec07a:	3508      	adds	r5, #8
 23ec07c:	602b      	str	r3, [r5, #0]
        result->classification[ix].value = value;
 23ec07e:	ed85 8a01 	vstr	s16, [r5, #4]
    for (uint32_t ix = 0; ix < impulse->label_count; ix++) {
 23ec082:	e7d4      	b.n	23ec02e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0xc2>
                    fill_res = fill_result_struct_quantized_yolov5(
 23ec084:	f06f 0014 	mvn.w	r0, #20
 23ec088:	e789      	b.n	23ebf9e <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb+0x32>
 23ec08a:	bf00      	nop
 23ec08c:	023faf8a 	.word	0x023faf8a
 23ec090:	023fafcf 	.word	0x023fafcf
 23ec094:	023fb004 	.word	0x023fb004
 23ec098:	023fb037 	.word	0x023fb037
 23ec09c:	023fb324 	.word	0x023fb324

023ec0a0 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb.constprop.0>:
 * @param   result          Struct for results
 * @param   debug           Whether to print debug info
 *
 * @return  EI_IMPULSE_OK if successful
 */
static EI_IMPULSE_ERROR inference_tflite_run(
 23ec0a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23ec0a4:	4607      	mov	r7, r0
 23ec0a6:	e9dd 560d 	ldrd	r5, r6, [sp, #52]	; 0x34
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {

    // Run inference, and report any error
    TfLiteStatus invoke_status = interpreter->Invoke();
 23ec0aa:	4628      	mov	r0, r5
static EI_IMPULSE_ERROR inference_tflite_run(
 23ec0ac:	4614      	mov	r4, r2
 23ec0ae:	4699      	mov	r9, r3
 23ec0b0:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
    TfLiteStatus invoke_status = interpreter->Invoke();
 23ec0b4:	f006 fa0a 	bl	23f24cc <_ZN6tflite16MicroInterpreter6InvokeEv>
    if (invoke_status != kTfLiteOk) {
 23ec0b8:	4682      	mov	sl, r0
 23ec0ba:	b188      	cbz	r0, 23ec0e0 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb.constprop.0+0x40>
        delete interpreter;
 23ec0bc:	b135      	cbz	r5, 23ec0cc <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb.constprop.0+0x2c>
 23ec0be:	4628      	mov	r0, r5
 23ec0c0:	f006 f824 	bl	23f210c <_ZN6tflite16MicroInterpreterD1Ev>
 23ec0c4:	21ac      	movs	r1, #172	; 0xac
 23ec0c6:	4628      	mov	r0, r5
 23ec0c8:	f7fc fa5f 	bl	23e858a <_ZdlPvj>
        ei_printf("Invoke failed (%d)\n", invoke_status);
 23ec0cc:	4651      	mov	r1, sl
 23ec0ce:	481c      	ldr	r0, [pc, #112]	; (23ec140 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb.constprop.0+0xa0>)
 23ec0d0:	f003 ffb4 	bl	23f003c <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ERROR;
 23ec0d4:	f06f 0402 	mvn.w	r4, #2
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
        return EI_IMPULSE_CANCELED;
    }

    return EI_IMPULSE_OK;
}
 23ec0d8:	4620      	mov	r0, r4
 23ec0da:	b002      	add	sp, #8
 23ec0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint64_t ctx_end_us = ei_read_timer_us();
 23ec0e0:	f003 ffa6 	bl	23f0030 <_Z16ei_read_timer_usv>
    result->timing.classification_us = ctx_end_us - ctx_start_us;
 23ec0e4:	1b00      	subs	r0, r0, r4
 23ec0e6:	eb61 0109 	sbc.w	r1, r1, r9
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 23ec0ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23ec0ee:	2300      	movs	r3, #0
    result->timing.classification_us = ctx_end_us - ctx_start_us;
 23ec0f0:	e9c6 013c 	strd	r0, r1, [r6, #240]	; 0xf0
    result->timing.classification = (int)(result->timing.classification_us / 1000);
 23ec0f4:	f7fc f818 	bl	23e8128 <__aeabi_ldivmod>
 23ec0f8:	4601      	mov	r1, r0
 23ec0fa:	f8c6 00e0 	str.w	r0, [r6, #224]	; 0xe0
    if (debug) {
 23ec0fe:	f1b8 0f00 	cmp.w	r8, #0
 23ec102:	d002      	beq.n	23ec10a <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb.constprop.0+0x6a>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 23ec104:	480f      	ldr	r0, [pc, #60]	; (23ec144 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb.constprop.0+0xa4>)
 23ec106:	f003 ff99 	bl	23f003c <_Z9ei_printfPKcz>
    EI_IMPULSE_ERROR fill_res = fill_result_struct_from_output_tensor_tflite(
 23ec10a:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 23ec10e:	4638      	mov	r0, r7
 23ec110:	e9cd 6800 	strd	r6, r8, [sp]
 23ec114:	990a      	ldr	r1, [sp, #40]	; 0x28
 23ec116:	f7ff ff29 	bl	23ebf6c <_Z44fill_result_struct_from_output_tensor_tflitePK10ei_impulseP12TfLiteTensorS3_S3_P19ei_impulse_result_tb>
 23ec11a:	4604      	mov	r4, r0
    delete interpreter;
 23ec11c:	b135      	cbz	r5, 23ec12c <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb.constprop.0+0x8c>
 23ec11e:	4628      	mov	r0, r5
 23ec120:	f005 fff4 	bl	23f210c <_ZN6tflite16MicroInterpreterD1Ev>
 23ec124:	21ac      	movs	r1, #172	; 0xac
 23ec126:	4628      	mov	r0, r5
 23ec128:	f7fc fa2f 	bl	23e858a <_ZdlPvj>
    if (fill_res != EI_IMPULSE_OK) {
 23ec12c:	2c00      	cmp	r4, #0
 23ec12e:	d1d3      	bne.n	23ec0d8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb.constprop.0+0x38>
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23ec130:	f003 ff7c 	bl	23f002c <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
 23ec134:	3002      	adds	r0, #2
 23ec136:	bf08      	it	eq
 23ec138:	f06f 0401 	mvneq.w	r4, #1
 23ec13c:	e7cc      	b.n	23ec0d8 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb.constprop.0+0x38>
 23ec13e:	bf00      	nop
 23ec140:	023fb03c 	.word	0x023fb03c
 23ec144:	023fb050 	.word	0x023fb050

023ec148 <run_inference>:
extern "C" EI_IMPULSE_ERROR run_inference(
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 23ec148:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23ec14c:	4604      	mov	r4, r0
 23ec14e:	4689      	mov	r9, r1
 23ec150:	4692      	mov	sl, r2
 23ec152:	461e      	mov	r6, r3
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 23ec154:	2500      	movs	r5, #0
        ei_learning_block_t block = impulse->learning_blocks[ix];
 23ec156:	270c      	movs	r7, #12
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 23ec158:	6d23      	ldr	r3, [r4, #80]	; 0x50
 23ec15a:	42ab      	cmp	r3, r5
 23ec15c:	d910      	bls.n	23ec180 <run_inference+0x38>
        ei_learning_block_t block = impulse->learning_blocks[ix];
 23ec15e:	fb07 f005 	mul.w	r0, r7, r5
 23ec162:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if (scale_res != EI_IMPULSE_OK) {
            return scale_res;
        }
#endif

        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, result, block.config, debug);
 23ec164:	9600      	str	r6, [sp, #0]
        ei_learning_block_t block = impulse->learning_blocks[ix];
 23ec166:	eb03 0c00 	add.w	ip, r3, r0
        EI_IMPULSE_ERROR res = block.infer_fn(impulse, fmatrix, result, block.config, debug);
 23ec16a:	f853 8000 	ldr.w	r8, [r3, r0]
 23ec16e:	4652      	mov	r2, sl
 23ec170:	4649      	mov	r1, r9
 23ec172:	4620      	mov	r0, r4
 23ec174:	f8dc 3004 	ldr.w	r3, [ip, #4]
 23ec178:	47c0      	blx	r8
        if (res != EI_IMPULSE_OK) {
 23ec17a:	b930      	cbnz	r0, 23ec18a <run_inference+0x42>
    for (size_t ix = 0; ix < impulse->learning_blocks_size; ix++) {
 23ec17c:	3501      	adds	r5, #1
 23ec17e:	e7eb      	b.n	23ec158 <run_inference+0x10>
            return scale_res;
        }
#endif
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23ec180:	f003 ff54 	bl	23f002c <_Z29ei_run_impulse_check_canceledv>
        return EI_IMPULSE_CANCELED;
    }

    return EI_IMPULSE_OK;
 23ec184:	1c83      	adds	r3, r0, #2
 23ec186:	bf18      	it	ne
 23ec188:	2000      	movne	r0, #0
}
 23ec18a:	b002      	add	sp, #8
 23ec18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023ec190 <setup>:

/**
 * @brief      Particle setup function
 */
void setup()
{
 23ec190:	b537      	push	{r0, r1, r2, r4, r5, lr}
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 23ec192:	2000      	movs	r0, #0
 23ec194:	f007 ff60 	bl	23f4058 <hal_timer_millis>
        while (_while() && !_condition()) {
 23ec198:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
 23ec19c:	4604      	mov	r4, r0
 23ec19e:	2000      	movs	r0, #0
 23ec1a0:	f007 ff5a 	bl	23f4058 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23ec1a4:	1b00      	subs	r0, r0, r4
 23ec1a6:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23ec1aa:	42a8      	cmp	r0, r5
 23ec1ac:	f171 0300 	sbcs.w	r3, r1, #0
 23ec1b0:	d207      	bcs.n	23ec1c2 <setup+0x32>
    // put your setup code here, to run once:

    // Wait for serial to make it easier to see the serial logs at startup.
    waitFor(Serial.isConnected, 15000);
 23ec1b2:	f00a fa65 	bl	23f6680 <_Z16_fetch_usbserialv>
 23ec1b6:	f00a fa58 	bl	23f666a <_ZN9USBSerial11isConnectedEv>
 23ec1ba:	b910      	cbnz	r0, 23ec1c2 <setup+0x32>
            spark_process();
 23ec1bc:	f008 f9fa 	bl	23f45b4 <spark_process>
        while (_while() && !_condition()) {
 23ec1c0:	e7ed      	b.n	23ec19e <setup+0xe>
 23ec1c2:	f00a fa5d 	bl	23f6680 <_Z16_fetch_usbserialv>
 23ec1c6:	f00a fa50 	bl	23f666a <_ZN9USBSerial11isConnectedEv>
    delay(2000);
 23ec1ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23ec1ce:	f008 fb33 	bl	23f4838 <delay>

    ei_printf("Edge Impulse standalone inferencing (P2) example\n");
 23ec1d2:	4811      	ldr	r0, [pc, #68]	; (23ec218 <setup+0x88>)
 23ec1d4:	f003 ff32 	bl	23f003c <_Z9ei_printfPKcz>

    // Init the accelerometer
    accel.softReset();
 23ec1d8:	4810      	ldr	r0, [pc, #64]	; (23ec21c <setup+0x8c>)
 23ec1da:	f007 fe84 	bl	23f3ee6 <_ZN10ADXL362DMA9softResetEv>
    while(accel.readStatus() == 0) {
        ei_printf("Waiting for accelerometer...\r\n");
 23ec1de:	4c10      	ldr	r4, [pc, #64]	; (23ec220 <setup+0x90>)
    while(accel.readStatus() == 0) {
 23ec1e0:	480e      	ldr	r0, [pc, #56]	; (23ec21c <setup+0x8c>)
 23ec1e2:	f007 fe6d 	bl	23f3ec0 <_ZN10ADXL362DMA10readStatusEv>
 23ec1e6:	b938      	cbnz	r0, 23ec1f8 <setup+0x68>
        ei_printf("Waiting for accelerometer...\r\n");
 23ec1e8:	4620      	mov	r0, r4
 23ec1ea:	f003 ff27 	bl	23f003c <_Z9ei_printfPKcz>
        delay(1000);
 23ec1ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23ec1f2:	f008 fb21 	bl	23f4838 <delay>
    while(accel.readStatus() == 0) {
 23ec1f6:	e7f3      	b.n	23ec1e0 <setup+0x50>
    }

    // Set accelerometer range and measure mode
    accel.writeFilterControl(ADXL362DMA::RANGE_2G, false, false, ADXL362DMA::ODR_200);
 23ec1f8:	2304      	movs	r3, #4
 23ec1fa:	9300      	str	r3, [sp, #0]
 23ec1fc:	2300      	movs	r3, #0
 23ec1fe:	4807      	ldr	r0, [pc, #28]	; (23ec21c <setup+0x8c>)
 23ec200:	4619      	mov	r1, r3
 23ec202:	461a      	mov	r2, r3
 23ec204:	f007 fe84 	bl	23f3f10 <_ZN10ADXL362DMA18writeFilterControlEhbbh>
    accel.setMeasureMode(true);
 23ec208:	2101      	movs	r1, #1
 23ec20a:	4804      	ldr	r0, [pc, #16]	; (23ec21c <setup+0x8c>)
}
 23ec20c:	b003      	add	sp, #12
 23ec20e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    accel.setMeasureMode(true);
 23ec212:	f007 be6c 	b.w	23f3eee <_ZN10ADXL362DMA14setMeasureModeEb>
 23ec216:	bf00      	nop
 23ec218:	023fb06d 	.word	0x023fb06d
 23ec21c:	1007a6a4 	.word	0x1007a6a4
 23ec220:	023fb09f 	.word	0x023fb09f

023ec224 <_Z22print_inference_result19ei_impulse_result_t>:
    print_inference_result(result);

    delay(1000);
}

void print_inference_result(ei_impulse_result_t result) {
 23ec224:	b084      	sub	sp, #16
 23ec226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ec22a:	ac06      	add	r4, sp, #24
 23ec22c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // Print how long it took to perform inference
    ei_printf("Timing: DSP %d ms, inference %d ms, anomaly %d ms\r\n",
 23ec230:	e9dd 233e 	ldrd	r2, r3, [sp, #248]	; 0xf8
 23ec234:	993d      	ldr	r1, [sp, #244]	; 0xf4
 23ec236:	4811      	ldr	r0, [pc, #68]	; (23ec27c <_Z22print_inference_result19ei_impulse_result_t+0x58>)
 23ec238:	f003 ff00 	bl	23f003c <_Z9ei_printfPKcz>
                bb.height);
    }

    // Print the prediction results (classification)
#else
    ei_printf("Predictions:\r\n");
 23ec23c:	4810      	ldr	r0, [pc, #64]	; (23ec280 <_Z22print_inference_result19ei_impulse_result_t+0x5c>)
 23ec23e:	4625      	mov	r5, r4
 23ec240:	f003 fefc 	bl	23f003c <_Z9ei_printfPKcz>
 23ec244:	2400      	movs	r4, #0
 23ec246:	4e0f      	ldr	r6, [pc, #60]	; (23ec284 <_Z22print_inference_result19ei_impulse_result_t+0x60>)
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
        ei_printf("  %s: ", ei_classifier_inferencing_categories[i]);
 23ec248:	f8df 8040 	ldr.w	r8, [pc, #64]	; 23ec28c <_Z22print_inference_result19ei_impulse_result_t+0x68>
        ei_printf("%.5f\r\n", result.classification[i].value);
 23ec24c:	4f0e      	ldr	r7, [pc, #56]	; (23ec288 <_Z22print_inference_result19ei_impulse_result_t+0x64>)
        ei_printf("  %s: ", ei_classifier_inferencing_categories[i]);
 23ec24e:	4640      	mov	r0, r8
 23ec250:	f856 1b04 	ldr.w	r1, [r6], #4
 23ec254:	f003 fef2 	bl	23f003c <_Z9ei_printfPKcz>
        ei_printf("%.5f\r\n", result.classification[i].value);
 23ec258:	68e8      	ldr	r0, [r5, #12]
 23ec25a:	f7fb fbc5 	bl	23e79e8 <__aeabi_f2d>
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
 23ec25e:	3401      	adds	r4, #1
        ei_printf("%.5f\r\n", result.classification[i].value);
 23ec260:	4602      	mov	r2, r0
 23ec262:	460b      	mov	r3, r1
 23ec264:	4638      	mov	r0, r7
 23ec266:	f003 fee9 	bl	23f003c <_Z9ei_printfPKcz>
    for (uint16_t i = 0; i < EI_CLASSIFIER_LABEL_COUNT; i++) {
 23ec26a:	2c04      	cmp	r4, #4
 23ec26c:	f105 0508 	add.w	r5, r5, #8
 23ec270:	d1ed      	bne.n	23ec24e <_Z22print_inference_result19ei_impulse_result_t+0x2a>
    // Print anomaly result (if it exists)
#if EI_CLASSIFIER_HAS_ANOMALY == 1
    ei_printf("Anomaly prediction: %.3f\r\n", result.anomaly);
#endif

}
 23ec272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 23ec276:	b004      	add	sp, #16
 23ec278:	4770      	bx	lr
 23ec27a:	bf00      	nop
 23ec27c:	023fb0be 	.word	0x023fb0be
 23ec280:	023fb0f2 	.word	0x023fb0f2
 23ec284:	1007a43c 	.word	0x1007a43c
 23ec288:	023fb108 	.word	0x023fb108
 23ec28c:	023fb101 	.word	0x023fb101

023ec290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23ec290:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23ec292:	2614      	movs	r6, #20
 23ec294:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23ec298:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23ec29a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23ec29e:	42ae      	cmp	r6, r5
 23ec2a0:	d004      	beq.n	23ec2ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23ec2a2:	4628      	mov	r0, r5
 23ec2a4:	f00a f87d 	bl	23f63a2 <_ZN6StringD1Ev>
 23ec2a8:	3514      	adds	r5, #20
 23ec2aa:	e7f8      	b.n	23ec29e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23ec2ac:	6820      	ldr	r0, [r4, #0]
 23ec2ae:	f008 fa53 	bl	23f4758 <free>
    AllocatorT::free(data_);
}
 23ec2b2:	4620      	mov	r0, r4
 23ec2b4:	bd70      	pop	{r4, r5, r6, pc}

023ec2b6 <_ZNSt10unique_ptrIvPFvPvEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 23ec2b6:	b510      	push	{r4, lr}
 23ec2b8:	4604      	mov	r4, r0
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 23ec2ba:	6840      	ldr	r0, [r0, #4]
 23ec2bc:	b108      	cbz	r0, 23ec2c2 <_ZNSt10unique_ptrIvPFvPvEED1Ev+0xc>
	  get_deleter()(std::move(__ptr));
 23ec2be:	6823      	ldr	r3, [r4, #0]
 23ec2c0:	4798      	blx	r3
	__ptr = pointer();
      }
 23ec2c2:	4620      	mov	r0, r4
 23ec2c4:	bd10      	pop	{r4, pc}
	...

023ec2c8 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>:
    static int welch_max_hold(
 23ec2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ec2cc:	ed2d 8b02 	vpush	{d8}
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23ec2d0:	2400      	movs	r4, #0
 23ec2d2:	b08b      	sub	sp, #44	; 0x2c
 23ec2d4:	4698      	mov	r8, r3
 23ec2d6:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 23ec2da:	4681      	mov	r9, r0
 23ec2dc:	9306      	str	r3, [sp, #24]
        size_t fft_out_size = fft_points / 2 + 1;
 23ec2de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    static int welch_max_hold(
 23ec2e0:	460f      	mov	r7, r1
        size_t fft_out_size = fft_points / 2 + 1;
 23ec2e2:	ea4f 0a53 	mov.w	sl, r3, lsr #1
 23ec2e6:	4b39      	ldr	r3, [pc, #228]	; (23ec3cc <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x104>)
    static int welch_max_hold(
 23ec2e8:	9204      	str	r2, [sp, #16]
 23ec2ea:	9308      	str	r3, [sp, #32]
            saved_point = input[fft_points / 2];
 23ec2ec:	eb00 038a 	add.w	r3, r0, sl, lsl #2
 23ec2f0:	9303      	str	r3, [sp, #12]
        if (input_size < fft_points) {
 23ec2f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
        size_t fft_out_size = fft_points / 2 + 1;
 23ec2f4:	f10a 0b01 	add.w	fp, sl, #1
        if (input_size < fft_points) {
 23ec2f8:	428b      	cmp	r3, r1
 23ec2fa:	9409      	str	r4, [sp, #36]	; 0x24
 23ec2fc:	d90d      	bls.n	23ec31a <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x52>
            fft_out = (float *)ei_calloc(fft_out_size, sizeof(float));
 23ec2fe:	2104      	movs	r1, #4
 23ec300:	4658      	mov	r0, fp
 23ec302:	f003 feca 	bl	23f009a <_Z9ei_callocjj>
 23ec306:	4606      	mov	r6, r0
	const pointer __old_p = _M_ptr();
 23ec308:	9809      	ldr	r0, [sp, #36]	; 0x24
	_M_ptr() = __p;
 23ec30a:	9609      	str	r6, [sp, #36]	; 0x24
	if (__old_p)
 23ec30c:	2800      	cmp	r0, #0
 23ec30e:	d043      	beq.n	23ec398 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xd0>
	  _M_deleter()(__old_p);
 23ec310:	9b08      	ldr	r3, [sp, #32]
 23ec312:	4798      	blx	r3
        float saved_point = 0;
 23ec314:	ed9f 8a2e 	vldr	s16, [pc, #184]	; 23ec3d0 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x108>
 23ec318:	e004      	b.n	23ec324 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x5c>
            saved_point = input[fft_points / 2];
 23ec31a:	9b03      	ldr	r3, [sp, #12]
            fft_out = input;
 23ec31c:	4606      	mov	r6, r0
            saved_point = input[fft_points / 2];
 23ec31e:	ed93 8a00 	vldr	s16, [r3]
            do_saved_point = true;
 23ec322:	2401      	movs	r4, #1
        int input_ix = 0;
 23ec324:	2500      	movs	r5, #0
        memset(output, 0, sizeof(float) * (stop_bin - start_bin));
 23ec326:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23ec328:	2100      	movs	r1, #0
 23ec32a:	eba3 0208 	sub.w	r2, r3, r8
 23ec32e:	9804      	ldr	r0, [sp, #16]
 23ec330:	0092      	lsls	r2, r2, #2
 23ec332:	f00c fcf6 	bl	23f8d22 <memset>
        int input_ix = 0;
 23ec336:	eb06 0388 	add.w	r3, r6, r8, lsl #2
 23ec33a:	9305      	str	r3, [sp, #20]
            EI_TRY(power_spectrum(
 23ec33c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23ec33e:	b29b      	uxth	r3, r3
 23ec340:	9307      	str	r3, [sp, #28]
        while (input_ix < (int)input_size) {
 23ec342:	42af      	cmp	r7, r5
 23ec344:	dd35      	ble.n	23ec3b2 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xea>
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 23ec346:	9b17      	ldr	r3, [sp, #92]	; 0x5c
            EI_TRY(power_spectrum(
 23ec348:	4632      	mov	r2, r6
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 23ec34a:	18eb      	adds	r3, r5, r3
 23ec34c:	42bb      	cmp	r3, r7
 23ec34e:	9302      	str	r3, [sp, #8]
            EI_TRY(power_spectrum(
 23ec350:	9b07      	ldr	r3, [sp, #28]
 23ec352:	bf98      	it	ls
 23ec354:	9917      	ldrls	r1, [sp, #92]	; 0x5c
 23ec356:	9300      	str	r3, [sp, #0]
            size_t n_input_points = input_ix + fft_points <= input_size ? fft_points
 23ec358:	bf88      	it	hi
 23ec35a:	1b79      	subhi	r1, r7, r5
            EI_TRY(power_spectrum(
 23ec35c:	465b      	mov	r3, fp
 23ec35e:	eb09 0085 	add.w	r0, r9, r5, lsl #2
 23ec362:	f7ff fb3d 	bl	23eb9e0 <_ZN2ei5numpy14power_spectrumEPfjS1_jt>
 23ec366:	4603      	mov	r3, r0
 23ec368:	bb20      	cbnz	r0, 23ec3b4 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xec>
 23ec36a:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
            for (size_t i = start_bin; i < stop_bin; i++) {
 23ec36e:	4641      	mov	r1, r8
 23ec370:	9a16      	ldr	r2, [sp, #88]	; 0x58
 23ec372:	4291      	cmp	r1, r2
 23ec374:	d212      	bcs.n	23ec39c <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xd4>
                output[j] = std::max(output[j], fft_out[i]);
 23ec376:	4602      	mov	r2, r0
      if (__a < __b)
 23ec378:	ed93 7a00 	vldr	s14, [r3]
 23ec37c:	edd2 7a00 	vldr	s15, [r2]
 23ec380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23ec384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec388:	bf58      	it	pl
 23ec38a:	461a      	movpl	r2, r3
 23ec38c:	6812      	ldr	r2, [r2, #0]
 23ec38e:	3004      	adds	r0, #4
 23ec390:	f843 2b04 	str.w	r2, [r3], #4
            for (size_t i = start_bin; i < stop_bin; i++) {
 23ec394:	3101      	adds	r1, #1
 23ec396:	e7eb      	b.n	23ec370 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xa8>
        bool do_saved_point = false;
 23ec398:	4604      	mov	r4, r0
 23ec39a:	e7bb      	b.n	23ec314 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x4c>
            if (do_overlap) {
 23ec39c:	9b06      	ldr	r3, [sp, #24]
 23ec39e:	b133      	cbz	r3, 23ec3ae <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xe6>
                if (do_saved_point) {
 23ec3a0:	b114      	cbz	r4, 23ec3a8 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0xe0>
                    input[fft_points / 2] = saved_point;
 23ec3a2:	9b03      	ldr	r3, [sp, #12]
 23ec3a4:	ed83 8a00 	vstr	s16, [r3]
                input_ix += fft_points / 2;
 23ec3a8:	2400      	movs	r4, #0
 23ec3aa:	4455      	add	r5, sl
 23ec3ac:	e7c9      	b.n	23ec342 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x7a>
                input_ix += fft_points;
 23ec3ae:	9d02      	ldr	r5, [sp, #8]
 23ec3b0:	e7c7      	b.n	23ec342 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb+0x7a>
        return EIDSP_OK;
 23ec3b2:	2300      	movs	r3, #0
        ei_unique_ptr_t p_fft_out(nullptr, ei_free);
 23ec3b4:	a808      	add	r0, sp, #32
 23ec3b6:	9302      	str	r3, [sp, #8]
 23ec3b8:	f7ff ff7d 	bl	23ec2b6 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    }
 23ec3bc:	9b02      	ldr	r3, [sp, #8]
 23ec3be:	4618      	mov	r0, r3
 23ec3c0:	b00b      	add	sp, #44	; 0x2c
 23ec3c2:	ecbd 8b02 	vpop	{d8}
 23ec3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ec3ca:	bf00      	nop
 23ec3cc:	023f009f 	.word	0x023f009f
 23ec3d0:	00000000 	.word	0x00000000

023ec3d4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0>:
static EI_IMPULSE_ERROR inference_tflite_setup(
 23ec3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ec3d8:	b08f      	sub	sp, #60	; 0x3c
 23ec3da:	4605      	mov	r5, r0
 23ec3dc:	460e      	mov	r6, r1
 23ec3de:	4691      	mov	r9, r2
 23ec3e0:	4698      	mov	r8, r3
 23ec3e2:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
    *ctx_start_us = ei_read_timer_us();
 23ec3e4:	f003 fe24 	bl	23f0030 <_Z16ei_read_timer_usv>
 23ec3e8:	e9c6 0100 	strd	r0, r1, [r6]
    ei_config_tflite_graph_t *graph_config = (ei_config_tflite_graph_t*)block_config->graph_config;
 23ec3ec:	692f      	ldr	r7, [r5, #16]
    uint8_t *tensor_arena = (uint8_t*)ei_aligned_calloc(16, graph_config->arena_size);
 23ec3ee:	68f8      	ldr	r0, [r7, #12]
	if(align && size)
 23ec3f0:	2800      	cmp	r0, #0
 23ec3f2:	d036      	beq.n	23ec462 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x8e>
		void * p = ei_calloc(size + hdr_size, 1);
 23ec3f4:	2101      	movs	r1, #1
 23ec3f6:	3011      	adds	r0, #17
 23ec3f8:	f003 fe4f 	bl	23f009a <_Z9ei_callocjj>
		if(p)
 23ec3fc:	2800      	cmp	r0, #0
 23ec3fe:	d030      	beq.n	23ec462 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x8e>
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 23ec400:	f100 0611 	add.w	r6, r0, #17
 23ec404:	f026 060f 	bic.w	r6, r6, #15
 23ec408:	4b55      	ldr	r3, [pc, #340]	; (23ec560 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x18c>)
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 23ec40a:	1a30      	subs	r0, r6, r0
 23ec40c:	f826 0c02 	strh.w	r0, [r6, #-2]
 23ec410:	9305      	str	r3, [sp, #20]
	_M_ptr() = nullptr;
 23ec412:	2300      	movs	r3, #0
	const pointer __old_p = _M_ptr();
 23ec414:	6860      	ldr	r0, [r4, #4]
	_M_ptr() = nullptr;
 23ec416:	9306      	str	r3, [sp, #24]
	_M_ptr() = __p;
 23ec418:	6066      	str	r6, [r4, #4]
	if (__old_p)
 23ec41a:	bb58      	cbnz	r0, 23ec474 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0xa0>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 23ec41c:	9b05      	ldr	r3, [sp, #20]
    p_tensor_arena = ei_unique_ptr_t(tensor_arena, ei_aligned_free);
 23ec41e:	a805      	add	r0, sp, #20
 23ec420:	6023      	str	r3, [r4, #0]
 23ec422:	f7ff ff48 	bl	23ec2b6 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    if (model_arr != graph_config->model) {
 23ec426:	494f      	ldr	r1, [pc, #316]	; (23ec564 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x190>)
 23ec428:	687b      	ldr	r3, [r7, #4]
 23ec42a:	680a      	ldr	r2, [r1, #0]
 23ec42c:	4293      	cmp	r3, r2
 23ec42e:	4a4e      	ldr	r2, [pc, #312]	; (23ec568 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x194>)
 23ec430:	d023      	beq.n	23ec47a <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0xa6>
        tflite_first_run = true;
 23ec432:	2001      	movs	r0, #1
        model_arr = (uint8_t*)graph_config->model;
 23ec434:	600b      	str	r3, [r1, #0]
        tflite_first_run = true;
 23ec436:	7010      	strb	r0, [r2, #0]
// Helpers to get a typed pointer to the root object contained in the buffer.
template<typename T> T *GetMutableRoot(void *buf) {
  EndianCheck();
  return reinterpret_cast<T *>(
      reinterpret_cast<uint8_t *>(buf) +
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 23ec438:	6819      	ldr	r1, [r3, #0]
        model = tflite::GetModel(graph_config->model);
 23ec43a:	4c4c      	ldr	r4, [pc, #304]	; (23ec56c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x198>)
 23ec43c:	1858      	adds	r0, r3, r1
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
 23ec43e:	585b      	ldr	r3, [r3, r1]
 23ec440:	6020      	str	r0, [r4, #0]
 23ec442:	1ac3      	subs	r3, r0, r3
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 23ec444:	8819      	ldrh	r1, [r3, #0]
 23ec446:	2904      	cmp	r1, #4
 23ec448:	d962      	bls.n	23ec510 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x13c>

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
 23ec44a:	8899      	ldrh	r1, [r3, #4]
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23ec44c:	b111      	cbz	r1, 23ec454 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x80>
 23ec44e:	5841      	ldr	r1, [r0, r1]
        if (model->version() != TFLITE_SCHEMA_VERSION) {
 23ec450:	2903      	cmp	r1, #3
 23ec452:	d05f      	beq.n	23ec514 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x140>
            ei_printf(
 23ec454:	2203      	movs	r2, #3
 23ec456:	4846      	ldr	r0, [pc, #280]	; (23ec570 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x19c>)
 23ec458:	f003 fdf0 	bl	23f003c <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ERROR;
 23ec45c:	f06f 0002 	mvn.w	r0, #2
 23ec460:	e005      	b.n	23ec46e <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x9a>
        ei_printf("Failed to allocate TFLite arena (%zu bytes)\n", graph_config->arena_size);
 23ec462:	4844      	ldr	r0, [pc, #272]	; (23ec574 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x1a0>)
 23ec464:	68f9      	ldr	r1, [r7, #12]
 23ec466:	f003 fde9 	bl	23f003c <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 23ec46a:	f06f 0005 	mvn.w	r0, #5
}
 23ec46e:	b00f      	add	sp, #60	; 0x3c
 23ec470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  _M_deleter()(__old_p);
 23ec474:	6823      	ldr	r3, [r4, #0]
 23ec476:	4798      	blx	r3
 23ec478:	e7d0      	b.n	23ec41c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x48>
    if (tflite_first_run) {
 23ec47a:	7811      	ldrb	r1, [r2, #0]
 23ec47c:	2900      	cmp	r1, #0
 23ec47e:	d1db      	bne.n	23ec438 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x64>
    EI_TFLITE_RESOLVER
 23ec480:	f8df a10c 	ldr.w	sl, [pc, #268]	; 23ec590 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x1bc>
 23ec484:	e8da 4f8f 	ldab	r4, [sl]
 23ec488:	f014 0401 	ands.w	r4, r4, #1
 23ec48c:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 23ec584 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x1b0>
 23ec490:	d110      	bne.n	23ec4b4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0xe0>
 23ec492:	4650      	mov	r0, sl
 23ec494:	f7fc f888 	bl	23e85a8 <__cxa_guard_acquire>
 23ec498:	b160      	cbz	r0, 23ec4b4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0xe0>
  explicit MicroMutableOpResolver() {}
 23ec49a:	4b37      	ldr	r3, [pc, #220]	; (23ec578 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x1a4>)
 23ec49c:	4650      	mov	r0, sl
 23ec49e:	f8cb 3000 	str.w	r3, [fp]
 23ec4a2:	f8cb 404c 	str.w	r4, [fp, #76]	; 0x4c
 23ec4a6:	f8cb 4060 	str.w	r4, [fp, #96]	; 0x60
 23ec4aa:	f7fc f882 	bl	23e85b2 <__cxa_guard_release>
 23ec4ae:	4833      	ldr	r0, [pc, #204]	; (23ec57c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x1a8>)
 23ec4b0:	f00c fbf6 	bl	23f8ca0 <atexit>
 23ec4b4:	a805      	add	r0, sp, #20
 23ec4b6:	f006 fb0d 	bl	23f2ad4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED, registration,
 23ec4ba:	2109      	movs	r1, #9
 23ec4bc:	4b30      	ldr	r3, [pc, #192]	; (23ec580 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x1ac>)
 23ec4be:	aa05      	add	r2, sp, #20
 23ec4c0:	4830      	ldr	r0, [pc, #192]	; (23ec584 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x1b0>)
 23ec4c2:	f7fe faa2 	bl	23eaa0a <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
 23ec4c6:	a805      	add	r0, sp, #20
 23ec4c8:	f007 f820 	bl	23f350c <_ZN6tflite16Register_SOFTMAXEv>
    return AddBuiltin(BuiltinOperator_SOFTMAX, registration, ParseSoftmax);
 23ec4cc:	2119      	movs	r1, #25
 23ec4ce:	4b2e      	ldr	r3, [pc, #184]	; (23ec588 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x1b4>)
 23ec4d0:	482c      	ldr	r0, [pc, #176]	; (23ec584 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x1b0>)
 23ec4d2:	aa05      	add	r2, sp, #20
 23ec4d4:	f7fe fa99 	bl	23eaa0a <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE.isra.0>
        model, resolver, tensor_arena, graph_config->arena_size);
 23ec4d8:	20ac      	movs	r0, #172	; 0xac
 23ec4da:	f7fc f852 	bl	23e8582 <_Znwj>
 23ec4de:	4604      	mov	r4, r0
 23ec4e0:	b150      	cbz	r0, 23ec4f8 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x124>
 23ec4e2:	2300      	movs	r3, #0
 23ec4e4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 23ec4e8:	68fb      	ldr	r3, [r7, #12]
 23ec4ea:	4920      	ldr	r1, [pc, #128]	; (23ec56c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x198>)
 23ec4ec:	9300      	str	r3, [sp, #0]
 23ec4ee:	4a25      	ldr	r2, [pc, #148]	; (23ec584 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x1b0>)
 23ec4f0:	4633      	mov	r3, r6
 23ec4f2:	6809      	ldr	r1, [r1, #0]
 23ec4f4:	f005 fd94 	bl	23f2020 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE>
    *micro_interpreter = interpreter;
 23ec4f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    TfLiteStatus allocate_status = interpreter->AllocateTensors(true);
 23ec4fa:	2101      	movs	r1, #1
 23ec4fc:	4620      	mov	r0, r4
    *micro_interpreter = interpreter;
 23ec4fe:	601c      	str	r4, [r3, #0]
    TfLiteStatus allocate_status = interpreter->AllocateTensors(true);
 23ec500:	f005 ff14 	bl	23f232c <_ZN6tflite16MicroInterpreter15AllocateTensorsEb>
    if (allocate_status != kTfLiteOk) {
 23ec504:	4601      	mov	r1, r0
 23ec506:	b140      	cbz	r0, 23ec51a <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x146>
        ei_printf("AllocateTensors() failed");
 23ec508:	4820      	ldr	r0, [pc, #128]	; (23ec58c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x1b8>)
 23ec50a:	f003 fd97 	bl	23f003c <_Z9ei_printfPKcz>
 23ec50e:	e7a5      	b.n	23ec45c <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x88>
 23ec510:	2100      	movs	r1, #0
 23ec512:	e79f      	b.n	23ec454 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x80>
        tflite_first_run = false;
 23ec514:	2300      	movs	r3, #0
 23ec516:	7013      	strb	r3, [r2, #0]
 23ec518:	e7b2      	b.n	23ec480 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0xac>
    *input = interpreter->input(0);
 23ec51a:	4620      	mov	r0, r4
 23ec51c:	f005 fdcf 	bl	23f20be <_ZN6tflite16MicroInterpreter5inputEj>
 23ec520:	f8c9 0000 	str.w	r0, [r9]
    *output = interpreter->output(block_config->output_data_tensor);
 23ec524:	7aa9      	ldrb	r1, [r5, #10]
 23ec526:	4620      	mov	r0, r4
 23ec528:	f005 fde2 	bl	23f20f0 <_ZN6tflite16MicroInterpreter6outputEj>
 23ec52c:	f8c8 0000 	str.w	r0, [r8]
    if (block_config->object_detection_last_layer == EI_CLASSIFIER_LAST_LAYER_SSD) {
 23ec530:	f995 3009 	ldrsb.w	r3, [r5, #9]
 23ec534:	2b01      	cmp	r3, #1
 23ec536:	d10b      	bne.n	23ec550 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x17c>
        *output_scores = interpreter->output(block_config->output_score_tensor);
 23ec538:	7b29      	ldrb	r1, [r5, #12]
 23ec53a:	4620      	mov	r0, r4
 23ec53c:	f005 fdd8 	bl	23f20f0 <_ZN6tflite16MicroInterpreter6outputEj>
 23ec540:	9b19      	ldr	r3, [sp, #100]	; 0x64
 23ec542:	6018      	str	r0, [r3, #0]
        *output_labels = interpreter->output(block_config->output_labels_tensor);
 23ec544:	7ae9      	ldrb	r1, [r5, #11]
 23ec546:	4620      	mov	r0, r4
 23ec548:	f005 fdd2 	bl	23f20f0 <_ZN6tflite16MicroInterpreter6outputEj>
 23ec54c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23ec54e:	6018      	str	r0, [r3, #0]
    if (tflite_first_run) {
 23ec550:	4a05      	ldr	r2, [pc, #20]	; (23ec568 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x194>)
 23ec552:	2300      	movs	r3, #0
 23ec554:	7810      	ldrb	r0, [r2, #0]
 23ec556:	2800      	cmp	r0, #0
 23ec558:	d089      	beq.n	23ec46e <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x9a>
    return EI_IMPULSE_OK;
 23ec55a:	4618      	mov	r0, r3
        tflite_first_run = false;
 23ec55c:	7013      	strb	r3, [r2, #0]
 23ec55e:	e786      	b.n	23ec46e <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0+0x9a>
 23ec560:	023ea735 	.word	0x023ea735
 23ec564:	1007aa24 	.word	0x1007aa24
 23ec568:	1007a438 	.word	0x1007a438
 23ec56c:	1007a9bc 	.word	0x1007a9bc
 23ec570:	023fb13c 	.word	0x023fb13c
 23ec574:	023fb10f 	.word	0x023fb10f
 23ec578:	023fbb20 	.word	0x023fbb20
 23ec57c:	023ea353 	.word	0x023ea353
 23ec580:	023f01fd 	.word	0x023f01fd
 23ec584:	1007a9c0 	.word	0x1007a9c0
 23ec588:	023f02f9 	.word	0x023f02f9
 23ec58c:	023fb183 	.word	0x023fb183
 23ec590:	1007a6a0 	.word	0x1007a6a0

023ec594 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tPvb>:
    const ei_impulse_t *impulse,
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 23ec594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ec598:	b090      	sub	sp, #64	; 0x40
 23ec59a:	461c      	mov	r4, r3
 23ec59c:	4615      	mov	r5, r2
 23ec59e:	4606      	mov	r6, r0
 23ec5a0:	4688      	mov	r8, r1

    TfLiteTensor* input;
    TfLiteTensor* output;
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
    uint64_t ctx_start_us = ei_read_timer_us();
 23ec5a2:	f003 fd45 	bl	23f0030 <_Z16ei_read_timer_usv>
 23ec5a6:	4b1f      	ldr	r3, [pc, #124]	; (23ec624 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tPvb+0x90>)
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);

    tflite::MicroInterpreter* interpreter;
    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 23ec5a8:	af0e      	add	r7, sp, #56	; 0x38
 23ec5aa:	930e      	str	r3, [sp, #56]	; 0x38
 23ec5ac:	2300      	movs	r3, #0
 23ec5ae:	930f      	str	r3, [sp, #60]	; 0x3c
 23ec5b0:	ab0b      	add	r3, sp, #44	; 0x2c
 23ec5b2:	9302      	str	r3, [sp, #8]
 23ec5b4:	ab09      	add	r3, sp, #36	; 0x24
 23ec5b6:	9301      	str	r3, [sp, #4]
 23ec5b8:	ab0a      	add	r3, sp, #40	; 0x28
    uint64_t ctx_start_us = ei_read_timer_us();
 23ec5ba:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 23ec5be:	9300      	str	r3, [sp, #0]
 23ec5c0:	4620      	mov	r0, r4
 23ec5c2:	9703      	str	r7, [sp, #12]
 23ec5c4:	ab08      	add	r3, sp, #32
 23ec5c6:	aa07      	add	r2, sp, #28
 23ec5c8:	a90c      	add	r1, sp, #48	; 0x30
 23ec5ca:	f7ff ff03 	bl	23ec3d4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0>
        &output_labels,
        &output_scores,
        &interpreter,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 23ec5ce:	4604      	mov	r4, r0
 23ec5d0:	bb00      	cbnz	r0, 23ec614 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tPvb+0x80>
        return init_res;
    }

    uint8_t* tensor_arena = static_cast<uint8_t*>(p_tensor_arena.get());

    auto input_res = fill_input_tensor_from_matrix(fmatrix, input);
 23ec5d2:	4640      	mov	r0, r8
 23ec5d4:	9907      	ldr	r1, [sp, #28]
 23ec5d6:	f7ff fc4b 	bl	23ebe70 <_Z29fill_input_tensor_from_matrixPN2ei9ei_matrixEP12TfLiteTensor>
    if (input_res != EI_IMPULSE_OK) {
 23ec5da:	4604      	mov	r4, r0
 23ec5dc:	b9d0      	cbnz	r0, 23ec614 <_Z16run_nn_inferencePK10ei_impulsePN2ei9ei_matrixEP19ei_impulse_result_tPvb+0x80>
        return input_res;
    }

    EI_IMPULSE_ERROR run_res = inference_tflite_run(
 23ec5de:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 23ec5e2:	4630      	mov	r0, r6
 23ec5e4:	e9cd 5304 	strd	r5, r3, [sp, #16]
 23ec5e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23ec5ea:	9303      	str	r3, [sp, #12]
 23ec5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23ec5ee:	9302      	str	r3, [sp, #8]
 23ec5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23ec5f2:	9301      	str	r3, [sp, #4]
 23ec5f4:	9b08      	ldr	r3, [sp, #32]
 23ec5f6:	9300      	str	r3, [sp, #0]
 23ec5f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 23ec5fc:	f7ff fd50 	bl	23ec0a0 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb.constprop.0>
 23ec600:	4604      	mov	r4, r0
        output,
        output_labels,
        output_scores,
        interpreter, tensor_arena, result, debug);

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 23ec602:	f003 fd15 	bl	23f0030 <_Z16ei_read_timer_usv>
 23ec606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23ec608:	1ac0      	subs	r0, r0, r3
 23ec60a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23ec60c:	eb61 0103 	sbc.w	r1, r1, r3
 23ec610:	e9c5 013c 	strd	r0, r1, [r5, #240]	; 0xf0
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 23ec614:	4638      	mov	r0, r7
 23ec616:	f7ff fe4e 	bl	23ec2b6 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    if (run_res != EI_IMPULSE_OK) {
        return run_res;
    }

    return EI_IMPULSE_OK;
}
 23ec61a:	4620      	mov	r0, r4
 23ec61c:	b010      	add	sp, #64	; 0x40
 23ec61e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ec622:	bf00      	nop
 23ec624:	023ea735 	.word	0x023ea735

023ec628 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 23ec628:	b510      	push	{r4, lr}
 23ec62a:	4604      	mov	r4, r0
	_M_deallocate(_M_impl._M_start,
 23ec62c:	6800      	ldr	r0, [r0, #0]
	if (__p)
 23ec62e:	b108      	cbz	r0, 23ec634 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev+0xc>
 23ec630:	f003 fd35 	bl	23f009e <_Z7ei_freePv>
      }
 23ec634:	4620      	mov	r0, r4
 23ec636:	bd10      	pop	{r4, pc}

023ec638 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 23ec638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23ec63a:	9301      	str	r3, [sp, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23ec63c:	6883      	ldr	r3, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23ec63e:	e9cd 2102 	strd	r2, r1, [sp, #8]
      if (_M_empty())
 23ec642:	b90b      	cbnz	r3, 23ec648 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x10>
	__throw_bad_function_call();
 23ec644:	f00a fa83 	bl	23f6b4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23ec648:	68c4      	ldr	r4, [r0, #12]
 23ec64a:	ab01      	add	r3, sp, #4
 23ec64c:	aa02      	add	r2, sp, #8
 23ec64e:	a903      	add	r1, sp, #12
 23ec650:	47a0      	blx	r4
    }
 23ec652:	b004      	add	sp, #16
 23ec654:	bd10      	pop	{r4, pc}
	...

023ec658 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

    return EIDSP_OK;
#endif
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 23ec658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ec65c:	ed2d 8b02 	vpush	{d8}
 23ec660:	4606      	mov	r6, r0
 23ec662:	460f      	mov	r7, r1
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23ec664:	68d0      	ldr	r0, [r2, #12]
 23ec666:	4942      	ldr	r1, [pc, #264]	; (23ec770 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x118>)
__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 23ec668:	b085      	sub	sp, #20
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 23ec66a:	f8d2 b008 	ldr.w	fp, [r2, #8]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23ec66e:	f7fb ff59 	bl	23e8524 <strcmp>
    const size_t page_size = 1024;
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23ec672:	2400      	movs	r4, #0
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23ec674:	2800      	cmp	r0, #0
 23ec676:	bf0c      	ite	eq
 23ec678:	f04f 0a01 	moveq.w	sl, #1
 23ec67c:	f04f 0a03 	movne.w	sl, #3
    size_t output_ix = 0;
 23ec680:	4625      	mov	r5, r4

        for (size_t jx = 0; jx < elements_to_read; jx++) {
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 23ec682:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 23ec774 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x11c>
                output_matrix->buffer[output_ix++] = b;
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23ec686:	eddf 8a3c 	vldr	s17, [pc, #240]	; 23ec778 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x120>
    size_t bytes_left = signal->total_length;
 23ec68a:	f8d6 8010 	ldr.w	r8, [r6, #16]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23ec68e:	6933      	ldr	r3, [r6, #16]
 23ec690:	42a3      	cmp	r3, r4
 23ec692:	d96b      	bls.n	23ec76c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x114>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 23ec694:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 23ec698:	46c1      	mov	r9, r8
 23ec69a:	bf28      	it	cs
 23ec69c:	f44f 6980 	movcs.w	r9, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
 23ec6a0:	2300      	movs	r3, #0
 23ec6a2:	465a      	mov	r2, fp
 23ec6a4:	4649      	mov	r1, r9
 23ec6a6:	4668      	mov	r0, sp
 23ec6a8:	f7fe fd1d 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
        if (!input_matrix.buffer) {
 23ec6ac:	9b00      	ldr	r3, [sp, #0]
 23ec6ae:	b943      	cbnz	r3, 23ec6c2 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23ec6b0:	4668      	mov	r0, sp
 23ec6b2:	f7fe fd2d 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
 23ec6b6:	4831      	ldr	r0, [pc, #196]	; (23ec77c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x124>)

        bytes_left -= elements_to_read;
    }

    return EIDSP_OK;
}
 23ec6b8:	b005      	add	sp, #20
 23ec6ba:	ecbd 8b02 	vpop	{d8}
 23ec6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 23ec6c2:	464a      	mov	r2, r9
 23ec6c4:	4621      	mov	r1, r4
 23ec6c6:	4630      	mov	r0, r6
 23ec6c8:	f7ff ffb6 	bl	23ec638 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23ec6cc:	2200      	movs	r2, #0
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23ec6ce:	eddf 5a2c 	vldr	s11, [pc, #176]	; 23ec780 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x128>
 23ec6d2:	ed9f 5a2c 	vldr	s10, [pc, #176]	; 23ec784 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x12c>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23ec6d6:	454a      	cmp	r2, r9
 23ec6d8:	d040      	beq.n	23ec75c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x104>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23ec6da:	9b00      	ldr	r3, [sp, #0]
            if (channel_count == 3) {
 23ec6dc:	f1ba 0f03 	cmp.w	sl, #3
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23ec6e0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23ec6e4:	edd3 7a00 	vldr	s15, [r3]
 23ec6e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23ec6ec:	ee17 3a90 	vmov	r3, s15
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 23ec6f0:	f3c3 4107 	ubfx	r1, r3, #16, #8
 23ec6f4:	ee07 1a90 	vmov	s15, r1
 23ec6f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 23ec6fc:	f3c3 2107 	ubfx	r1, r3, #8, #8
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 23ec700:	ee87 6a88 	vdiv.f32	s12, s15, s16
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 23ec704:	ee07 1a90 	vmov	s15, r1
 23ec708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 23ec70c:	b2db      	uxtb	r3, r3
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 23ec70e:	ee87 7a88 	vdiv.f32	s14, s15, s16
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 23ec712:	ee07 3a90 	vmov	s15, r3
 23ec716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                output_matrix->buffer[output_ix++] = r;
 23ec71a:	683b      	ldr	r3, [r7, #0]
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 23ec71c:	eec7 6a88 	vdiv.f32	s13, s15, s16
                output_matrix->buffer[output_ix++] = r;
 23ec720:	ea4f 0085 	mov.w	r0, r5, lsl #2
 23ec724:	f105 0101 	add.w	r1, r5, #1
 23ec728:	eb03 0385 	add.w	r3, r3, r5, lsl #2
            if (channel_count == 3) {
 23ec72c:	d10d      	bne.n	23ec74a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xf2>
                output_matrix->buffer[output_ix++] = r;
 23ec72e:	ed83 6a00 	vstr	s12, [r3]
                output_matrix->buffer[output_ix++] = g;
 23ec732:	683b      	ldr	r3, [r7, #0]
                output_matrix->buffer[output_ix++] = b;
 23ec734:	1ce9      	adds	r1, r5, #3
                output_matrix->buffer[output_ix++] = g;
 23ec736:	4403      	add	r3, r0
 23ec738:	ed83 7a01 	vstr	s14, [r3, #4]
                output_matrix->buffer[output_ix++] = b;
 23ec73c:	683b      	ldr	r3, [r7, #0]
 23ec73e:	4403      	add	r3, r0
 23ec740:	edc3 6a02 	vstr	s13, [r3, #8]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23ec744:	460d      	mov	r5, r1
 23ec746:	3201      	adds	r2, #1
 23ec748:	e7c5      	b.n	23ec6d6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x7e>
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23ec74a:	ee27 7a28 	vmul.f32	s14, s14, s17
 23ec74e:	eea6 7a25 	vfma.f32	s14, s12, s11
 23ec752:	eea6 7a85 	vfma.f32	s14, s13, s10
                output_matrix->buffer[output_ix++] = v;
 23ec756:	ed83 7a00 	vstr	s14, [r3]
 23ec75a:	e7f3      	b.n	23ec744 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xec>
        matrix_t input_matrix(elements_to_read, config.axes);
 23ec75c:	4668      	mov	r0, sp
        bytes_left -= elements_to_read;
 23ec75e:	eba8 0802 	sub.w	r8, r8, r2
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23ec762:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
 23ec766:	f7fe fcd3 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23ec76a:	e790      	b.n	23ec68e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x36>
    return EIDSP_OK;
 23ec76c:	2000      	movs	r0, #0
 23ec76e:	e7a3      	b.n	23ec6b8 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x60>
 23ec770:	023fb19c 	.word	0x023fb19c
 23ec774:	437f0000 	.word	0x437f0000
 23ec778:	3f1645a2 	.word	0x3f1645a2
 23ec77c:	fffffc16 	.word	0xfffffc16
 23ec780:	3e991687 	.word	0x3e991687
 23ec784:	3de978d5 	.word	0x3de978d5

023ec788 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23ec788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ec78c:	6805      	ldr	r5, [r0, #0]
#endif
        return &wrapped_signal;
    }

    int get_data(size_t offset, size_t length, float *out_ptr) {
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 23ec78e:	680c      	ldr	r4, [r1, #0]
 23ec790:	f8d3 9000 	ldr.w	r9, [r3]
 23ec794:	e9d5 0302 	ldrd	r0, r3, [r5, #8]
 23ec798:	fbb4 f4f0 	udiv	r4, r4, r0
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 23ec79c:	6816      	ldr	r6, [r2, #0]

        size_t out_ptr_ix = 0;
 23ec79e:	f04f 0800 	mov.w	r8, #0
        size_t length_on_original_signal = length / _axes_count * _impulse->raw_samples_per_frame;
 23ec7a2:	fbb6 f6f0 	udiv	r6, r6, r0
        size_t offset_on_original_signal = offset / _axes_count * _impulse->raw_samples_per_frame;
 23ec7a6:	699b      	ldr	r3, [r3, #24]

        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 23ec7a8:	435c      	muls	r4, r3
 23ec7aa:	fb03 4606 	mla	r6, r3, r6, r4
 23ec7ae:	42a6      	cmp	r6, r4
 23ec7b0:	d919      	bls.n	23ec7e6 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x5e>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 23ec7b2:	2700      	movs	r7, #0
 23ec7b4:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 23ec7b8:	68aa      	ldr	r2, [r5, #8]
 23ec7ba:	eb07 0308 	add.w	r3, r7, r8
 23ec7be:	42ba      	cmp	r2, r7
 23ec7c0:	d90c      	bls.n	23ec7dc <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x54>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 23ec7c2:	686b      	ldr	r3, [r5, #4]
 23ec7c4:	2201      	movs	r2, #1
 23ec7c6:	5dd9      	ldrb	r1, [r3, r7]
 23ec7c8:	6828      	ldr	r0, [r5, #0]
 23ec7ca:	4653      	mov	r3, sl
 23ec7cc:	4421      	add	r1, r4
 23ec7ce:	f7ff ff33 	bl	23ec638 <_ZNKSt8functionIFijjPfEEclEjjS0_>
                if (r != 0) {
 23ec7d2:	f10a 0a04 	add.w	sl, sl, #4
 23ec7d6:	b938      	cbnz	r0, 23ec7e8 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x60>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 23ec7d8:	3701      	adds	r7, #1
 23ec7da:	e7ed      	b.n	23ec7b8 <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x30>
        for (size_t ix = offset_on_original_signal; ix < offset_on_original_signal + length_on_original_signal; ix += _impulse->raw_samples_per_frame) {
 23ec7dc:	68ea      	ldr	r2, [r5, #12]
 23ec7de:	4698      	mov	r8, r3
 23ec7e0:	6992      	ldr	r2, [r2, #24]
 23ec7e2:	4414      	add	r4, r2
 23ec7e4:	e7e3      	b.n	23ec7ae <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_+0x26>
                    return r;
                }
            }
        }

        return 0;
 23ec7e6:	2000      	movs	r0, #0
      }
 23ec7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023ec7ec <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>:
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    void *config_ptr,
    bool debug = false)
{
 23ec7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ec7f0:	ed2d 8b06 	vpush	{d8-d10}
 23ec7f4:	4616      	mov	r6, r2
 23ec7f6:	b09d      	sub	sp, #116	; 0x74
 23ec7f8:	461c      	mov	r4, r3
 23ec7fa:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
    ei_learning_block_config_tflite_graph_t *block_config = (ei_learning_block_config_tflite_graph_t*)config_ptr;

    memset(result, 0, sizeof(ei_impulse_result_t));
 23ec7fe:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 23ec802:	4607      	mov	r7, r0
 23ec804:	468a      	mov	sl, r1
    memset(result, 0, sizeof(ei_impulse_result_t));
 23ec806:	4630      	mov	r0, r6
 23ec808:	2100      	movs	r1, #0
{
 23ec80a:	9309      	str	r3, [sp, #36]	; 0x24
    memset(result, 0, sizeof(ei_impulse_result_t));
 23ec80c:	f00c fa89 	bl	23f8d22 <memset>
 23ec810:	4bc5      	ldr	r3, [pc, #788]	; (23ecb28 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x33c>)
    TfLiteTensor* output_scores;
    TfLiteTensor* output_labels;
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);

    tflite::MicroInterpreter* interpreter;
    EI_IMPULSE_ERROR init_res = inference_tflite_setup(
 23ec812:	4620      	mov	r0, r4
 23ec814:	9316      	str	r3, [sp, #88]	; 0x58
 23ec816:	2300      	movs	r3, #0
 23ec818:	9317      	str	r3, [sp, #92]	; 0x5c
 23ec81a:	ab16      	add	r3, sp, #88	; 0x58
 23ec81c:	9303      	str	r3, [sp, #12]
 23ec81e:	ab13      	add	r3, sp, #76	; 0x4c
 23ec820:	9302      	str	r3, [sp, #8]
 23ec822:	ab11      	add	r3, sp, #68	; 0x44
 23ec824:	9301      	str	r3, [sp, #4]
 23ec826:	ab12      	add	r3, sp, #72	; 0x48
 23ec828:	9300      	str	r3, [sp, #0]
 23ec82a:	aa0f      	add	r2, sp, #60	; 0x3c
 23ec82c:	ab10      	add	r3, sp, #64	; 0x40
 23ec82e:	a914      	add	r1, sp, #80	; 0x50
 23ec830:	f7ff fdd0 	bl	23ec3d4 <_ZL22inference_tflite_setupP39ei_learning_block_config_tflite_graph_tPyPP12TfLiteTensorS4_S4_S4_PPN6tflite16MicroInterpreterERSt10unique_ptrIvPFvPvEE.constprop.0>
        &output_labels,
        &output_scores,
        &interpreter,
        p_tensor_arena);

    if (init_res != EI_IMPULSE_OK) {
 23ec834:	4605      	mov	r5, r0
 23ec836:	2800      	cmp	r0, #0
 23ec838:	d15d      	bne.n	23ec8f6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x10a>
        return init_res;
    }

    if (input->type != TfLiteType::kTfLiteInt8 && input->type != TfLiteType::kTfLiteUInt8) {
 23ec83a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23ec83c:	781b      	ldrb	r3, [r3, #0]
 23ec83e:	2b09      	cmp	r3, #9
 23ec840:	d002      	beq.n	23ec848 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x5c>
 23ec842:	2b03      	cmp	r3, #3
 23ec844:	f040 8212 	bne.w	23ecc6c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x480>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
    }

    uint64_t dsp_start_us = ei_read_timer_us();
 23ec848:	f003 fbf2 	bl	23f0030 <_Z16ei_read_timer_usv>

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 23ec84c:	693b      	ldr	r3, [r7, #16]
    uint64_t dsp_start_us = ei_read_timer_us();
 23ec84e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    ei::matrix_i8_t features_matrix(1, impulse->nn_input_frame_size, input->data.int8);
 23ec852:	9307      	str	r3, [sp, #28]
 23ec854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23ec856:	685c      	ldr	r4, [r3, #4]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 23ec858:	2c00      	cmp	r4, #0
 23ec85a:	d155      	bne.n	23ec908 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x11c>
            buffer = a_buffer;
            buffer_managed_by_me = false;
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 23ec85c:	2101      	movs	r1, #1
 23ec85e:	9807      	ldr	r0, [sp, #28]
 23ec860:	f003 fc1b 	bl	23f009a <_Z9ei_callocjj>
            buffer_managed_by_me = true;
 23ec864:	2301      	movs	r3, #1
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 23ec866:	4604      	mov	r4, r0

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input->params.scale, input->params.zero_point,
 23ec868:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            buffer_managed_by_me = false;
 23ec86a:	9308      	str	r3, [sp, #32]
 23ec86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 23ec86e:	ed92 8a04 	vldr	s16, [r2, #16]
 23ec872:	689b      	ldr	r3, [r3, #8]
 23ec874:	edd2 8a03 	vldr	s17, [r2, #12]
        impulse->frequency, impulse->learning_blocks[0].image_scaling);
 23ec878:	6d7a      	ldr	r2, [r7, #84]	; 0x54

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, float scale, float zero_point, const float frequency,
                                                             int image_scaling) {
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23ec87a:	68d8      	ldr	r0, [r3, #12]
 23ec87c:	f8d2 8008 	ldr.w	r8, [r2, #8]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 23ec880:	689a      	ldr	r2, [r3, #8]
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23ec882:	49aa      	ldr	r1, [pc, #680]	; (23ecb2c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x340>)
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 23ec884:	ee0a 2a10 	vmov	s20, r2
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23ec888:	f7fb fe4c 	bl	23e8524 <strcmp>
    const size_t page_size = 1024;
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23ec88c:	f04f 0900 	mov.w	r9, #0
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23ec890:	2800      	cmp	r0, #0
 23ec892:	bf0c      	ite	eq
 23ec894:	2301      	moveq	r3, #1
 23ec896:	2303      	movne	r3, #3
    int ret = extract_image_features_quantized(signal, &features_matrix, impulse->dsp_blocks[0].config, input->params.scale, input->params.zero_point,
 23ec898:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    size_t output_ix = 0;
 23ec89c:	464d      	mov	r5, r9
 23ec89e:	ed9f 9aa4 	vldr	s18, [pc, #656]	; 23ecb30 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x344>
                        b = (b - torch_mean[2]) / torch_std[2];
                    }

                    // ITU-R 601-2 luma transform
                    // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23ec8a2:	eddf 9aa4 	vldr	s19, [pc, #656]	; 23ecb34 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x348>
    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 23ec8a6:	930a      	str	r3, [sp, #40]	; 0x28
    size_t bytes_left = signal->total_length;
 23ec8a8:	f8da 3010 	ldr.w	r3, [sl, #16]
 23ec8ac:	9306      	str	r3, [sp, #24]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23ec8ae:	f8da 3010 	ldr.w	r3, [sl, #16]
 23ec8b2:	454b      	cmp	r3, r9
 23ec8b4:	f240 817e 	bls.w	23ecbb4 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3c8>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 23ec8b8:	9b06      	ldr	r3, [sp, #24]
        matrix_t input_matrix(elements_to_read, config.axes);
 23ec8ba:	ee1a 2a10 	vmov	r2, s20
 23ec8be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 23ec8c2:	bf28      	it	cs
 23ec8c4:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 23ec8c8:	469b      	mov	fp, r3
 23ec8ca:	a818      	add	r0, sp, #96	; 0x60
 23ec8cc:	2300      	movs	r3, #0
 23ec8ce:	4659      	mov	r1, fp
 23ec8d0:	f7fe fc09 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
        if (!input_matrix.buffer) {
 23ec8d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23ec8d6:	b9cb      	cbnz	r3, 23ec90c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x120>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23ec8d8:	a818      	add	r0, sp, #96	; 0x60
 23ec8da:	f7fe fc19 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
    if (ret != EIDSP_OK) {
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 23ec8de:	4996      	ldr	r1, [pc, #600]	; (23ecb38 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x34c>)
 23ec8e0:	4896      	ldr	r0, [pc, #600]	; (23ecb3c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x350>)
 23ec8e2:	f003 fbab 	bl	23f003c <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 23ec8e6:	f06f 0504 	mvn.w	r5, #4
#endif
        }
    }

    ~ei_matrix_i8() {
        if (buffer && buffer_managed_by_me) {
 23ec8ea:	b124      	cbz	r4, 23ec8f6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x10a>
 23ec8ec:	9b08      	ldr	r3, [sp, #32]
 23ec8ee:	b113      	cbz	r3, 23ec8f6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x10a>
            ei_free(buffer);
 23ec8f0:	4620      	mov	r0, r4
 23ec8f2:	f003 fbd4 	bl	23f009e <_Z7ei_freePv>
    ei_unique_ptr_t p_tensor_arena(nullptr, ei_aligned_free);
 23ec8f6:	a816      	add	r0, sp, #88	; 0x58
 23ec8f8:	f7ff fcdd 	bl	23ec2b6 <_ZNSt10unique_ptrIvPFvPvEED1Ev>
    }

    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;

    return EI_IMPULSE_OK;
}
 23ec8fc:	4628      	mov	r0, r5
 23ec8fe:	b01d      	add	sp, #116	; 0x74
 23ec900:	ecbd 8b06 	vpop	{d8-d10}
 23ec904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            buffer_managed_by_me = false;
 23ec908:	2300      	movs	r3, #0
 23ec90a:	e7ad      	b.n	23ec868 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x7c>
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 23ec90c:	4649      	mov	r1, r9
 23ec90e:	465a      	mov	r2, fp
 23ec910:	4650      	mov	r0, sl
 23ec912:	f7ff fe91 	bl	23ec638 <_ZNKSt8functionIFijjPfEEclEjjS0_>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23ec916:	2100      	movs	r1, #0
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23ec918:	eddf 3a89 	vldr	s7, [pc, #548]	; 23ecb40 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x354>
 23ec91c:	ed9f 3a89 	vldr	s6, [pc, #548]	; 23ecb44 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x358>
                        r /= 255.0f;
 23ec920:	ed9f 6a89 	vldr	s12, [pc, #548]	; 23ecb48 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x35c>
                        r = (r - torch_mean[0]) / torch_std[0];
 23ec924:	eddf 5a89 	vldr	s11, [pc, #548]	; 23ecb4c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x360>
 23ec928:	ed9f 5a89 	vldr	s10, [pc, #548]	; 23ecb50 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x364>
                        g = (g - torch_mean[1]) / torch_std[1];
 23ec92c:	eddf 4a89 	vldr	s9, [pc, #548]	; 23ecb54 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x368>
 23ec930:	ed9f 4a89 	vldr	s8, [pc, #548]	; 23ecb58 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x36c>
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23ec934:	458b      	cmp	fp, r1
 23ec936:	f000 8133 	beq.w	23ecba0 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x3b4>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23ec93a:	9b18      	ldr	r3, [sp, #96]	; 0x60
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23ec93c:	f105 0c01 	add.w	ip, r5, #1
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 23ec940:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 23ec944:	edd3 7a00 	vldr	s15, [r3]
 23ec948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23ec94c:	ee17 3a90 	vmov	r3, s15
                    int32_t g = static_cast<int32_t>(pixel >> 8 & 0xff);
 23ec950:	0a1a      	lsrs	r2, r3, #8
 23ec952:	920b      	str	r2, [sp, #44]	; 0x2c
            if (channel_count == 3) {
 23ec954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23ec956:	1960      	adds	r0, r4, r5
            if (channel_count == 3) {
 23ec958:	2a03      	cmp	r2, #3
 23ec95a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 23ec95e:	ee07 2a10 	vmov	s14, r2
 23ec962:	f3c3 2207 	ubfx	r2, r3, #8, #8
 23ec966:	ee07 2a90 	vmov	s15, r2
 23ec96a:	b2da      	uxtb	r2, r3
 23ec96c:	ee06 2a90 	vmov	s13, r2
 23ec970:	f040 8087 	bne.w	23eca82 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x296>
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23ec974:	eef4 8a49 	vcmp.f32	s17, s18
 23ec978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23ec97c:	eb04 0e0c 	add.w	lr, r4, ip
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23ec980:	f105 0c03 	add.w	ip, r5, #3
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23ec984:	f105 0502 	add.w	r5, r5, #2
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23ec988:	4425      	add	r5, r4
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23ec98a:	d12a      	bne.n	23ec9e2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1f6>
 23ec98c:	eddf 2a73 	vldr	s5, [pc, #460]	; 23ecb5c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x370>
 23ec990:	eeb4 8a62 	vcmp.f32	s16, s5
 23ec994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ec998:	d123      	bne.n	23ec9e2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1f6>
 23ec99a:	f1b8 0f00 	cmp.w	r8, #0
 23ec99e:	d120      	bne.n	23ec9e2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1f6>
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23ec9a0:	eddf 2a6f 	vldr	s5, [pc, #444]	; 23ecb60 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x374>
 23ec9a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23ec9a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23ec9ac:	ee37 7a62 	vsub.f32	s14, s14, s5
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23ec9b0:	ee77 7ae2 	vsub.f32	s15, s15, s5
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23ec9b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23ec9b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23ec9bc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23ec9c0:	ee76 6ae2 	vsub.f32	s13, s13, s5
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23ec9c4:	ee17 2a90 	vmov	r2, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23ec9c8:	ee17 3a10 	vmov	r3, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(b + zero_point);
 23ec9cc:	eefd 7ae6 	vcvt.s32.f32	s15, s13
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(r + zero_point);
 23ec9d0:	7003      	strb	r3, [r0, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(g + zero_point);
 23ec9d2:	f88e 2000 	strb.w	r2, [lr]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
 23ec9d6:	ee17 3a90 	vmov	r3, s15
 23ec9da:	702b      	strb	r3, [r5, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 23ec9dc:	4665      	mov	r5, ip
 23ec9de:	3101      	adds	r1, #1
 23ec9e0:	e7a8      	b.n	23ec934 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x148>
                    float g = static_cast<float>(pixel >> 8 & 0xff);
 23ec9e2:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
                    float b = static_cast<float>(pixel & 0xff);
 23ec9e6:	b2db      	uxtb	r3, r3
                    float g = static_cast<float>(pixel >> 8 & 0xff);
 23ec9e8:	ee07 2a90 	vmov	s15, r2
 23ec9ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                    float b = static_cast<float>(pixel & 0xff);
 23ec9f0:	ee07 3a90 	vmov	s15, r3
                    float r = static_cast<float>(pixel >> 16 & 0xff);
 23ec9f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    float b = static_cast<float>(pixel & 0xff);
 23ec9f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23ec9fc:	f1b8 0f00 	cmp.w	r8, #0
 23eca00:	d125      	bne.n	23eca4e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x262>
                        r /= 255.0f;
 23eca02:	ee87 7a06 	vdiv.f32	s14, s14, s12
                        g /= 255.0f;
 23eca06:	eec6 6a86 	vdiv.f32	s13, s13, s12
                        b /= 255.0f;
 23eca0a:	eec7 7a86 	vdiv.f32	s15, s15, s12
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
 23eca0e:	eec7 2a28 	vdiv.f32	s5, s14, s17
 23eca12:	feb8 7a62 	vrinta.f32	s14, s5
 23eca16:	ee38 7a07 	vadd.f32	s14, s16, s14
 23eca1a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 23eca1e:	ee17 3a10 	vmov	r3, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
 23eca22:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 23eca26:	feb8 7a47 	vrinta.f32	s14, s14
 23eca2a:	ee38 7a07 	vadd.f32	s14, s16, s14
 23eca2e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / scale) + zero_point);
 23eca32:	7003      	strb	r3, [r0, #0]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
 23eca34:	ee17 3a10 	vmov	r3, s14
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
 23eca38:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 23eca3c:	fef8 7a47 	vrinta.f32	s15, s14
 23eca40:	ee78 7a27 	vadd.f32	s15, s16, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / scale) + zero_point);
 23eca44:	f88e 3000 	strb.w	r3, [lr]
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / scale) + zero_point);
 23eca48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23eca4c:	e7c3      	b.n	23ec9d6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1ea>
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
 23eca4e:	f1b8 0f02 	cmp.w	r8, #2
 23eca52:	d1dc      	bne.n	23eca0e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x222>
                        r /= 255.0f;
 23eca54:	eec7 2a06 	vdiv.f32	s5, s14, s12
                        r = (r - torch_mean[0]) / torch_std[0];
 23eca58:	ee72 2ae5 	vsub.f32	s5, s5, s11
 23eca5c:	ee82 7a85 	vdiv.f32	s14, s5, s10
                        g /= 255.0f;
 23eca60:	eec6 2a86 	vdiv.f32	s5, s13, s12
                        g = (g - torch_mean[1]) / torch_std[1];
 23eca64:	ee72 2ae4 	vsub.f32	s5, s5, s9
 23eca68:	eec2 6a84 	vdiv.f32	s13, s5, s8
                        b /= 255.0f;
 23eca6c:	eec7 2a86 	vdiv.f32	s5, s15, s12
                        b = (b - torch_mean[2]) / torch_std[2];
 23eca70:	eddf 7a3c 	vldr	s15, [pc, #240]	; 23ecb64 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x378>
 23eca74:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 23ecb68 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x37c>
 23eca78:	ee72 2ae7 	vsub.f32	s5, s5, s15
 23eca7c:	eec2 7a82 	vdiv.f32	s15, s5, s4
 23eca80:	e7c5      	b.n	23eca0e <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x222>
                if (scale == 0.003921568859368563f && zero_point == -128 && image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23eca82:	eef4 8a49 	vcmp.f32	s17, s18
 23eca86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eca8a:	d12c      	bne.n	23ecae6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2fa>
 23eca8c:	eddf 2a33 	vldr	s5, [pc, #204]	; 23ecb5c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x370>
 23eca90:	eeb4 8a62 	vcmp.f32	s16, s5
 23eca94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eca98:	d125      	bne.n	23ecae6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2fa>
 23eca9a:	f1b8 0f00 	cmp.w	r8, #0
 23eca9e:	d122      	bne.n	23ecae6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2fa>
                    int32_t gray = (iRedToGray * r) + (iGreenToGray * g) + (iBlueToGray * b);
 23ecaa0:	f249 6245 	movw	r2, #38469	; 0x9645
 23ecaa4:	ee17 3a90 	vmov	r3, s15
 23ecaa8:	4353      	muls	r3, r2
 23ecaaa:	ee17 5a10 	vmov	r5, s14
 23ecaae:	461a      	mov	r2, r3
 23ecab0:	f644 438b 	movw	r3, #19595	; 0x4c8b
 23ecab4:	fb03 2205 	mla	r2, r3, r5, r2
 23ecab8:	f641 532f 	movw	r3, #7471	; 0x1d2f
 23ecabc:	ee16 5a90 	vmov	r5, s13
 23ecac0:	fb03 2305 	mla	r3, r3, r5, r2
                    gray >>= 16; // scale down to int8_t
 23ecac4:	141b      	asrs	r3, r3, #16
 23ecac6:	ee07 3a90 	vmov	s15, r3
                    gray += zero_point;
 23ecaca:	ed9f 7a25 	vldr	s14, [pc, #148]	; 23ecb60 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x374>
 23ecace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23ecad2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 23ecad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23ecada:	ee17 3a90 	vmov	r3, s15
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(gray);
 23ecade:	f303 0307 	ssat	r3, #8, r3
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
 23ecae2:	7003      	strb	r3, [r0, #0]
 23ecae4:	e77a      	b.n	23ec9dc <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x1f0>
                    float r = static_cast<float>(pixel >> 16 & 0xff);
 23ecae6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                    float g = static_cast<float>(pixel >> 8 & 0xff);
 23ecaea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    float b = static_cast<float>(pixel & 0xff);
 23ecaee:	eef8 6ae6 	vcvt.f32.s32	s13, s13
                    if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_NONE) {
 23ecaf2:	f1b8 0f00 	cmp.w	r8, #0
 23ecaf6:	d139      	bne.n	23ecb6c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x380>
                        r /= 255.0f;
 23ecaf8:	ee87 7a06 	vdiv.f32	s14, s14, s12
                        g /= 255.0f;
 23ecafc:	eec7 7a86 	vdiv.f32	s15, s15, s12
                        b /= 255.0f;
 23ecb00:	eec6 6a86 	vdiv.f32	s13, s13, s12
                    float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 23ecb04:	ee67 7aa9 	vmul.f32	s15, s15, s19
 23ecb08:	eee7 7a23 	vfma.f32	s15, s14, s7
 23ecb0c:	eee6 7a83 	vfma.f32	s15, s13, s6
                    output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / scale) + zero_point);
 23ecb10:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 23ecb14:	fef8 7a47 	vrinta.f32	s15, s14
 23ecb18:	ee78 7a27 	vadd.f32	s15, s16, s15
 23ecb1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23ecb20:	ee17 3a90 	vmov	r3, s15
 23ecb24:	e7dd      	b.n	23ecae2 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x2f6>
 23ecb26:	bf00      	nop
 23ecb28:	023ea735 	.word	0x023ea735
 23ecb2c:	023fb19c 	.word	0x023fb19c
 23ecb30:	3b808081 	.word	0x3b808081
 23ecb34:	3f1645a2 	.word	0x3f1645a2
 23ecb38:	fffffc16 	.word	0xfffffc16
 23ecb3c:	023fb1a6 	.word	0x023fb1a6
 23ecb40:	3e991687 	.word	0x3e991687
 23ecb44:	3de978d5 	.word	0x3de978d5
 23ecb48:	437f0000 	.word	0x437f0000
 23ecb4c:	3ef851ec 	.word	0x3ef851ec
 23ecb50:	3e6a7efa 	.word	0x3e6a7efa
 23ecb54:	3ee978d5 	.word	0x3ee978d5
 23ecb58:	3e656042 	.word	0x3e656042
 23ecb5c:	c3000000 	.word	0xc3000000
 23ecb60:	43000000 	.word	0x43000000
 23ecb64:	3ecfdf3b 	.word	0x3ecfdf3b
 23ecb68:	3e666666 	.word	0x3e666666
                    else if (image_scaling == EI_CLASSIFIER_IMAGE_SCALING_TORCH) {
 23ecb6c:	f1b8 0f02 	cmp.w	r8, #2
 23ecb70:	d1c8      	bne.n	23ecb04 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x318>
                        r /= 255.0f;
 23ecb72:	eec7 2a06 	vdiv.f32	s5, s14, s12
                        r = (r - torch_mean[0]) / torch_std[0];
 23ecb76:	ee72 2ae5 	vsub.f32	s5, s5, s11
 23ecb7a:	ee82 7a85 	vdiv.f32	s14, s5, s10
                        g /= 255.0f;
 23ecb7e:	eec7 2a86 	vdiv.f32	s5, s15, s12
                        g = (g - torch_mean[1]) / torch_std[1];
 23ecb82:	ee72 2ae4 	vsub.f32	s5, s5, s9
 23ecb86:	eec2 7a84 	vdiv.f32	s15, s5, s8
                        b /= 255.0f;
 23ecb8a:	eec6 2a86 	vdiv.f32	s5, s13, s12
                        b = (b - torch_mean[2]) / torch_std[2];
 23ecb8e:	ed5f 6a0b 	vldr	s13, [pc, #-44]	; 23ecb64 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x378>
 23ecb92:	ed1f 2a0b 	vldr	s4, [pc, #-44]	; 23ecb68 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x37c>
 23ecb96:	ee72 2ae6 	vsub.f32	s5, s5, s13
 23ecb9a:	eec2 6a82 	vdiv.f32	s13, s5, s4
 23ecb9e:	e7b1      	b.n	23ecb04 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x318>
                }
            }
        }

        bytes_left -= elements_to_read;
 23ecba0:	9b06      	ldr	r3, [sp, #24]
        matrix_t input_matrix(elements_to_read, config.axes);
 23ecba2:	a818      	add	r0, sp, #96	; 0x60
        bytes_left -= elements_to_read;
 23ecba4:	eba3 030b 	sub.w	r3, r3, fp
 23ecba8:	9306      	str	r3, [sp, #24]
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23ecbaa:	f509 6980 	add.w	r9, r9, #1024	; 0x400
        matrix_t input_matrix(elements_to_read, config.axes);
 23ecbae:	f7fe faaf 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 23ecbb2:	e67c      	b.n	23ec8ae <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xc2>
    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23ecbb4:	f003 fa3a 	bl	23f002c <_Z29ei_run_impulse_check_canceledv>
 23ecbb8:	1c83      	adds	r3, r0, #2
 23ecbba:	4605      	mov	r5, r0
 23ecbbc:	f43f ae95 	beq.w	23ec8ea <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xfe>
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23ecbc0:	f003 fa36 	bl	23f0030 <_Z16ei_read_timer_usv>
 23ecbc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23ecbc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23ecbca:	1ac0      	subs	r0, r0, r3
 23ecbcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23ecbce:	eb61 0103 	sbc.w	r1, r1, r3
 23ecbd2:	e9c6 013a 	strd	r0, r1, [r6, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23ecbd6:	2300      	movs	r3, #0
 23ecbd8:	f7fb faa6 	bl	23e8128 <__aeabi_ldivmod>
    if (debug) {
 23ecbdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23ecbde:	4601      	mov	r1, r0
 23ecbe0:	f8c6 00dc 	str.w	r0, [r6, #220]	; 0xdc
    if (debug) {
 23ecbe4:	b303      	cbz	r3, 23ecc28 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x43c>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 23ecbe6:	4823      	ldr	r0, [pc, #140]	; (23ecc74 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x488>)
 23ecbe8:	f003 fa28 	bl	23f003c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23ecbec:	9b07      	ldr	r3, [sp, #28]
 23ecbee:	4625      	mov	r5, r4
 23ecbf0:	4423      	add	r3, r4
 23ecbf2:	4699      	mov	r9, r3
            ei_printf(" ");
 23ecbf4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 23ecc7c <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x490>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23ecbf8:	45a9      	cmp	r9, r5
 23ecbfa:	d012      	beq.n	23ecc22 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x436>
            ei_printf_float((features_matrix.buffer[ix] - input->params.zero_point) * input->params.scale);
 23ecbfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23ecbfe:	f915 3b01 	ldrsb.w	r3, [r5], #1
 23ecc02:	690a      	ldr	r2, [r1, #16]
 23ecc04:	ed91 0a03 	vldr	s0, [r1, #12]
 23ecc08:	1a9b      	subs	r3, r3, r2
 23ecc0a:	ee07 3a90 	vmov	s15, r3
 23ecc0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23ecc12:	ee27 0a80 	vmul.f32	s0, s15, s0
 23ecc16:	f003 fa31 	bl	23f007c <_Z15ei_printf_floatf>
            ei_printf(" ");
 23ecc1a:	4640      	mov	r0, r8
 23ecc1c:	f003 fa0e 	bl	23f003c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23ecc20:	e7ea      	b.n	23ecbf8 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x40c>
        ei_printf("\n");
 23ecc22:	4815      	ldr	r0, [pc, #84]	; (23ecc78 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x48c>)
 23ecc24:	f003 fa0a 	bl	23f003c <_Z9ei_printfPKcz>
    ctx_start_us = ei_read_timer_us();
 23ecc28:	f003 fa02 	bl	23f0030 <_Z16ei_read_timer_usv>
 23ecc2c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 23ecc30:	460b      	mov	r3, r1
    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 23ecc32:	9909      	ldr	r1, [sp, #36]	; 0x24
    ctx_start_us = ei_read_timer_us();
 23ecc34:	4602      	mov	r2, r0
    EI_IMPULSE_ERROR run_res = inference_tflite_run(impulse,
 23ecc36:	e9cd 6104 	strd	r6, r1, [sp, #16]
 23ecc3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 23ecc3c:	4638      	mov	r0, r7
 23ecc3e:	9103      	str	r1, [sp, #12]
 23ecc40:	9911      	ldr	r1, [sp, #68]	; 0x44
 23ecc42:	9102      	str	r1, [sp, #8]
 23ecc44:	9912      	ldr	r1, [sp, #72]	; 0x48
 23ecc46:	9101      	str	r1, [sp, #4]
 23ecc48:	9910      	ldr	r1, [sp, #64]	; 0x40
 23ecc4a:	9100      	str	r1, [sp, #0]
 23ecc4c:	f7ff fa28 	bl	23ec0a0 <_ZL20inference_tflite_runPK10ei_impulseP39ei_learning_block_config_tflite_graph_tyP12TfLiteTensorS5_S5_PN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb.constprop.0>
    if (run_res != EI_IMPULSE_OK) {
 23ecc50:	4605      	mov	r5, r0
 23ecc52:	2800      	cmp	r0, #0
 23ecc54:	f47f ae49 	bne.w	23ec8ea <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xfe>
    result->timing.classification_us = ei_read_timer_us() - ctx_start_us;
 23ecc58:	f003 f9ea 	bl	23f0030 <_Z16ei_read_timer_usv>
 23ecc5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23ecc5e:	1ac0      	subs	r0, r0, r3
 23ecc60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23ecc62:	eb61 0103 	sbc.w	r1, r1, r3
 23ecc66:	e9c6 013c 	strd	r0, r1, [r6, #240]	; 0xf0
    return EI_IMPULSE_OK;
 23ecc6a:	e63e      	b.n	23ec8ea <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0xfe>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 23ecc6c:	f06f 0508 	mvn.w	r5, #8
 23ecc70:	e641      	b.n	23ec8f6 <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb+0x10a>
 23ecc72:	bf00      	nop
 23ecc74:	023fb1cb 	.word	0x023fb1cb
 23ecc78:	023fb324 	.word	0x023fb324
 23ecc7c:	023ff87c 	.word	0x023ff87c

023ecc80 <run_classifier_image_quantized>:
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    const ei_impulse_t *impulse,
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 23ecc80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23ecc82:	4615      	mov	r5, r2
 23ecc84:	4604      	mov	r4, r0
 23ecc86:	461f      	mov	r7, r3
 23ecc88:	460e      	mov	r6, r1
    memset(result, 0, sizeof(ei_impulse_result_t));
 23ecc8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 23ecc8e:	2100      	movs	r1, #0
 23ecc90:	4628      	mov	r0, r5
 23ecc92:	f00c f846 	bl	23f8d22 <memset>

    return run_nn_inference_image_quantized(impulse, signal, result, impulse->learning_blocks[0].config, debug);
 23ecc96:	6d63      	ldr	r3, [r4, #84]	; 0x54
 23ecc98:	9700      	str	r7, [sp, #0]
 23ecc9a:	462a      	mov	r2, r5
 23ecc9c:	4631      	mov	r1, r6
 23ecc9e:	4620      	mov	r0, r4
 23ecca0:	685b      	ldr	r3, [r3, #4]
 23ecca2:	f7ff fda3 	bl	23ec7ec <_Z32run_nn_inference_image_quantizedPK10ei_impulsePN2ei11ei_signal_tEP19ei_impulse_result_tPvb>
}
 23ecca6:	b003      	add	sp, #12
 23ecca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023eccac <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>:
      vector(initializer_list<value_type> __l,
 23eccac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23eccae:	ab02      	add	r3, sp, #8
 23eccb0:	e903 0006 	stmdb	r3, {r1, r2}
	: _M_start(), _M_finish(), _M_end_of_storage()
 23eccb4:	2300      	movs	r3, #0
 23eccb6:	e9c0 3300 	strd	r3, r3, [r0]
 23eccba:	6083      	str	r3, [r0, #8]
      constexpr const_iterator
      begin() const noexcept { return _M_array; }

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 23eccbc:	4613      	mov	r3, r2
      vector(initializer_list<value_type> __l,
 23eccbe:	4604      	mov	r4, r0
 23eccc0:	0096      	lsls	r6, r2, #2
 23eccc2:	eb01 0782 	add.w	r7, r1, r2, lsl #2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23eccc6:	f342 001d 	sbfx	r0, r2, #0, #30

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 23eccca:	4a0d      	ldr	r2, [pc, #52]	; (23ecd00 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_+0x54>)
 23ecccc:	460d      	mov	r5, r1
 23eccce:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 23eccd2:	d202      	bcs.n	23eccda <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_+0x2e>
	  __throw_length_error(
 23eccd4:	480b      	ldr	r0, [pc, #44]	; (23ecd04 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_+0x58>)
 23eccd6:	f009 ff37 	bl	23f6b48 <_ZSt20__throw_length_errorPKc>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23eccda:	b108      	cbz	r0, 23ecce0 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_+0x34>
 23eccdc:	f7fd fd62 	bl	23ea7a4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj.part.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 23ecce0:	4406      	add	r6, r0
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 23ecce2:	6020      	str	r0, [r4, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 23ecce4:	60a6      	str	r6, [r4, #8]
	  for (; __first != __last; ++__first, (void)++__cur)
 23ecce6:	42af      	cmp	r7, r5
 23ecce8:	d005      	beq.n	23eccf6 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_+0x4a>
 23eccea:	b108      	cbz	r0, 23eccf0 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_+0x44>
 23eccec:	682a      	ldr	r2, [r5, #0]
 23eccee:	6002      	str	r2, [r0, #0]
 23eccf0:	3504      	adds	r5, #4
 23eccf2:	3004      	adds	r0, #4
 23eccf4:	e7f7      	b.n	23ecce6 <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_+0x3a>
      }
 23eccf6:	4620      	mov	r0, r4
	  this->_M_impl._M_finish =
 23eccf8:	6066      	str	r6, [r4, #4]
      }
 23eccfa:	b003      	add	sp, #12
 23eccfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23eccfe:	bf00      	nop
 23ecd00:	7ffffffc 	.word	0x7ffffffc
 23ecd04:	023fb1df 	.word	0x023fb1df

023ecd08 <_ZN2ei8spectral7feature15get_ratio_comboEi>:
        } else {
            return extract_spectral_analysis_features_v2(input_matrix, output_matrix, config, sampling_freq);
        }
    }

    static ei_vector<int> get_ratio_combo(int r)
 23ecd08:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
        if (r == 1 || r == 3 || r == 10) {
 23ecd0a:	f021 0302 	bic.w	r3, r1, #2
    static ei_vector<int> get_ratio_combo(int r)
 23ecd0e:	b08b      	sub	sp, #44	; 0x2c
        if (r == 1 || r == 3 || r == 10) {
 23ecd10:	2b01      	cmp	r3, #1
    static ei_vector<int> get_ratio_combo(int r)
 23ecd12:	4605      	mov	r5, r0
        if (r == 1 || r == 3 || r == 10) {
 23ecd14:	ac07      	add	r4, sp, #28
 23ecd16:	ae05      	add	r6, sp, #20
 23ecd18:	d001      	beq.n	23ecd1e <_ZN2ei8spectral7feature15get_ratio_comboEi+0x16>
 23ecd1a:	290a      	cmp	r1, #10
 23ecd1c:	d108      	bne.n	23ecd30 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x28>
            return {r};
 23ecd1e:	2301      	movs	r3, #1
 23ecd20:	9107      	str	r1, [sp, #28]
 23ecd22:	9302      	str	r3, [sp, #8]
 23ecd24:	2201      	movs	r2, #1
 23ecd26:	4633      	mov	r3, r6
 23ecd28:	4621      	mov	r1, r4
 23ecd2a:	9401      	str	r4, [sp, #4]
        } else if (r == 30) {
            return {3, 10};
        } else if (r == 100) {
            return {10, 10};
        } else if (r == 1000) {
            return {10, 10, 10};
 23ecd2c:	4628      	mov	r0, r5
 23ecd2e:	e00c      	b.n	23ecd4a <_ZN2ei8spectral7feature15get_ratio_comboEi+0x42>
        } else if (r == 30) {
 23ecd30:	291e      	cmp	r1, #30
 23ecd32:	af03      	add	r7, sp, #12
 23ecd34:	d10e      	bne.n	23ecd54 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x4c>
            return {3, 10};
 23ecd36:	2203      	movs	r2, #3
 23ecd38:	230a      	movs	r3, #10
 23ecd3a:	e9cd 2307 	strd	r2, r3, [sp, #28]
 23ecd3e:	2302      	movs	r3, #2
 23ecd40:	9304      	str	r3, [sp, #16]
 23ecd42:	4633      	mov	r3, r6
 23ecd44:	9403      	str	r4, [sp, #12]
 23ecd46:	e897 0006 	ldmia.w	r7, {r1, r2}
            return {10, 10, 10};
 23ecd4a:	f7ff ffaf 	bl	23eccac <_ZNSt6vectorIiN2ei7EiAllocIiEEEC1ESt16initializer_listIiERKS2_>
        } else {
            assert(0);
        }
        return {0}; // to make linter happy
    }
 23ecd4e:	4628      	mov	r0, r5
 23ecd50:	b00b      	add	sp, #44	; 0x2c
 23ecd52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if (r == 100) {
 23ecd54:	2964      	cmp	r1, #100	; 0x64
 23ecd56:	d109      	bne.n	23ecd6c <_ZN2ei8spectral7feature15get_ratio_comboEi+0x64>
            return {10, 10};
 23ecd58:	230a      	movs	r3, #10
 23ecd5a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 23ecd5e:	2302      	movs	r3, #2
 23ecd60:	9607      	str	r6, [sp, #28]
 23ecd62:	9308      	str	r3, [sp, #32]
 23ecd64:	e894 0006 	ldmia.w	r4, {r1, r2}
 23ecd68:	463b      	mov	r3, r7
 23ecd6a:	e7ee      	b.n	23ecd4a <_ZN2ei8spectral7feature15get_ratio_comboEi+0x42>
        } else if (r == 1000) {
 23ecd6c:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 23ecd70:	d10b      	bne.n	23ecd8a <_ZN2ei8spectral7feature15get_ratio_comboEi+0x82>
            return {10, 10, 10};
 23ecd72:	4b09      	ldr	r3, [pc, #36]	; (23ecd98 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x90>)
 23ecd74:	9405      	str	r4, [sp, #20]
 23ecd76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 23ecd7a:	2303      	movs	r3, #3
 23ecd7c:	9306      	str	r3, [sp, #24]
 23ecd7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 23ecd82:	e896 0006 	ldmia.w	r6, {r1, r2}
 23ecd86:	463b      	mov	r3, r7
 23ecd88:	e7d0      	b.n	23ecd2c <_ZN2ei8spectral7feature15get_ratio_comboEi+0x24>
            assert(0);
 23ecd8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 23ecd8e:	4b03      	ldr	r3, [pc, #12]	; (23ecd9c <_ZN2ei8spectral7feature15get_ratio_comboEi+0x94>)
 23ecd90:	4a03      	ldr	r2, [pc, #12]	; (23ecda0 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x98>)
 23ecd92:	4804      	ldr	r0, [pc, #16]	; (23ecda4 <_ZN2ei8spectral7feature15get_ratio_comboEi+0x9c>)
 23ecd94:	f007 fd34 	bl	23f4800 <__assert_func>
 23ecd98:	023fad20 	.word	0x023fad20
 23ecd9c:	023fe7e9 	.word	0x023fe7e9
 23ecda0:	023fb210 	.word	0x023fb210
 23ecda4:	023fb252 	.word	0x023fb252

023ecda8 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 23ecda8:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23ecdaa:	466c      	mov	r4, sp
 23ecdac:	460b      	mov	r3, r1
 23ecdae:	4602      	mov	r2, r0
 23ecdb0:	e9d0 0100 	ldrd	r0, r1, [r0]
 23ecdb4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23ecdb8:	e893 0003 	ldmia.w	r3, {r0, r1}
 23ecdbc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23ecdc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 23ecdc4:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23ecdc8:	6898      	ldr	r0, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23ecdca:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
 23ecdcc:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23ecdce:	6099      	str	r1, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23ecdd0:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
 23ecdd2:	68d8      	ldr	r0, [r3, #12]
 23ecdd4:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23ecdd6:	60d9      	str	r1, [r3, #12]
      }
 23ecdd8:	b002      	add	sp, #8
 23ecdda:	bd10      	pop	{r4, pc}

023ecddc <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 23ecddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 23ecdde:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 23ecde2:	6999      	ldr	r1, [r3, #24]
            return this->_original_signal;
 23ecde4:	6804      	ldr	r4, [r0, #0]
        if (this->_axes_count == _impulse->raw_samples_per_frame) {
 23ecde6:	428a      	cmp	r2, r1
 23ecde8:	d012      	beq.n	23ece10 <_ZN14SignalWithAxes10get_signalEv+0x34>
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 23ecdea:	6923      	ldr	r3, [r4, #16]
        };
 23ecdec:	f100 0410 	add.w	r4, r0, #16
        wrapped_signal.total_length = _original_signal->total_length / _impulse->raw_samples_per_frame * _axes_count;
 23ecdf0:	fbb3 f3f1 	udiv	r3, r3, r1
 23ecdf4:	4353      	muls	r3, r2
 23ecdf6:	6203      	str	r3, [r0, #32]
	    _M_invoker = &_My_handler::_M_invoke;
 23ecdf8:	4b07      	ldr	r3, [pc, #28]	; (23ece18 <_ZN14SignalWithAxes10get_signalEv+0x3c>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23ecdfa:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23ecdfc:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 23ecdfe:	4b07      	ldr	r3, [pc, #28]	; (23ece1c <_ZN14SignalWithAxes10get_signalEv+0x40>)
	  function(std::forward<_Functor>(__f)).swap(*this);
 23ece00:	4668      	mov	r0, sp
 23ece02:	4621      	mov	r1, r4
	    _M_manager = &_My_handler::_M_manager;
 23ece04:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
 23ece06:	f7ff ffcf 	bl	23ecda8 <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
 23ece0a:	4668      	mov	r0, sp
 23ece0c:	f7fe f962 	bl	23eb0d4 <_ZNSt14_Function_baseD1Ev>
    }
 23ece10:	4620      	mov	r0, r4
 23ece12:	b004      	add	sp, #16
 23ece14:	bd10      	pop	{r4, pc}
 23ece16:	bf00      	nop
 23ece18:	023ec789 	.word	0x023ec789
 23ece1c:	023ea9cf 	.word	0x023ea9cf

023ece20 <process_impulse>:
{
 23ece20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ei_learning_block_t block = impulse->learning_blocks[0];
 23ece24:	6d46      	ldr	r6, [r0, #84]	; 0x54
{
 23ece26:	b097      	sub	sp, #92	; 0x5c
    ei_learning_block_t block = impulse->learning_blocks[0];
 23ece28:	e9d6 e800 	ldrd	lr, r8, [r6]
    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 23ece2c:	6d86      	ldr	r6, [r0, #88]	; 0x58
{
 23ece2e:	4604      	mov	r4, r0
    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 23ece30:	3e02      	subs	r6, #2
 23ece32:	2e09      	cmp	r6, #9
{
 23ece34:	4615      	mov	r5, r2
 23ece36:	461f      	mov	r7, r3
 23ece38:	9103      	str	r1, [sp, #12]
    if (impulse->inferencing_engine != EI_CLASSIFIER_TFLITE
 23ece3a:	d81c      	bhi.n	23ece76 <process_impulse+0x56>
 23ece3c:	f240 2c29 	movw	ip, #553	; 0x229
 23ece40:	fa2c f606 	lsr.w	r6, ip, r6
 23ece44:	07f6      	lsls	r6, r6, #31
 23ece46:	d516      	bpl.n	23ece76 <process_impulse+0x56>
    if (impulse->has_anomaly == 1){
 23ece48:	f890 606c 	ldrb.w	r6, [r0, #108]	; 0x6c
 23ece4c:	b99e      	cbnz	r6, 23ece76 <process_impulse+0x56>
    if (block_ptr.infer_fn != run_nn_inference) {
 23ece4e:	4e58      	ldr	r6, [pc, #352]	; (23ecfb0 <process_impulse+0x190>)
 23ece50:	45b6      	cmp	lr, r6
 23ece52:	d110      	bne.n	23ece76 <process_impulse+0x56>
    if (block_config->quantized != 1) {
 23ece54:	f898 600d 	ldrb.w	r6, [r8, #13]
 23ece58:	b16e      	cbz	r6, 23ece76 <process_impulse+0x56>
    if (impulse->dsp_blocks_size != 1 || impulse->dsp_blocks[0].extract_fn != extract_image_features) {
 23ece5a:	6b46      	ldr	r6, [r0, #52]	; 0x34
 23ece5c:	2e01      	cmp	r6, #1
 23ece5e:	d10a      	bne.n	23ece76 <process_impulse+0x56>
 23ece60:	6b86      	ldr	r6, [r0, #56]	; 0x38
 23ece62:	f8d6 c004 	ldr.w	ip, [r6, #4]
 23ece66:	4e53      	ldr	r6, [pc, #332]	; (23ecfb4 <process_impulse+0x194>)
 23ece68:	45b4      	cmp	ip, r6
 23ece6a:	d104      	bne.n	23ece76 <process_impulse+0x56>
}
 23ece6c:	b017      	add	sp, #92	; 0x5c
 23ece6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return run_classifier_image_quantized(impulse, signal, result, debug);
 23ece72:	f7ff bf05 	b.w	23ecc80 <run_classifier_image_quantized>
    memset(result, 0, sizeof(ei_impulse_result_t));
 23ece76:	f44f 7280 	mov.w	r2, #256	; 0x100
 23ece7a:	2100      	movs	r1, #0
 23ece7c:	4628      	mov	r0, r5
 23ece7e:	f00b ff50 	bl	23f8d22 <memset>
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 23ece82:	2300      	movs	r3, #0
 23ece84:	2101      	movs	r1, #1
 23ece86:	6922      	ldr	r2, [r4, #16]
 23ece88:	a805      	add	r0, sp, #20
 23ece8a:	f7fe f92c 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 23ece8e:	2600      	movs	r6, #0
    uint64_t dsp_start_us = ei_read_timer_us();
 23ece90:	f003 f8ce 	bl	23f0030 <_Z16ei_read_timer_usv>
    size_t out_features_index = 0;
 23ece94:	4633      	mov	r3, r6
    uint64_t dsp_start_us = ei_read_timer_us();
 23ece96:	4683      	mov	fp, r0
 23ece98:	468a      	mov	sl, r1
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 23ece9a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 23ece9c:	42b2      	cmp	r2, r6
 23ece9e:	d952      	bls.n	23ecf46 <process_impulse+0x126>
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 23ecea0:	2214      	movs	r2, #20
 23ecea2:	4372      	muls	r2, r6
 23ecea4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 23ecea6:	1881      	adds	r1, r0, r2
 23ecea8:	5882      	ldr	r2, [r0, r2]
 23eceaa:	6848      	ldr	r0, [r1, #4]
        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 23eceac:	eb03 0802 	add.w	r8, r3, r2
        ei_model_dsp_t block = impulse->dsp_blocks[ix];
 23eceb0:	9001      	str	r0, [sp, #4]
 23eceb2:	e9d1 9002 	ldrd	r9, r0, [r1, #8]
 23eceb6:	6909      	ldr	r1, [r1, #16]
 23eceb8:	9002      	str	r0, [sp, #8]
 23eceba:	9100      	str	r1, [sp, #0]
        if (out_features_index + block.n_output_features > impulse->nn_input_frame_size) {
 23ecebc:	6921      	ldr	r1, [r4, #16]
 23ecebe:	4588      	cmp	r8, r1
 23ecec0:	d90b      	bls.n	23eceda <process_impulse+0xba>
            ei_printf("ERR: Would write outside feature buffer\n");
 23ecec2:	483d      	ldr	r0, [pc, #244]	; (23ecfb8 <process_impulse+0x198>)
 23ecec4:	f003 f8ba 	bl	23f003c <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 23ecec8:	f06f 0904 	mvn.w	r9, #4
    ei::matrix_t features_matrix(1, impulse->nn_input_frame_size);
 23ececc:	a805      	add	r0, sp, #20
 23ecece:	f7fe f91f 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
}
 23eced2:	4648      	mov	r0, r9
 23eced4:	b017      	add	sp, #92	; 0x5c
 23eced6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 23eceda:	9905      	ldr	r1, [sp, #20]
 23ecedc:	a809      	add	r0, sp, #36	; 0x24
 23ecede:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23ecee2:	2101      	movs	r1, #1
 23ecee4:	f7fe f8ff 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count), _impulse(impulse)
 23ecee8:	9b03      	ldr	r3, [sp, #12]
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, impulse->frequency);
 23eceea:	a80d      	add	r0, sp, #52	; 0x34
 23eceec:	930d      	str	r3, [sp, #52]	; 0x34
 23eceee:	9b02      	ldr	r3, [sp, #8]
 23ecef0:	930e      	str	r3, [sp, #56]	; 0x38
 23ecef2:	9b00      	ldr	r3, [sp, #0]
 23ecef4:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
    _Function_base() : _M_manager(nullptr) { }
 23ecef8:	2300      	movs	r3, #0
 23ecefa:	9313      	str	r3, [sp, #76]	; 0x4c
 23ecefc:	f7ff ff6e 	bl	23ecddc <_ZN14SignalWithAxes10get_signalEv>
 23ecf00:	a909      	add	r1, sp, #36	; 0x24
 23ecf02:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 23ecf06:	464a      	mov	r2, r9
 23ecf08:	9b01      	ldr	r3, [sp, #4]
 23ecf0a:	4798      	blx	r3
        if (ret != EIDSP_OK) {
 23ecf0c:	4601      	mov	r1, r0
 23ecf0e:	b158      	cbz	r0, 23ecf28 <process_impulse+0x108>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 23ecf10:	482a      	ldr	r0, [pc, #168]	; (23ecfbc <process_impulse+0x19c>)
 23ecf12:	f003 f893 	bl	23f003c <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 23ecf16:	f06f 0904 	mvn.w	r9, #4
    class function<_Res(_ArgTypes...)>
 23ecf1a:	a811      	add	r0, sp, #68	; 0x44
 23ecf1c:	f7fe f8da 	bl	23eb0d4 <_ZNSt14_Function_baseD1Ev>
 23ecf20:	a809      	add	r0, sp, #36	; 0x24
 23ecf22:	f7fe f8f5 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
 23ecf26:	e7d1      	b.n	23ececc <process_impulse+0xac>
        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 23ecf28:	f003 f880 	bl	23f002c <_Z29ei_run_impulse_check_canceledv>
 23ecf2c:	f110 0f02 	cmn.w	r0, #2
 23ecf30:	4681      	mov	r9, r0
 23ecf32:	d0f2      	beq.n	23ecf1a <process_impulse+0xfa>
 23ecf34:	a811      	add	r0, sp, #68	; 0x44
 23ecf36:	f7fe f8cd 	bl	23eb0d4 <_ZNSt14_Function_baseD1Ev>
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 23ecf3a:	a809      	add	r0, sp, #36	; 0x24
 23ecf3c:	f7fe f8e8 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
    for (size_t ix = 0; ix < impulse->dsp_blocks_size; ix++) {
 23ecf40:	3601      	adds	r6, #1
 23ecf42:	4643      	mov	r3, r8
 23ecf44:	e7a9      	b.n	23ece9a <process_impulse+0x7a>
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23ecf46:	f003 f873 	bl	23f0030 <_Z16ei_read_timer_usv>
 23ecf4a:	ebb0 000b 	subs.w	r0, r0, fp
 23ecf4e:	eb61 010a 	sbc.w	r1, r1, sl
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23ecf52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23ecf56:	2300      	movs	r3, #0
    result->timing.dsp_us = ei_read_timer_us() - dsp_start_us;
 23ecf58:	e9c5 013a 	strd	r0, r1, [r5, #232]	; 0xe8
    result->timing.dsp = (int)(result->timing.dsp_us / 1000);
 23ecf5c:	f7fb f8e4 	bl	23e8128 <__aeabi_ldivmod>
 23ecf60:	4601      	mov	r1, r0
 23ecf62:	f8c5 00dc 	str.w	r0, [r5, #220]	; 0xdc
    if (debug) {
 23ecf66:	b1d7      	cbz	r7, 23ecf9e <process_impulse+0x17e>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 23ecf68:	4815      	ldr	r0, [pc, #84]	; (23ecfc0 <process_impulse+0x1a0>)
 23ecf6a:	f003 f867 	bl	23f003c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23ecf6e:	2600      	movs	r6, #0
            ei_printf(" ");
 23ecf70:	f8df 8058 	ldr.w	r8, [pc, #88]	; 23ecfcc <process_impulse+0x1ac>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23ecf74:	9b07      	ldr	r3, [sp, #28]
 23ecf76:	42b3      	cmp	r3, r6
 23ecf78:	d90b      	bls.n	23ecf92 <process_impulse+0x172>
            ei_printf_float(features_matrix.buffer[ix]);
 23ecf7a:	9b05      	ldr	r3, [sp, #20]
 23ecf7c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 23ecf80:	ed93 0a00 	vldr	s0, [r3]
 23ecf84:	f003 f87a 	bl	23f007c <_Z15ei_printf_floatf>
            ei_printf(" ");
 23ecf88:	4640      	mov	r0, r8
 23ecf8a:	f003 f857 	bl	23f003c <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 23ecf8e:	3601      	adds	r6, #1
 23ecf90:	e7f0      	b.n	23ecf74 <process_impulse+0x154>
        ei_printf("\n");
 23ecf92:	480c      	ldr	r0, [pc, #48]	; (23ecfc4 <process_impulse+0x1a4>)
 23ecf94:	f003 f852 	bl	23f003c <_Z9ei_printfPKcz>
        ei_printf("Running impulse...\n");
 23ecf98:	480b      	ldr	r0, [pc, #44]	; (23ecfc8 <process_impulse+0x1a8>)
 23ecf9a:	f003 f84f 	bl	23f003c <_Z9ei_printfPKcz>
    return run_inference(impulse, &features_matrix, result, debug);
 23ecf9e:	463b      	mov	r3, r7
 23ecfa0:	462a      	mov	r2, r5
 23ecfa2:	4620      	mov	r0, r4
 23ecfa4:	a905      	add	r1, sp, #20
 23ecfa6:	f7ff f8cf 	bl	23ec148 <run_inference>
 23ecfaa:	4681      	mov	r9, r0
 23ecfac:	e78e      	b.n	23ececc <process_impulse+0xac>
 23ecfae:	bf00      	nop
 23ecfb0:	023ec595 	.word	0x023ec595
 23ecfb4:	023ec659 	.word	0x023ec659
 23ecfb8:	023fb2c6 	.word	0x023fb2c6
 23ecfbc:	023fb1a6 	.word	0x023fb1a6
 23ecfc0:	023fb1cb 	.word	0x023fb1cb
 23ecfc4:	023fb324 	.word	0x023fb324
 23ecfc8:	023fb2ef 	.word	0x023fb2ef
 23ecfcc:	023ff87c 	.word	0x023ff87c

023ecfd0 <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 23ecfd0:	b530      	push	{r4, r5, lr}
 23ecfd2:	4604      	mov	r4, r0
 23ecfd4:	460d      	mov	r5, r1
 23ecfd6:	b0a5      	sub	sp, #148	; 0x94
 23ecfd8:	9201      	str	r2, [sp, #4]
    const ei_impulse_t impulse = ei_default_impulse;
 23ecfda:	4906      	ldr	r1, [pc, #24]	; (23ecff4 <run_classifier+0x24>)
 23ecfdc:	2288      	movs	r2, #136	; 0x88
 23ecfde:	a802      	add	r0, sp, #8
 23ecfe0:	f00b fe78 	bl	23f8cd4 <memcpy>
    return process_impulse(&impulse, signal, result, debug);
 23ecfe4:	462a      	mov	r2, r5
 23ecfe6:	4621      	mov	r1, r4
 23ecfe8:	9b01      	ldr	r3, [sp, #4]
 23ecfea:	a802      	add	r0, sp, #8
 23ecfec:	f7ff ff18 	bl	23ece20 <process_impulse>
}
 23ecff0:	b025      	add	sp, #148	; 0x94
 23ecff2:	bd30      	pop	{r4, r5, pc}
 23ecff4:	023fad2c 	.word	0x023fad2c

023ecff8 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>:
	operator=(_Functor&& __f)
 23ecff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
 23ecffa:	2300      	movs	r3, #0
 23ecffc:	9302      	str	r3, [sp, #8]
	if (_My_handler::_M_not_empty_function(__f))
 23ecffe:	b121      	cbz	r1, 23ed00a <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x12>
	    _M_invoker = &_My_handler::_M_invoke;
 23ed000:	4b07      	ldr	r3, [pc, #28]	; (23ed020 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x28>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23ed002:	9100      	str	r1, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23ed004:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
 23ed006:	4b07      	ldr	r3, [pc, #28]	; (23ed024 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0+0x2c>)
 23ed008:	9302      	str	r3, [sp, #8]
	  function(std::forward<_Functor>(__f)).swap(*this);
 23ed00a:	4601      	mov	r1, r0
 23ed00c:	4668      	mov	r0, sp
 23ed00e:	f7ff fecb 	bl	23ecda8 <_ZNSt8functionIFijjPfEE4swapERS2_>
    class function<_Res(_ArgTypes...)>
 23ed012:	4668      	mov	r0, sp
 23ed014:	f7fe f85e 	bl	23eb0d4 <_ZNSt14_Function_baseD1Ev>
	}
 23ed018:	b005      	add	sp, #20
 23ed01a:	f85d fb04 	ldr.w	pc, [sp], #4
 23ed01e:	bf00      	nop
 23ed020:	023ea9f7 	.word	0x023ea9f7
 23ed024:	023ea9e3 	.word	0x023ea9e3

023ed028 <loop>:
{
 23ed028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        features[i] = (((float)x * 2) / 2048.0) * 9.80665;
 23ed02c:	a754      	add	r7, pc, #336	; (adr r7, 23ed180 <loop+0x158>)
 23ed02e:	e9d7 6700 	ldrd	r6, r7, [r7]
    ei_printf("Sampling...\r\n");
 23ed032:	484d      	ldr	r0, [pc, #308]	; (23ed168 <loop+0x140>)
{
 23ed034:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
    ei_printf("Sampling...\r\n");
 23ed038:	f003 f800 	bl	23f003c <_Z9ei_printfPKcz>
    for (int i = 0; i < EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE; i += 3) {
 23ed03c:	f04f 0a00 	mov.w	sl, #0
        features[i] = (((float)x * 2) / 2048.0) * 9.80665;
 23ed040:	f04f 0800 	mov.w	r8, #0
 23ed044:	f04f 597d 	mov.w	r9, #1061158912	; 0x3f400000
 23ed048:	4d48      	ldr	r5, [pc, #288]	; (23ed16c <loop+0x144>)
        accel.readXYZ(x, y, z);
 23ed04a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 23ed188 <loop+0x160>
 23ed04e:	ac42      	add	r4, sp, #264	; 0x108
 23ed050:	aa3d      	add	r2, sp, #244	; 0xf4
 23ed052:	4623      	mov	r3, r4
 23ed054:	4658      	mov	r0, fp
 23ed056:	f10d 01f2 	add.w	r1, sp, #242	; 0xf2
 23ed05a:	f006 fef5 	bl	23f3e48 <_ZN10ADXL362DMA7readXYZERsS0_S0_>
        features[i] = (((float)x * 2) / 2048.0) * 9.80665;
 23ed05e:	f9bd 30f2 	ldrsh.w	r3, [sp, #242]	; 0xf2
    for (int i = 0; i < EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE; i += 3) {
 23ed062:	f10a 0a03 	add.w	sl, sl, #3
        features[i] = (((float)x * 2) / 2048.0) * 9.80665;
 23ed066:	ee07 3a90 	vmov	s15, r3
 23ed06a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23ed06e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 23ed072:	ee17 0a90 	vmov	r0, s15
 23ed076:	f7fa fcb7 	bl	23e79e8 <__aeabi_f2d>
 23ed07a:	4642      	mov	r2, r8
 23ed07c:	464b      	mov	r3, r9
 23ed07e:	f7fa fd0b 	bl	23e7a98 <__aeabi_dmul>
 23ed082:	4632      	mov	r2, r6
 23ed084:	463b      	mov	r3, r7
 23ed086:	f7fa fd07 	bl	23e7a98 <__aeabi_dmul>
 23ed08a:	f7fa fffd 	bl	23e8088 <__aeabi_d2f>
        features[i + 1] = (((float)y * 2) / 2048.0) * 9.80665;
 23ed08e:	f9bd 30f4 	ldrsh.w	r3, [sp, #244]	; 0xf4
        features[i] = (((float)x * 2) / 2048.0) * 9.80665;
 23ed092:	6028      	str	r0, [r5, #0]
        features[i + 1] = (((float)y * 2) / 2048.0) * 9.80665;
 23ed094:	ee07 3a90 	vmov	s15, r3
 23ed098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23ed09c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 23ed0a0:	ee17 0a90 	vmov	r0, s15
 23ed0a4:	f7fa fca0 	bl	23e79e8 <__aeabi_f2d>
 23ed0a8:	4642      	mov	r2, r8
 23ed0aa:	464b      	mov	r3, r9
 23ed0ac:	f7fa fcf4 	bl	23e7a98 <__aeabi_dmul>
 23ed0b0:	4632      	mov	r2, r6
 23ed0b2:	463b      	mov	r3, r7
 23ed0b4:	f7fa fcf0 	bl	23e7a98 <__aeabi_dmul>
 23ed0b8:	f7fa ffe6 	bl	23e8088 <__aeabi_d2f>
        features[i + 2] = (((float)z * 2) / 2048.0) * 9.80665;
 23ed0bc:	f9b4 3000 	ldrsh.w	r3, [r4]
        features[i + 1] = (((float)y * 2) / 2048.0) * 9.80665;
 23ed0c0:	6068      	str	r0, [r5, #4]
        features[i + 2] = (((float)z * 2) / 2048.0) * 9.80665;
 23ed0c2:	ee07 3a90 	vmov	s15, r3
 23ed0c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23ed0ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 23ed0ce:	ee17 0a90 	vmov	r0, s15
 23ed0d2:	f7fa fc89 	bl	23e79e8 <__aeabi_f2d>
 23ed0d6:	4642      	mov	r2, r8
 23ed0d8:	464b      	mov	r3, r9
 23ed0da:	f7fa fcdd 	bl	23e7a98 <__aeabi_dmul>
 23ed0de:	4632      	mov	r2, r6
 23ed0e0:	463b      	mov	r3, r7
 23ed0e2:	f7fa fcd9 	bl	23e7a98 <__aeabi_dmul>
 23ed0e6:	f7fa ffcf 	bl	23e8088 <__aeabi_d2f>
 23ed0ea:	60a8      	str	r0, [r5, #8]
        delay(16);
 23ed0ec:	2010      	movs	r0, #16
 23ed0ee:	f007 fba3 	bl	23f4838 <delay>
    for (int i = 0; i < EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE; i += 3) {
 23ed0f2:	f1ba 0fba 	cmp.w	sl, #186	; 0xba
 23ed0f6:	f105 050c 	add.w	r5, r5, #12
 23ed0fa:	d1a8      	bne.n	23ed04e <loop+0x26>
    _Function_base() : _M_manager(nullptr) { }
 23ed0fc:	2500      	movs	r5, #0
    ei_printf("Doing inference...\r\n");
 23ed0fe:	481c      	ldr	r0, [pc, #112]	; (23ed170 <loop+0x148>)
 23ed100:	f002 ff9c 	bl	23f003c <_Z9ei_printfPKcz>
    ei_impulse_result_t result = { 0 };
 23ed104:	f44f 7280 	mov.w	r2, #256	; 0x100
 23ed108:	2100      	movs	r1, #0
 23ed10a:	4620      	mov	r0, r4
 23ed10c:	f00b fe09 	bl	23f8d22 <memset>
    features_signal.get_data = &raw_feature_get_data;
 23ed110:	4918      	ldr	r1, [pc, #96]	; (23ed174 <loop+0x14c>)
 23ed112:	a83d      	add	r0, sp, #244	; 0xf4
 23ed114:	953f      	str	r5, [sp, #252]	; 0xfc
    features_signal.total_length = sizeof(features) / sizeof(features[0]);
 23ed116:	f8cd a104 	str.w	sl, [sp, #260]	; 0x104
    features_signal.get_data = &raw_feature_get_data;
 23ed11a:	f7ff ff6d 	bl	23ecff8 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_.isra.0>
    EI_IMPULSE_ERROR res = run_classifier(&features_signal, &result, false);
 23ed11e:	4621      	mov	r1, r4
 23ed120:	462a      	mov	r2, r5
 23ed122:	a83d      	add	r0, sp, #244	; 0xf4
 23ed124:	f7ff ff54 	bl	23ecfd0 <run_classifier>
    if (res != EI_IMPULSE_OK) {
 23ed128:	4601      	mov	r1, r0
 23ed12a:	b148      	cbz	r0, 23ed140 <loop+0x118>
        ei_printf("ERR: Failed to run classifier (%d)\n", res);
 23ed12c:	4812      	ldr	r0, [pc, #72]	; (23ed178 <loop+0x150>)
 23ed12e:	f002 ff85 	bl	23f003c <_Z9ei_printfPKcz>
    class function<_Res(_ArgTypes...)>
 23ed132:	a83d      	add	r0, sp, #244	; 0xf4
 23ed134:	f7fd ffce 	bl	23eb0d4 <_ZNSt14_Function_baseD1Ev>
}
 23ed138:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 23ed13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ei_printf("run_classifier returned: %d\r\n", res);
 23ed140:	480e      	ldr	r0, [pc, #56]	; (23ed17c <loop+0x154>)
 23ed142:	f002 ff7b 	bl	23f003c <_Z9ei_printfPKcz>
    print_inference_result(result);
 23ed146:	a946      	add	r1, sp, #280	; 0x118
 23ed148:	22f0      	movs	r2, #240	; 0xf0
 23ed14a:	4668      	mov	r0, sp
 23ed14c:	f00b fdc2 	bl	23f8cd4 <memcpy>
 23ed150:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23ed154:	f7ff f866 	bl	23ec224 <_Z22print_inference_result19ei_impulse_result_t>
    delay(1000);
 23ed158:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23ed15c:	f007 fb6c 	bl	23f4838 <delay>
 23ed160:	e7e7      	b.n	23ed132 <loop+0x10a>
 23ed162:	bf00      	nop
 23ed164:	f3af 8000 	nop.w
 23ed168:	023fb303 	.word	0x023fb303
 23ed16c:	1007a6d4 	.word	0x1007a6d4
 23ed170:	023fb311 	.word	0x023fb311
 23ed174:	023ea359 	.word	0x023ea359
 23ed178:	023fb326 	.word	0x023fb326
 23ed17c:	023fb34a 	.word	0x023fb34a
 23ed180:	3a92a305 	.word	0x3a92a305
 23ed184:	40239d01 	.word	0x40239d01
 23ed188:	1007a6a4 	.word	0x1007a6a4

023ed18c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 23ed18c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (max_size() - size() < __n)
 23ed190:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23ed194:	e9d0 8600 	ldrd	r8, r6, [r0]
 23ed198:	4693      	mov	fp, r2
 23ed19a:	eba6 0208 	sub.w	r2, r6, r8
	if (max_size() - size() < __n)
 23ed19e:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
 23ed1a2:	4607      	mov	r7, r0
 23ed1a4:	4689      	mov	r9, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23ed1a6:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
 23ed1aa:	d102      	bne.n	23ed1b2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
 23ed1ac:	4824      	ldr	r0, [pc, #144]	; (23ed240 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0xb4>)
 23ed1ae:	f009 fccb 	bl	23f6b48 <_ZSt20__throw_length_errorPKc>
 23ed1b2:	2c01      	cmp	r4, #1
 23ed1b4:	4622      	mov	r2, r4
 23ed1b6:	bf38      	it	cc
 23ed1b8:	2201      	movcc	r2, #1
 23ed1ba:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
 23ed1bc:	eba1 0a08 	sub.w	sl, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 23ed1c0:	d21a      	bcs.n	23ed1f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x6c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23ed1c2:	b1dc      	cbz	r4, 23ed1fc <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x70>
 23ed1c4:	429c      	cmp	r4, r3
 23ed1c6:	bf28      	it	cs
 23ed1c8:	461c      	movcs	r4, r3
        auto ptr = ei_dsp_malloc(bytes);
 23ed1ca:	00e0      	lsls	r0, r4, #3
 23ed1cc:	f002 ff63 	bl	23f0096 <_Z9ei_mallocj>
 23ed1d0:	4605      	mov	r5, r0
 23ed1d2:	462a      	mov	r2, r5
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23ed1d4:	4643      	mov	r3, r8
 23ed1d6:	eb15 0a0a 	adds.w	sl, r5, sl
 23ed1da:	bf1c      	itt	ne
 23ed1dc:	e9db 0100 	ldrdne	r0, r1, [fp]
 23ed1e0:	e9ca 0100 	strdne	r0, r1, [sl]
      for (; __first != __last; ++__first, (void)++__cur)
 23ed1e4:	4599      	cmp	r9, r3
 23ed1e6:	d00b      	beq.n	23ed200 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x74>
 23ed1e8:	b11a      	cbz	r2, 23ed1f2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x66>
 23ed1ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 23ed1ee:	e882 0003 	stmia.w	r2, {r0, r1}
 23ed1f2:	3308      	adds	r3, #8
 23ed1f4:	3208      	adds	r2, #8
 23ed1f6:	e7f5      	b.n	23ed1e4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x58>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 23ed1f8:	461c      	mov	r4, r3
 23ed1fa:	e7e6      	b.n	23ed1ca <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23ed1fc:	4625      	mov	r5, r4
 23ed1fe:	e7e8      	b.n	23ed1d2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x46>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 23ed200:	eba3 0208 	sub.w	r2, r3, r8
 23ed204:	3208      	adds	r2, #8
 23ed206:	442a      	add	r2, r5
 23ed208:	469e      	mov	lr, r3
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 23ed20a:	4694      	mov	ip, r2
      for (; __first != __last; ++__first, (void)++__cur)
 23ed20c:	429e      	cmp	r6, r3
 23ed20e:	f10c 0c08 	add.w	ip, ip, #8
 23ed212:	d005      	beq.n	23ed220 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x94>
 23ed214:	e893 0003 	ldmia.w	r3, {r0, r1}
 23ed218:	3308      	adds	r3, #8
 23ed21a:	e90c 0003 	stmdb	ip, {r0, r1}
 23ed21e:	e7f5      	b.n	23ed20c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0x80>
 23ed220:	eba6 060e 	sub.w	r6, r6, lr
 23ed224:	4416      	add	r6, r2
	if (__p)
 23ed226:	f1b8 0f00 	cmp.w	r8, #0
 23ed22a:	d002      	beq.n	23ed232 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_+0xa6>
        ei_dsp_free(p,0);
 23ed22c:	4640      	mov	r0, r8
 23ed22e:	f002 ff36 	bl	23f009e <_Z7ei_freePv>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 23ed232:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
 23ed236:	e9c7 5600 	strd	r5, r6, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 23ed23a:	60bc      	str	r4, [r7, #8]
    }
 23ed23c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ed240:	023fb368 	.word	0x023fb368

023ed244 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>:
      push_back(const value_type& __x)
 23ed244:	b510      	push	{r4, lr}
 23ed246:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 23ed248:	e9d0 4101 	ldrd	r4, r1, [r0, #4]
 23ed24c:	428c      	cmp	r4, r1
      push_back(const value_type& __x)
 23ed24e:	4603      	mov	r3, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 23ed250:	d008      	beq.n	23ed264 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x20>
 23ed252:	b11c      	cbz	r4, 23ed25c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x18>
 23ed254:	e892 0003 	ldmia.w	r2, {r0, r1}
 23ed258:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
 23ed25c:	685a      	ldr	r2, [r3, #4]
 23ed25e:	3208      	adds	r2, #8
 23ed260:	605a      	str	r2, [r3, #4]
      }
 23ed262:	bd10      	pop	{r4, pc}
	  _M_realloc_insert(end(), __x);
 23ed264:	4621      	mov	r1, r4
 23ed266:	f7ff ff91 	bl	23ed18c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S6_EEDpOT_>
      }
 23ed26a:	e7fa      	b.n	23ed262 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_+0x1e>

023ed26c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
    static int spectral_analysis(
 23ed26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ed270:	ed2d 8b04 	vpush	{d8-d9}
 23ed274:	460d      	mov	r5, r1
 23ed276:	b0a9      	sub	sp, #164	; 0xa4
 23ed278:	4619      	mov	r1, r3
 23ed27a:	f8bd 30d8 	ldrh.w	r3, [sp, #216]	; 0xd8
        if (out_features->rows != input_matrix->rows) {
 23ed27e:	686e      	ldr	r6, [r5, #4]
    static int spectral_analysis(
 23ed280:	9302      	str	r3, [sp, #8]
 23ed282:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 23ed286:	4680      	mov	r8, r0
 23ed288:	9303      	str	r3, [sp, #12]
        if (out_features->rows != input_matrix->rows) {
 23ed28a:	6843      	ldr	r3, [r0, #4]
    static int spectral_analysis(
 23ed28c:	eeb0 8a40 	vmov.f32	s16, s0
        if (out_features->rows != input_matrix->rows) {
 23ed290:	42b3      	cmp	r3, r6
    static int spectral_analysis(
 23ed292:	4617      	mov	r7, r2
 23ed294:	eeb0 9a41 	vmov.f32	s18, s2
        if (out_features->rows != input_matrix->rows) {
 23ed298:	d006      	beq.n	23ed2a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23ed29a:	4cb0      	ldr	r4, [pc, #704]	; (23ed55c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
    }
 23ed29c:	4620      	mov	r0, r4
 23ed29e:	b029      	add	sp, #164	; 0xa4
 23ed2a0:	ecbd 8b04 	vpop	{d8-d9}
 23ed2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 23ed2a8:	6882      	ldr	r2, [r0, #8]
        count += (peaks_count * 2);
 23ed2aa:	2001      	movs	r0, #1
        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 23ed2ac:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        count += (peaks_count * 2);
 23ed2ae:	9c03      	ldr	r4, [sp, #12]
        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 23ed2b0:	685b      	ldr	r3, [r3, #4]
        count += (peaks_count * 2);
 23ed2b2:	eb00 0044 	add.w	r0, r0, r4, lsl #1
        if (spectral_edges_count > 0) {
 23ed2b6:	b10b      	cbz	r3, 23ed2bc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x50>
            count += (spectral_edges_count - 1);
 23ed2b8:	3b01      	subs	r3, #1
 23ed2ba:	4418      	add	r0, r3
        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 23ed2bc:	4282      	cmp	r2, r0
 23ed2be:	edcd 0a04 	vstr	s1, [sp, #16]
        return count;
 23ed2c2:	9105      	str	r1, [sp, #20]
        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 23ed2c4:	d1e9      	bne.n	23ed29a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2e>
        if (edges_matrix_in->cols != 1) {
 23ed2c6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 23ed2c8:	689b      	ldr	r3, [r3, #8]
 23ed2ca:	2b01      	cmp	r3, #1
 23ed2cc:	d1e5      	bne.n	23ed29a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2e>
        EI_TRY(processing::subtract_mean(input_matrix) );
 23ed2ce:	4628      	mov	r0, r5
 23ed2d0:	f7fe f87a 	bl	23eb3c8 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 23ed2d4:	4604      	mov	r4, r0
 23ed2d6:	2800      	cmp	r0, #0
 23ed2d8:	d1e0      	bne.n	23ed29c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x30>
        if (filter_type == filter_lowpass) {
 23ed2da:	2f01      	cmp	r7, #1
 23ed2dc:	eddd 0a04 	vldr	s1, [sp, #16]
 23ed2e0:	9905      	ldr	r1, [sp, #20]
 23ed2e2:	d110      	bne.n	23ed306 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x9a>
            ret = spectral::processing::butterworth_lowpass_filter(
 23ed2e4:	eeb0 0a48 	vmov.f32	s0, s16
 23ed2e8:	4628      	mov	r0, r5
 23ed2ea:	f7fd f861 	bl	23ea3b0 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
            if (ret != EIDSP_OK) {
 23ed2ee:	2800      	cmp	r0, #0
 23ed2f0:	d1d3      	bne.n	23ed29a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2e>
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 23ed2f2:	2300      	movs	r3, #0
 23ed2f4:	2201      	movs	r2, #1
 23ed2f6:	4631      	mov	r1, r6
 23ed2f8:	a808      	add	r0, sp, #32
 23ed2fa:	f7fd fef4 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23ed2fe:	9b08      	ldr	r3, [sp, #32]
 23ed300:	b94b      	cbnz	r3, 23ed316 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xaa>
 23ed302:	4c97      	ldr	r4, [pc, #604]	; (23ed560 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f4>)
 23ed304:	e1e2      	b.n	23ed6cc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x460>
        else if (filter_type == filter_highpass) {
 23ed306:	2f02      	cmp	r7, #2
 23ed308:	d1f3      	bne.n	23ed2f2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x86>
            ret = spectral::processing::butterworth_highpass_filter(
 23ed30a:	eeb0 0a48 	vmov.f32	s0, s16
 23ed30e:	4628      	mov	r0, r5
 23ed310:	f7fd fd22 	bl	23ead58 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 23ed314:	e7eb      	b.n	23ed2ee <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x82>
        ret = numpy::rms(input_matrix, &rms_matrix);
 23ed316:	4628      	mov	r0, r5
 23ed318:	a908      	add	r1, sp, #32
 23ed31a:	f7fe f809 	bl	23eb330 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
        if (ret != EIDSP_OK) {
 23ed31e:	4604      	mov	r4, r0
 23ed320:	2800      	cmp	r0, #0
 23ed322:	f040 81e5 	bne.w	23ed6f0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x484>
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 23ed326:	9a03      	ldr	r2, [sp, #12]
 23ed328:	4603      	mov	r3, r0
 23ed32a:	4631      	mov	r1, r6
 23ed32c:	0052      	lsls	r2, r2, #1
 23ed32e:	a80c      	add	r0, sp, #48	; 0x30
 23ed330:	f7fd fed9 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23ed334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23ed336:	2b00      	cmp	r3, #0
 23ed338:	f000 81d8 	beq.w	23ed6ec <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x480>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 23ed33c:	9b02      	ldr	r3, [sp, #8]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23ed33e:	4627      	mov	r7, r4
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 23ed340:	ea4f 0953 	mov.w	r9, r3, lsr #1
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
 23ed344:	105b      	asrs	r3, r3, #1
 23ed346:	ee09 3a90 	vmov	s19, r3
 23ed34a:	eddf 8a86 	vldr	s17, [pc, #536]	; 23ed564 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f8>
 23ed34e:	f109 0901 	add.w	r9, r9, #1
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23ed352:	686b      	ldr	r3, [r5, #4]
 23ed354:	42bb      	cmp	r3, r7
 23ed356:	f240 81b6 	bls.w	23ed6c6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x45a>
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 23ed35a:	68aa      	ldr	r2, [r5, #8]
 23ed35c:	682b      	ldr	r3, [r5, #0]
 23ed35e:	fb07 f102 	mul.w	r1, r7, r2
 23ed362:	a810      	add	r0, sp, #64	; 0x40
 23ed364:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 23ed368:	2101      	movs	r1, #1
 23ed36a:	f7fd febc 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23ed36e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23ed370:	2b00      	cmp	r3, #0
 23ed372:	f000 81b9 	beq.w	23ed6e8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x47c>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 23ed376:	464a      	mov	r2, r9
 23ed378:	2300      	movs	r3, #0
 23ed37a:	2101      	movs	r1, #1
 23ed37c:	a814      	add	r0, sp, #80	; 0x50
 23ed37e:	f7fd feb2 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23ed382:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23ed384:	2a00      	cmp	r2, #0
 23ed386:	f000 81ab 	beq.w	23ed6e0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x474>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
 23ed38a:	9b02      	ldr	r3, [sp, #8]
 23ed38c:	9912      	ldr	r1, [sp, #72]	; 0x48
 23ed38e:	9300      	str	r3, [sp, #0]
 23ed390:	9810      	ldr	r0, [sp, #64]	; 0x40
 23ed392:	9b16      	ldr	r3, [sp, #88]	; 0x58
 23ed394:	f7fe f93a 	bl	23eb60c <_ZN2ei5numpy4rfftEPKfjPfjj>
            if (ret != EIDSP_OK) {
 23ed398:	9004      	str	r0, [sp, #16]
 23ed39a:	2800      	cmp	r0, #0
 23ed39c:	f040 81a2 	bne.w	23ed6e4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
 23ed3a0:	eddd 7a02 	vldr	s15, [sp, #8]
 23ed3a4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 23ed3a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23ed3ac:	a814      	add	r0, sp, #80	; 0x50
 23ed3ae:	ee80 0a27 	vdiv.f32	s0, s0, s15
 23ed3b2:	f7fd ff65 	bl	23eb280 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 23ed3b6:	2202      	movs	r2, #2
 23ed3b8:	9b04      	ldr	r3, [sp, #16]
 23ed3ba:	9903      	ldr	r1, [sp, #12]
 23ed3bc:	a818      	add	r0, sp, #96	; 0x60
 23ed3be:	f7fd fe92 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23ed3c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23ed3c4:	2a00      	cmp	r2, #0
 23ed3c6:	f000 8189 	beq.w	23ed6dc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x470>
        if (fft_matrix->rows != 1) {
 23ed3ca:	9915      	ldr	r1, [sp, #84]	; 0x54
 23ed3cc:	9b04      	ldr	r3, [sp, #16]
 23ed3ce:	2901      	cmp	r1, #1
 23ed3d0:	d001      	beq.n	23ed3d6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x16a>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23ed3d2:	4c62      	ldr	r4, [pc, #392]	; (23ed55c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2f0>)
 23ed3d4:	e16e      	b.n	23ed6b4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x448>
        if (output_matrix->cols != 2) {
 23ed3d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23ed3d8:	2a02      	cmp	r2, #2
 23ed3da:	d1fa      	bne.n	23ed3d2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x166>
        if (output_matrix->rows == 0) {
 23ed3dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23ed3de:	2a00      	cmp	r2, #0
 23ed3e0:	f000 80ce 	beq.w	23ed580 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x314>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 23ed3e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 23ed3e6:	a820      	add	r0, sp, #128	; 0x80
 23ed3e8:	f7fd fe7d 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23ed3ec:	9920      	ldr	r1, [sp, #128]	; 0x80
 23ed3ee:	2900      	cmp	r1, #0
 23ed3f0:	f000 812b 	beq.w	23ed64a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3de>
        float T = 1.0f / sampling_freq;
 23ed3f4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 23ed3f8:	eec0 7a88 	vdiv.f32	s15, s1, s16
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
 23ed3fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 23ed400:	ee19 0a90 	vmov	r0, s19
 23ed404:	eec0 0aa7 	vdiv.f32	s1, s1, s15
 23ed408:	eeb0 0a68 	vmov.f32	s0, s17
 23ed40c:	f7fe f864 	bl	23eb4d8 <_ZN2ei5numpy8linspaceEffmPf>
        if (ret != EIDSP_OK) {
 23ed410:	4606      	mov	r6, r0
 23ed412:	2800      	cmp	r0, #0
 23ed414:	f040 80ae 	bne.w	23ed574 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x308>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 23ed418:	200a      	movs	r0, #10
 23ed41a:	9919      	ldr	r1, [sp, #100]	; 0x64
 23ed41c:	2300      	movs	r3, #0
 23ed41e:	4341      	muls	r1, r0
 23ed420:	2201      	movs	r2, #1
 23ed422:	a824      	add	r0, sp, #144	; 0x90
 23ed424:	f7fd fe5f 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23ed428:	9824      	ldr	r0, [sp, #144]	; 0x90
 23ed42a:	2800      	cmp	r0, #0
 23ed42c:	f000 8109 	beq.w	23ed642 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3d6>
        if (input_matrix->rows != 1) {
 23ed430:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23ed432:	2b01      	cmp	r3, #1
 23ed434:	f040 8107 	bne.w	23ed646 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3da>
        if (output_matrix->cols != 1) {
 23ed438:	9a26      	ldr	r2, [sp, #152]	; 0x98
 23ed43a:	2a01      	cmp	r2, #1
 23ed43c:	f040 8103 	bne.w	23ed646 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3da>
        float prev = in[0];
 23ed440:	9b14      	ldr	r3, [sp, #80]	; 0x50
        uint16_t out_ix = 0;
 23ed442:	f04f 0a00 	mov.w	sl, #0
        float prev = in[0];
 23ed446:	ecf3 7a01 	vldmia	r3!, {s15}
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 23ed44a:	9916      	ldr	r1, [sp, #88]	; 0x58
        size_t out_size = output_matrix->rows;
 23ed44c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 23ed450:	3901      	subs	r1, #1
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 23ed452:	428a      	cmp	r2, r1
 23ed454:	f080 814e 	bcs.w	23ed6f4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x488>
            if (in[ix] > prev && in[ix] > in[ix+1]) {
 23ed458:	ed93 7a00 	vldr	s14, [r3]
 23ed45c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23ed460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed464:	dd20      	ble.n	23ed4a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x23c>
 23ed466:	edd3 6a01 	vldr	s13, [r3, #4]
 23ed46a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 23ed46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed472:	dd19      	ble.n	23ed4a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x23c>
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
 23ed474:	ee77 7a67 	vsub.f32	s15, s14, s15
 23ed478:	ee37 7a66 	vsub.f32	s14, s14, s13
 23ed47c:	ee77 7a87 	vadd.f32	s15, s15, s14
                if (height > threshold) {
 23ed480:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23ed484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ed488:	dd0e      	ble.n	23ed4a8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x23c>
                    out[out_ix] = ix;
 23ed48a:	ee07 2a90 	vmov	s15, r2
 23ed48e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23ed492:	eb00 0e8a 	add.w	lr, r0, sl, lsl #2
                    out_ix++;
 23ed496:	f10a 0a01 	add.w	sl, sl, #1
 23ed49a:	fa1f fa8a 	uxth.w	sl, sl
                    if (out_ix == out_size) break;
 23ed49e:	45d4      	cmp	ip, sl
                    out[out_ix] = ix;
 23ed4a0:	edce 7a00 	vstr	s15, [lr]
                    if (out_ix == out_size) break;
 23ed4a4:	f000 8126 	beq.w	23ed6f4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x488>
            prev = in[ix];
 23ed4a8:	ecf3 7a01 	vldmia	r3!, {s15}
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 23ed4ac:	3201      	adds	r2, #1
 23ed4ae:	e7d0      	b.n	23ed452 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1e6>
      : _M_current(__i) { }
 23ed4b0:	e9dd 0a1c 	ldrd	r0, sl, [sp, #112]	; 0x70
    _GLIBCXX20_CONSTEXPR
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
	   _Compare __comp)
    {
      if (__first != __last)
 23ed4b4:	4550      	cmp	r0, sl
 23ed4b6:	d022      	beq.n	23ed4fe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x292>
    { return __lhs.base() - __rhs.base(); }
 23ed4b8:	ebaa 0b00 	sub.w	fp, sl, r0
 23ed4bc:	ea4f 02eb 	mov.w	r2, fp, asr #3

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 23ed4c0:	fab2 f282 	clz	r2, r2
 23ed4c4:	f1c2 021f 	rsb	r2, r2, #31
	{
	  std::__introsort_loop(__first, __last,
 23ed4c8:	f04f 0300 	mov.w	r3, #0
 23ed4cc:	4651      	mov	r1, sl
 23ed4ce:	0052      	lsls	r2, r2, #1
 23ed4d0:	9004      	str	r0, [sp, #16]
 23ed4d2:	f7fd fb1b 	bl	23eab0c <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_T1_>
      if (__last - __first > int(_S_threshold))
 23ed4d6:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 23ed4da:	9804      	ldr	r0, [sp, #16]
 23ed4dc:	dd0c      	ble.n	23ed4f8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x28c>
      { return __normal_iterator(_M_current + __n); }
 23ed4de:	f100 0b80 	add.w	fp, r0, #128	; 0x80
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 23ed4e2:	4659      	mov	r1, fp
 23ed4e4:	f7fd f9f0 	bl	23ea8c8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 23ed4e8:	45da      	cmp	sl, fp
 23ed4ea:	d008      	beq.n	23ed4fe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x292>
	std::__unguarded_linear_insert(__i,
 23ed4ec:	4658      	mov	r0, fp
 23ed4ee:	f7fd f9d1 	bl	23ea894 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_T0_.constprop.0>
      operator++() _GLIBCXX_NOEXCEPT
 23ed4f2:	f10b 0b08 	add.w	fp, fp, #8
	return *this;
 23ed4f6:	e7f7      	b.n	23ed4e8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x27c>
	std::__insertion_sort(__first, __last, __comp);
 23ed4f8:	4651      	mov	r1, sl
 23ed4fa:	f7fd f9e5 	bl	23ea8c8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_NS2_7EiAllocIS5_EEEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESF_fftEUlRKS5_SH_E_EEEvT_SK_T0_.constprop.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23ed4fe:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 23ed502:	1a9b      	subs	r3, r3, r2
 23ed504:	ea4f 0ae3 	mov.w	sl, r3, asr #3
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 23ed508:	9b19      	ldr	r3, [sp, #100]	; 0x64
 23ed50a:	4553      	cmp	r3, sl
 23ed50c:	d90a      	bls.n	23ed524 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2b8>
            peaks.push_back(d);
 23ed50e:	a906      	add	r1, sp, #24
 23ed510:	a81c      	add	r0, sp, #112	; 0x70
            d.freq = 0;
 23ed512:	edcd 8a06 	vstr	s17, [sp, #24]
            d.amplitude = 0;
 23ed516:	edcd 8a07 	vstr	s17, [sp, #28]
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 23ed51a:	f10a 0a01 	add.w	sl, sl, #1
            peaks.push_back(d);
 23ed51e:	f7ff fe91 	bl	23ed244 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 23ed522:	e7f1      	b.n	23ed508 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x29c>
        for (size_t row = 0; row < output_matrix->rows; row++) {
 23ed524:	2300      	movs	r3, #0
 23ed526:	9a19      	ldr	r2, [sp, #100]	; 0x64
	return *(this->_M_impl._M_start + __n);
 23ed528:	981c      	ldr	r0, [sp, #112]	; 0x70
 23ed52a:	429a      	cmp	r2, r3
 23ed52c:	d91c      	bls.n	23ed568 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2fc>
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
 23ed52e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23ed530:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 23ed534:	fb02 f103 	mul.w	r1, r2, r3
 23ed538:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23ed53a:	6800      	ldr	r0, [r0, #0]
 23ed53c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23ed540:	6010      	str	r0, [r2, #0]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
 23ed542:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 23ed544:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 23ed548:	6850      	ldr	r0, [r2, #4]
 23ed54a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23ed54c:	fb02 f103 	mul.w	r1, r2, r3
 23ed550:	9a18      	ldr	r2, [sp, #96]	; 0x60
        for (size_t row = 0; row < output_matrix->rows; row++) {
 23ed552:	3301      	adds	r3, #1
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
 23ed554:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23ed558:	6050      	str	r0, [r2, #4]
        for (size_t row = 0; row < output_matrix->rows; row++) {
 23ed55a:	e7e4      	b.n	23ed526 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ba>
 23ed55c:	fffffc14 	.word	0xfffffc14
 23ed560:	fffffc16 	.word	0xfffffc16
 23ed564:	00000000 	.word	0x00000000
	if (__p)
 23ed568:	b108      	cbz	r0, 23ed56e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x302>
 23ed56a:	f002 fd98 	bl	23f009e <_Z7ei_freePv>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 23ed56e:	a824      	add	r0, sp, #144	; 0x90
 23ed570:	f7fd fdce 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 23ed574:	a820      	add	r0, sp, #128	; 0x80
 23ed576:	f7fd fdcb 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
            if (ret != EIDSP_OK) {
 23ed57a:	2e00      	cmp	r6, #0
 23ed57c:	f47f af29 	bne.w	23ed3d2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x166>
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 23ed580:	2300      	movs	r3, #0
 23ed582:	464a      	mov	r2, r9
 23ed584:	2101      	movs	r1, #1
 23ed586:	a81c      	add	r0, sp, #112	; 0x70
 23ed588:	f7fd fdad 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23ed58c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 23ed58e:	2b00      	cmp	r3, #0
 23ed590:	f000 80a2 	beq.w	23ed6d8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x46c>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 23ed594:	2300      	movs	r3, #0
 23ed596:	464a      	mov	r2, r9
 23ed598:	2101      	movs	r1, #1
 23ed59a:	a820      	add	r0, sp, #128	; 0x80
 23ed59c:	f7fd fda3 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23ed5a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 23ed5a2:	2b00      	cmp	r3, #0
 23ed5a4:	f000 8096 	beq.w	23ed6d4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x468>
            ret = spectral::processing::periodogram(&axis_matrix,
 23ed5a8:	eeb0 0a48 	vmov.f32	s0, s16
 23ed5ac:	9b02      	ldr	r3, [sp, #8]
 23ed5ae:	aa20      	add	r2, sp, #128	; 0x80
 23ed5b0:	a91c      	add	r1, sp, #112	; 0x70
 23ed5b2:	a810      	add	r0, sp, #64	; 0x40
 23ed5b4:	f7fe fb26 	bl	23ebc04 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
            if (ret != EIDSP_OK) {
 23ed5b8:	4606      	mov	r6, r0
 23ed5ba:	2800      	cmp	r0, #0
 23ed5bc:	d173      	bne.n	23ed6a6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43a>
            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 23ed5be:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 23ed5c0:	2201      	movs	r2, #1
 23ed5c2:	6859      	ldr	r1, [r3, #4]
 23ed5c4:	4603      	mov	r3, r0
 23ed5c6:	3901      	subs	r1, #1
 23ed5c8:	a824      	add	r0, sp, #144	; 0x90
 23ed5ca:	f7fd fd8c 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
 23ed5ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 23ed5d0:	2b00      	cmp	r3, #0
 23ed5d2:	d064      	beq.n	23ed69e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x432>
            ret = spectral::processing::spectral_power_edges(
 23ed5d4:	eeb0 0a48 	vmov.f32	s0, s16
 23ed5d8:	9a38      	ldr	r2, [sp, #224]	; 0xe0
 23ed5da:	ab24      	add	r3, sp, #144	; 0x90
 23ed5dc:	a920      	add	r1, sp, #128	; 0x80
 23ed5de:	a81c      	add	r0, sp, #112	; 0x70
 23ed5e0:	f7fe fa64 	bl	23ebaac <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
            if (ret != EIDSP_OK) {
 23ed5e4:	4606      	mov	r6, r0
 23ed5e6:	2800      	cmp	r0, #0
 23ed5e8:	d15a      	bne.n	23ed6a0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x434>
            float *features_row = out_features->buffer + (row * out_features->cols);
 23ed5ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 23ed5ee:	f8d8 1000 	ldr.w	r1, [r8]
 23ed5f2:	437b      	muls	r3, r7
 23ed5f4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
            features_row[fx++] = rms_matrix.buffer[row];
 23ed5f8:	460a      	mov	r2, r1
 23ed5fa:	9b08      	ldr	r3, [sp, #32]
 23ed5fc:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 23ed600:	681b      	ldr	r3, [r3, #0]
 23ed602:	f842 3b04 	str.w	r3, [r2], #4
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 23ed606:	9819      	ldr	r0, [sp, #100]	; 0x64
 23ed608:	0073      	lsls	r3, r6, #1
 23ed60a:	42b0      	cmp	r0, r6
 23ed60c:	f103 0301 	add.w	r3, r3, #1
 23ed610:	f102 0208 	add.w	r2, r2, #8
 23ed614:	d81b      	bhi.n	23ed64e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3e2>
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 23ed616:	2200      	movs	r2, #0
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 23ed618:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 23ed61c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 23ed620:	9925      	ldr	r1, [sp, #148]	; 0x94
 23ed622:	4291      	cmp	r1, r2
 23ed624:	d927      	bls.n	23ed676 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x40a>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 23ed626:	9926      	ldr	r1, [sp, #152]	; 0x98
 23ed628:	fb01 f002 	mul.w	r0, r1, r2
 23ed62c:	9924      	ldr	r1, [sp, #144]	; 0x90
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 23ed62e:	3201      	adds	r2, #1
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 23ed630:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 23ed634:	edd1 6a00 	vldr	s13, [r1]
 23ed638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 23ed63c:	ece3 7a01 	vstmia	r3!, {s15}
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 23ed640:	e7ee      	b.n	23ed620 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3b4>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 23ed642:	4e47      	ldr	r6, [pc, #284]	; (23ed760 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
 23ed644:	e793      	b.n	23ed56e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x302>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23ed646:	4e47      	ldr	r6, [pc, #284]	; (23ed764 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f8>)
 23ed648:	e791      	b.n	23ed56e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x302>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 23ed64a:	4e45      	ldr	r6, [pc, #276]	; (23ed760 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
 23ed64c:	e792      	b.n	23ed574 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x308>
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
 23ed64e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 23ed650:	fb03 f006 	mul.w	r0, r3, r6
 23ed654:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23ed656:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 23ed65a:	681b      	ldr	r3, [r3, #0]
 23ed65c:	f842 3c08 	str.w	r3, [r2, #-8]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
 23ed660:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 23ed662:	fb03 f006 	mul.w	r0, r3, r6
 23ed666:	9b18      	ldr	r3, [sp, #96]	; 0x60
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 23ed668:	3601      	adds	r6, #1
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
 23ed66a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 23ed66e:	685b      	ldr	r3, [r3, #4]
 23ed670:	f842 3c04 	str.w	r3, [r2, #-4]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 23ed674:	e7c7      	b.n	23ed606 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x39a>
            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 23ed676:	a824      	add	r0, sp, #144	; 0x90
 23ed678:	f7fd fd4a 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 23ed67c:	a820      	add	r0, sp, #128	; 0x80
 23ed67e:	f7fd fd47 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 23ed682:	a81c      	add	r0, sp, #112	; 0x70
 23ed684:	f7fd fd44 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 23ed688:	a818      	add	r0, sp, #96	; 0x60
 23ed68a:	f7fd fd41 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 23ed68e:	a814      	add	r0, sp, #80	; 0x50
 23ed690:	f7fd fd3e 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 23ed694:	a810      	add	r0, sp, #64	; 0x40
 23ed696:	f7fd fd3b 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23ed69a:	3701      	adds	r7, #1
 23ed69c:	e659      	b.n	23ed352 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xe6>
            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 23ed69e:	4e30      	ldr	r6, [pc, #192]	; (23ed760 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
 23ed6a0:	a824      	add	r0, sp, #144	; 0x90
 23ed6a2:	f7fd fd35 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 23ed6a6:	a820      	add	r0, sp, #128	; 0x80
 23ed6a8:	f7fd fd32 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
 23ed6ac:	4634      	mov	r4, r6
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 23ed6ae:	a81c      	add	r0, sp, #112	; 0x70
 23ed6b0:	f7fd fd2e 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 23ed6b4:	a818      	add	r0, sp, #96	; 0x60
 23ed6b6:	f7fd fd2b 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 23ed6ba:	a814      	add	r0, sp, #80	; 0x50
 23ed6bc:	f7fd fd28 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 23ed6c0:	a810      	add	r0, sp, #64	; 0x40
 23ed6c2:	f7fd fd25 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 23ed6c6:	a80c      	add	r0, sp, #48	; 0x30
 23ed6c8:	f7fd fd22 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 23ed6cc:	a808      	add	r0, sp, #32
 23ed6ce:	f7fd fd1f 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
 23ed6d2:	e5e3      	b.n	23ed29c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x30>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 23ed6d4:	4e22      	ldr	r6, [pc, #136]	; (23ed760 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
 23ed6d6:	e7e6      	b.n	23ed6a6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43a>
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 23ed6d8:	4c21      	ldr	r4, [pc, #132]	; (23ed760 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
 23ed6da:	e7e8      	b.n	23ed6ae <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x442>
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 23ed6dc:	4c20      	ldr	r4, [pc, #128]	; (23ed760 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
 23ed6de:	e7e9      	b.n	23ed6b4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x448>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 23ed6e0:	4c1f      	ldr	r4, [pc, #124]	; (23ed760 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
 23ed6e2:	e7ea      	b.n	23ed6ba <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x44e>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23ed6e4:	4c1f      	ldr	r4, [pc, #124]	; (23ed764 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f8>)
 23ed6e6:	e7e8      	b.n	23ed6ba <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x44e>
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 23ed6e8:	4c1d      	ldr	r4, [pc, #116]	; (23ed760 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
 23ed6ea:	e7e9      	b.n	23ed6c0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x454>
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 23ed6ec:	4c1c      	ldr	r4, [pc, #112]	; (23ed760 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f4>)
 23ed6ee:	e7ea      	b.n	23ed6c6 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x45a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23ed6f0:	4c1c      	ldr	r4, [pc, #112]	; (23ed764 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4f8>)
 23ed6f2:	e7eb      	b.n	23ed6cc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x460>
	: _M_start(), _M_finish(), _M_end_of_storage()
 23ed6f4:	2300      	movs	r3, #0
 23ed6f6:	469b      	mov	fp, r3
 23ed6f8:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 23ed6fc:	931e      	str	r3, [sp, #120]	; 0x78
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 23ed6fe:	fa5f f38b 	uxtb.w	r3, fp
 23ed702:	4553      	cmp	r3, sl
 23ed704:	f6bf aed4 	bge.w	23ed4b0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x244>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 23ed708:	9a24      	ldr	r2, [sp, #144]	; 0x90
            peaks.push_back(d);
 23ed70a:	a81c      	add	r0, sp, #112	; 0x70
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 23ed70c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23ed710:	edd3 7a00 	vldr	s15, [r3]
 23ed714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23ed718:	ee17 1a90 	vmov	r1, s15
 23ed71c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 23ed71e:	f10b 0b01 	add.w	fp, fp, #1
 23ed722:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23ed726:	6812      	ldr	r2, [r2, #0]
            peaks.push_back(d);
 23ed728:	a906      	add	r1, sp, #24
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 23ed72a:	9206      	str	r2, [sp, #24]
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 23ed72c:	edd3 7a00 	vldr	s15, [r3]
 23ed730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23ed734:	ee17 2a90 	vmov	r2, s15
 23ed738:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23ed73a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23ed73e:	edd3 7a00 	vldr	s15, [r3]
            if (d.amplitude < threshold) {
 23ed742:	eeb4 9ae7 	vcmpe.f32	s18, s15
 23ed746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 23ed74a:	edcd 7a07 	vstr	s15, [sp, #28]
                d.freq = 0.0f;
 23ed74e:	bfc4      	itt	gt
 23ed750:	edcd 8a06 	vstrgt	s17, [sp, #24]
                d.amplitude = 0.0f;
 23ed754:	edcd 8a07 	vstrgt	s17, [sp, #28]
            peaks.push_back(d);
 23ed758:	f7ff fd74 	bl	23ed244 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tENS0_7EiAllocIS3_EEE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 23ed75c:	e7cf      	b.n	23ed6fe <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x492>
 23ed75e:	bf00      	nop
 23ed760:	fffffc16 	.word	0xfffffc16
 23ed764:	fffffc14 	.word	0xfffffc14

023ed768 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:
    static int extract_spectral_analysis_features_v1(
 23ed768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ed76c:	ed2d 8b02 	vpush	{d8}
 23ed770:	eeb0 8a40 	vmov.f32	s16, s0
 23ed774:	b0aa      	sub	sp, #168	; 0xa8
        int ret = numpy::scale(input_matrix, config_ptr->scale_axes);
 23ed776:	ed92 0a03 	vldr	s0, [r2, #12]
    static int extract_spectral_analysis_features_v1(
 23ed77a:	4680      	mov	r8, r0
 23ed77c:	460f      	mov	r7, r1
 23ed77e:	4616      	mov	r6, r2
        int ret = numpy::scale(input_matrix, config_ptr->scale_axes);
 23ed780:	f7fd fd7e 	bl	23eb280 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
        if (ret != EIDSP_OK) {
 23ed784:	4604      	mov	r4, r0
 23ed786:	b148      	cbz	r0, 23ed79c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x34>
            ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 23ed788:	4601      	mov	r1, r0
 23ed78a:	4848      	ldr	r0, [pc, #288]	; (23ed8ac <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x144>)
            ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 23ed78c:	f002 fc56 	bl	23f003c <_Z9ei_printfPKcz>
    }
 23ed790:	4620      	mov	r0, r4
 23ed792:	b02a      	add	sp, #168	; 0xa8
 23ed794:	ecbd 8b02 	vpop	{d8}
 23ed798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ret = numpy::transpose(input_matrix);
 23ed79c:	4640      	mov	r0, r8
 23ed79e:	f7fd fd29 	bl	23eb1f4 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
        if (ret != EIDSP_OK) {
 23ed7a2:	4604      	mov	r4, r0
 23ed7a4:	b110      	cbz	r0, 23ed7ac <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x44>
            ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 23ed7a6:	4601      	mov	r1, r0
 23ed7a8:	4841      	ldr	r0, [pc, #260]	; (23ed8b0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x148>)
 23ed7aa:	e7ef      	b.n	23ed78c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x24>
        matrix_t edges_matrix_in(64, 1);
 23ed7ac:	f10d 0918 	add.w	r9, sp, #24
 23ed7b0:	4603      	mov	r3, r0
 23ed7b2:	2201      	movs	r2, #1
 23ed7b4:	2140      	movs	r1, #64	; 0x40
 23ed7b6:	4648      	mov	r0, r9
 23ed7b8:	f7fd fc95 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
        char spectral_str[128] = { 0 };
 23ed7bc:	227c      	movs	r2, #124	; 0x7c
 23ed7be:	4621      	mov	r1, r4
 23ed7c0:	a80b      	add	r0, sp, #44	; 0x2c
 23ed7c2:	940a      	str	r4, [sp, #40]	; 0x28
 23ed7c4:	f00b faad 	bl	23f8d22 <memset>
        if (strlen(config_ptr->spectral_power_edges) > sizeof(spectral_str) - 1) {
 23ed7c8:	6b31      	ldr	r1, [r6, #48]	; 0x30
 23ed7ca:	4608      	mov	r0, r1
 23ed7cc:	9105      	str	r1, [sp, #20]
 23ed7ce:	f7fa feb3 	bl	23e8538 <strlen>
 23ed7d2:	287f      	cmp	r0, #127	; 0x7f
 23ed7d4:	4602      	mov	r2, r0
 23ed7d6:	d865      	bhi.n	23ed8a4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13c>
        memcpy(
 23ed7d8:	9905      	ldr	r1, [sp, #20]
 23ed7da:	a80a      	add	r0, sp, #40	; 0x28
 23ed7dc:	f00b fa7a 	bl	23f8cd4 <memcpy>
        char *spectral_ptr = spectral_str;
 23ed7e0:	ad0a      	add	r5, sp, #40	; 0x28
        size_t edge_matrix_ix = 0;
 23ed7e2:	462b      	mov	r3, r5
            while ((*spectral_ptr) == ' ') {
 23ed7e4:	781a      	ldrb	r2, [r3, #0]
 23ed7e6:	461d      	mov	r5, r3
 23ed7e8:	2a20      	cmp	r2, #32
                spectral_ptr++;
 23ed7ea:	f103 0301 	add.w	r3, r3, #1
            while ((*spectral_ptr) == ' ') {
 23ed7ee:	d0f9      	beq.n	23ed7e4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7c>
            edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
 23ed7f0:	4628      	mov	r0, r5
 23ed7f2:	f00b fa5b 	bl	23f8cac <atof>
 23ed7f6:	9b06      	ldr	r3, [sp, #24]
 23ed7f8:	ec51 0b10 	vmov	r0, r1, d0
 23ed7fc:	3401      	adds	r4, #1
 23ed7fe:	eb03 0a84 	add.w	sl, r3, r4, lsl #2
 23ed802:	f7fa fc41 	bl	23e8088 <__aeabi_d2f>
 23ed806:	f84a 0c04 	str.w	r0, [sl, #-4]
            while ((*spectral_ptr != ',')) {
 23ed80a:	782b      	ldrb	r3, [r5, #0]
                if (*spectral_ptr == '\0')
 23ed80c:	f815 af01 	ldrb.w	sl, [r5, #1]!
            while ((*spectral_ptr != ',')) {
 23ed810:	2b2c      	cmp	r3, #44	; 0x2c
 23ed812:	d0e6      	beq.n	23ed7e2 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7a>
                if (*spectral_ptr == '\0')
 23ed814:	f1ba 0f00 	cmp.w	sl, #0
 23ed818:	d1f7      	bne.n	23ed80a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xa2>
        count += (peaks_count * 2);
 23ed81a:	6ab5      	ldr	r5, [r6, #40]	; 0x28
        edges_matrix_in.rows = edge_matrix_ix;
 23ed81c:	9407      	str	r4, [sp, #28]
        count += (peaks_count * 2);
 23ed81e:	006d      	lsls	r5, r5, #1
        if (spectral_edges_count > 0) {
 23ed820:	b90c      	cbnz	r4, 23ed826 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xbe>
        count += (peaks_count * 2);
 23ed822:	3501      	adds	r5, #1
 23ed824:	e000      	b.n	23ed828 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc0>
            count += (spectral_edges_count - 1);
 23ed826:	4425      	add	r5, r4
        if (output_matrix->cols * output_matrix->rows !=
 23ed828:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
 23ed82c:	435a      	muls	r2, r3
            static_cast<uint32_t>(output_matrix_cols * config_ptr->axes)) {
 23ed82e:	68b3      	ldr	r3, [r6, #8]
 23ed830:	436b      	muls	r3, r5
        if (output_matrix->cols * output_matrix->rows !=
 23ed832:	429a      	cmp	r2, r3
 23ed834:	d138      	bne.n	23ed8a8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x140>
        output_matrix->cols = output_matrix_cols;
 23ed836:	60bd      	str	r5, [r7, #8]
        output_matrix->rows = config_ptr->axes;
 23ed838:	68b3      	ldr	r3, [r6, #8]
        if (strcmp(config_ptr->filter_type, "low") == 0) {
 23ed83a:	491e      	ldr	r1, [pc, #120]	; (23ed8b4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x14c>)
        output_matrix->rows = config_ptr->axes;
 23ed83c:	607b      	str	r3, [r7, #4]
        if (strcmp(config_ptr->filter_type, "low") == 0) {
 23ed83e:	6974      	ldr	r4, [r6, #20]
 23ed840:	4620      	mov	r0, r4
 23ed842:	f7fa fe6f 	bl	23e8524 <strcmp>
 23ed846:	b320      	cbz	r0, 23ed892 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x12a>
        else if (strcmp(config_ptr->filter_type, "high") == 0) {
 23ed848:	4620      	mov	r0, r4
 23ed84a:	491b      	ldr	r1, [pc, #108]	; (23ed8b8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x150>)
 23ed84c:	f7fa fe6a 	bl	23e8524 <strcmp>
            filter_type = spectral::filter_highpass;
 23ed850:	2800      	cmp	r0, #0
 23ed852:	bf08      	it	eq
 23ed854:	f04f 0a02 	moveq.w	sl, #2
        ret = spectral::feature::spectral_analysis(
 23ed858:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 23ed85c:	ed96 1a0b 	vldr	s2, [r6, #44]	; 0x2c
 23ed860:	9301      	str	r3, [sp, #4]
 23ed862:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
 23ed864:	edd6 0a06 	vldr	s1, [r6, #24]
 23ed868:	9300      	str	r3, [sp, #0]
 23ed86a:	4652      	mov	r2, sl
 23ed86c:	eeb0 0a48 	vmov.f32	s0, s16
 23ed870:	4641      	mov	r1, r8
 23ed872:	4638      	mov	r0, r7
 23ed874:	7f33      	ldrb	r3, [r6, #28]
 23ed876:	f8cd 9008 	str.w	r9, [sp, #8]
 23ed87a:	f7ff fcf7 	bl	23ed26c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
        if (ret != EIDSP_OK) {
 23ed87e:	4604      	mov	r4, r0
 23ed880:	b150      	cbz	r0, 23ed898 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x130>
            ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
 23ed882:	4601      	mov	r1, r0
 23ed884:	480d      	ldr	r0, [pc, #52]	; (23ed8bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x154>)
 23ed886:	f002 fbd9 	bl	23f003c <_Z9ei_printfPKcz>
        matrix_t edges_matrix_in(64, 1);
 23ed88a:	4648      	mov	r0, r9
 23ed88c:	f7fd fc40 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
 23ed890:	e77e      	b.n	23ed790 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x28>
            filter_type = spectral::filter_lowpass;
 23ed892:	f04f 0a01 	mov.w	sl, #1
 23ed896:	e7df      	b.n	23ed858 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xf0>
        output_matrix->cols = config_ptr->axes * output_matrix_cols;
 23ed898:	68b3      	ldr	r3, [r6, #8]
 23ed89a:	435d      	muls	r5, r3
        output_matrix->rows = 1;
 23ed89c:	2301      	movs	r3, #1
        output_matrix->cols = config_ptr->axes * output_matrix_cols;
 23ed89e:	60bd      	str	r5, [r7, #8]
        output_matrix->rows = 1;
 23ed8a0:	607b      	str	r3, [r7, #4]
        return EIDSP_OK;
 23ed8a2:	e7f2      	b.n	23ed88a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x122>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 23ed8a4:	4c06      	ldr	r4, [pc, #24]	; (23ed8c0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x158>)
 23ed8a6:	e7f0      	b.n	23ed88a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x122>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 23ed8a8:	4c06      	ldr	r4, [pc, #24]	; (23ed8c4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x15c>)
 23ed8aa:	e7ee      	b.n	23ed88a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x122>
 23ed8ac:	023fb382 	.word	0x023fb382
 23ed8b0:	023fb3a4 	.word	0x023fb3a4
 23ed8b4:	023fb3ca 	.word	0x023fb3ca
 23ed8b8:	023fb3ce 	.word	0x023fb3ce
 23ed8bc:	023fb3d3 	.word	0x023fb3d3
 23ed8c0:	fffffc10 	.word	0xfffffc10
 23ed8c4:	fffffc14 	.word	0xfffffc14

023ed8c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23ed8c8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23ed8ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ed8cc:	4604      	mov	r4, r0
 23ed8ce:	460d      	mov	r5, r1
 23ed8d0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23ed8d2:	d916      	bls.n	23ed902 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23ed8d4:	4290      	cmp	r0, r2
 23ed8d6:	d215      	bcs.n	23ed904 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23ed8d8:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23ed8dc:	1a75      	subs	r5, r6, r1
 23ed8de:	f1a1 0714 	sub.w	r7, r1, #20
 23ed8e2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23ed8e4:	42b7      	cmp	r7, r6
 23ed8e6:	d01c      	beq.n	23ed922 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23ed8e8:	b12c      	cbz	r4, 23ed8f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23ed8ea:	4631      	mov	r1, r6
 23ed8ec:	4620      	mov	r0, r4
 23ed8ee:	f008 fdc1 	bl	23f6474 <_ZN6StringC1EOS_>
 23ed8f2:	7c33      	ldrb	r3, [r6, #16]
 23ed8f4:	7423      	strb	r3, [r4, #16]
 23ed8f6:	4630      	mov	r0, r6
 23ed8f8:	f008 fd53 	bl	23f63a2 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23ed8fc:	3e14      	subs	r6, #20
 23ed8fe:	3c14      	subs	r4, #20
 23ed900:	e7f0      	b.n	23ed8e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23ed902:	d00e      	beq.n	23ed922 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23ed904:	42b5      	cmp	r5, r6
 23ed906:	d00c      	beq.n	23ed922 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23ed908:	b12c      	cbz	r4, 23ed916 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23ed90a:	4629      	mov	r1, r5
 23ed90c:	4620      	mov	r0, r4
 23ed90e:	f008 fdb1 	bl	23f6474 <_ZN6StringC1EOS_>
 23ed912:	7c2b      	ldrb	r3, [r5, #16]
 23ed914:	7423      	strb	r3, [r4, #16]
 23ed916:	4628      	mov	r0, r5
 23ed918:	f008 fd43 	bl	23f63a2 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23ed91c:	3514      	adds	r5, #20
 23ed91e:	3414      	adds	r4, #20
 23ed920:	e7f0      	b.n	23ed904 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23ed922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ed924 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23ed924:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23ed926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23ed92a:	e9c0 3300 	strd	r3, r3, [r0]
 23ed92e:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23ed930:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23ed932:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23ed934:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23ed936:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23ed938:	dd24      	ble.n	23ed984 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23ed93a:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23ed93e:	fb08 f007 	mul.w	r0, r8, r7
 23ed942:	f006 fefb 	bl	23f473c <malloc>
            if (!d) {
 23ed946:	4605      	mov	r5, r0
 23ed948:	b1e0      	cbz	r0, 23ed984 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23ed94a:	e9d4 1200 	ldrd	r1, r2, [r4]
 23ed94e:	fb08 1202 	mla	r2, r8, r2, r1
 23ed952:	f7ff ffb9 	bl	23ed8c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23ed956:	6820      	ldr	r0, [r4, #0]
 23ed958:	f006 fefe 	bl	23f4758 <free>
        data_ = d;
 23ed95c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23ed95e:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23ed960:	e9d6 7300 	ldrd	r7, r3, [r6]
 23ed964:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23ed968:	45b8      	cmp	r8, r7
 23ed96a:	d009      	beq.n	23ed980 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23ed96c:	4639      	mov	r1, r7
 23ed96e:	4628      	mov	r0, r5
 23ed970:	f008 fd9a 	bl	23f64a8 <_ZN6StringC1ERKS_>
 23ed974:	7c3b      	ldrb	r3, [r7, #16]
 23ed976:	3514      	adds	r5, #20
 23ed978:	f805 3c04 	strb.w	r3, [r5, #-4]
 23ed97c:	3714      	adds	r7, #20
 23ed97e:	e7f3      	b.n	23ed968 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23ed980:	6873      	ldr	r3, [r6, #4]
 23ed982:	6063      	str	r3, [r4, #4]
}
 23ed984:	4620      	mov	r0, r4
 23ed986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023ed98a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 23ed98a:	b538      	push	{r3, r4, r5, lr}
 23ed98c:	4605      	mov	r5, r0
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23ed98e:	460c      	mov	r4, r1
 23ed990:	4608      	mov	r0, r1
 23ed992:	b109      	cbz	r1, 23ed998 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj+0xe>
 23ed994:	f7fc ff06 	bl	23ea7a4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj.part.0>
	this->_M_impl._M_finish = this->_M_impl._M_start;
 23ed998:	e9c5 0000 	strd	r0, r0, [r5]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 23ed99c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 23ed9a0:	60a8      	str	r0, [r5, #8]
      }
 23ed9a2:	bd38      	pop	{r3, r4, r5, pc}

023ed9a4 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>:
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 23ed9a4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
      vector(size_type __n, const allocator_type& __a = allocator_type())
 23ed9a8:	b538      	push	{r3, r4, r5, lr}
 23ed9aa:	4604      	mov	r4, r0
 23ed9ac:	460d      	mov	r5, r1
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 23ed9ae:	d302      	bcc.n	23ed9b6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_+0x12>
	  __throw_length_error(
 23ed9b0:	480a      	ldr	r0, [pc, #40]	; (23ed9dc <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_+0x38>)
 23ed9b2:	f009 f8c9 	bl	23f6b48 <_ZSt20__throw_length_errorPKc>
	: _M_start(), _M_finish(), _M_end_of_storage()
 23ed9b6:	2300      	movs	r3, #0
 23ed9b8:	e9c0 3300 	strd	r3, r3, [r0]
 23ed9bc:	6083      	str	r3, [r0, #8]
      { _M_create_storage(__n); }
 23ed9be:	f7ff ffe4 	bl	23ed98a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj>
 23ed9c2:	2200      	movs	r2, #0
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 23ed9c4:	6823      	ldr	r3, [r4, #0]
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 23ed9c6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
	  for (; __n > 0; --__n, (void) ++__cur)
 23ed9ca:	429d      	cmp	r5, r3
 23ed9cc:	d003      	beq.n	23ed9d6 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_+0x32>
 23ed9ce:	b103      	cbz	r3, 23ed9d2 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_+0x2e>
 23ed9d0:	601a      	str	r2, [r3, #0]
 23ed9d2:	3304      	adds	r3, #4
 23ed9d4:	e7f9      	b.n	23ed9ca <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_+0x26>
      { _M_default_initialize(__n); }
 23ed9d6:	4620      	mov	r0, r4
	this->_M_impl._M_finish =
 23ed9d8:	6065      	str	r5, [r4, #4]
      { _M_default_initialize(__n); }
 23ed9da:	bd38      	pop	{r3, r4, r5, pc}
 23ed9dc:	023fb1df 	.word	0x023fb1df

023ed9e0 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>:

    // can do in-place or out-of-place
    static size_t _decimate(matrix_t *input_matrix, matrix_t *output_matrix, size_t ratio)
 23ed9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ed9e4:	ed2d 8b02 	vpush	{d8}
        static float sos_zi_deci_10[] = { 1.38071060429997e-06f,   -1.146570262401316e-06f,
                                          0.00020862168862901534f, -0.0001782374705409433f,
                                          0.016663820918116152f,   -0.015002020730727955f,
                                          0.9773862470492868f,     -0.9420150059170858 };

        assert(ratio == 3 || ratio == 10);
 23ed9e8:	2a03      	cmp	r2, #3
    static size_t _decimate(matrix_t *input_matrix, matrix_t *output_matrix, size_t ratio)
 23ed9ea:	4607      	mov	r7, r0
 23ed9ec:	4689      	mov	r9, r1
 23ed9ee:	4615      	mov	r5, r2
 23ed9f0:	b093      	sub	sp, #76	; 0x4c
        assert(ratio == 3 || ratio == 10);
 23ed9f2:	d008      	beq.n	23eda06 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x26>
 23ed9f4:	2a0a      	cmp	r2, #10
 23ed9f6:	d040      	beq.n	23eda7a <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x9a>
 23ed9f8:	f240 212b 	movw	r1, #555	; 0x22b
 23ed9fc:	4b62      	ldr	r3, [pc, #392]	; (23edb88 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1a8>)
 23ed9fe:	4a63      	ldr	r2, [pc, #396]	; (23edb8c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1ac>)
 23eda00:	4863      	ldr	r0, [pc, #396]	; (23edb90 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1b0>)
            assert(num_sections > 0);
 23eda02:	f006 fefd 	bl	23f4800 <__assert_func>

        float* sos = ratio == 3 ? sos_deci_3 : sos_deci_10;
 23eda06:	4b63      	ldr	r3, [pc, #396]	; (23edb94 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1b4>)
        float* sos_zi = ratio == 3 ? sos_zi_deci_3 : sos_zi_deci_10;
 23eda08:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 23edbb0 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1d0>
        float* sos = ratio == 3 ? sos_deci_3 : sos_deci_10;
 23eda0c:	9303      	str	r3, [sp, #12]
        return (input_size + factor - 1) / factor;
 23eda0e:	68be      	ldr	r6, [r7, #8]

        const size_t out_size = signal::get_decimated_size(input_matrix->cols, ratio);

        for (size_t row = 0; row < input_matrix->rows; row++) {
 23eda10:	f04f 0800 	mov.w	r8, #0
 23eda14:	3e01      	subs	r6, #1
 23eda16:	442e      	add	r6, r5
 23eda18:	fbb6 f3f5 	udiv	r3, r6, r5
 23eda1c:	ee08 3a10 	vmov	s16, r3
 23eda20:	00ab      	lsls	r3, r5, #2
 23eda22:	9305      	str	r3, [sp, #20]
              num_sections(num_sections_)
 23eda24:	f10b 0320 	add.w	r3, fp, #32
 23eda28:	9306      	str	r3, [sp, #24]
 23eda2a:	687b      	ldr	r3, [r7, #4]
 23eda2c:	4543      	cmp	r3, r8
 23eda2e:	f240 80a4 	bls.w	23edb7a <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x19a>
        return buffer + row * cols;
 23eda32:	68bb      	ldr	r3, [r7, #8]
 23eda34:	683a      	ldr	r2, [r7, #0]
 23eda36:	fb03 f308 	mul.w	r3, r3, r8
 23eda3a:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 23eda3e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 23eda42:	2008      	movs	r0, #8
 23eda44:	fb03 f308 	mul.w	r3, r3, r8
 23eda48:	9302      	str	r3, [sp, #8]
 23eda4a:	9b03      	ldr	r3, [sp, #12]
 23eda4c:	f8d9 6000 	ldr.w	r6, [r9]
 23eda50:	930c      	str	r3, [sp, #48]	; 0x30
	: _M_start(), _M_finish(), _M_end_of_storage()
 23eda52:	2300      	movs	r3, #0
 23eda54:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 23eda58:	9310      	str	r3, [sp, #64]	; 0x40
      _M_allocate(size_t __n)
 23eda5a:	f7fc fea3 	bl	23ea7a4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj.part.0>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 23eda5e:	465b      	mov	r3, fp
 23eda60:	f100 0220 	add.w	r2, r0, #32
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 23eda64:	900e      	str	r0, [sp, #56]	; 0x38
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 23eda66:	9210      	str	r2, [sp, #64]	; 0x40
	  for (; __first != __last; ++__first, (void)++__cur)
 23eda68:	9906      	ldr	r1, [sp, #24]
 23eda6a:	4299      	cmp	r1, r3
 23eda6c:	d00a      	beq.n	23eda84 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xa4>
 23eda6e:	b108      	cbz	r0, 23eda74 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x94>
 23eda70:	6819      	ldr	r1, [r3, #0]
 23eda72:	6001      	str	r1, [r0, #0]
 23eda74:	3304      	adds	r3, #4
 23eda76:	3004      	adds	r0, #4
 23eda78:	e7f6      	b.n	23eda68 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x88>
        float* sos = ratio == 3 ? sos_deci_3 : sos_deci_10;
 23eda7a:	4b47      	ldr	r3, [pc, #284]	; (23edb98 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1b8>)
        float* sos_zi = ratio == 3 ? sos_zi_deci_3 : sos_zi_deci_10;
 23eda7c:	f8df b134 	ldr.w	fp, [pc, #308]	; 23edbb4 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1d4>
        float* sos = ratio == 3 ? sos_deci_3 : sos_deci_10;
 23eda80:	9303      	str	r3, [sp, #12]
 23eda82:	e7c4      	b.n	23eda0e <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x2e>
 23eda84:	2304      	movs	r3, #4
 23eda86:	9311      	str	r3, [sp, #68]	; 0x44
            zi = zi_vec.data();
 23eda88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	  this->_M_impl._M_finish =
 23eda8a:	920f      	str	r2, [sp, #60]	; 0x3c
 23eda8c:	930d      	str	r3, [sp, #52]	; 0x34
            signal::sosfilt sosfilt(sos, sos_zi, 4);
            signal::decimate_simple(
                x,
                input_matrix->cols,
                y,
                output_matrix->cols,
 23eda8e:	f8d9 3008 	ldr.w	r3, [r9, #8]
        sos.init(input[0]);
 23eda92:	ed9a 7a00 	vldr	s14, [sl]
 23eda96:	9304      	str	r3, [sp, #16]
            for (size_t sect = 0; sect < num_sections; sect++) {
 23eda98:	2300      	movs	r3, #0
                input_matrix->cols,
 23eda9a:	68bc      	ldr	r4, [r7, #8]
                zi[sect * 2] *= x0;
 23eda9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 23eda9e:	00da      	lsls	r2, r3, #3
 23edaa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 23edaa4:	edd1 7a00 	vldr	s15, [r1]
 23edaa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 23edaac:	edc1 7a00 	vstr	s15, [r1]
                zi[sect * 2 + 1] *= x0;
 23edab0:	1d11      	adds	r1, r2, #4
 23edab2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
            for (size_t sect = 0; sect < num_sections; sect++) {
 23edab4:	3301      	adds	r3, #1
                zi[sect * 2 + 1] *= x0;
 23edab6:	440a      	add	r2, r1
 23edab8:	edd2 7a00 	vldr	s15, [r2]
 23edabc:	ee67 7a87 	vmul.f32	s15, s15, s14
 23edac0:	edc2 7a00 	vstr	s15, [r2]
            for (size_t sect = 0; sect < num_sections; sect++) {
 23edac4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 23edac6:	429a      	cmp	r2, r3
 23edac8:	d8e8      	bhi.n	23eda9c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0xbc>
        fvec filtered(input_size);
 23edaca:	4621      	mov	r1, r4
 23edacc:	aa08      	add	r2, sp, #32
 23edace:	a809      	add	r0, sp, #36	; 0x24
 23edad0:	f7ff ff68 	bl	23ed9a4 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>
            assert(num_sections > 0);
 23edad4:	9b11      	ldr	r3, [sp, #68]	; 0x44
      { return _M_data_ptr(this->_M_impl._M_start); }
 23edad6:	9909      	ldr	r1, [sp, #36]	; 0x24
 23edad8:	b923      	cbnz	r3, 23edae4 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x104>
 23edada:	216e      	movs	r1, #110	; 0x6e
 23edadc:	4b2f      	ldr	r3, [pc, #188]	; (23edb9c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1bc>)
 23edade:	4a30      	ldr	r2, [pc, #192]	; (23edba0 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1c0>)
 23edae0:	4830      	ldr	r0, [pc, #192]	; (23edba4 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1c4>)
 23edae2:	e78e      	b.n	23eda02 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x22>
            iir2(input, output, size, coeff, coeff + 3, zi);
 23edae4:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
 23edae8:	9201      	str	r2, [sp, #4]
 23edaea:	f103 020c 	add.w	r2, r3, #12
 23edaee:	4650      	mov	r0, sl
 23edaf0:	9200      	str	r2, [sp, #0]
 23edaf2:	4622      	mov	r2, r4
 23edaf4:	9107      	str	r1, [sp, #28]
            for (size_t sect = 1; sect < num_sections; sect++) {
 23edaf6:	f04f 0a01 	mov.w	sl, #1
            iir2(input, output, size, coeff, coeff + 3, zi);
 23edafa:	f7fe f983 	bl	23ebe04 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>
            for (size_t sect = 1; sect < num_sections; sect++) {
 23edafe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 23edb00:	9907      	ldr	r1, [sp, #28]
 23edb02:	4553      	cmp	r3, sl
 23edb04:	d914      	bls.n	23edb30 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x150>
                iir2(
 23edb06:	2318      	movs	r3, #24
 23edb08:	fb03 f30a 	mul.w	r3, r3, sl
 23edb0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
                    coeff + sect * 6,
 23edb0e:	980c      	ldr	r0, [sp, #48]	; 0x30
                iir2(
 23edb10:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 23edb14:	9201      	str	r2, [sp, #4]
                    coeff + sect * 6 + 3,
 23edb16:	f103 020c 	add.w	r2, r3, #12
                iir2(
 23edb1a:	4402      	add	r2, r0
 23edb1c:	9200      	str	r2, [sp, #0]
 23edb1e:	4403      	add	r3, r0
 23edb20:	4622      	mov	r2, r4
 23edb22:	4608      	mov	r0, r1
 23edb24:	9107      	str	r1, [sp, #28]
            for (size_t sect = 1; sect < num_sections; sect++) {
 23edb26:	f10a 0a01 	add.w	sl, sl, #1
                iir2(
 23edb2a:	f7fe f96b 	bl	23ebe04 <_ZN2ei6signal4iir2EPKfPfjS2_S2_S3_>
            for (size_t sect = 1; sect < num_sections; sect++) {
 23edb2e:	e7e6      	b.n	23edafe <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x11e>
        return (input_size + factor - 1) / factor;
 23edb30:	3c01      	subs	r4, #1
 23edb32:	442c      	add	r4, r5
 23edb34:	fbb4 f4f5 	udiv	r4, r4, r5
        assert(output_size >= expected_size);
 23edb38:	9b04      	ldr	r3, [sp, #16]
 23edb3a:	42a3      	cmp	r3, r4
 23edb3c:	d310      	bcc.n	23edb60 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x180>
 23edb3e:	9b02      	ldr	r3, [sp, #8]
 23edb40:	441c      	add	r4, r3
 23edb42:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 23edb46:	2300      	movs	r3, #0
 23edb48:	eb06 0484 	add.w	r4, r6, r4, lsl #2
        for (size_t ix = 0; ix < expected_size; ix++) {
 23edb4c:	42a2      	cmp	r2, r4
 23edb4e:	d00b      	beq.n	23edb68 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x188>
            output[ix] = filtered[ix * factor];
 23edb50:	9909      	ldr	r1, [sp, #36]	; 0x24
 23edb52:	4419      	add	r1, r3
 23edb54:	6809      	ldr	r1, [r1, #0]
 23edb56:	f842 1b04 	str.w	r1, [r2], #4
        for (size_t ix = 0; ix < expected_size; ix++) {
 23edb5a:	9905      	ldr	r1, [sp, #20]
 23edb5c:	440b      	add	r3, r1
 23edb5e:	e7f5      	b.n	23edb4c <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x16c>
        assert(output_size >= expected_size);
 23edb60:	219c      	movs	r1, #156	; 0x9c
 23edb62:	4b11      	ldr	r3, [pc, #68]	; (23edba8 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1c8>)
 23edb64:	4a11      	ldr	r2, [pc, #68]	; (23edbac <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x1cc>)
 23edb66:	e7bb      	b.n	23edae0 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x100>
      }
 23edb68:	a809      	add	r0, sp, #36	; 0x24
 23edb6a:	f7fe fd5d 	bl	23ec628 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
 23edb6e:	a80e      	add	r0, sp, #56	; 0x38
 23edb70:	f7fe fd5a 	bl	23ec628 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23edb74:	f108 0801 	add.w	r8, r8, #1
 23edb78:	e757      	b.n	23eda2a <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j+0x4a>
                ratio,
                sosfilt);
        }

        return out_size;
    }
 23edb7a:	ee18 0a10 	vmov	r0, s16
 23edb7e:	b013      	add	sp, #76	; 0x4c
 23edb80:	ecbd 8b02 	vpop	{d8}
 23edb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23edb88:	023fb404 	.word	0x023fb404
 23edb8c:	023fb41e 	.word	0x023fb41e
 23edb90:	023fb252 	.word	0x023fb252
 23edb94:	1007a3c8 	.word	0x1007a3c8
 23edb98:	1007a348 	.word	0x1007a348
 23edb9c:	023fb473 	.word	0x023fb473
 23edba0:	023fb484 	.word	0x023fb484
 23edba4:	023fb4c0 	.word	0x023fb4c0
 23edba8:	023fb533 	.word	0x023fb533
 23edbac:	023fb550 	.word	0x023fb550
 23edbb0:	1007a3a8 	.word	0x1007a3a8
 23edbb4:	1007a328 	.word	0x1007a328

023edbb8 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>:
    static size_t extract_spec_features(
 23edbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23edbbc:	ed2d 8b06 	vpush	{d8-d10}
 23edbc0:	b09d      	sub	sp, #116	; 0x74
 23edbc2:	461c      	mov	r4, r3
 23edbc4:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 23edbc8:	4607      	mov	r7, r0
 23edbca:	468a      	mov	sl, r1
 23edbcc:	4615      	mov	r5, r2
 23edbce:	eeb0 8a40 	vmov.f32	s16, s0
 23edbd2:	2600      	movs	r6, #0
        if (transpose_and_scale_input) {
 23edbd4:	b173      	cbz	r3, 23edbf4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3c>
            numpy::transpose_in_place(input_matrix);
 23edbd6:	f7fd fab3 	bl	23eb140 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>
            EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 23edbda:	ed95 0a03 	vldr	s0, [r5, #12]
 23edbde:	4638      	mov	r0, r7
 23edbe0:	f7fd fb4e 	bl	23eb280 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 23edbe4:	b130      	cbz	r0, 23edbf4 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3c>
            EI_TRY(processing::subtract_mean(input_matrix));
 23edbe6:	4681      	mov	r9, r0
    }
 23edbe8:	4648      	mov	r0, r9
 23edbea:	b01d      	add	sp, #116	; 0x74
 23edbec:	ecbd 8b06 	vpop	{d8-d10}
 23edbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (strcmp(config->filter_type, "low") == 0) {
 23edbf4:	f8d5 8014 	ldr.w	r8, [r5, #20]
 23edbf8:	499a      	ldr	r1, [pc, #616]	; (23ede64 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2ac>)
 23edbfa:	4640      	mov	r0, r8
 23edbfc:	f7fa fc92 	bl	23e8524 <strcmp>
 23edc00:	b968      	cbnz	r0, 23edc1e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x66>
            if( config->filter_order ) {
 23edc02:	69e9      	ldr	r1, [r5, #28]
 23edc04:	b149      	cbz	r1, 23edc1a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x62>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 23edc06:	edd5 0a06 	vldr	s1, [r5, #24]
 23edc0a:	eeb0 0a48 	vmov.f32	s0, s16
 23edc0e:	4638      	mov	r0, r7
 23edc10:	b2c9      	uxtb	r1, r1
 23edc12:	f7fc fbcd 	bl	23ea3b0 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 23edc16:	2800      	cmp	r0, #0
 23edc18:	d1e5      	bne.n	23edbe6 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2e>
            is_high_pass = false;
 23edc1a:	2600      	movs	r6, #0
 23edc1c:	e009      	b.n	23edc32 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x7a>
        else if (strcmp(config->filter_type, "high") == 0) {
 23edc1e:	4640      	mov	r0, r8
 23edc20:	4991      	ldr	r1, [pc, #580]	; (23ede68 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2b0>)
 23edc22:	f7fa fc7f 	bl	23e8524 <strcmp>
 23edc26:	2800      	cmp	r0, #0
 23edc28:	f040 812a 	bne.w	23ede80 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2c8>
            if( config->filter_order ) {
 23edc2c:	69e9      	ldr	r1, [r5, #28]
 23edc2e:	b921      	cbnz	r1, 23edc3a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x82>
            is_high_pass = true;
 23edc30:	2601      	movs	r6, #1
        if (remove_mean){
 23edc32:	2c00      	cmp	r4, #0
 23edc34:	f040 8128 	bne.w	23ede88 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2d0>
 23edc38:	e12f      	b.n	23ede9a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2e2>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 23edc3a:	edd5 0a06 	vldr	s1, [r5, #24]
 23edc3e:	eeb0 0a48 	vmov.f32	s0, s16
 23edc42:	4638      	mov	r0, r7
 23edc44:	b2c9      	uxtb	r1, r1
 23edc46:	f7fd f887 	bl	23ead58 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 23edc4a:	2800      	cmp	r0, #0
 23edc4c:	d0f0      	beq.n	23edc30 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x78>
 23edc4e:	e7ca      	b.n	23edbe6 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2e>
            *stop_bin = static_cast<size_t>(bin + 0.5) + 1; // go one past
 23edc50:	f7f9 fd6c 	bl	23e772c <__adddf3>
 23edc54:	f7fa f9f8 	bl	23e8048 <__aeabi_d2uiz>
 23edc58:	1c44      	adds	r4, r0, #1
            start_bin = 1;
 23edc5a:	f04f 0801 	mov.w	r8, #1
 23edc5e:	e147      	b.n	23edef0 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x338>
            stop_bin = config->fft_length / 2 + 1;
 23edc60:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 23edc62:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 23edc66:	1064      	asrs	r4, r4, #1
 23edc68:	3401      	adds	r4, #1
 23edc6a:	e7f6      	b.n	23edc5a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xa2>
            float stddev = *(feature_out-1); //= sqrt(numpy::variance(data_window, data_size));
 23edc6c:	edd6 7a00 	vldr	s15, [r6]
            if (stddev == 0.0f) {
 23edc70:	eef5 7a40 	vcmp.f32	s15, #0.0
            float k_sum = 0;
 23edc74:	eddf 6a7d 	vldr	s13, [pc, #500]	; 23ede6c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2b4>
            if (stddev == 0.0f) {
 23edc78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23edc7c:	464b      	mov	r3, r9
            float s_sum = 0;
 23edc7e:	eef0 5a66 	vmov.f32	s11, s13
                stddev = 1e-10f;
 23edc82:	fe48 7a27 	vseleq.f32	s15, s16, s15
            for (size_t i = 0; i < data_size; i++) {
 23edc86:	44ca      	add	sl, r9
 23edc88:	459a      	cmp	sl, r3
 23edc8a:	d00a      	beq.n	23edca2 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xea>
                temp = data_window[i] * data_window[i] * data_window[i];
 23edc8c:	ecb3 6a01 	vldmia	r3!, {s12}
 23edc90:	ee26 7a06 	vmul.f32	s14, s12, s12
 23edc94:	ee27 7a06 	vmul.f32	s14, s14, s12
                s_sum += temp;
 23edc98:	ee75 5a87 	vadd.f32	s11, s11, s14
                k_sum += temp * data_window[i];
 23edc9c:	eee6 6a07 	vfma.f32	s13, s12, s14
            for (size_t i = 0; i < data_size; i++) {
 23edca0:	e7f2      	b.n	23edc88 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xd0>
            *feature_out++ = (s_sum / data_size) / temp;
 23edca2:	ee06 ba10 	vmov	s12, fp
            temp = stddev * stddev * stddev;
 23edca6:	ee27 7aa7 	vmul.f32	s14, s15, s15
            *feature_out++ = (s_sum / data_size) / temp;
 23edcaa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
            temp = stddev * stddev * stddev;
 23edcae:	ee27 7a27 	vmul.f32	s14, s14, s15
            *feature_out++ = (s_sum / data_size) / temp;
 23edcb2:	ee85 5a86 	vdiv.f32	s10, s11, s12
 23edcb6:	eec5 5a07 	vdiv.f32	s11, s10, s14
            *feature_out++ = ((k_sum / data_size) / (temp * stddev)) - 3;
 23edcba:	ee67 7a87 	vmul.f32	s15, s15, s14
            *feature_out++ = (s_sum / data_size) / temp;
 23edcbe:	edc6 5a01 	vstr	s11, [r6, #4]
            *feature_out++ = ((k_sum / data_size) / (temp * stddev)) - 3;
 23edcc2:	eec6 5a86 	vdiv.f32	s11, s13, s12
 23edcc6:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 23edcca:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 23edcce:	ee77 7a67 	vsub.f32	s15, s14, s15
 23edcd2:	edc6 7a02 	vstr	s15, [r6, #8]
            if (config->implementation_version == 4) {
 23edcd6:	88ab      	ldrh	r3, [r5, #4]
 23edcd8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 23edcda:	2b04      	cmp	r3, #4
            *feature_out++ = ((k_sum / data_size) / (temp * stddev)) - 3;
 23edcdc:	f106 0a0c 	add.w	sl, r6, #12
            if (config->implementation_version == 4) {
 23edce0:	f040 809c 	bne.w	23ede1c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x264>
                size_t fft_out_size = config->fft_length / 2 + 1;
 23edce4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 23edce8:	ea4f 0a61 	mov.w	sl, r1, asr #1
 23edcec:	f10a 0a01 	add.w	sl, sl, #1
                ei_vector<float> fft_out(fft_out_size);
 23edcf0:	4651      	mov	r1, sl
 23edcf2:	aa18      	add	r2, sp, #96	; 0x60
 23edcf4:	a809      	add	r0, sp, #36	; 0x24
 23edcf6:	f7ff fe55 	bl	23ed9a4 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>
                EI_TRY(numpy::welch_max_hold(
 23edcfa:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 23edcfe:	4648      	mov	r0, r9
 23edd00:	9302      	str	r3, [sp, #8]
 23edd02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 23edd04:	4659      	mov	r1, fp
 23edd06:	e9cd a300 	strd	sl, r3, [sp]
 23edd0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23edd0c:	2300      	movs	r3, #0
 23edd0e:	f7fe fadb 	bl	23ec2c8 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 23edd12:	4681      	mov	r9, r0
 23edd14:	b148      	cbz	r0, 23edd2a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x172>
 23edd16:	a809      	add	r0, sp, #36	; 0x24
 23edd18:	f7fe fc86 	bl	23ec628 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
            EI_TRY(numpy::rms(&rms_in_matrix, &rms_out_matrix));
 23edd1c:	a810      	add	r0, sp, #64	; 0x40
 23edd1e:	f7fd f9f7 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
 23edd22:	a80c      	add	r0, sp, #48	; 0x30
 23edd24:	f7fd f9f4 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
 23edd28:	e75e      	b.n	23edbe8 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x30>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23edd2a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 23edd2e:	1ad2      	subs	r2, r2, r3
                matrix_t x(1, fft_out.size(), const_cast<float *>(fft_out.data()));
 23edd30:	2101      	movs	r1, #1
 23edd32:	1092      	asrs	r2, r2, #2
 23edd34:	a814      	add	r0, sp, #80	; 0x50
 23edd36:	f7fd f9d6 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
                matrix_t out(1, 1);
 23edd3a:	2201      	movs	r2, #1
 23edd3c:	464b      	mov	r3, r9
 23edd3e:	4611      	mov	r1, r2
 23edd40:	a818      	add	r0, sp, #96	; 0x60
 23edd42:	f7fd f9d0 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
                *feature_out++ = (numpy::skew(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
 23edd46:	a918      	add	r1, sp, #96	; 0x60
 23edd48:	a814      	add	r0, sp, #80	; 0x50
 23edd4a:	f7fd fd13 	bl	23eb774 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
 23edd4e:	b9c0      	cbnz	r0, 23edd82 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1ca>
 23edd50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23edd52:	681b      	ldr	r3, [r3, #0]
 23edd54:	60f3      	str	r3, [r6, #12]
                *feature_out++ = (numpy::kurtosis(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
 23edd56:	a918      	add	r1, sp, #96	; 0x60
 23edd58:	a814      	add	r0, sp, #80	; 0x50
 23edd5a:	f7fd fdab 	bl	23eb8b4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
 23edd5e:	b990      	cbnz	r0, 23edd86 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1ce>
 23edd60:	9b18      	ldr	r3, [sp, #96]	; 0x60
 23edd62:	681b      	ldr	r3, [r3, #0]
 23edd64:	f106 0a14 	add.w	sl, r6, #20
 23edd68:	6133      	str	r3, [r6, #16]
                for (size_t i = start_bin; i < stop_bin; i++) {
 23edd6a:	4651      	mov	r1, sl
 23edd6c:	4643      	mov	r3, r8
 23edd6e:	42a3      	cmp	r3, r4
 23edd70:	d20b      	bcs.n	23edd8a <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1d2>
                    feature_out[i - start_bin] = fft_out[i];
 23edd72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23edd74:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 23edd78:	6812      	ldr	r2, [r2, #0]
                for (size_t i = start_bin; i < stop_bin; i++) {
 23edd7a:	3301      	adds	r3, #1
                    feature_out[i - start_bin] = fft_out[i];
 23edd7c:	f841 2b04 	str.w	r2, [r1], #4
                for (size_t i = start_bin; i < stop_bin; i++) {
 23edd80:	e7f5      	b.n	23edd6e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1b6>
                *feature_out++ = (numpy::skew(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
 23edd82:	2300      	movs	r3, #0
 23edd84:	e7e6      	b.n	23edd54 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x19c>
                *feature_out++ = (numpy::kurtosis(&x, &out) == EIDSP_OK) ? (out.get_row_ptr(0)[0]) : 0.0f;
 23edd86:	2300      	movs	r3, #0
 23edd88:	e7ec      	b.n	23edd64 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1ac>
                matrix_t out(1, 1);
 23edd8a:	a818      	add	r0, sp, #96	; 0x60
 23edd8c:	f7fd f9c0 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
                matrix_t x(1, fft_out.size(), const_cast<float *>(fft_out.data()));
 23edd90:	a814      	add	r0, sp, #80	; 0x50
 23edd92:	f7fd f9bd 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
      }
 23edd96:	a809      	add	r0, sp, #36	; 0x24
 23edd98:	f7fe fc46 	bl	23ec628 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
            if (config->do_log) {
 23edd9c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 23edda0:	2b00      	cmp	r3, #0
 23edda2:	d04c      	beq.n	23ede3e <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x286>
                numpy::zero_handling(feature_out, num_bins);
 23edda4:	ee1a 1a10 	vmov	r1, s20
 23edda8:	4650      	mov	r0, sl
 23eddaa:	f7fd fe57 	bl	23eba5c <_ZN2ei5numpy13zero_handlingEPfj>
                ei_matrix temp(num_bins, 1, feature_out);
 23eddae:	4653      	mov	r3, sl
 23eddb0:	2201      	movs	r2, #1
 23eddb2:	ee1a 1a10 	vmov	r1, s20
 23eddb6:	a818      	add	r0, sp, #96	; 0x60
 23eddb8:	f7fd f995 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23eddbc:	2600      	movs	r6, #0
        y += -4.11852516267426f;
 23eddbe:	eddf 9a2c 	vldr	s19, [pc, #176]	; 23ede70 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2b8>
        y += 6.02197014179219f;
 23eddc2:	ed9f 9a2c 	vldr	s18, [pc, #176]	; 23ede74 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2bc>
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23eddc6:	e9dd 3219 	ldrd	r3, r2, [sp, #100]	; 0x64
 23eddca:	4353      	muls	r3, r2
 23eddcc:	42b3      	cmp	r3, r6
 23eddce:	d933      	bls.n	23ede38 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x280>
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 23eddd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
        float f = frexpf(fabsf(a), &e);
 23eddd2:	a814      	add	r0, sp, #80	; 0x50
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 23eddd4:	eb03 0986 	add.w	r9, r3, r6, lsl #2
        float f = frexpf(fabsf(a), &e);
 23eddd8:	ed99 0a00 	vldr	s0, [r9]
 23edddc:	eeb0 0ac0 	vabs.f32	s0, s0
 23edde0:	f009 f8b2 	bl	23f6f48 <frexpf>
        y += -4.11852516267426f;
 23edde4:	eef0 7a69 	vmov.f32	s15, s19
        y += 6.02197014179219f;
 23edde8:	eef0 6a49 	vmov.f32	s13, s18
        y += -4.11852516267426f;
 23eddec:	eee0 7a28 	vfma.f32	s15, s0, s17
        y += 6.02197014179219f;
 23eddf0:	eee0 6a27 	vfma.f32	s13, s0, s15
        y += -3.13396450166353f;
 23eddf4:	eddf 7a20 	vldr	s15, [pc, #128]	; 23ede78 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2c0>
 23eddf8:	eee0 7a26 	vfma.f32	s15, s0, s13
 23eddfc:	eeb0 7a67 	vmov.f32	s14, s15
        y += e;
 23ede00:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 23ede04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23ede08:	ee77 7a87 	vadd.f32	s15, s15, s14
        return numpy::log2(a) * 0.3010299956639812f;
 23ede0c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 23ede7c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2c4>
 23ede10:	ee67 7a87 	vmul.f32	s15, s15, s14
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23ede14:	3601      	adds	r6, #1
            matrix->buffer[ix] = numpy::log10(matrix->buffer[ix]);
 23ede16:	edc9 7a00 	vstr	s15, [r9]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 23ede1a:	e7d4      	b.n	23eddc6 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x20e>
                EI_TRY(numpy::welch_max_hold(
 23ede1c:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 23ede20:	4652      	mov	r2, sl
 23ede22:	e9cd 1301 	strd	r1, r3, [sp, #4]
 23ede26:	4648      	mov	r0, r9
 23ede28:	4643      	mov	r3, r8
 23ede2a:	4659      	mov	r1, fp
 23ede2c:	9400      	str	r4, [sp, #0]
 23ede2e:	f7fe fa4b 	bl	23ec2c8 <_ZN2ei5numpy14welch_max_holdEPfjS1_jjjb>
 23ede32:	2800      	cmp	r0, #0
 23ede34:	d0b2      	beq.n	23edd9c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x1e4>
 23ede36:	e08b      	b.n	23edf50 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x398>
                ei_matrix temp(num_bins, 1, feature_out);
 23ede38:	a818      	add	r0, sp, #96	; 0x60
 23ede3a:	f7fd f969 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
            feature_out += num_bins;
 23ede3e:	9b07      	ldr	r3, [sp, #28]
            matrix_t rms_out_matrix(1, 1, feature_out);
 23ede40:	a810      	add	r0, sp, #64	; 0x40
            feature_out += num_bins;
 23ede42:	eb0a 0603 	add.w	r6, sl, r3
            matrix_t rms_out_matrix(1, 1, feature_out);
 23ede46:	f7fd f963 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
            matrix_t rms_in_matrix(1, data_size, data_window);
 23ede4a:	a80c      	add	r0, sp, #48	; 0x30
 23ede4c:	f7fd f960 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23ede50:	9b05      	ldr	r3, [sp, #20]
 23ede52:	3301      	adds	r3, #1
 23ede54:	9305      	str	r3, [sp, #20]
 23ede56:	e05d      	b.n	23edf14 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x35c>
        size_t num_features = feature_out - feature_out_ori;
 23ede58:	9b06      	ldr	r3, [sp, #24]
 23ede5a:	eba6 0903 	sub.w	r9, r6, r3
 23ede5e:	ea4f 09a9 	mov.w	r9, r9, asr #2
        return num_features;
 23ede62:	e6c1      	b.n	23edbe8 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x30>
 23ede64:	023fb3ca 	.word	0x023fb3ca
 23ede68:	023fb3ce 	.word	0x023fb3ce
 23ede6c:	00000000 	.word	0x00000000
 23ede70:	c083caf5 	.word	0xc083caf5
 23ede74:	40c0b3fb 	.word	0x40c0b3fb
 23ede78:	c04892e0 	.word	0xc04892e0
 23ede7c:	3e9a209b 	.word	0x3e9a209b
        if (remove_mean){
 23ede80:	2c00      	cmp	r4, #0
 23ede82:	f43f aeed 	beq.w	23edc60 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xa8>
        bool do_filter = false;
 23ede86:	2400      	movs	r4, #0
            EI_TRY(processing::subtract_mean(input_matrix));
 23ede88:	4638      	mov	r0, r7
 23ede8a:	f7fd fa9d 	bl	23eb3c8 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 23ede8e:	2800      	cmp	r0, #0
 23ede90:	f47f aea9 	bne.w	23edbe6 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2e>
        if (do_filter) {
 23ede94:	2c00      	cmp	r4, #0
 23ede96:	f43f aee3 	beq.w	23edc60 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xa8>
        if (filter_cutoff > sampling_freq / 2) {
 23ede9a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
            get_start_stop_bin(
 23ede9e:	edd5 7a06 	vldr	s15, [r5, #24]
        if (filter_cutoff > sampling_freq / 2) {
 23edea2:	ee28 7a07 	vmul.f32	s14, s16, s14
            filter_cutoff = sampling_freq / 2;
 23edea6:	eef4 7a47 	vcmp.f32	s15, s14
 23edeaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            get_start_stop_bin(
 23edeae:	6a6c      	ldr	r4, [r5, #36]	; 0x24
            filter_cutoff = sampling_freq / 2;
 23edeb0:	fe77 7a27 	vselgt.f32	s15, s14, s15
        float bin = filter_cutoff * fft_length / sampling_freq;
 23edeb4:	ee07 4a10 	vmov	s14, r4
 23edeb8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 23edebc:	ee67 7a27 	vmul.f32	s15, s14, s15
            *start_bin = static_cast<size_t>(bin - 0.5) + 1; // add one b/c we want to always round up
 23edec0:	eec7 7a88 	vdiv.f32	s15, s15, s16
 23edec4:	ee17 0a90 	vmov	r0, s15
 23edec8:	f7f9 fd8e 	bl	23e79e8 <__aeabi_f2d>
 23edecc:	2200      	movs	r2, #0
 23edece:	4b21      	ldr	r3, [pc, #132]	; (23edf54 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x39c>)
        if (is_high_pass) {
 23eded0:	2e00      	cmp	r6, #0
 23eded2:	f43f aebd 	beq.w	23edc50 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x98>
            *start_bin = static_cast<size_t>(bin - 0.5) + 1; // add one b/c we want to always round up
 23eded6:	f7f9 fc27 	bl	23e7728 <__aeabi_dsub>
 23ededa:	f7fa f8b5 	bl	23e8048 <__aeabi_d2uiz>
 23edede:	f100 0801 	add.w	r8, r0, #1
 23edee2:	f1b8 0f01 	cmp.w	r8, #1
 23edee6:	bf38      	it	cc
 23edee8:	f04f 0801 	movcc.w	r8, #1
            *stop_bin = fft_length / 2 + 1; // go one past
 23edeec:	0864      	lsrs	r4, r4, #1
 23edeee:	3401      	adds	r4, #1
        size_t num_bins = stop_bin - start_bin;
 23edef0:	eba4 0308 	sub.w	r3, r4, r8
 23edef4:	ee0a 3a10 	vmov	s20, r3
        float *feature_out = output_matrix->buffer;
 23edef8:	f8da 3000 	ldr.w	r3, [sl]
                stddev = 1e-10f;
 23edefc:	ed9f 8a16 	vldr	s16, [pc, #88]	; 23edf58 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3a0>
        float *feature_out = output_matrix->buffer;
 23edf00:	9306      	str	r3, [sp, #24]
            feature_out += num_bins;
 23edf02:	ee1a 3a10 	vmov	r3, s20
 23edf06:	009b      	lsls	r3, r3, #2
 23edf08:	9307      	str	r3, [sp, #28]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23edf0a:	2300      	movs	r3, #0
        y += -4.11852516267426f;
 23edf0c:	eddf 8a13 	vldr	s17, [pc, #76]	; 23edf5c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x3a4>
        float *feature_out = output_matrix->buffer;
 23edf10:	9e06      	ldr	r6, [sp, #24]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23edf12:	9305      	str	r3, [sp, #20]
 23edf14:	687b      	ldr	r3, [r7, #4]
 23edf16:	9a05      	ldr	r2, [sp, #20]
 23edf18:	4293      	cmp	r3, r2
 23edf1a:	d99d      	bls.n	23ede58 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x2a0>
 23edf1c:	f8d7 b008 	ldr.w	fp, [r7, #8]
 23edf20:	683b      	ldr	r3, [r7, #0]
 23edf22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 23edf26:	fb0a 3902 	mla	r9, sl, r2, r3
            matrix_t rms_in_matrix(1, data_size, data_window);
 23edf2a:	2101      	movs	r1, #1
 23edf2c:	464b      	mov	r3, r9
 23edf2e:	465a      	mov	r2, fp
 23edf30:	a80c      	add	r0, sp, #48	; 0x30
 23edf32:	f7fd f8d8 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
            matrix_t rms_out_matrix(1, 1, feature_out);
 23edf36:	2201      	movs	r2, #1
 23edf38:	4633      	mov	r3, r6
 23edf3a:	4611      	mov	r1, r2
 23edf3c:	a810      	add	r0, sp, #64	; 0x40
 23edf3e:	f7fd f8d2 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
            EI_TRY(numpy::rms(&rms_in_matrix, &rms_out_matrix));
 23edf42:	a910      	add	r1, sp, #64	; 0x40
 23edf44:	a80c      	add	r0, sp, #48	; 0x30
 23edf46:	f7fd f9f3 	bl	23eb330 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 23edf4a:	2800      	cmp	r0, #0
 23edf4c:	f43f ae8e 	beq.w	23edc6c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0xb4>
                EI_TRY(numpy::welch_max_hold(
 23edf50:	4681      	mov	r9, r0
 23edf52:	e6e3      	b.n	23edd1c <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb+0x164>
 23edf54:	3fe00000 	.word	0x3fe00000
 23edf58:	2edbe6ff 	.word	0x2edbe6ff
 23edf5c:	3f9da1a8 	.word	0x3f9da1a8

023edf60 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 23edf60:	b538      	push	{r3, r4, r5, lr}
 23edf62:	4603      	mov	r3, r0
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23edf64:	e9d3 3500 	ldrd	r3, r5, [r3]
 23edf68:	1aed      	subs	r5, r5, r3
	if (max_size() - size() < __n)
 23edf6a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23edf6e:	10ac      	asrs	r4, r5, #2
	if (max_size() - size() < __n)
 23edf70:	eba3 05a5 	sub.w	r5, r3, r5, asr #2
 23edf74:	428d      	cmp	r5, r1
      _M_check_len(size_type __n, const char* __s) const
 23edf76:	4610      	mov	r0, r2
	if (max_size() - size() < __n)
 23edf78:	d201      	bcs.n	23edf7e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x1e>
	  __throw_length_error(__N(__s));
 23edf7a:	f008 fde5 	bl	23f6b48 <_ZSt20__throw_length_errorPKc>
 23edf7e:	42a1      	cmp	r1, r4
 23edf80:	bf38      	it	cc
 23edf82:	4621      	movcc	r1, r4
 23edf84:	1860      	adds	r0, r4, r1
 23edf86:	d203      	bcs.n	23edf90 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x30>
 23edf88:	4298      	cmp	r0, r3
 23edf8a:	bf28      	it	cs
 23edf8c:	4618      	movcs	r0, r3
      }
 23edf8e:	bd38      	pop	{r3, r4, r5, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 23edf90:	4618      	mov	r0, r3
 23edf92:	e7fc      	b.n	23edf8e <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc+0x2e>

023edf94 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj>:
    }

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 23edf94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23edf98:	4604      	mov	r4, r0
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 23edf9a:	460d      	mov	r5, r1
 23edf9c:	b1a1      	cbz	r1, 23edfc8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x34>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23edf9e:	e9d0 3200 	ldrd	r3, r2, [r0]
 23edfa2:	1ad7      	subs	r7, r2, r3
	{
	  const size_type __size = size();
	  size_type __navail = size_type(this->_M_impl._M_end_of_storage
					 - this->_M_impl._M_finish);
 23edfa4:	6883      	ldr	r3, [r0, #8]
 23edfa6:	ea4f 09a7 	mov.w	r9, r7, asr #2
 23edfaa:	1a9b      	subs	r3, r3, r2

	  if (__size > max_size() || __navail > max_size() - __size)
	    __builtin_unreachable();

	  if (__navail >= __n)
 23edfac:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
 23edfb0:	d80c      	bhi.n	23edfcc <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x38>
      _ForwardIterator __cur = __first;
 23edfb2:	4613      	mov	r3, r2
 23edfb4:	2000      	movs	r0, #0
 23edfb6:	b103      	cbz	r3, 23edfba <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x26>
 23edfb8:	6018      	str	r0, [r3, #0]
	  for (; __n > 0; --__n, (void) ++__cur)
 23edfba:	3901      	subs	r1, #1
 23edfbc:	f103 0304 	add.w	r3, r3, #4
 23edfc0:	d1f9      	bne.n	23edfb6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x22>
 23edfc2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
	    {
	      _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
	      this->_M_impl._M_finish =
 23edfc6:	6062      	str	r2, [r4, #4]
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_start + __size + __n;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 23edfc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		_M_check_len(__n, "vector::_M_default_append");
 23edfcc:	4a12      	ldr	r2, [pc, #72]	; (23ee018 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x84>)
 23edfce:	f7ff ffc7 	bl	23edf60 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23edfd2:	4680      	mov	r8, r0
 23edfd4:	b1e8      	cbz	r0, 23ee012 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x7e>
 23edfd6:	f7fc fbe5 	bl	23ea7a4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj.part.0>
 23edfda:	4606      	mov	r6, r0
		      std::__uninitialized_default_n_a(__new_start + __size,
 23edfdc:	462a      	mov	r2, r5
 23edfde:	2100      	movs	r1, #0
 23edfe0:	4437      	add	r7, r6
 23edfe2:	b107      	cbz	r7, 23edfe6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x52>
 23edfe4:	6039      	str	r1, [r7, #0]
 23edfe6:	3a01      	subs	r2, #1
 23edfe8:	f107 0704 	add.w	r7, r7, #4
 23edfec:	d1f9      	bne.n	23edfe2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x4e>
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 23edfee:	e9d4 0100 	ldrd	r0, r1, [r4]
 23edff2:	4632      	mov	r2, r6
 23edff4:	f7fc fcdd 	bl	23ea9b2 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0>
	      _M_deallocate(this->_M_impl._M_start,
 23edff8:	6820      	ldr	r0, [r4, #0]
	if (__p)
 23edffa:	b108      	cbz	r0, 23ee000 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x6c>
 23edffc:	f002 f84f 	bl	23f009e <_Z7ei_freePv>
	      this->_M_impl._M_finish = __new_start + __size + __n;
 23ee000:	444d      	add	r5, r9
 23ee002:	eb06 0585 	add.w	r5, r6, r5, lsl #2
	      this->_M_impl._M_start = __new_start;
 23ee006:	6026      	str	r6, [r4, #0]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 23ee008:	eb06 0688 	add.w	r6, r6, r8, lsl #2
	      this->_M_impl._M_finish = __new_start + __size + __n;
 23ee00c:	6065      	str	r5, [r4, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 23ee00e:	60a6      	str	r6, [r4, #8]
    }
 23ee010:	e7da      	b.n	23edfc8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x34>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23ee012:	4606      	mov	r6, r0
 23ee014:	e7e2      	b.n	23edfdc <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj+0x48>
 23ee016:	bf00      	nop
 23ee018:	023fb5bc 	.word	0x023fb5bc

023ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>:
      resize(size_type __new_size)
 23ee01c:	b538      	push	{r3, r4, r5, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23ee01e:	e9d0 2500 	ldrd	r2, r5, [r0]
 23ee022:	1aac      	subs	r4, r5, r2
 23ee024:	10a4      	asrs	r4, r4, #2
	if (__new_size > size())
 23ee026:	42a1      	cmp	r1, r4
 23ee028:	d903      	bls.n	23ee032 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x16>
	  _M_default_append(__new_size - size());
 23ee02a:	1b09      	subs	r1, r1, r4
 23ee02c:	f7ff ffb2 	bl	23edf94 <_ZNSt6vectorIfN2ei7EiAllocIfEEE17_M_default_appendEj>
      }
 23ee030:	bd38      	pop	{r3, r4, r5, pc}
	else if (__new_size < size())
 23ee032:	d2fd      	bcs.n	23ee030 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x14>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 23ee034:	eb02 0181 	add.w	r1, r2, r1, lsl #2
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 23ee038:	42a9      	cmp	r1, r5
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
 23ee03a:	bf18      	it	ne
 23ee03c:	6041      	strne	r1, [r0, #4]
      }
 23ee03e:	e7f7      	b.n	23ee030 <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj+0x14>

023ee040 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 23ee040:	b084      	sub	sp, #16
 23ee042:	b538      	push	{r3, r4, r5, lr}
 23ee044:	ac04      	add	r4, sp, #16
 23ee046:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 23ee04a:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
        h.resize(n);
 23ee04e:	2104      	movs	r1, #4
 23ee050:	4628      	mov	r0, r5
 23ee052:	f7ff ffe3 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 23ee056:	2104      	movs	r1, #4
 23ee058:	4620      	mov	r0, r4
 23ee05a:	f7ff ffdf 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
 23ee05e:	2300      	movs	r3, #0
 23ee060:	aa04      	add	r2, sp, #16
            h[i] = wav[0][n - i - 1];
 23ee062:	6829      	ldr	r1, [r5, #0]
 23ee064:	68d0      	ldr	r0, [r2, #12]
 23ee066:	4419      	add	r1, r3
 23ee068:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
 23ee06a:	6821      	ldr	r1, [r4, #0]
 23ee06c:	69d0      	ldr	r0, [r2, #28]
 23ee06e:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
 23ee070:	3304      	adds	r3, #4
 23ee072:	2b10      	cmp	r3, #16
            g[i] = wav[1][n - i - 1];
 23ee074:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
 23ee076:	f1a2 0204 	sub.w	r2, r2, #4
 23ee07a:	d1f2      	bne.n	23ee062 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
 23ee07c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ee080:	b004      	add	sp, #16
 23ee082:	4770      	bx	lr

023ee084 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 23ee084:	b084      	sub	sp, #16
 23ee086:	b538      	push	{r3, r4, r5, lr}
 23ee088:	ac04      	add	r4, sp, #16
 23ee08a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 23ee08e:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
        h.resize(n);
 23ee092:	2106      	movs	r1, #6
 23ee094:	4628      	mov	r0, r5
 23ee096:	f7ff ffc1 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 23ee09a:	2106      	movs	r1, #6
 23ee09c:	4620      	mov	r0, r4
 23ee09e:	f7ff ffbd 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
 23ee0a2:	2300      	movs	r3, #0
 23ee0a4:	aa04      	add	r2, sp, #16
            h[i] = wav[0][n - i - 1];
 23ee0a6:	6829      	ldr	r1, [r5, #0]
 23ee0a8:	6950      	ldr	r0, [r2, #20]
 23ee0aa:	4419      	add	r1, r3
 23ee0ac:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
 23ee0ae:	6821      	ldr	r1, [r4, #0]
 23ee0b0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 23ee0b2:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
 23ee0b4:	3304      	adds	r3, #4
 23ee0b6:	2b18      	cmp	r3, #24
            g[i] = wav[1][n - i - 1];
 23ee0b8:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
 23ee0ba:	f1a2 0204 	sub.w	r2, r2, #4
 23ee0be:	d1f2      	bne.n	23ee0a6 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
 23ee0c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ee0c4:	b004      	add	sp, #16
 23ee0c6:	4770      	bx	lr

023ee0c8 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 23ee0c8:	b084      	sub	sp, #16
 23ee0ca:	b538      	push	{r3, r4, r5, lr}
 23ee0cc:	ac04      	add	r4, sp, #16
 23ee0ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 23ee0d2:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
        h.resize(n);
 23ee0d6:	2108      	movs	r1, #8
 23ee0d8:	4628      	mov	r0, r5
 23ee0da:	f7ff ff9f 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 23ee0de:	2108      	movs	r1, #8
 23ee0e0:	4620      	mov	r0, r4
 23ee0e2:	f7ff ff9b 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
 23ee0e6:	2300      	movs	r3, #0
 23ee0e8:	aa04      	add	r2, sp, #16
            h[i] = wav[0][n - i - 1];
 23ee0ea:	6829      	ldr	r1, [r5, #0]
 23ee0ec:	69d0      	ldr	r0, [r2, #28]
 23ee0ee:	4419      	add	r1, r3
 23ee0f0:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
 23ee0f2:	6821      	ldr	r1, [r4, #0]
 23ee0f4:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 23ee0f6:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
 23ee0f8:	3304      	adds	r3, #4
 23ee0fa:	2b20      	cmp	r3, #32
            g[i] = wav[1][n - i - 1];
 23ee0fc:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
 23ee0fe:	f1a2 0204 	sub.w	r2, r2, #4
 23ee102:	d1f2      	bne.n	23ee0ea <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
 23ee104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ee108:	b004      	add	sp, #16
 23ee10a:	4770      	bx	lr

023ee10c <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 23ee10c:	b084      	sub	sp, #16
 23ee10e:	b538      	push	{r3, r4, r5, lr}
 23ee110:	ac04      	add	r4, sp, #16
 23ee112:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 23ee116:	e9dd 5418 	ldrd	r5, r4, [sp, #96]	; 0x60
        h.resize(n);
 23ee11a:	210a      	movs	r1, #10
 23ee11c:	4628      	mov	r0, r5
 23ee11e:	f7ff ff7d 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 23ee122:	210a      	movs	r1, #10
 23ee124:	4620      	mov	r0, r4
 23ee126:	f7ff ff79 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
 23ee12a:	2300      	movs	r3, #0
 23ee12c:	aa04      	add	r2, sp, #16
            h[i] = wav[0][n - i - 1];
 23ee12e:	6829      	ldr	r1, [r5, #0]
 23ee130:	6a50      	ldr	r0, [r2, #36]	; 0x24
 23ee132:	4419      	add	r1, r3
 23ee134:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
 23ee136:	6821      	ldr	r1, [r4, #0]
 23ee138:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 23ee13a:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
 23ee13c:	3304      	adds	r3, #4
 23ee13e:	2b28      	cmp	r3, #40	; 0x28
            g[i] = wav[1][n - i - 1];
 23ee140:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
 23ee142:	f1a2 0204 	sub.w	r2, r2, #4
 23ee146:	d1f2      	bne.n	23ee12e <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
 23ee148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ee14c:	b004      	add	sp, #16
 23ee14e:	4770      	bx	lr

023ee150 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 23ee150:	b084      	sub	sp, #16
 23ee152:	b538      	push	{r3, r4, r5, lr}
 23ee154:	ac04      	add	r4, sp, #16
 23ee156:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 23ee15a:	e9dd 541c 	ldrd	r5, r4, [sp, #112]	; 0x70
        h.resize(n);
 23ee15e:	210c      	movs	r1, #12
 23ee160:	4628      	mov	r0, r5
 23ee162:	f7ff ff5b 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 23ee166:	210c      	movs	r1, #12
 23ee168:	4620      	mov	r0, r4
 23ee16a:	f7ff ff57 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
 23ee16e:	2300      	movs	r3, #0
 23ee170:	aa04      	add	r2, sp, #16
            h[i] = wav[0][n - i - 1];
 23ee172:	6829      	ldr	r1, [r5, #0]
 23ee174:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 23ee176:	4419      	add	r1, r3
 23ee178:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
 23ee17a:	6821      	ldr	r1, [r4, #0]
 23ee17c:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 23ee17e:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
 23ee180:	3304      	adds	r3, #4
 23ee182:	2b30      	cmp	r3, #48	; 0x30
            g[i] = wav[1][n - i - 1];
 23ee184:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
 23ee186:	f1a2 0204 	sub.w	r2, r2, #4
 23ee18a:	d1f2      	bne.n	23ee172 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
 23ee18c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ee190:	b004      	add	sp, #16
 23ee192:	4770      	bx	lr

023ee194 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 23ee194:	b084      	sub	sp, #16
 23ee196:	b538      	push	{r3, r4, r5, lr}
 23ee198:	ac04      	add	r4, sp, #16
 23ee19a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 23ee19e:	e9dd 5420 	ldrd	r5, r4, [sp, #128]	; 0x80
        h.resize(n);
 23ee1a2:	210e      	movs	r1, #14
 23ee1a4:	4628      	mov	r0, r5
 23ee1a6:	f7ff ff39 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 23ee1aa:	210e      	movs	r1, #14
 23ee1ac:	4620      	mov	r0, r4
 23ee1ae:	f7ff ff35 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
 23ee1b2:	2300      	movs	r3, #0
 23ee1b4:	aa04      	add	r2, sp, #16
            h[i] = wav[0][n - i - 1];
 23ee1b6:	6829      	ldr	r1, [r5, #0]
 23ee1b8:	6b50      	ldr	r0, [r2, #52]	; 0x34
 23ee1ba:	4419      	add	r1, r3
 23ee1bc:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
 23ee1be:	6821      	ldr	r1, [r4, #0]
 23ee1c0:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
 23ee1c2:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
 23ee1c4:	3304      	adds	r3, #4
 23ee1c6:	2b38      	cmp	r3, #56	; 0x38
            g[i] = wav[1][n - i - 1];
 23ee1c8:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
 23ee1ca:	f1a2 0204 	sub.w	r2, r2, #4
 23ee1ce:	d1f2      	bne.n	23ee1b6 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
 23ee1d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ee1d4:	b004      	add	sp, #16
 23ee1d6:	4770      	bx	lr

023ee1d8 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 23ee1d8:	b084      	sub	sp, #16
 23ee1da:	b538      	push	{r3, r4, r5, lr}
 23ee1dc:	ac04      	add	r4, sp, #16
 23ee1de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 23ee1e2:	e9dd 5424 	ldrd	r5, r4, [sp, #144]	; 0x90
        h.resize(n);
 23ee1e6:	2110      	movs	r1, #16
 23ee1e8:	4628      	mov	r0, r5
 23ee1ea:	f7ff ff17 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 23ee1ee:	2110      	movs	r1, #16
 23ee1f0:	4620      	mov	r0, r4
 23ee1f2:	f7ff ff13 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
 23ee1f6:	2300      	movs	r3, #0
 23ee1f8:	aa04      	add	r2, sp, #16
            h[i] = wav[0][n - i - 1];
 23ee1fa:	6829      	ldr	r1, [r5, #0]
 23ee1fc:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 23ee1fe:	4419      	add	r1, r3
 23ee200:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
 23ee202:	6821      	ldr	r1, [r4, #0]
 23ee204:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
 23ee206:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
 23ee208:	3304      	adds	r3, #4
 23ee20a:	2b40      	cmp	r3, #64	; 0x40
            g[i] = wav[1][n - i - 1];
 23ee20c:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
 23ee20e:	f1a2 0204 	sub.w	r2, r2, #4
 23ee212:	d1f2      	bne.n	23ee1fa <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
 23ee214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ee218:	b004      	add	sp, #16
 23ee21a:	4770      	bx	lr

023ee21c <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 23ee21c:	b084      	sub	sp, #16
 23ee21e:	b538      	push	{r3, r4, r5, lr}
 23ee220:	ac04      	add	r4, sp, #16
 23ee222:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 23ee226:	e9dd 5428 	ldrd	r5, r4, [sp, #160]	; 0xa0
        h.resize(n);
 23ee22a:	2112      	movs	r1, #18
 23ee22c:	4628      	mov	r0, r5
 23ee22e:	f7ff fef5 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 23ee232:	2112      	movs	r1, #18
 23ee234:	4620      	mov	r0, r4
 23ee236:	f7ff fef1 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
 23ee23a:	2300      	movs	r3, #0
 23ee23c:	aa04      	add	r2, sp, #16
            h[i] = wav[0][n - i - 1];
 23ee23e:	6829      	ldr	r1, [r5, #0]
 23ee240:	6c50      	ldr	r0, [r2, #68]	; 0x44
 23ee242:	4419      	add	r1, r3
 23ee244:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
 23ee246:	6821      	ldr	r1, [r4, #0]
 23ee248:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 23ee24c:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
 23ee24e:	3304      	adds	r3, #4
 23ee250:	2b48      	cmp	r3, #72	; 0x48
            g[i] = wav[1][n - i - 1];
 23ee252:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
 23ee254:	f1a2 0204 	sub.w	r2, r2, #4
 23ee258:	d1f1      	bne.n	23ee23e <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
 23ee25a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ee25e:	b004      	add	sp, #16
 23ee260:	4770      	bx	lr

023ee262 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>:
    static void get_filter(const std::array<std::array<float, wave_size>, 2> wav, fvec &h, fvec &g)
 23ee262:	b084      	sub	sp, #16
 23ee264:	b538      	push	{r3, r4, r5, lr}
 23ee266:	ac04      	add	r4, sp, #16
 23ee268:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 23ee26c:	e9dd 542c 	ldrd	r5, r4, [sp, #176]	; 0xb0
        h.resize(n);
 23ee270:	2114      	movs	r1, #20
 23ee272:	4628      	mov	r0, r5
 23ee274:	f7ff fed2 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 23ee278:	2114      	movs	r1, #20
 23ee27a:	4620      	mov	r0, r4
 23ee27c:	f7ff fece 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
 23ee280:	2300      	movs	r3, #0
 23ee282:	aa04      	add	r2, sp, #16
            h[i] = wav[0][n - i - 1];
 23ee284:	6829      	ldr	r1, [r5, #0]
 23ee286:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 23ee288:	4419      	add	r1, r3
 23ee28a:	6008      	str	r0, [r1, #0]
            g[i] = wav[1][n - i - 1];
 23ee28c:	6821      	ldr	r1, [r4, #0]
 23ee28e:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
 23ee292:	4419      	add	r1, r3
        for (size_t i = 0; i < n; i++) {
 23ee294:	3304      	adds	r3, #4
 23ee296:	2b50      	cmp	r3, #80	; 0x50
            g[i] = wav[1][n - i - 1];
 23ee298:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < n; i++) {
 23ee29a:	f1a2 0204 	sub.w	r2, r2, #4
 23ee29e:	d1f1      	bne.n	23ee284 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_+0x22>
    }
 23ee2a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ee2a4:	b004      	add	sp, #16
 23ee2a6:	4770      	bx	lr

023ee2a8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_>:
    static void find_filter(const char *wav, fvec &h, fvec &g)
 23ee2a8:	b570      	push	{r4, r5, r6, lr}
 23ee2aa:	460c      	mov	r4, r1
 23ee2ac:	b0a6      	sub	sp, #152	; 0x98
        if (strcmp(wav, "bior1.3") == 0) get_filter<6>(bior1p3, h, g);
 23ee2ae:	4999      	ldr	r1, [pc, #612]	; (23ee514 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x26c>)
    static void find_filter(const char *wav, fvec &h, fvec &g)
 23ee2b0:	4606      	mov	r6, r0
 23ee2b2:	4615      	mov	r5, r2
        if (strcmp(wav, "bior1.3") == 0) get_filter<6>(bior1p3, h, g);
 23ee2b4:	f7fa f936 	bl	23e8524 <strcmp>
 23ee2b8:	b988      	cbnz	r0, 23ee2de <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x36>
 23ee2ba:	4e97      	ldr	r6, [pc, #604]	; (23ee518 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x270>)
        else if (strcmp(wav, "bior2.2") == 0) get_filter<6>(bior2p2, h, g);
 23ee2bc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 23ee2c0:	466c      	mov	r4, sp
 23ee2c2:	f106 0510 	add.w	r5, r6, #16
 23ee2c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ee2c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ee2ca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23ee2ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 23ee2d2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 23ee2d6:	f7ff fed5 	bl	23ee084 <_ZN2ei8spectral7wavelet10get_filterILj6EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
    }
 23ee2da:	b026      	add	sp, #152	; 0x98
 23ee2dc:	bd70      	pop	{r4, r5, r6, pc}
        else if (strcmp(wav, "bior1.5") == 0) get_filter<10>(bior1p5, h, g);
 23ee2de:	4630      	mov	r0, r6
 23ee2e0:	498e      	ldr	r1, [pc, #568]	; (23ee51c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x274>)
 23ee2e2:	f7fa f91f 	bl	23e8524 <strcmp>
 23ee2e6:	b9a0      	cbnz	r0, 23ee312 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x6a>
 23ee2e8:	4e8d      	ldr	r6, [pc, #564]	; (23ee520 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x278>)
        else if (strcmp(wav, "bior2.4") == 0) get_filter<10>(bior2p4, h, g);
 23ee2ea:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 23ee2ee:	466c      	mov	r4, sp
 23ee2f0:	f106 0510 	add.w	r5, r6, #16
 23ee2f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ee2f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ee2f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ee2fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ee2fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ee2fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ee300:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23ee304:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 23ee308:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 23ee30c:	f7ff fefe 	bl	23ee10c <_ZN2ei8spectral7wavelet10get_filterILj10EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
 23ee310:	e7e3      	b.n	23ee2da <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "bior2.2") == 0) get_filter<6>(bior2p2, h, g);
 23ee312:	4630      	mov	r0, r6
 23ee314:	4983      	ldr	r1, [pc, #524]	; (23ee524 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x27c>)
 23ee316:	f7fa f905 	bl	23e8524 <strcmp>
 23ee31a:	b908      	cbnz	r0, 23ee320 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x78>
 23ee31c:	4e82      	ldr	r6, [pc, #520]	; (23ee528 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x280>)
 23ee31e:	e7cd      	b.n	23ee2bc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x14>
        else if (strcmp(wav, "bior2.4") == 0) get_filter<10>(bior2p4, h, g);
 23ee320:	4630      	mov	r0, r6
 23ee322:	4982      	ldr	r1, [pc, #520]	; (23ee52c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x284>)
 23ee324:	f7fa f8fe 	bl	23e8524 <strcmp>
 23ee328:	b908      	cbnz	r0, 23ee32e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x86>
 23ee32a:	4e81      	ldr	r6, [pc, #516]	; (23ee530 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x288>)
 23ee32c:	e7dd      	b.n	23ee2ea <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
        else if (strcmp(wav, "bior2.6") == 0) get_filter<14>(bior2p6, h, g);
 23ee32e:	4630      	mov	r0, r6
 23ee330:	4980      	ldr	r1, [pc, #512]	; (23ee534 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x28c>)
 23ee332:	f7fa f8f7 	bl	23e8524 <strcmp>
 23ee336:	b968      	cbnz	r0, 23ee354 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xac>
 23ee338:	4e7f      	ldr	r6, [pc, #508]	; (23ee538 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x290>)
        else if (strcmp(wav, "sym7") == 0) get_filter<14>(sym7, h, g);
 23ee33a:	f106 0110 	add.w	r1, r6, #16
 23ee33e:	2260      	movs	r2, #96	; 0x60
 23ee340:	4668      	mov	r0, sp
 23ee342:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
 23ee346:	f00a fcc5 	bl	23f8cd4 <memcpy>
 23ee34a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 23ee34e:	f7ff ff21 	bl	23ee194 <_ZN2ei8spectral7wavelet10get_filterILj14EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
 23ee352:	e7c2      	b.n	23ee2da <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "bior2.8") == 0) get_filter<18>(bior2p8, h, g);
 23ee354:	4630      	mov	r0, r6
 23ee356:	4979      	ldr	r1, [pc, #484]	; (23ee53c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x294>)
 23ee358:	f7fa f8e4 	bl	23e8524 <strcmp>
 23ee35c:	b968      	cbnz	r0, 23ee37a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xd2>
 23ee35e:	4e78      	ldr	r6, [pc, #480]	; (23ee540 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x298>)
        else if (strcmp(wav, "sym9") == 0) get_filter<18>(sym9, h, g);
 23ee360:	f106 0110 	add.w	r1, r6, #16
 23ee364:	2280      	movs	r2, #128	; 0x80
 23ee366:	4668      	mov	r0, sp
 23ee368:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
 23ee36c:	f00a fcb2 	bl	23f8cd4 <memcpy>
 23ee370:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 23ee374:	f7ff ff52 	bl	23ee21c <_ZN2ei8spectral7wavelet10get_filterILj18EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
 23ee378:	e7af      	b.n	23ee2da <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "bior3.1") == 0) get_filter<4>(bior3p1, h, g);
 23ee37a:	4630      	mov	r0, r6
 23ee37c:	4971      	ldr	r1, [pc, #452]	; (23ee544 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x29c>)
 23ee37e:	f7fa f8d1 	bl	23e8524 <strcmp>
 23ee382:	b960      	cbnz	r0, 23ee39e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xf6>
 23ee384:	4e70      	ldr	r6, [pc, #448]	; (23ee548 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2a0>)
        else if (strcmp(wav, "db2") == 0) get_filter<4>(db2, h, g);
 23ee386:	f106 0310 	add.w	r3, r6, #16
 23ee38a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 23ee38c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 23ee390:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 23ee394:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 23ee398:	f7ff fe52 	bl	23ee040 <_ZN2ei8spectral7wavelet10get_filterILj4EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
 23ee39c:	e79d      	b.n	23ee2da <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "bior3.3") == 0) get_filter<8>(bior3p3, h, g);
 23ee39e:	4630      	mov	r0, r6
 23ee3a0:	496a      	ldr	r1, [pc, #424]	; (23ee54c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2a4>)
 23ee3a2:	f7fa f8bf 	bl	23e8524 <strcmp>
 23ee3a6:	b990      	cbnz	r0, 23ee3ce <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x126>
 23ee3a8:	4e69      	ldr	r6, [pc, #420]	; (23ee550 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2a8>)
        else if (strcmp(wav, "sym4") == 0) get_filter<8>(sym4, h, g);
 23ee3aa:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 23ee3ae:	466c      	mov	r4, sp
 23ee3b0:	f106 0510 	add.w	r5, r6, #16
 23ee3b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ee3b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ee3b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ee3ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ee3bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 23ee3c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 23ee3c4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 23ee3c8:	f7ff fe7e 	bl	23ee0c8 <_ZN2ei8spectral7wavelet10get_filterILj8EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
 23ee3cc:	e785      	b.n	23ee2da <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "bior3.5") == 0) get_filter<12>(bior3p5, h, g);
 23ee3ce:	4630      	mov	r0, r6
 23ee3d0:	4960      	ldr	r1, [pc, #384]	; (23ee554 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2ac>)
 23ee3d2:	f7fa f8a7 	bl	23e8524 <strcmp>
 23ee3d6:	b968      	cbnz	r0, 23ee3f4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x14c>
 23ee3d8:	4e5f      	ldr	r6, [pc, #380]	; (23ee558 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2b0>)
        else if (strcmp(wav, "sym6") == 0) get_filter<12>(sym6, h, g);
 23ee3da:	f106 0110 	add.w	r1, r6, #16
 23ee3de:	2250      	movs	r2, #80	; 0x50
 23ee3e0:	4668      	mov	r0, sp
 23ee3e2:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 23ee3e6:	f00a fc75 	bl	23f8cd4 <memcpy>
 23ee3ea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 23ee3ee:	f7ff feaf 	bl	23ee150 <_ZN2ei8spectral7wavelet10get_filterILj12EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
 23ee3f2:	e772      	b.n	23ee2da <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "bior3.7") == 0) get_filter<16>(bior3p7, h, g);
 23ee3f4:	4630      	mov	r0, r6
 23ee3f6:	4959      	ldr	r1, [pc, #356]	; (23ee55c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2b4>)
 23ee3f8:	f7fa f894 	bl	23e8524 <strcmp>
 23ee3fc:	b968      	cbnz	r0, 23ee41a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x172>
 23ee3fe:	4e58      	ldr	r6, [pc, #352]	; (23ee560 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2b8>)
        else if (strcmp(wav, "sym8") == 0) get_filter<16>(sym8, h, g);
 23ee400:	f106 0110 	add.w	r1, r6, #16
 23ee404:	2270      	movs	r2, #112	; 0x70
 23ee406:	4668      	mov	r0, sp
 23ee408:	e9cd 451c 	strd	r4, r5, [sp, #112]	; 0x70
 23ee40c:	f00a fc62 	bl	23f8cd4 <memcpy>
 23ee410:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 23ee414:	f7ff fee0 	bl	23ee1d8 <_ZN2ei8spectral7wavelet10get_filterILj16EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
 23ee418:	e75f      	b.n	23ee2da <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "bior3.9") == 0) get_filter<20>(bior3p9, h, g);
 23ee41a:	4630      	mov	r0, r6
 23ee41c:	4951      	ldr	r1, [pc, #324]	; (23ee564 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2bc>)
 23ee41e:	f7fa f881 	bl	23e8524 <strcmp>
 23ee422:	b968      	cbnz	r0, 23ee440 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x198>
 23ee424:	4e50      	ldr	r6, [pc, #320]	; (23ee568 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2c0>)
        else if (strcmp(wav, "sym10") == 0) get_filter<20>(sym10, h, g);
 23ee426:	f106 0110 	add.w	r1, r6, #16
 23ee42a:	2290      	movs	r2, #144	; 0x90
 23ee42c:	4668      	mov	r0, sp
 23ee42e:	e9cd 4524 	strd	r4, r5, [sp, #144]	; 0x90
 23ee432:	f00a fc4f 	bl	23f8cd4 <memcpy>
 23ee436:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 23ee43a:	f7ff ff12 	bl	23ee262 <_ZN2ei8spectral7wavelet10get_filterILj20EEEvSt5arrayIS3_IfXT_EELj2EERSt6vectorIfNS_7EiAllocIfEEESA_>
 23ee43e:	e74c      	b.n	23ee2da <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "bior4.4") == 0) get_filter<10>(bior4p4, h, g);
 23ee440:	4630      	mov	r0, r6
 23ee442:	494a      	ldr	r1, [pc, #296]	; (23ee56c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2c4>)
 23ee444:	f7fa f86e 	bl	23e8524 <strcmp>
 23ee448:	b908      	cbnz	r0, 23ee44e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1a6>
 23ee44a:	4e49      	ldr	r6, [pc, #292]	; (23ee570 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2c8>)
 23ee44c:	e74d      	b.n	23ee2ea <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
        else if (strcmp(wav, "bior5.5") == 0) get_filter<12>(bior5p5, h, g);
 23ee44e:	4630      	mov	r0, r6
 23ee450:	4948      	ldr	r1, [pc, #288]	; (23ee574 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2cc>)
 23ee452:	f7fa f867 	bl	23e8524 <strcmp>
 23ee456:	b908      	cbnz	r0, 23ee45c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1b4>
 23ee458:	4e47      	ldr	r6, [pc, #284]	; (23ee578 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d0>)
 23ee45a:	e7be      	b.n	23ee3da <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x132>
        else if (strcmp(wav, "bior6.8") == 0) get_filter<18>(bior6p8, h, g);
 23ee45c:	4630      	mov	r0, r6
 23ee45e:	4947      	ldr	r1, [pc, #284]	; (23ee57c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d4>)
 23ee460:	f7fa f860 	bl	23e8524 <strcmp>
 23ee464:	b908      	cbnz	r0, 23ee46a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1c2>
 23ee466:	4e46      	ldr	r6, [pc, #280]	; (23ee580 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2d8>)
 23ee468:	e77a      	b.n	23ee360 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb8>
        else if (strcmp(wav, "coif1") == 0) get_filter<6>(coif1, h, g);
 23ee46a:	4630      	mov	r0, r6
 23ee46c:	4945      	ldr	r1, [pc, #276]	; (23ee584 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2dc>)
 23ee46e:	f7fa f859 	bl	23e8524 <strcmp>
 23ee472:	b908      	cbnz	r0, 23ee478 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1d0>
 23ee474:	4e44      	ldr	r6, [pc, #272]	; (23ee588 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e0>)
 23ee476:	e721      	b.n	23ee2bc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x14>
        else if (strcmp(wav, "coif2") == 0) get_filter<12>(coif2, h, g);
 23ee478:	4630      	mov	r0, r6
 23ee47a:	4944      	ldr	r1, [pc, #272]	; (23ee58c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e4>)
 23ee47c:	f7fa f852 	bl	23e8524 <strcmp>
 23ee480:	b908      	cbnz	r0, 23ee486 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1de>
 23ee482:	4e43      	ldr	r6, [pc, #268]	; (23ee590 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2e8>)
 23ee484:	e7a9      	b.n	23ee3da <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x132>
        else if (strcmp(wav, "coif3") == 0) get_filter<18>(coif3, h, g);
 23ee486:	4630      	mov	r0, r6
 23ee488:	4942      	ldr	r1, [pc, #264]	; (23ee594 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2ec>)
 23ee48a:	f7fa f84b 	bl	23e8524 <strcmp>
 23ee48e:	b908      	cbnz	r0, 23ee494 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1ec>
 23ee490:	4e41      	ldr	r6, [pc, #260]	; (23ee598 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f0>)
 23ee492:	e765      	b.n	23ee360 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb8>
        else if (strcmp(wav, "db2") == 0) get_filter<4>(db2, h, g);
 23ee494:	4630      	mov	r0, r6
 23ee496:	4941      	ldr	r1, [pc, #260]	; (23ee59c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f4>)
 23ee498:	f7fa f844 	bl	23e8524 <strcmp>
 23ee49c:	b908      	cbnz	r0, 23ee4a2 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x1fa>
 23ee49e:	4e40      	ldr	r6, [pc, #256]	; (23ee5a0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2f8>)
 23ee4a0:	e771      	b.n	23ee386 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xde>
        else if (strcmp(wav, "db3") == 0) get_filter<6>(db3, h, g);
 23ee4a2:	4630      	mov	r0, r6
 23ee4a4:	493f      	ldr	r1, [pc, #252]	; (23ee5a4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x2fc>)
 23ee4a6:	f7fa f83d 	bl	23e8524 <strcmp>
 23ee4aa:	b908      	cbnz	r0, 23ee4b0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x208>
 23ee4ac:	4e3e      	ldr	r6, [pc, #248]	; (23ee5a8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x300>)
 23ee4ae:	e705      	b.n	23ee2bc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x14>
        else if (strcmp(wav, "db4") == 0) get_filter<8>(db4, h, g);
 23ee4b0:	4630      	mov	r0, r6
 23ee4b2:	493e      	ldr	r1, [pc, #248]	; (23ee5ac <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x304>)
 23ee4b4:	f7fa f836 	bl	23e8524 <strcmp>
 23ee4b8:	b908      	cbnz	r0, 23ee4be <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x216>
 23ee4ba:	4e3d      	ldr	r6, [pc, #244]	; (23ee5b0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x308>)
 23ee4bc:	e775      	b.n	23ee3aa <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x102>
        else if (strcmp(wav, "db5") == 0) get_filter<10>(db5, h, g);
 23ee4be:	4630      	mov	r0, r6
 23ee4c0:	493c      	ldr	r1, [pc, #240]	; (23ee5b4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x30c>)
 23ee4c2:	f7fa f82f 	bl	23e8524 <strcmp>
 23ee4c6:	b908      	cbnz	r0, 23ee4cc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x224>
 23ee4c8:	4e3b      	ldr	r6, [pc, #236]	; (23ee5b8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x310>)
 23ee4ca:	e70e      	b.n	23ee2ea <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
        else if (strcmp(wav, "db6") == 0) get_filter<12>(db6, h, g);
 23ee4cc:	4630      	mov	r0, r6
 23ee4ce:	493b      	ldr	r1, [pc, #236]	; (23ee5bc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x314>)
 23ee4d0:	f7fa f828 	bl	23e8524 <strcmp>
 23ee4d4:	b908      	cbnz	r0, 23ee4da <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x232>
 23ee4d6:	4e3a      	ldr	r6, [pc, #232]	; (23ee5c0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x318>)
 23ee4d8:	e77f      	b.n	23ee3da <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x132>
        else if (strcmp(wav, "db7") == 0) get_filter<14>(db7, h, g);
 23ee4da:	4630      	mov	r0, r6
 23ee4dc:	4939      	ldr	r1, [pc, #228]	; (23ee5c4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x31c>)
 23ee4de:	f7fa f821 	bl	23e8524 <strcmp>
 23ee4e2:	b908      	cbnz	r0, 23ee4e8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x240>
 23ee4e4:	4e38      	ldr	r6, [pc, #224]	; (23ee5c8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x320>)
 23ee4e6:	e728      	b.n	23ee33a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x92>
        else if (strcmp(wav, "db8") == 0) get_filter<16>(db8, h, g);
 23ee4e8:	4630      	mov	r0, r6
 23ee4ea:	4938      	ldr	r1, [pc, #224]	; (23ee5cc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x324>)
 23ee4ec:	f7fa f81a 	bl	23e8524 <strcmp>
 23ee4f0:	b908      	cbnz	r0, 23ee4f6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x24e>
 23ee4f2:	4e37      	ldr	r6, [pc, #220]	; (23ee5d0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x328>)
 23ee4f4:	e784      	b.n	23ee400 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x158>
        else if (strcmp(wav, "db9") == 0) get_filter<18>(db9, h, g);
 23ee4f6:	4630      	mov	r0, r6
 23ee4f8:	4936      	ldr	r1, [pc, #216]	; (23ee5d4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32c>)
 23ee4fa:	f7fa f813 	bl	23e8524 <strcmp>
 23ee4fe:	b908      	cbnz	r0, 23ee504 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x25c>
 23ee500:	4e35      	ldr	r6, [pc, #212]	; (23ee5d8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x330>)
 23ee502:	e72d      	b.n	23ee360 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb8>
        else if (strcmp(wav, "db10") == 0) get_filter<20>(db10, h, g);
 23ee504:	4630      	mov	r0, r6
 23ee506:	4935      	ldr	r1, [pc, #212]	; (23ee5dc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x334>)
 23ee508:	f7fa f80c 	bl	23e8524 <strcmp>
 23ee50c:	2800      	cmp	r0, #0
 23ee50e:	d169      	bne.n	23ee5e4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x33c>
 23ee510:	4e33      	ldr	r6, [pc, #204]	; (23ee5e0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x338>)
 23ee512:	e788      	b.n	23ee426 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x17e>
 23ee514:	023fb5d6 	.word	0x023fb5d6
 23ee518:	023fd0c0 	.word	0x023fd0c0
 23ee51c:	023fb5de 	.word	0x023fb5de
 23ee520:	023fd0f0 	.word	0x023fd0f0
 23ee524:	023fb5e6 	.word	0x023fb5e6
 23ee528:	023fd140 	.word	0x023fd140
 23ee52c:	023fb5ee 	.word	0x023fb5ee
 23ee530:	023fd170 	.word	0x023fd170
 23ee534:	023fb5f6 	.word	0x023fb5f6
 23ee538:	023fd1c0 	.word	0x023fd1c0
 23ee53c:	023fb5fe 	.word	0x023fb5fe
 23ee540:	023fd230 	.word	0x023fd230
 23ee544:	023fb606 	.word	0x023fb606
 23ee548:	023fd2c0 	.word	0x023fd2c0
 23ee54c:	023fb60e 	.word	0x023fb60e
 23ee550:	023fd2e0 	.word	0x023fd2e0
 23ee554:	023fb616 	.word	0x023fb616
 23ee558:	023fd320 	.word	0x023fd320
 23ee55c:	023fb61e 	.word	0x023fb61e
 23ee560:	023fd380 	.word	0x023fd380
 23ee564:	023fb626 	.word	0x023fb626
 23ee568:	023fd400 	.word	0x023fd400
 23ee56c:	023fb62e 	.word	0x023fb62e
 23ee570:	023fd4a0 	.word	0x023fd4a0
 23ee574:	023fb636 	.word	0x023fb636
 23ee578:	023fd4f0 	.word	0x023fd4f0
 23ee57c:	023fb63e 	.word	0x023fb63e
 23ee580:	023fd550 	.word	0x023fd550
 23ee584:	023fb646 	.word	0x023fb646
 23ee588:	023fcf00 	.word	0x023fcf00
 23ee58c:	023fb64c 	.word	0x023fb64c
 23ee590:	023fcf30 	.word	0x023fcf30
 23ee594:	023fb652 	.word	0x023fb652
 23ee598:	023fcf90 	.word	0x023fcf90
 23ee59c:	023fb658 	.word	0x023fb658
 23ee5a0:	023fc930 	.word	0x023fc930
 23ee5a4:	023fb65c 	.word	0x023fb65c
 23ee5a8:	023fc950 	.word	0x023fc950
 23ee5ac:	023fb660 	.word	0x023fb660
 23ee5b0:	023fc980 	.word	0x023fc980
 23ee5b4:	023fb664 	.word	0x023fb664
 23ee5b8:	023fc9c0 	.word	0x023fc9c0
 23ee5bc:	023fb668 	.word	0x023fb668
 23ee5c0:	023fca10 	.word	0x023fca10
 23ee5c4:	023fb66c 	.word	0x023fb66c
 23ee5c8:	023fca70 	.word	0x023fca70
 23ee5cc:	023fb670 	.word	0x023fb670
 23ee5d0:	023fcae0 	.word	0x023fcae0
 23ee5d4:	023fb674 	.word	0x023fb674
 23ee5d8:	023fcb60 	.word	0x023fcb60
 23ee5dc:	023fb678 	.word	0x023fb678
 23ee5e0:	023fcbf0 	.word	0x023fcbf0
        else if (strcmp(wav, "haar") == 0) get_filter<2>(haar, h, g);
 23ee5e4:	4630      	mov	r0, r6
 23ee5e6:	495f      	ldr	r1, [pc, #380]	; (23ee764 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4bc>)
 23ee5e8:	f7f9 ff9c 	bl	23e8524 <strcmp>
 23ee5ec:	b990      	cbnz	r0, 23ee614 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x36c>
        h.resize(n);
 23ee5ee:	2102      	movs	r1, #2
 23ee5f0:	4620      	mov	r0, r4
 23ee5f2:	f7ff fd13 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        g.resize(n);
 23ee5f6:	2102      	movs	r1, #2
 23ee5f8:	4628      	mov	r0, r5
 23ee5fa:	f7ff fd0f 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
	return *(this->_M_impl._M_start + __n);
 23ee5fe:	6822      	ldr	r2, [r4, #0]
            h[i] = wav[0][n - i - 1];
 23ee600:	4b59      	ldr	r3, [pc, #356]	; (23ee768 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4c0>)
 23ee602:	6013      	str	r3, [r2, #0]
 23ee604:	682a      	ldr	r2, [r5, #0]
            g[i] = wav[1][n - i - 1];
 23ee606:	6013      	str	r3, [r2, #0]
 23ee608:	6822      	ldr	r2, [r4, #0]
            h[i] = wav[0][n - i - 1];
 23ee60a:	6053      	str	r3, [r2, #4]
 23ee60c:	682b      	ldr	r3, [r5, #0]
            g[i] = wav[1][n - i - 1];
 23ee60e:	4a57      	ldr	r2, [pc, #348]	; (23ee76c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4c4>)
 23ee610:	605a      	str	r2, [r3, #4]
        for (size_t i = 0; i < n; i++) {
 23ee612:	e662      	b.n	23ee2da <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x32>
        else if (strcmp(wav, "rbio1.3") == 0) get_filter<6>(rbio1p3, h, g);
 23ee614:	4630      	mov	r0, r6
 23ee616:	4956      	ldr	r1, [pc, #344]	; (23ee770 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4c8>)
 23ee618:	f7f9 ff84 	bl	23e8524 <strcmp>
 23ee61c:	b908      	cbnz	r0, 23ee622 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x37a>
 23ee61e:	4e55      	ldr	r6, [pc, #340]	; (23ee774 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4cc>)
 23ee620:	e64c      	b.n	23ee2bc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x14>
        else if (strcmp(wav, "rbio1.5") == 0) get_filter<10>(rbio1p5, h, g);
 23ee622:	4630      	mov	r0, r6
 23ee624:	4954      	ldr	r1, [pc, #336]	; (23ee778 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4d0>)
 23ee626:	f7f9 ff7d 	bl	23e8524 <strcmp>
 23ee62a:	b908      	cbnz	r0, 23ee630 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x388>
 23ee62c:	4e53      	ldr	r6, [pc, #332]	; (23ee77c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4d4>)
 23ee62e:	e65c      	b.n	23ee2ea <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
        else if (strcmp(wav, "rbio2.2") == 0) get_filter<6>(rbio2p2, h, g);
 23ee630:	4630      	mov	r0, r6
 23ee632:	4953      	ldr	r1, [pc, #332]	; (23ee780 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4d8>)
 23ee634:	f7f9 ff76 	bl	23e8524 <strcmp>
 23ee638:	b908      	cbnz	r0, 23ee63e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x396>
 23ee63a:	4e52      	ldr	r6, [pc, #328]	; (23ee784 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4dc>)
 23ee63c:	e63e      	b.n	23ee2bc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x14>
        else if (strcmp(wav, "rbio2.4") == 0) get_filter<10>(rbio2p4, h, g);
 23ee63e:	4630      	mov	r0, r6
 23ee640:	4951      	ldr	r1, [pc, #324]	; (23ee788 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4e0>)
 23ee642:	f7f9 ff6f 	bl	23e8524 <strcmp>
 23ee646:	b908      	cbnz	r0, 23ee64c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3a4>
 23ee648:	4e50      	ldr	r6, [pc, #320]	; (23ee78c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4e4>)
 23ee64a:	e64e      	b.n	23ee2ea <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
        else if (strcmp(wav, "rbio2.6") == 0) get_filter<14>(rbio2p6, h, g);
 23ee64c:	4630      	mov	r0, r6
 23ee64e:	4950      	ldr	r1, [pc, #320]	; (23ee790 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4e8>)
 23ee650:	f7f9 ff68 	bl	23e8524 <strcmp>
 23ee654:	b908      	cbnz	r0, 23ee65a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3b2>
 23ee656:	4e4f      	ldr	r6, [pc, #316]	; (23ee794 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4ec>)
 23ee658:	e66f      	b.n	23ee33a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x92>
        else if (strcmp(wav, "rbio2.8") == 0) get_filter<18>(rbio2p8, h, g);
 23ee65a:	4630      	mov	r0, r6
 23ee65c:	494e      	ldr	r1, [pc, #312]	; (23ee798 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4f0>)
 23ee65e:	f7f9 ff61 	bl	23e8524 <strcmp>
 23ee662:	b908      	cbnz	r0, 23ee668 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3c0>
 23ee664:	4e4d      	ldr	r6, [pc, #308]	; (23ee79c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4f4>)
 23ee666:	e67b      	b.n	23ee360 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb8>
        else if (strcmp(wav, "rbio3.1") == 0) get_filter<4>(rbio3p1, h, g);
 23ee668:	4630      	mov	r0, r6
 23ee66a:	494d      	ldr	r1, [pc, #308]	; (23ee7a0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4f8>)
 23ee66c:	f7f9 ff5a 	bl	23e8524 <strcmp>
 23ee670:	b908      	cbnz	r0, 23ee676 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3ce>
 23ee672:	4e4c      	ldr	r6, [pc, #304]	; (23ee7a4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4fc>)
 23ee674:	e687      	b.n	23ee386 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xde>
        else if (strcmp(wav, "rbio3.3") == 0) get_filter<8>(rbio3p3, h, g);
 23ee676:	4630      	mov	r0, r6
 23ee678:	494b      	ldr	r1, [pc, #300]	; (23ee7a8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x500>)
 23ee67a:	f7f9 ff53 	bl	23e8524 <strcmp>
 23ee67e:	b908      	cbnz	r0, 23ee684 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3dc>
 23ee680:	4e4a      	ldr	r6, [pc, #296]	; (23ee7ac <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x504>)
 23ee682:	e692      	b.n	23ee3aa <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x102>
        else if (strcmp(wav, "rbio3.5") == 0) get_filter<12>(rbio3p5, h, g);
 23ee684:	4630      	mov	r0, r6
 23ee686:	494a      	ldr	r1, [pc, #296]	; (23ee7b0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x508>)
 23ee688:	f7f9 ff4c 	bl	23e8524 <strcmp>
 23ee68c:	b908      	cbnz	r0, 23ee692 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3ea>
 23ee68e:	4e49      	ldr	r6, [pc, #292]	; (23ee7b4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x50c>)
 23ee690:	e6a3      	b.n	23ee3da <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x132>
        else if (strcmp(wav, "rbio3.7") == 0) get_filter<16>(rbio3p7, h, g);
 23ee692:	4630      	mov	r0, r6
 23ee694:	4948      	ldr	r1, [pc, #288]	; (23ee7b8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x510>)
 23ee696:	f7f9 ff45 	bl	23e8524 <strcmp>
 23ee69a:	b908      	cbnz	r0, 23ee6a0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x3f8>
 23ee69c:	4e47      	ldr	r6, [pc, #284]	; (23ee7bc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x514>)
 23ee69e:	e6af      	b.n	23ee400 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x158>
        else if (strcmp(wav, "rbio3.9") == 0) get_filter<20>(rbio3p9, h, g);
 23ee6a0:	4630      	mov	r0, r6
 23ee6a2:	4947      	ldr	r1, [pc, #284]	; (23ee7c0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x518>)
 23ee6a4:	f7f9 ff3e 	bl	23e8524 <strcmp>
 23ee6a8:	b908      	cbnz	r0, 23ee6ae <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x406>
 23ee6aa:	4e46      	ldr	r6, [pc, #280]	; (23ee7c4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x51c>)
 23ee6ac:	e6bb      	b.n	23ee426 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x17e>
        else if (strcmp(wav, "rbio4.4") == 0) get_filter<10>(rbio4p4, h, g);
 23ee6ae:	4630      	mov	r0, r6
 23ee6b0:	4945      	ldr	r1, [pc, #276]	; (23ee7c8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x520>)
 23ee6b2:	f7f9 ff37 	bl	23e8524 <strcmp>
 23ee6b6:	b908      	cbnz	r0, 23ee6bc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x414>
 23ee6b8:	4e44      	ldr	r6, [pc, #272]	; (23ee7cc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x524>)
 23ee6ba:	e616      	b.n	23ee2ea <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
        else if (strcmp(wav, "rbio5.5") == 0) get_filter<12>(rbio5p5, h, g);
 23ee6bc:	4630      	mov	r0, r6
 23ee6be:	4944      	ldr	r1, [pc, #272]	; (23ee7d0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x528>)
 23ee6c0:	f7f9 ff30 	bl	23e8524 <strcmp>
 23ee6c4:	b908      	cbnz	r0, 23ee6ca <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x422>
 23ee6c6:	4e43      	ldr	r6, [pc, #268]	; (23ee7d4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x52c>)
 23ee6c8:	e687      	b.n	23ee3da <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x132>
        else if (strcmp(wav, "rbio6.8") == 0) get_filter<18>(rbio6p8, h, g);
 23ee6ca:	4630      	mov	r0, r6
 23ee6cc:	4942      	ldr	r1, [pc, #264]	; (23ee7d8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x530>)
 23ee6ce:	f7f9 ff29 	bl	23e8524 <strcmp>
 23ee6d2:	b908      	cbnz	r0, 23ee6d8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x430>
 23ee6d4:	4e41      	ldr	r6, [pc, #260]	; (23ee7dc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x534>)
 23ee6d6:	e643      	b.n	23ee360 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb8>
        else if (strcmp(wav, "sym2") == 0) get_filter<4>(sym2, h, g);
 23ee6d8:	4630      	mov	r0, r6
 23ee6da:	4941      	ldr	r1, [pc, #260]	; (23ee7e0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x538>)
 23ee6dc:	f7f9 ff22 	bl	23e8524 <strcmp>
 23ee6e0:	b908      	cbnz	r0, 23ee6e6 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x43e>
 23ee6e2:	4e40      	ldr	r6, [pc, #256]	; (23ee7e4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x53c>)
 23ee6e4:	e64f      	b.n	23ee386 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xde>
        else if (strcmp(wav, "sym3") == 0) get_filter<6>(sym3, h, g);
 23ee6e6:	4630      	mov	r0, r6
 23ee6e8:	493f      	ldr	r1, [pc, #252]	; (23ee7e8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x540>)
 23ee6ea:	f7f9 ff1b 	bl	23e8524 <strcmp>
 23ee6ee:	b908      	cbnz	r0, 23ee6f4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x44c>
 23ee6f0:	4e3e      	ldr	r6, [pc, #248]	; (23ee7ec <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x544>)
 23ee6f2:	e5e3      	b.n	23ee2bc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x14>
        else if (strcmp(wav, "sym4") == 0) get_filter<8>(sym4, h, g);
 23ee6f4:	4630      	mov	r0, r6
 23ee6f6:	493e      	ldr	r1, [pc, #248]	; (23ee7f0 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x548>)
 23ee6f8:	f7f9 ff14 	bl	23e8524 <strcmp>
 23ee6fc:	b908      	cbnz	r0, 23ee702 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x45a>
 23ee6fe:	4e3d      	ldr	r6, [pc, #244]	; (23ee7f4 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x54c>)
 23ee700:	e653      	b.n	23ee3aa <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x102>
        else if (strcmp(wav, "sym5") == 0) get_filter<10>(sym5, h, g);
 23ee702:	4630      	mov	r0, r6
 23ee704:	493c      	ldr	r1, [pc, #240]	; (23ee7f8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x550>)
 23ee706:	f7f9 ff0d 	bl	23e8524 <strcmp>
 23ee70a:	b908      	cbnz	r0, 23ee710 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x468>
 23ee70c:	4e3b      	ldr	r6, [pc, #236]	; (23ee7fc <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x554>)
 23ee70e:	e5ec      	b.n	23ee2ea <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x42>
        else if (strcmp(wav, "sym6") == 0) get_filter<12>(sym6, h, g);
 23ee710:	4630      	mov	r0, r6
 23ee712:	493b      	ldr	r1, [pc, #236]	; (23ee800 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x558>)
 23ee714:	f7f9 ff06 	bl	23e8524 <strcmp>
 23ee718:	b908      	cbnz	r0, 23ee71e <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x476>
 23ee71a:	4e3a      	ldr	r6, [pc, #232]	; (23ee804 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x55c>)
 23ee71c:	e65d      	b.n	23ee3da <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x132>
        else if (strcmp(wav, "sym7") == 0) get_filter<14>(sym7, h, g);
 23ee71e:	4630      	mov	r0, r6
 23ee720:	4939      	ldr	r1, [pc, #228]	; (23ee808 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x560>)
 23ee722:	f7f9 feff 	bl	23e8524 <strcmp>
 23ee726:	b908      	cbnz	r0, 23ee72c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x484>
 23ee728:	4e38      	ldr	r6, [pc, #224]	; (23ee80c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x564>)
 23ee72a:	e606      	b.n	23ee33a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x92>
        else if (strcmp(wav, "sym8") == 0) get_filter<16>(sym8, h, g);
 23ee72c:	4630      	mov	r0, r6
 23ee72e:	4938      	ldr	r1, [pc, #224]	; (23ee810 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x568>)
 23ee730:	f7f9 fef8 	bl	23e8524 <strcmp>
 23ee734:	b908      	cbnz	r0, 23ee73a <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x492>
 23ee736:	4e37      	ldr	r6, [pc, #220]	; (23ee814 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x56c>)
 23ee738:	e662      	b.n	23ee400 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x158>
        else if (strcmp(wav, "sym9") == 0) get_filter<18>(sym9, h, g);
 23ee73a:	4630      	mov	r0, r6
 23ee73c:	4936      	ldr	r1, [pc, #216]	; (23ee818 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x570>)
 23ee73e:	f7f9 fef1 	bl	23e8524 <strcmp>
 23ee742:	b908      	cbnz	r0, 23ee748 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4a0>
 23ee744:	4e35      	ldr	r6, [pc, #212]	; (23ee81c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x574>)
 23ee746:	e60b      	b.n	23ee360 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0xb8>
        else if (strcmp(wav, "sym10") == 0) get_filter<20>(sym10, h, g);
 23ee748:	4630      	mov	r0, r6
 23ee74a:	4935      	ldr	r1, [pc, #212]	; (23ee820 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x578>)
 23ee74c:	f7f9 feea 	bl	23e8524 <strcmp>
 23ee750:	b908      	cbnz	r0, 23ee756 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x4ae>
 23ee752:	4e34      	ldr	r6, [pc, #208]	; (23ee824 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x57c>)
 23ee754:	e667      	b.n	23ee426 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x17e>
        else assert(0); // wavelet not in the list
 23ee756:	2184      	movs	r1, #132	; 0x84
 23ee758:	4b33      	ldr	r3, [pc, #204]	; (23ee828 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x580>)
 23ee75a:	4a34      	ldr	r2, [pc, #208]	; (23ee82c <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x584>)
 23ee75c:	4834      	ldr	r0, [pc, #208]	; (23ee830 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_+0x588>)
 23ee75e:	f006 f84f 	bl	23f4800 <__assert_func>
 23ee762:	bf00      	nop
 23ee764:	023fb67d 	.word	0x023fb67d
 23ee768:	3f3504f3 	.word	0x3f3504f3
 23ee76c:	bf3504f3 	.word	0xbf3504f3
 23ee770:	023fb682 	.word	0x023fb682
 23ee774:	023fd5e0 	.word	0x023fd5e0
 23ee778:	023fb68a 	.word	0x023fb68a
 23ee77c:	023fd610 	.word	0x023fd610
 23ee780:	023fb692 	.word	0x023fb692
 23ee784:	023fd660 	.word	0x023fd660
 23ee788:	023fb69a 	.word	0x023fb69a
 23ee78c:	023fd690 	.word	0x023fd690
 23ee790:	023fb6a2 	.word	0x023fb6a2
 23ee794:	023fd6e0 	.word	0x023fd6e0
 23ee798:	023fb6aa 	.word	0x023fb6aa
 23ee79c:	023fd750 	.word	0x023fd750
 23ee7a0:	023fb6b2 	.word	0x023fb6b2
 23ee7a4:	023fd7e0 	.word	0x023fd7e0
 23ee7a8:	023fb6ba 	.word	0x023fb6ba
 23ee7ac:	023fd800 	.word	0x023fd800
 23ee7b0:	023fb6c2 	.word	0x023fb6c2
 23ee7b4:	023fd840 	.word	0x023fd840
 23ee7b8:	023fb6ca 	.word	0x023fb6ca
 23ee7bc:	023fd8a0 	.word	0x023fd8a0
 23ee7c0:	023fb6d2 	.word	0x023fb6d2
 23ee7c4:	023fd920 	.word	0x023fd920
 23ee7c8:	023fb6da 	.word	0x023fb6da
 23ee7cc:	023fd9c0 	.word	0x023fd9c0
 23ee7d0:	023fb6e2 	.word	0x023fb6e2
 23ee7d4:	023fda10 	.word	0x023fda10
 23ee7d8:	023fb6ea 	.word	0x023fb6ea
 23ee7dc:	023fda70 	.word	0x023fda70
 23ee7e0:	023fb6f2 	.word	0x023fb6f2
 23ee7e4:	023fc930 	.word	0x023fc930
 23ee7e8:	023fb6f7 	.word	0x023fb6f7
 23ee7ec:	023fc950 	.word	0x023fc950
 23ee7f0:	023fb6fc 	.word	0x023fb6fc
 23ee7f4:	023fcc90 	.word	0x023fcc90
 23ee7f8:	023fb701 	.word	0x023fb701
 23ee7fc:	023fccd0 	.word	0x023fccd0
 23ee800:	023fb706 	.word	0x023fb706
 23ee804:	023fcd20 	.word	0x023fcd20
 23ee808:	023fb70b 	.word	0x023fb70b
 23ee80c:	023fcd80 	.word	0x023fcd80
 23ee810:	023fb710 	.word	0x023fb710
 23ee814:	023fcdf0 	.word	0x023fcdf0
 23ee818:	023fb715 	.word	0x023fb715
 23ee81c:	023fce70 	.word	0x023fce70
 23ee820:	023fb71a 	.word	0x023fb71a
 23ee824:	023fd020 	.word	0x023fd020
 23ee828:	023fe7e9 	.word	0x023fe7e9
 23ee82c:	023fb720 	.word	0x023fb720
 23ee830:	023fb786 	.word	0x023fb786

023ee834 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>:
        }
        features.push_back(mc / (float)y.size());
    }

    static void
    dwt(const float *x, size_t nx, const float *h, const float *g, size_t nh, fvec &a, fvec &d)
 23ee834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ee838:	b087      	sub	sp, #28
 23ee83a:	469a      	mov	sl, r3
 23ee83c:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
    {
        assert(nh <= 20 && nh > 0 && nx > 0);
 23ee840:	1e63      	subs	r3, r4, #1
 23ee842:	2b13      	cmp	r3, #19
    dwt(const float *x, size_t nx, const float *h, const float *g, size_t nh, fvec &a, fvec &d)
 23ee844:	4683      	mov	fp, r0
 23ee846:	460e      	mov	r6, r1
 23ee848:	4691      	mov	r9, r2
 23ee84a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
        assert(nh <= 20 && nh > 0 && nx > 0);
 23ee84e:	d800      	bhi.n	23ee852 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x1e>
 23ee850:	b929      	cbnz	r1, 23ee85e <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x2a>
 23ee852:	21cb      	movs	r1, #203	; 0xcb
 23ee854:	4b44      	ldr	r3, [pc, #272]	; (23ee968 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x134>)
 23ee856:	4a45      	ldr	r2, [pc, #276]	; (23ee96c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x138>)
 23ee858:	4845      	ldr	r0, [pc, #276]	; (23ee970 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x13c>)
 23ee85a:	f005 ffd1 	bl	23f4800 <__assert_func>
        size_t nx_padded = nx + nh * 2 - 2;
 23ee85e:	3902      	subs	r1, #2
        fvec x_padded(nx_padded);
 23ee860:	aa02      	add	r2, sp, #8
 23ee862:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 23ee866:	a803      	add	r0, sp, #12
 23ee868:	f7ff f89c 	bl	23ed9a4 <_ZNSt6vectorIfN2ei7EiAllocIfEEEC1EjRKS2_>
 23ee86c:	2200      	movs	r2, #0
 23ee86e:	1ea3      	subs	r3, r4, #2
 23ee870:	eb0b 0383 	add.w	r3, fp, r3, lsl #2

        // symmetric padding (default in PyWavelet)
        for (size_t i = 0; i < nh - 2; i++)
 23ee874:	455b      	cmp	r3, fp
 23ee876:	9903      	ldr	r1, [sp, #12]
 23ee878:	d005      	beq.n	23ee886 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x52>
            x_padded[i] = x[nh - 3 - i];
 23ee87a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 23ee87e:	4411      	add	r1, r2
 23ee880:	6008      	str	r0, [r1, #0]
        for (size_t i = 0; i < nh - 2; i++)
 23ee882:	3204      	adds	r2, #4
 23ee884:	e7f6      	b.n	23ee874 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x40>
 23ee886:	465d      	mov	r5, fp
 23ee888:	eb0b 0186 	add.w	r1, fp, r6, lsl #2
 23ee88c:	00a3      	lsls	r3, r4, #2
 23ee88e:	ebcb 0084 	rsb	r0, fp, r4, lsl #2
        for (size_t i = 0; i < nx; i++)
            x_padded[i + nh - 2] = x[i];
 23ee892:	f855 cb04 	ldr.w	ip, [r5], #4
 23ee896:	9a03      	ldr	r2, [sp, #12]
        for (size_t i = 0; i < nx; i++)
 23ee898:	428d      	cmp	r5, r1
            x_padded[i + nh - 2] = x[i];
 23ee89a:	442a      	add	r2, r5
 23ee89c:	4402      	add	r2, r0
 23ee89e:	f842 cc0c 	str.w	ip, [r2, #-12]
        for (size_t i = 0; i < nx; i++)
 23ee8a2:	d1f6      	bne.n	23ee892 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x5e>
 23ee8a4:	f06f 010b 	mvn.w	r1, #11
 23ee8a8:	eb04 0046 	add.w	r0, r4, r6, lsl #1
 23ee8ac:	eba5 0c03 	sub.w	ip, r5, r3
 23ee8b0:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
 23ee8b4:	3e01      	subs	r6, #1
        for (size_t i = 0; i < nh; i++)
            x_padded[i + nx + nh - 2] = x[nx - 1 - i];
 23ee8b6:	f855 ed04 	ldr.w	lr, [r5, #-4]!
 23ee8ba:	9a03      	ldr	r2, [sp, #12]
 23ee8bc:	1b48      	subs	r0, r1, r5
 23ee8be:	445a      	add	r2, fp
 23ee8c0:	4402      	add	r2, r0
        for (size_t i = 0; i < nh; i++)
 23ee8c2:	4565      	cmp	r5, ip
            x_padded[i + nx + nh - 2] = x[nx - 1 - i];
 23ee8c4:	f8c2 e000 	str.w	lr, [r2]
        for (size_t i = 0; i < nh; i++)
 23ee8c8:	d1f5      	bne.n	23ee8b6 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x82>

        size_t ny = (nx + nh - 1) / 2;
 23ee8ca:	4434      	add	r4, r6
 23ee8cc:	0864      	lsrs	r4, r4, #1
        a.resize(ny);
 23ee8ce:	4621      	mov	r1, r4
 23ee8d0:	4638      	mov	r0, r7
 23ee8d2:	9301      	str	r3, [sp, #4]
 23ee8d4:	f7ff fba2 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
        d.resize(ny);
 23ee8d8:	4621      	mov	r1, r4
 23ee8da:	4640      	mov	r0, r8
 23ee8dc:	f7ff fb9e 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>

        // decimate and filter
        const float *xx = x_padded.data();
        for (size_t i = 0; i < ny; i++) {
 23ee8e0:	2100      	movs	r1, #0
 23ee8e2:	9a03      	ldr	r2, [sp, #12]
 23ee8e4:	9b01      	ldr	r3, [sp, #4]
 23ee8e6:	4413      	add	r3, r2
 23ee8e8:	42a1      	cmp	r1, r4
 23ee8ea:	d027      	beq.n	23ee93c <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x108>
    for (size_t i = 0; i < sz; i++) {
 23ee8ec:	464d      	mov	r5, r9
        for (size_t i = 0; i < ny; i++) {
 23ee8ee:	4610      	mov	r0, r2
    float sum = 0.0f;
 23ee8f0:	eddf 7a20 	vldr	s15, [pc, #128]	; 23ee974 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x140>
        sum += x[i] * y[i];
 23ee8f4:	ecf0 6a01 	vldmia	r0!, {s13}
 23ee8f8:	ecb5 7a01 	vldmia	r5!, {s14}
    for (size_t i = 0; i < sz; i++) {
 23ee8fc:	4283      	cmp	r3, r0
        sum += x[i] * y[i];
 23ee8fe:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (size_t i = 0; i < sz; i++) {
 23ee902:	d1f7      	bne.n	23ee8f4 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xc0>
            a[i] = dot(xx + 2 * i, h, nh);
 23ee904:	683d      	ldr	r5, [r7, #0]
 23ee906:	4656      	mov	r6, sl
 23ee908:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 23ee90c:	edc5 7a00 	vstr	s15, [r5]
 23ee910:	4615      	mov	r5, r2
    float sum = 0.0f;
 23ee912:	eddf 7a18 	vldr	s15, [pc, #96]	; 23ee974 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x140>
 23ee916:	ea4f 0c81 	mov.w	ip, r1, lsl #2
        sum += x[i] * y[i];
 23ee91a:	ecf5 6a01 	vldmia	r5!, {s13}
 23ee91e:	ecb6 7a01 	vldmia	r6!, {s14}
    for (size_t i = 0; i < sz; i++) {
 23ee922:	42ab      	cmp	r3, r5
        sum += x[i] * y[i];
 23ee924:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (size_t i = 0; i < sz; i++) {
 23ee928:	d1f7      	bne.n	23ee91a <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xe6>
            d[i] = dot(xx + 2 * i, g, nh);
 23ee92a:	f8d8 0000 	ldr.w	r0, [r8]
        for (size_t i = 0; i < ny; i++) {
 23ee92e:	3101      	adds	r1, #1
            d[i] = dot(xx + 2 * i, g, nh);
 23ee930:	4460      	add	r0, ip
 23ee932:	edc0 7a00 	vstr	s15, [r0]
        for (size_t i = 0; i < ny; i++) {
 23ee936:	3208      	adds	r2, #8
 23ee938:	3308      	adds	r3, #8
 23ee93a:	e7d5      	b.n	23ee8e8 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0xb4>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23ee93c:	e9d8 0100 	ldrd	r0, r1, [r8]
 23ee940:	1a09      	subs	r1, r1, r0
        }

        numpy::underflow_handling(d.data(), d.size());
 23ee942:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 23ee978 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x144>
 23ee946:	1089      	asrs	r1, r1, #2
 23ee948:	f7fd f89c 	bl	23eba84 <_ZN2ei5numpy18underflow_handlingEPfjf>
 23ee94c:	e9d7 0100 	ldrd	r0, r1, [r7]
 23ee950:	1a09      	subs	r1, r1, r0
        numpy::underflow_handling(a.data(), a.size());
 23ee952:	ed9f 0a09 	vldr	s0, [pc, #36]	; 23ee978 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_+0x144>
 23ee956:	1089      	asrs	r1, r1, #2
 23ee958:	f7fd f894 	bl	23eba84 <_ZN2ei5numpy18underflow_handlingEPfjf>
      }
 23ee95c:	a803      	add	r0, sp, #12
 23ee95e:	f7fd fe63 	bl	23ec628 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
    }
 23ee962:	b007      	add	sp, #28
 23ee964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ee968:	023fb7fa 	.word	0x023fb7fa
 23ee96c:	023fb817 	.word	0x023fb817
 23ee970:	023fb786 	.word	0x023fb786
 23ee974:	00000000 	.word	0x00000000
 23ee978:	33d6bf95 	.word	0x33d6bf95

023ee97c <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b>:
{
 23ee97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ee980:	ed2d 8b02 	vpush	{d8}
 23ee984:	460d      	mov	r5, r1
      : _M_current(__i) { }
 23ee986:	e9d0 4100 	ldrd	r4, r1, [r0]
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last)
 23ee98a:	428c      	cmp	r4, r1
 23ee98c:	4607      	mov	r7, r0
 23ee98e:	4616      	mov	r6, r2
 23ee990:	4698      	mov	r8, r3
 23ee992:	d011      	beq.n	23ee9b8 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x3c>
 23ee994:	4622      	mov	r2, r4
 23ee996:	1d23      	adds	r3, r4, #4
	return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 23ee998:	4299      	cmp	r1, r3
	++_M_current;
 23ee99a:	4618      	mov	r0, r3
 23ee99c:	edd2 7a00 	vldr	s15, [r2]
 23ee9a0:	d00b      	beq.n	23ee9ba <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x3e>
	if (__comp(__first, __result))
 23ee9a2:	ed90 7a00 	vldr	s14, [r0]
 23ee9a6:	eeb4 7a67 	vcmp.f32	s14, s15
 23ee9aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee9ae:	f103 0304 	add.w	r3, r3, #4
 23ee9b2:	bf48      	it	mi
 23ee9b4:	4602      	movmi	r2, r0
 23ee9b6:	e7ef      	b.n	23ee998 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x1c>
 23ee9b8:	4622      	mov	r2, r4
    _GLIBCXX14_CONSTEXPR
    _ForwardIterator
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
		  _Compare __comp)
    {
      if (__first == __last) return __first;
 23ee9ba:	428c      	cmp	r4, r1
    float min = *std::min_element(x.begin(), x.end());
 23ee9bc:	ed92 8a00 	vldr	s16, [r2]
 23ee9c0:	d010      	beq.n	23ee9e4 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x68>
 23ee9c2:	1d23      	adds	r3, r4, #4
      _ForwardIterator __result = __first;
      while (++__first != __last)
 23ee9c4:	4299      	cmp	r1, r3
 23ee9c6:	461a      	mov	r2, r3
 23ee9c8:	edd4 7a00 	vldr	s15, [r4]
 23ee9cc:	d00a      	beq.n	23ee9e4 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x68>
	if (__comp(__result, __first))
 23ee9ce:	ed92 7a00 	vldr	s14, [r2]
 23ee9d2:	eeb4 7a67 	vcmp.f32	s14, s15
 23ee9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23ee9da:	f103 0304 	add.w	r3, r3, #4
 23ee9de:	bfc8      	it	gt
 23ee9e0:	4614      	movgt	r4, r2
 23ee9e2:	e7ef      	b.n	23ee9c4 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x48>
    float step = (max - min) / nbins;
 23ee9e4:	edd4 7a00 	vldr	s15, [r4]
 23ee9e8:	ee07 5a10 	vmov	s14, r5
 23ee9ec:	ee77 7ac8 	vsub.f32	s15, s15, s16
 23ee9f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    h.resize(nbins);
 23ee9f4:	4629      	mov	r1, r5
 23ee9f6:	4630      	mov	r0, r6
    float step = (max - min) / nbins;
 23ee9f8:	eec7 8a87 	vdiv.f32	s17, s15, s14
    h.resize(nbins);
 23ee9fc:	f7ff fb0e 	bl	23ee01c <_ZNSt6vectorIfN2ei7EiAllocIfEEE6resizeEj>
    for (size_t i = 0; i < x.size(); i++) {
 23eea00:	2100      	movs	r1, #0
        h[bin]++;
 23eea02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
            bin = nbins - 1;
 23eea06:	1e6c      	subs	r4, r5, #1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23eea08:	e9d7 3200 	ldrd	r3, r2, [r7]
 23eea0c:	1ad2      	subs	r2, r2, r3
    for (size_t i = 0; i < x.size(); i++) {
 23eea0e:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 23eea12:	d219      	bcs.n	23eea48 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xcc>
        size_t bin = (x[i] - min) / step;
 23eea14:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 23eea18:	ed93 7a00 	vldr	s14, [r3]
 23eea1c:	ee37 7a48 	vsub.f32	s14, s14, s16
 23eea20:	eec7 7a28 	vdiv.f32	s15, s14, s17
 23eea24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 23eea28:	ee17 2a90 	vmov	r2, s15
        if (bin >= nbins)
 23eea2c:	4295      	cmp	r5, r2
            bin = nbins - 1;
 23eea2e:	bf98      	it	ls
 23eea30:	4622      	movls	r2, r4
	return *(this->_M_impl._M_start + __n);
 23eea32:	6830      	ldr	r0, [r6, #0]
    for (size_t i = 0; i < x.size(); i++) {
 23eea34:	3101      	adds	r1, #1
 23eea36:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        h[bin]++;
 23eea3a:	edd2 7a00 	vldr	s15, [r2]
 23eea3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 23eea42:	edc2 7a00 	vstr	s15, [r2]
    for (size_t i = 0; i < x.size(); i++) {
 23eea46:	e7df      	b.n	23eea08 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0x8c>
    if (normalize) {
 23eea48:	f1b8 0f00 	cmp.w	r8, #0
 23eea4c:	d013      	beq.n	23eea76 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xfa>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23eea4e:	e9d6 0100 	ldrd	r0, r1, [r6]
 23eea52:	1a09      	subs	r1, r1, r0
        float s = numpy::sum(h.data(), h.size());
 23eea54:	1089      	asrs	r1, r1, #2
 23eea56:	f7fc fb65 	bl	23eb124 <_ZN2ei5numpy3sumEPfj>
        for (size_t i = 0; i < nbins; i++) {
 23eea5a:	2300      	movs	r3, #0
 23eea5c:	429d      	cmp	r5, r3
 23eea5e:	d00a      	beq.n	23eea76 <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xfa>
	return *(this->_M_impl._M_start + __n);
 23eea60:	6832      	ldr	r2, [r6, #0]
 23eea62:	eb02 0283 	add.w	r2, r2, r3, lsl #2
            h[i] /= s;
 23eea66:	ed92 7a00 	vldr	s14, [r2]
 23eea6a:	eec7 7a00 	vdiv.f32	s15, s14, s0
        for (size_t i = 0; i < nbins; i++) {
 23eea6e:	3301      	adds	r3, #1
            h[i] /= s;
 23eea70:	edc2 7a00 	vstr	s15, [r2]
        for (size_t i = 0; i < nbins; i++) {
 23eea74:	e7f2      	b.n	23eea5c <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b+0xe0>
}
 23eea76:	ecbd 8b02 	vpop	{d8}
 23eea7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023eea80 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>:
      push_back(const value_type& __x)
 23eea80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 23eea84:	e9d0 7301 	ldrd	r7, r3, [r0, #4]
 23eea88:	429f      	cmp	r7, r3
      push_back(const value_type& __x)
 23eea8a:	4604      	mov	r4, r0
 23eea8c:	468a      	mov	sl, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 23eea8e:	d007      	beq.n	23eeaa0 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x20>
 23eea90:	b10f      	cbz	r7, 23eea96 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x16>
 23eea92:	680b      	ldr	r3, [r1, #0]
 23eea94:	603b      	str	r3, [r7, #0]
	    ++this->_M_impl._M_finish;
 23eea96:	6863      	ldr	r3, [r4, #4]
 23eea98:	3304      	adds	r3, #4
 23eea9a:	6063      	str	r3, [r4, #4]
      }
 23eea9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 23eeaa0:	2101      	movs	r1, #1
 23eeaa2:	4a16      	ldr	r2, [pc, #88]	; (23eeafc <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x7c>)
 23eeaa4:	f7ff fa5c 	bl	23edf60 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 23eeaa8:	f8d4 8000 	ldr.w	r8, [r4]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23eeaac:	4606      	mov	r6, r0
    { return __lhs.base() - __rhs.base(); }
 23eeaae:	eba7 0908 	sub.w	r9, r7, r8
 23eeab2:	b300      	cbz	r0, 23eeaf6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x76>
 23eeab4:	f7fb fe76 	bl	23ea7a4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj.part.0>
 23eeab8:	4605      	mov	r5, r0
 23eeaba:	eb15 0909 	adds.w	r9, r5, r9
 23eeabe:	bf18      	it	ne
 23eeac0:	f8da 3000 	ldrne.w	r3, [sl]
 23eeac4:	4639      	mov	r1, r7
 23eeac6:	462a      	mov	r2, r5
 23eeac8:	bf18      	it	ne
 23eeaca:	f8c9 3000 	strne.w	r3, [r9]
 23eeace:	4640      	mov	r0, r8
 23eead0:	f7fb ff6f 	bl	23ea9b2 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0>
 23eead4:	1d02      	adds	r2, r0, #4
 23eead6:	4638      	mov	r0, r7
 23eead8:	f7fb ff6b 	bl	23ea9b2 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0>
 23eeadc:	4607      	mov	r7, r0
	if (__p)
 23eeade:	f1b8 0f00 	cmp.w	r8, #0
 23eeae2:	d002      	beq.n	23eeaea <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x6a>
 23eeae4:	4640      	mov	r0, r8
 23eeae6:	f001 fada 	bl	23f009e <_Z7ei_freePv>
      this->_M_impl._M_finish = __new_finish;
 23eeaea:	e9c4 5700 	strd	r5, r7, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 23eeaee:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 23eeaf2:	60a5      	str	r5, [r4, #8]
      }
 23eeaf4:	e7d2      	b.n	23eea9c <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x1c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23eeaf6:	4605      	mov	r5, r0
 23eeaf8:	e7df      	b.n	23eeaba <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf+0x3a>
 23eeafa:	bf00      	nop
 23eeafc:	023fb368 	.word	0x023fb368

023eeb00 <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_>:
    static void calculate_entropy(const fvec &y, fvec &features)
 23eeb00:	b530      	push	{r4, r5, lr}
 23eeb02:	ed2d 8b02 	vpush	{d8}
	: _M_start(), _M_finish(), _M_end_of_storage()
 23eeb06:	2400      	movs	r4, #0
 23eeb08:	b085      	sub	sp, #20
        histo(y, 100, h, true);
 23eeb0a:	2301      	movs	r3, #1
    static void calculate_entropy(const fvec &y, fvec &features)
 23eeb0c:	460d      	mov	r5, r1
        histo(y, 100, h, true);
 23eeb0e:	aa01      	add	r2, sp, #4
 23eeb10:	2164      	movs	r1, #100	; 0x64
 23eeb12:	e9cd 4401 	strd	r4, r4, [sp, #4]
 23eeb16:	9403      	str	r4, [sp, #12]
 23eeb18:	f7ff ff30 	bl	23ee97c <_ZN2ei8spectral5histoERKSt6vectorIfNS_7EiAllocIfEEEjRS4_b>
        float entropy = 0.0f;
 23eeb1c:	2300      	movs	r3, #0
 23eeb1e:	9300      	str	r3, [sp, #0]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23eeb20:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 23eeb24:	1ad2      	subs	r2, r2, r3
        for (size_t i = 0; i < h.size(); i++) {
 23eeb26:	ebb4 0fa2 	cmp.w	r4, r2, asr #2
 23eeb2a:	d214      	bcs.n	23eeb56 <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x56>
            if (h[i] > 0.0f) {
 23eeb2c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 23eeb30:	ed93 8a00 	vldr	s16, [r3]
 23eeb34:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23eeb38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eeb3c:	dd09      	ble.n	23eeb52 <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x52>
  { return __builtin_logf(__x); }
 23eeb3e:	eeb0 0a48 	vmov.f32	s0, s16
 23eeb42:	f008 faa7 	bl	23f7094 <logf>
                entropy -= h[i] * log(h[i]);
 23eeb46:	eddd 7a00 	vldr	s15, [sp]
 23eeb4a:	eee8 7a40 	vfms.f32	s15, s16, s0
 23eeb4e:	edcd 7a00 	vstr	s15, [sp]
        for (size_t i = 0; i < h.size(); i++) {
 23eeb52:	3401      	adds	r4, #1
 23eeb54:	e7e4      	b.n	23eeb20 <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_+0x20>
        features.push_back(entropy);
 23eeb56:	4669      	mov	r1, sp
 23eeb58:	4628      	mov	r0, r5
 23eeb5a:	f7ff ff91 	bl	23eea80 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
      }
 23eeb5e:	a801      	add	r0, sp, #4
 23eeb60:	f7fd fd62 	bl	23ec628 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
    }
 23eeb64:	b005      	add	sp, #20
 23eeb66:	ecbd 8b02 	vpop	{d8}
 23eeb6a:	bd30      	pop	{r4, r5, pc}

023eeb6c <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>:
      vector<_Tp, _Alloc>::
 23eeb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 23eeb70:	e9d0 7301 	ldrd	r7, r3, [r0, #4]
 23eeb74:	429f      	cmp	r7, r3
      vector<_Tp, _Alloc>::
 23eeb76:	4604      	mov	r4, r0
 23eeb78:	468a      	mov	sl, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 23eeb7a:	d007      	beq.n	23eeb8c <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0+0x20>
 23eeb7c:	b10f      	cbz	r7, 23eeb82 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0+0x16>
 23eeb7e:	680b      	ldr	r3, [r1, #0]
 23eeb80:	603b      	str	r3, [r7, #0]
	    ++this->_M_impl._M_finish;
 23eeb82:	6863      	ldr	r3, [r4, #4]
 23eeb84:	3304      	adds	r3, #4
 23eeb86:	6063      	str	r3, [r4, #4]
      }
 23eeb88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 23eeb8c:	2101      	movs	r1, #1
 23eeb8e:	4a16      	ldr	r2, [pc, #88]	; (23eebe8 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0+0x7c>)
 23eeb90:	f7ff f9e6 	bl	23edf60 <_ZNKSt6vectorIfN2ei7EiAllocIfEEE12_M_check_lenEjPKc>
      pointer __old_start = this->_M_impl._M_start;
 23eeb94:	f8d4 8000 	ldr.w	r8, [r4]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23eeb98:	4606      	mov	r6, r0
 23eeb9a:	eba7 0908 	sub.w	r9, r7, r8
 23eeb9e:	b300      	cbz	r0, 23eebe2 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0+0x76>
 23eeba0:	f7fb fe00 	bl	23ea7a4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj.part.0>
 23eeba4:	4605      	mov	r5, r0
 23eeba6:	eb15 0909 	adds.w	r9, r5, r9
 23eebaa:	bf18      	it	ne
 23eebac:	f8da 3000 	ldrne.w	r3, [sl]
 23eebb0:	4639      	mov	r1, r7
 23eebb2:	462a      	mov	r2, r5
 23eebb4:	bf18      	it	ne
 23eebb6:	f8c9 3000 	strne.w	r3, [r9]
 23eebba:	4640      	mov	r0, r8
 23eebbc:	f7fb fef9 	bl	23ea9b2 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0>
 23eebc0:	1d02      	adds	r2, r0, #4
 23eebc2:	4638      	mov	r0, r7
 23eebc4:	f7fb fef5 	bl	23ea9b2 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0>
 23eebc8:	4607      	mov	r7, r0
	if (__p)
 23eebca:	f1b8 0f00 	cmp.w	r8, #0
 23eebce:	d002      	beq.n	23eebd6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0+0x6a>
 23eebd0:	4640      	mov	r0, r8
 23eebd2:	f001 fa64 	bl	23f009e <_Z7ei_freePv>
      this->_M_impl._M_finish = __new_finish;
 23eebd6:	e9c4 5700 	strd	r5, r7, [r4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 23eebda:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 23eebde:	60a5      	str	r5, [r4, #8]
	return back();
 23eebe0:	e7d2      	b.n	23eeb88 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0+0x1c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 23eebe2:	4605      	mov	r5, r0
 23eebe4:	e7df      	b.n	23eeba6 <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0+0x3a>
 23eebe6:	bf00      	nop
 23eebe8:	023fb368 	.word	0x023fb368

023eebec <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>:
    static void calculate_statistics(const fvec &y, fvec &features, float mean)
 23eebec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23eebf0:	460c      	mov	r4, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23eebf2:	e9d0 3100 	ldrd	r3, r1, [r0]
 23eebf6:	1ac9      	subs	r1, r1, r3
	: _M_start(), _M_finish(), _M_end_of_storage()
 23eebf8:	2300      	movs	r3, #0
 23eebfa:	4605      	mov	r5, r0
 23eebfc:	b08e      	sub	sp, #56	; 0x38
      { _M_create_storage(__n); }
 23eebfe:	1089      	asrs	r1, r1, #2
 23eec00:	a803      	add	r0, sp, #12
	: _M_start(), _M_finish(), _M_end_of_storage()
 23eec02:	e9cd 3303 	strd	r3, r3, [sp, #12]
 23eec06:	9305      	str	r3, [sp, #20]
 23eec08:	ed8d 0a01 	vstr	s0, [sp, #4]
      { _M_create_storage(__n); }
 23eec0c:	f7fe febd 	bl	23ed98a <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE17_M_create_storageEj>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 23eec10:	e9d5 0300 	ldrd	r0, r3, [r5]
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 23eec14:	9e03      	ldr	r6, [sp, #12]
 23eec16:	4602      	mov	r2, r0
      _ForwardIterator __cur = __result;
 23eec18:	4631      	mov	r1, r6
	  for (; __first != __last; ++__first, (void)++__cur)
 23eec1a:	4293      	cmp	r3, r2
 23eec1c:	d005      	beq.n	23eec2a <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x3e>
 23eec1e:	b109      	cbz	r1, 23eec24 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x38>
 23eec20:	6817      	ldr	r7, [r2, #0]
 23eec22:	600f      	str	r7, [r1, #0]
 23eec24:	3104      	adds	r1, #4
 23eec26:	3204      	adds	r2, #4
 23eec28:	e7f7      	b.n	23eec1a <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x2e>
      : _M_current(__i) { }
 23eec2a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 23eec2e:	1a1b      	subs	r3, r3, r0
 23eec30:	441e      	add	r6, r3
      if (__first != __last)
 23eec32:	45b0      	cmp	r8, r6
	this->_M_impl._M_finish =
 23eec34:	9604      	str	r6, [sp, #16]
 23eec36:	d02c      	beq.n	23eec92 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0xa6>
    { return __lhs.base() - __rhs.base(); }
 23eec38:	eba6 0708 	sub.w	r7, r6, r8
 23eec3c:	10ba      	asrs	r2, r7, #2
 23eec3e:	fab2 f282 	clz	r2, r2
 23eec42:	f1c2 021f 	rsb	r2, r2, #31
	  std::__introsort_loop(__first, __last,
 23eec46:	4631      	mov	r1, r6
 23eec48:	4640      	mov	r0, r8
 23eec4a:	0052      	lsls	r2, r2, #1
 23eec4c:	f7fc f800 	bl	23eac50 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEEiNS0_5__ops15_Iter_less_iterEEvT_SB_T0_T1_.isra.0>
      if (__last - __first > int(_S_threshold))
 23eec50:	2f40      	cmp	r7, #64	; 0x40
 23eec52:	dd1a      	ble.n	23eec8a <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x9e>
      { return __normal_iterator(_M_current + __n); }
 23eec54:	f108 0740 	add.w	r7, r8, #64	; 0x40
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 23eec58:	4639      	mov	r1, r7
 23eec5a:	4640      	mov	r0, r8
 23eec5c:	f7fb ff26 	bl	23eaaac <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0>
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 23eec60:	4639      	mov	r1, r7
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 23eec62:	42b1      	cmp	r1, r6
 23eec64:	d015      	beq.n	23eec92 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0xa6>
	__val = _GLIBCXX_MOVE(*__last);
 23eec66:	edd1 7a00 	vldr	s15, [r1]
	return *this;
 23eec6a:	460b      	mov	r3, r1
 23eec6c:	461a      	mov	r2, r3
      { return __val < *__it; }
 23eec6e:	ed33 7a01 	vldmdb	r3!, {s14}
      while (__comp(__val, __next))
 23eec72:	eef4 7ac7 	vcmpe.f32	s15, s14
 23eec76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eec7a:	d502      	bpl.n	23eec82 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x96>
	  *__last = _GLIBCXX_MOVE(*__next);
 23eec7c:	ed83 7a01 	vstr	s14, [r3, #4]
 23eec80:	e7f4      	b.n	23eec6c <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x80>
      *__last = _GLIBCXX_MOVE(__val);
 23eec82:	edc2 7a00 	vstr	s15, [r2]
      operator++() _GLIBCXX_NOEXCEPT
 23eec86:	3104      	adds	r1, #4
	return *this;
 23eec88:	e7eb      	b.n	23eec62 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x76>
	std::__insertion_sort(__first, __last, __comp);
 23eec8a:	4631      	mov	r1, r6
 23eec8c:	4640      	mov	r0, r8
 23eec8e:	f7fb ff0d 	bl	23eaaac <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfN2ei7EiAllocIfEEEEENS0_5__ops15_Iter_less_iterEEvT_SB_T0_.isra.0>
        features.push_back(get_percentile_from_sorted(sorted,0.05));
 23eec92:	a803      	add	r0, sp, #12
 23eec94:	ed9f 0a52 	vldr	s0, [pc, #328]	; 23eede0 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1f4>
 23eec98:	f7fd f896 	bl	23ebdc8 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
      { emplace_back(std::move(__x)); }
 23eec9c:	a90a      	add	r1, sp, #40	; 0x28
 23eec9e:	4620      	mov	r0, r4
 23eeca0:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
 23eeca4:	f7ff ff62 	bl	23eeb6c <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>
        features.push_back(get_percentile_from_sorted(sorted,0.25));
 23eeca8:	a803      	add	r0, sp, #12
 23eecaa:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 23eecae:	f7fd f88b 	bl	23ebdc8 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 23eecb2:	a90a      	add	r1, sp, #40	; 0x28
 23eecb4:	4620      	mov	r0, r4
 23eecb6:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
 23eecba:	f7ff ff57 	bl	23eeb6c <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>
        features.push_back(get_percentile_from_sorted(sorted,0.75));
 23eecbe:	a803      	add	r0, sp, #12
 23eecc0:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 23eecc4:	f7fd f880 	bl	23ebdc8 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 23eecc8:	a90a      	add	r1, sp, #40	; 0x28
 23eecca:	4620      	mov	r0, r4
 23eeccc:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
 23eecd0:	f7ff ff4c 	bl	23eeb6c <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>
        features.push_back(get_percentile_from_sorted(sorted,0.95));
 23eecd4:	a803      	add	r0, sp, #12
 23eecd6:	ed9f 0a43 	vldr	s0, [pc, #268]	; 23eede4 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1f8>
 23eecda:	f7fd f875 	bl	23ebdc8 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 23eecde:	a90a      	add	r1, sp, #40	; 0x28
 23eece0:	4620      	mov	r0, r4
 23eece2:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
 23eece6:	f7ff ff41 	bl	23eeb6c <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>
        features.push_back(get_percentile_from_sorted(sorted,0.5));
 23eecea:	a803      	add	r0, sp, #12
 23eecec:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 23eecf0:	f7fd f86a 	bl	23ebdc8 <_ZN2ei8spectral7wavelet26get_percentile_from_sortedERKSt6vectorIfNS_7EiAllocIfEEEf>
 23eecf4:	4620      	mov	r0, r4
 23eecf6:	a90a      	add	r1, sp, #40	; 0x28
 23eecf8:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
 23eecfc:	f7ff ff36 	bl	23eeb6c <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23eed00:	e9d5 3200 	ldrd	r3, r2, [r5]
 23eed04:	1ad2      	subs	r2, r2, r3
        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
 23eed06:	2101      	movs	r1, #1
 23eed08:	1092      	asrs	r2, r2, #2
 23eed0a:	a806      	add	r0, sp, #24
 23eed0c:	f7fc f9eb 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
        matrix_t out(1, 1);
 23eed10:	2201      	movs	r2, #1
 23eed12:	2300      	movs	r3, #0
 23eed14:	4611      	mov	r1, r2
 23eed16:	a80a      	add	r0, sp, #40	; 0x28
 23eed18:	f7fc f9e5 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
        features.push_back(mean);
 23eed1c:	4620      	mov	r0, r4
 23eed1e:	a901      	add	r1, sp, #4
 23eed20:	f7ff feae 	bl	23eea80 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (input_matrix->rows != output_matrix->rows) {
 23eed24:	9a07      	ldr	r2, [sp, #28]
 23eed26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23eed28:	429a      	cmp	r2, r3
 23eed2a:	d127      	bne.n	23eed7c <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x190>
        if (output_matrix->cols != 1) {
 23eed2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23eed2e:	2b01      	cmp	r3, #1
 23eed30:	d124      	bne.n	23eed7c <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x190>
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23eed32:	2600      	movs	r6, #0
      *pOut = 0.0f;
 23eed34:	2700      	movs	r7, #0
 23eed36:	9b07      	ldr	r3, [sp, #28]
 23eed38:	42b3      	cmp	r3, r6
 23eed3a:	d91b      	bls.n	23eed74 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x188>
            cmsis_arm_variance(&input_matrix->buffer[(row * input_matrix->cols)], input_matrix->cols, &var);
 23eed3c:	9908      	ldr	r1, [sp, #32]
 23eed3e:	9b06      	ldr	r3, [sp, #24]
 23eed40:	fb01 f006 	mul.w	r0, r1, r6
 23eed44:	aa02      	add	r2, sp, #8
 23eed46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 23eed4a:	f7fc fcb1 	bl	23eb6b0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 23eed4e:	ed9d 0a02 	vldr	s0, [sp, #8]
    if (in >= 0.0f)
 23eed52:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 23eed56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eed5a:	db08      	blt.n	23eed6e <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x182>
      *pOut = sqrtf(in);
 23eed5c:	f008 f9d0 	bl	23f7100 <sqrtf>
            output_matrix->buffer[row] = std;
 23eed60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23eed62:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 23eed66:	ed83 0a00 	vstr	s0, [r3]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23eed6a:	3601      	adds	r6, #1
 23eed6c:	e7e3      	b.n	23eed36 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x14a>
      *pOut = 0.0f;
 23eed6e:	ee00 7a10 	vmov	s0, r7
 23eed72:	e7f5      	b.n	23eed60 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x174>
            features.push_back(out.get_row_ptr(0)[0]);
 23eed74:	4620      	mov	r0, r4
 23eed76:	990a      	ldr	r1, [sp, #40]	; 0x28
 23eed78:	f7ff fe82 	bl	23eea80 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
 23eed7c:	e9d5 0100 	ldrd	r0, r1, [r5]
 23eed80:	1a09      	subs	r1, r1, r0
        arm_var_f32(input, size, &temp);
 23eed82:	aa02      	add	r2, sp, #8
 23eed84:	1089      	asrs	r1, r1, #2
 23eed86:	f7f9 fc7f 	bl	23e8688 <arm_var_f32>
      { emplace_back(std::move(__x)); }
 23eed8a:	4620      	mov	r0, r4
 23eed8c:	a902      	add	r1, sp, #8
 23eed8e:	f7ff feed 	bl	23eeb6c <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>
        if (numpy::rms(&x, &out) == EIDSP_OK)
 23eed92:	a90a      	add	r1, sp, #40	; 0x28
 23eed94:	a806      	add	r0, sp, #24
 23eed96:	f7fc facb 	bl	23eb330 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 23eed9a:	b918      	cbnz	r0, 23eeda4 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1b8>
            features.push_back(out.get_row_ptr(0)[0]);
 23eed9c:	4620      	mov	r0, r4
 23eed9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 23eeda0:	f7ff fe6e 	bl	23eea80 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::skew(&x, &out) == EIDSP_OK)
 23eeda4:	a90a      	add	r1, sp, #40	; 0x28
 23eeda6:	a806      	add	r0, sp, #24
 23eeda8:	f7fc fce4 	bl	23eb774 <_ZN2ei5numpy4skewEPNS_9ei_matrixES2_>
 23eedac:	b918      	cbnz	r0, 23eedb6 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1ca>
            features.push_back(out.get_row_ptr(0)[0]);
 23eedae:	4620      	mov	r0, r4
 23eedb0:	990a      	ldr	r1, [sp, #40]	; 0x28
 23eedb2:	f7ff fe65 	bl	23eea80 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        if (numpy::kurtosis(&x, &out) == EIDSP_OK)
 23eedb6:	a90a      	add	r1, sp, #40	; 0x28
 23eedb8:	a806      	add	r0, sp, #24
 23eedba:	f7fc fd7b 	bl	23eb8b4 <_ZN2ei5numpy8kurtosisEPNS_9ei_matrixES2_>
 23eedbe:	b918      	cbnz	r0, 23eedc8 <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1dc>
            features.push_back(out.get_row_ptr(0)[0]);
 23eedc0:	4620      	mov	r0, r4
 23eedc2:	990a      	ldr	r1, [sp, #40]	; 0x28
 23eedc4:	f7ff fe5c 	bl	23eea80 <_ZNSt6vectorIfN2ei7EiAllocIfEEE9push_backERKf>
        matrix_t out(1, 1);
 23eedc8:	a80a      	add	r0, sp, #40	; 0x28
 23eedca:	f7fc f9a1 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
 23eedce:	a806      	add	r0, sp, #24
 23eedd0:	f7fc f99e 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
      }
 23eedd4:	a803      	add	r0, sp, #12
 23eedd6:	f7fd fc27 	bl	23ec628 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
    }
 23eedda:	b00e      	add	sp, #56	; 0x38
 23eeddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23eede0:	3d4ccccd 	.word	0x3d4ccccd
 23eede4:	3f733333 	.word	0x3f733333

023eede8 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>:
    static void calculate_crossings(const fvec &y, fvec &features, float mean)
 23eede8:	b570      	push	{r4, r5, r6, lr}
 23eedea:	4604      	mov	r4, r0
 23eedec:	ed2d 8b02 	vpush	{d8}
 23eedf0:	4608      	mov	r0, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23eedf2:	e9d4 2300 	ldrd	r2, r3, [r4]
 23eedf6:	eeb0 8a40 	vmov.f32	s16, s0
        for (size_t i = 1; i < y.size(); i++) {
 23eedfa:	2601      	movs	r6, #1
        size_t zc = 0;
 23eedfc:	2100      	movs	r1, #0
 23eedfe:	1a9b      	subs	r3, r3, r2
    static void calculate_crossings(const fvec &y, fvec &features, float mean)
 23eee00:	b084      	sub	sp, #16
 23eee02:	109b      	asrs	r3, r3, #2
        for (size_t i = 1; i < y.size(); i++) {
 23eee04:	429e      	cmp	r6, r3
 23eee06:	d210      	bcs.n	23eee2a <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x42>
            if (y[i] * y[i - 1] < 0) {
 23eee08:	4615      	mov	r5, r2
 23eee0a:	edd2 7a01 	vldr	s15, [r2, #4]
 23eee0e:	ed95 7a00 	vldr	s14, [r5]
 23eee12:	ee67 7a87 	vmul.f32	s15, s15, s14
 23eee16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23eee1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23eee1e:	f102 0204 	add.w	r2, r2, #4
                zc++;
 23eee22:	bf48      	it	mi
 23eee24:	3101      	addmi	r1, #1
        for (size_t i = 1; i < y.size(); i++) {
 23eee26:	3601      	adds	r6, #1
 23eee28:	e7ec      	b.n	23eee04 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x1c>
        features.push_back(zc / (float)y.size());
 23eee2a:	ee07 1a90 	vmov	s15, r1
 23eee2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 23eee32:	ee07 3a90 	vmov	s15, r3
 23eee36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23eee3a:	eec7 6a27 	vdiv.f32	s13, s14, s15
      { emplace_back(std::move(__x)); }
 23eee3e:	a903      	add	r1, sp, #12
 23eee40:	9001      	str	r0, [sp, #4]
 23eee42:	edcd 6a03 	vstr	s13, [sp, #12]
 23eee46:	f7ff fe91 	bl	23eeb6c <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23eee4a:	e9d4 2300 	ldrd	r2, r3, [r4]
        size_t mc = 0;
 23eee4e:	2100      	movs	r1, #0
        for (size_t i = 1; i < y.size(); i++) {
 23eee50:	2401      	movs	r4, #1
 23eee52:	1a9b      	subs	r3, r3, r2
        size_t mc = 0;
 23eee54:	9801      	ldr	r0, [sp, #4]
 23eee56:	109b      	asrs	r3, r3, #2
        for (size_t i = 1; i < y.size(); i++) {
 23eee58:	429c      	cmp	r4, r3
 23eee5a:	d214      	bcs.n	23eee86 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x9e>
            if ((y[i] - mean) * (y[i - 1] - mean) < 0) {
 23eee5c:	4615      	mov	r5, r2
 23eee5e:	edd5 7a01 	vldr	s15, [r5, #4]
 23eee62:	ed95 7a00 	vldr	s14, [r5]
 23eee66:	ee77 7ac8 	vsub.f32	s15, s15, s16
 23eee6a:	ee37 7a48 	vsub.f32	s14, s14, s16
 23eee6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 23eee72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23eee76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                mc++;
 23eee7a:	f102 0204 	add.w	r2, r2, #4
 23eee7e:	bf48      	it	mi
 23eee80:	3101      	addmi	r1, #1
        for (size_t i = 1; i < y.size(); i++) {
 23eee82:	3401      	adds	r4, #1
 23eee84:	e7e8      	b.n	23eee58 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f+0x70>
        features.push_back(mc / (float)y.size());
 23eee86:	ee07 1a90 	vmov	s15, r1
 23eee8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 23eee8e:	ee07 3a90 	vmov	s15, r3
 23eee92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23eee96:	eec7 6a27 	vdiv.f32	s13, s14, s15
      { emplace_back(std::move(__x)); }
 23eee9a:	a903      	add	r1, sp, #12
 23eee9c:	edcd 6a03 	vstr	s13, [sp, #12]
 23eeea0:	f7ff fe64 	bl	23eeb6c <_ZNSt6vectorIfN2ei7EiAllocIfEEE12emplace_backIJfEEERfDpOT_.isra.0>
    }
 23eeea4:	b004      	add	sp, #16
 23eeea6:	ecbd 8b02 	vpop	{d8}
 23eeeaa:	bd70      	pop	{r4, r5, r6, pc}

023eeeac <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>:

    static void extract_features(fvec& y, fvec &features)
 23eeeac:	b530      	push	{r4, r5, lr}
 23eeeae:	b08b      	sub	sp, #44	; 0x2c
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23eeeb0:	e9d0 3200 	ldrd	r3, r2, [r0]
 23eeeb4:	1ad2      	subs	r2, r2, r3
    {
        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
 23eeeb6:	1092      	asrs	r2, r2, #2
    static void extract_features(fvec& y, fvec &features)
 23eeeb8:	4604      	mov	r4, r0
 23eeeba:	460d      	mov	r5, r1
        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
 23eeebc:	a802      	add	r0, sp, #8
 23eeebe:	2101      	movs	r1, #1
 23eeec0:	f7fc f911 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
        matrix_t out(1, 1);
 23eeec4:	2201      	movs	r2, #1
 23eeec6:	2300      	movs	r3, #0
 23eeec8:	4611      	mov	r1, r2
 23eeeca:	a806      	add	r0, sp, #24
 23eeecc:	f7fc f90b 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
        if (numpy::mean(&x, &out) != EIDSP_OK)
 23eeed0:	a906      	add	r1, sp, #24
 23eeed2:	a802      	add	r0, sp, #8
 23eeed4:	f7fc fa52 	bl	23eb37c <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 23eeed8:	b128      	cbz	r0, 23eeee6 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0x3a>
            assert(0);
 23eeeda:	21eb      	movs	r1, #235	; 0xeb
 23eeedc:	4b10      	ldr	r3, [pc, #64]	; (23eef20 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0x74>)
 23eeede:	4a11      	ldr	r2, [pc, #68]	; (23eef24 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0x78>)
 23eeee0:	4811      	ldr	r0, [pc, #68]	; (23eef28 <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_+0x7c>)
 23eeee2:	f005 fc8d 	bl	23f4800 <__assert_func>
        float mean = out.get_row_ptr(0)[0];
 23eeee6:	9b06      	ldr	r3, [sp, #24]

        calculate_entropy(y, features);
 23eeee8:	4629      	mov	r1, r5
        float mean = out.get_row_ptr(0)[0];
 23eeeea:	ed93 0a00 	vldr	s0, [r3]
        calculate_entropy(y, features);
 23eeeee:	4620      	mov	r0, r4
        float mean = out.get_row_ptr(0)[0];
 23eeef0:	ed8d 0a01 	vstr	s0, [sp, #4]
        calculate_entropy(y, features);
 23eeef4:	f7ff fe04 	bl	23eeb00 <_ZN2ei8spectral7wavelet17calculate_entropyERKSt6vectorIfNS_7EiAllocIfEEERS5_>
        calculate_crossings(y, features, mean);
 23eeef8:	ed9d 0a01 	vldr	s0, [sp, #4]
 23eeefc:	4629      	mov	r1, r5
 23eeefe:	4620      	mov	r0, r4
 23eef00:	f7ff ff72 	bl	23eede8 <_ZN2ei8spectral7wavelet19calculate_crossingsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>
        calculate_statistics(y, features, mean);
 23eef04:	ed9d 0a01 	vldr	s0, [sp, #4]
 23eef08:	4629      	mov	r1, r5
 23eef0a:	4620      	mov	r0, r4
 23eef0c:	f7ff fe6e 	bl	23eebec <_ZN2ei8spectral7wavelet20calculate_statisticsERKSt6vectorIfNS_7EiAllocIfEEERS5_f>
        matrix_t out(1, 1);
 23eef10:	a806      	add	r0, sp, #24
 23eef12:	f7fc f8fd 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
        matrix_t x(1, y.size(), const_cast<float *>(y.data()));
 23eef16:	a802      	add	r0, sp, #8
 23eef18:	f7fc f8fa 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
    }
 23eef1c:	b00b      	add	sp, #44	; 0x2c
 23eef1e:	bd30      	pop	{r4, r5, pc}
 23eef20:	023fe7e9 	.word	0x023fe7e9
 23eef24:	023fb8a2 	.word	0x023fb8a2
 23eef28:	023fb786 	.word	0x023fb786

023eef2c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>:

    static void
    wavedec_features(const float *x, int len, const char *wav, int level, fvec &features)
 23eef2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23eef30:	461e      	mov	r6, r3
    {
        assert(level > 0 && level < 8);
 23eef32:	3b01      	subs	r3, #1
    wavedec_features(const float *x, int len, const char *wav, int level, fvec &features)
 23eef34:	b090      	sub	sp, #64	; 0x40
        assert(level > 0 && level < 8);
 23eef36:	2b06      	cmp	r3, #6
    wavedec_features(const float *x, int len, const char *wav, int level, fvec &features)
 23eef38:	4607      	mov	r7, r0
 23eef3a:	4688      	mov	r8, r1
 23eef3c:	4610      	mov	r0, r2
 23eef3e:	9d16      	ldr	r5, [sp, #88]	; 0x58
        assert(level > 0 && level < 8);
 23eef40:	d905      	bls.n	23eef4e <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x22>
 23eef42:	21f6      	movs	r1, #246	; 0xf6
 23eef44:	4b3a      	ldr	r3, [pc, #232]	; (23ef030 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x104>)
 23eef46:	4a3b      	ldr	r2, [pc, #236]	; (23ef034 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x108>)
 23eef48:	483b      	ldr	r0, [pc, #236]	; (23ef038 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x10c>)
 23eef4a:	f005 fc59 	bl	23f4800 <__assert_func>
	: _M_start(), _M_finish(), _M_end_of_storage()
 23eef4e:	2400      	movs	r4, #0

        fvec h;
        fvec g;
        find_filter(wav, h, g);
 23eef50:	aa07      	add	r2, sp, #28
 23eef52:	a904      	add	r1, sp, #16
 23eef54:	e9cd 4404 	strd	r4, r4, [sp, #16]
 23eef58:	e9cd 4406 	strd	r4, r4, [sp, #24]
 23eef5c:	e9cd 4408 	strd	r4, r4, [sp, #32]
 23eef60:	f7ff f9a2 	bl	23ee2a8 <_ZN2ei8spectral7wavelet11find_filterEPKcRSt6vectorIfNS_7EiAllocIfEEES8_>
	if (size_type __n = this->_M_impl._M_finish - __pos)
 23eef64:	e9d5 3200 	ldrd	r3, r2, [r5]
 23eef68:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
 23eef6a:	bf18      	it	ne
 23eef6c:	606b      	strne	r3, [r5, #4]

        features.clear();
        fvec a;
        fvec d;
        dwt(x, len, h.data(), g.data(), h.size(), a, d);
 23eef6e:	ab0d      	add	r3, sp, #52	; 0x34
 23eef70:	9302      	str	r3, [sp, #8]
 23eef72:	ab0a      	add	r3, sp, #40	; 0x28
      { return _M_data_ptr(this->_M_impl._M_start); }
 23eef74:	9a04      	ldr	r2, [sp, #16]
 23eef76:	9301      	str	r3, [sp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23eef78:	9b05      	ldr	r3, [sp, #20]
 23eef7a:	4641      	mov	r1, r8
 23eef7c:	1a9b      	subs	r3, r3, r2
 23eef7e:	109b      	asrs	r3, r3, #2
 23eef80:	4638      	mov	r0, r7
 23eef82:	9300      	str	r3, [sp, #0]
 23eef84:	9b07      	ldr	r3, [sp, #28]
	: _M_start(), _M_finish(), _M_end_of_storage()
 23eef86:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 23eef8a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 23eef8e:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 23eef92:	f7ff fc4f 	bl	23ee834 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>
        extract_features(d, features);
 23eef96:	4629      	mov	r1, r5
 23eef98:	a80d      	add	r0, sp, #52	; 0x34
 23eef9a:	f7ff ff87 	bl	23eeeac <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>

        for (int l = 1; l < level; l++) {
 23eef9e:	2401      	movs	r4, #1
 23eefa0:	42b4      	cmp	r4, r6
 23eefa2:	d015      	beq.n	23eefd0 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0xa4>
            dwt(a.data(), a.size(), h.data(), g.data(), h.size(), a, d);
 23eefa4:	ab0d      	add	r3, sp, #52	; 0x34
 23eefa6:	9302      	str	r3, [sp, #8]
 23eefa8:	ab0a      	add	r3, sp, #40	; 0x28
      { return _M_data_ptr(this->_M_impl._M_start); }
 23eefaa:	9a04      	ldr	r2, [sp, #16]
 23eefac:	9301      	str	r3, [sp, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23eefae:	9b05      	ldr	r3, [sp, #20]
      { return _M_data_ptr(this->_M_impl._M_start); }
 23eefb0:	980a      	ldr	r0, [sp, #40]	; 0x28
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23eefb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23eefb4:	1a9b      	subs	r3, r3, r2
 23eefb6:	1a09      	subs	r1, r1, r0
 23eefb8:	109b      	asrs	r3, r3, #2
 23eefba:	9300      	str	r3, [sp, #0]
 23eefbc:	1089      	asrs	r1, r1, #2
 23eefbe:	9b07      	ldr	r3, [sp, #28]
 23eefc0:	f7ff fc38 	bl	23ee834 <_ZN2ei8spectral7wavelet3dwtEPKfjS3_S3_jRSt6vectorIfNS_7EiAllocIfEEES8_>
            extract_features(d, features);
 23eefc4:	4629      	mov	r1, r5
 23eefc6:	a80d      	add	r0, sp, #52	; 0x34
 23eefc8:	f7ff ff70 	bl	23eeeac <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>
        for (int l = 1; l < level; l++) {
 23eefcc:	3401      	adds	r4, #1
 23eefce:	e7e7      	b.n	23eefa0 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x74>
        }

        extract_features(a, features);
 23eefd0:	4629      	mov	r1, r5
 23eefd2:	a80a      	add	r0, sp, #40	; 0x28
 23eefd4:	f7ff ff6a 	bl	23eeeac <_ZN2ei8spectral7wavelet16extract_featuresERSt6vectorIfNS_7EiAllocIfEEES6_>

        for (int l = 0; l <= level / 2; l++) { // reverse order to match python results.
 23eefd8:	2200      	movs	r2, #0
            for (int i = 0; i < (int)NUM_FEATHERS_PER_COMP; i++) {
                std::swap(
                    features[l * NUM_FEATHERS_PER_COMP + i],
 23eefda:	270e      	movs	r7, #14
            for (int i = 0; i < (int)NUM_FEATHERS_PER_COMP; i++) {
 23eefdc:	4613      	mov	r3, r2
        for (int l = 0; l <= level / 2; l++) { // reverse order to match python results.
 23eefde:	ea4f 0c66 	mov.w	ip, r6, asr #1
                    features[(level - l) * NUM_FEATHERS_PER_COMP + i]);
 23eefe2:	1ab4      	subs	r4, r6, r2
 23eefe4:	fb07 3404 	mla	r4, r7, r4, r3
                    features[l * NUM_FEATHERS_PER_COMP + i],
 23eefe8:	fb07 3002 	mla	r0, r7, r2, r3
	return *(this->_M_impl._M_start + __n);
 23eefec:	6829      	ldr	r1, [r5, #0]
            for (int i = 0; i < (int)NUM_FEATHERS_PER_COMP; i++) {
 23eefee:	3301      	adds	r3, #1
 23eeff0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 23eeff4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
      __a = _GLIBCXX_MOVE(__b);
 23eeff8:	f8d1 e000 	ldr.w	lr, [r1]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23eeffc:	6804      	ldr	r4, [r0, #0]
 23eeffe:	2b0e      	cmp	r3, #14
      __a = _GLIBCXX_MOVE(__b);
 23ef000:	f8c0 e000 	str.w	lr, [r0]
      __b = _GLIBCXX_MOVE(__tmp);
 23ef004:	600c      	str	r4, [r1, #0]
 23ef006:	d1ec      	bne.n	23eefe2 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0xb6>
        for (int l = 0; l <= level / 2; l++) { // reverse order to match python results.
 23ef008:	3201      	adds	r2, #1
 23ef00a:	4594      	cmp	ip, r2
 23ef00c:	da0e      	bge.n	23ef02c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0x100>
      }
 23ef00e:	a80d      	add	r0, sp, #52	; 0x34
 23ef010:	f7fd fb0a 	bl	23ec628 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
 23ef014:	a80a      	add	r0, sp, #40	; 0x28
 23ef016:	f7fd fb07 	bl	23ec628 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
 23ef01a:	a807      	add	r0, sp, #28
 23ef01c:	f7fd fb04 	bl	23ec628 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
 23ef020:	a804      	add	r0, sp, #16
 23ef022:	f7fd fb01 	bl	23ec628 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
            }
        }
    }
 23ef026:	b010      	add	sp, #64	; 0x40
 23ef028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            for (int i = 0; i < (int)NUM_FEATHERS_PER_COMP; i++) {
 23ef02c:	2300      	movs	r3, #0
 23ef02e:	e7d8      	b.n	23eefe2 <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE+0xb6>
 23ef030:	023fb900 	.word	0x023fb900
 23ef034:	023fb917 	.word	0x023fb917
 23ef038:	023fb786 	.word	0x023fb786

023ef03c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:
        int min_size = 32 * (1 << level);
        return (len >= min_size);
    }

public:
    static int extract_wavelet_features(
 23ef03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ef040:	ed2d 8b02 	vpush	{d8}
 23ef044:	4616      	mov	r6, r2
 23ef046:	4605      	mov	r5, r0
 23ef048:	b089      	sub	sp, #36	; 0x24
 23ef04a:	460f      	mov	r7, r1
 23ef04c:	eeb0 8a40 	vmov.f32	s16, s0
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config,
        const float sampling_freq)
    {
        // transpose the matrix so we have one row per axis
        numpy::transpose_in_place(input_matrix);
 23ef050:	f7fc f876 	bl	23eb140 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>

        // func tests for scale of 1 and does a no op in that case
        EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 23ef054:	ed96 0a03 	vldr	s0, [r6, #12]
 23ef058:	4628      	mov	r0, r5
 23ef05a:	f7fc f911 	bl	23eb280 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 23ef05e:	4604      	mov	r4, r0
 23ef060:	bb70      	cbnz	r0, 23ef0c0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x84>

        // apply filter, if enabled
        // "zero" order filter allowed.  will still remove unwanted fft bins later
        if (strcmp(config->filter_type, "low") == 0) {
 23ef062:	6974      	ldr	r4, [r6, #20]
 23ef064:	4956      	ldr	r1, [pc, #344]	; (23ef1c0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x184>)
 23ef066:	4620      	mov	r0, r4
 23ef068:	f7f9 fa5c 	bl	23e8524 <strcmp>
 23ef06c:	bb70      	cbnz	r0, 23ef0cc <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x90>
            if (config->filter_order) {
 23ef06e:	69f1      	ldr	r1, [r6, #28]
 23ef070:	b9d9      	cbnz	r1, 23ef0aa <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x6e>
                    config->filter_cutoff,
                    config->filter_order));
            }
        }

        EI_TRY(processing::subtract_mean(input_matrix));
 23ef072:	4628      	mov	r0, r5
 23ef074:	f7fc f9a8 	bl	23eb3c8 <_ZN2ei8spectral10processingL13subtract_meanEPNS_9ei_matrixE>
 23ef078:	4604      	mov	r4, r0
 23ef07a:	bb08      	cbnz	r0, 23ef0c0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x84>

        int out_idx = 0;
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23ef07c:	4683      	mov	fp, r0
        int out_idx = 0;
 23ef07e:	9002      	str	r0, [sp, #8]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23ef080:	686b      	ldr	r3, [r5, #4]
 23ef082:	455b      	cmp	r3, fp
 23ef084:	d91c      	bls.n	23ef0c0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x84>
 23ef086:	f8d5 9008 	ldr.w	r9, [r5, #8]
 23ef08a:	682b      	ldr	r3, [r5, #0]
 23ef08c:	fb09 f80b 	mul.w	r8, r9, fp
 23ef090:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 23ef094:	ee08 3a90 	vmov	s17, r3
        int min_size = 32 * (1 << level);
 23ef098:	2320      	movs	r3, #32
            float *data_window = input_matrix->get_row_ptr(row);
            size_t data_size = input_matrix->cols;

            if (!check_min_size(data_size, config->wavelet_level))
 23ef09a:	f8d6 8038 	ldr.w	r8, [r6, #56]	; 0x38
        int min_size = 32 * (1 << level);
 23ef09e:	fa03 f208 	lsl.w	r2, r3, r8
            if (!check_min_size(data_size, config->wavelet_level))
 23ef0a2:	4591      	cmp	r9, r2
 23ef0a4:	da24      	bge.n	23ef0f0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb4>
                EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 23ef0a6:	4c47      	ldr	r4, [pc, #284]	; (23ef1c4 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x188>)
 23ef0a8:	e00a      	b.n	23ef0c0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x84>
                EI_TRY(spectral::processing::butterworth_lowpass_filter(
 23ef0aa:	edd6 0a06 	vldr	s1, [r6, #24]
 23ef0ae:	eeb0 0a48 	vmov.f32	s0, s16
 23ef0b2:	4628      	mov	r0, r5
 23ef0b4:	b2c9      	uxtb	r1, r1
 23ef0b6:	f7fb f97b 	bl	23ea3b0 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 23ef0ba:	4604      	mov	r4, r0
 23ef0bc:	2800      	cmp	r0, #0
 23ef0be:	d0d8      	beq.n	23ef072 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36>
            for (size_t i = 0; i < num_features; i++) {
                output_matrix->buffer[out_idx++] = features[i];
            }
        }
        return EIDSP_OK;
    }
 23ef0c0:	4620      	mov	r0, r4
 23ef0c2:	b009      	add	sp, #36	; 0x24
 23ef0c4:	ecbd 8b02 	vpop	{d8}
 23ef0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (strcmp(config->filter_type, "high") == 0) {
 23ef0cc:	4620      	mov	r0, r4
 23ef0ce:	493e      	ldr	r1, [pc, #248]	; (23ef1c8 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x18c>)
 23ef0d0:	f7f9 fa28 	bl	23e8524 <strcmp>
 23ef0d4:	2800      	cmp	r0, #0
 23ef0d6:	d1cc      	bne.n	23ef072 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36>
            if (config->filter_order) {
 23ef0d8:	69f1      	ldr	r1, [r6, #28]
 23ef0da:	2900      	cmp	r1, #0
 23ef0dc:	d0c9      	beq.n	23ef072 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36>
                EI_TRY(spectral::processing::butterworth_highpass_filter(
 23ef0de:	edd6 0a06 	vldr	s1, [r6, #24]
 23ef0e2:	eeb0 0a48 	vmov.f32	s0, s16
 23ef0e6:	4628      	mov	r0, r5
 23ef0e8:	b2c9      	uxtb	r1, r1
 23ef0ea:	f7fb fe35 	bl	23ead58 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 23ef0ee:	e7e4      	b.n	23ef0ba <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x7e>
	: _M_start(), _M_finish(), _M_end_of_storage()
 23ef0f0:	2300      	movs	r3, #0
 23ef0f2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 23ef0f6:	9307      	str	r3, [sp, #28]
            size_t num_features = dwt_features(
 23ef0f8:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        assert(level <= 7);
 23ef0fa:	f1b8 0f07 	cmp.w	r8, #7
            size_t num_features = dwt_features(
 23ef0fe:	ee08 3a10 	vmov	s16, r3
        assert(level <= 7);
 23ef102:	dd06      	ble.n	23ef112 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd6>
 23ef104:	f44f 718a 	mov.w	r1, #276	; 0x114
 23ef108:	4b30      	ldr	r3, [pc, #192]	; (23ef1cc <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x190>)
 23ef10a:	4a31      	ldr	r2, [pc, #196]	; (23ef1d0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x194>)
            assert(num_features == output_matrix->cols / input_matrix->rows);
 23ef10c:	4831      	ldr	r0, [pc, #196]	; (23ef1d4 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x198>)
 23ef10e:	f005 fb77 	bl	23f4800 <__assert_func>
        features.reserve((level + 1) * NUM_FEATHERS_PER_COMP);
 23ef112:	f108 0301 	add.w	r3, r8, #1
 23ef116:	9303      	str	r3, [sp, #12]
 23ef118:	230e      	movs	r3, #14
 23ef11a:	fb08 3003 	mla	r0, r8, r3, r3
      if (__n > this->max_size())
 23ef11e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 23ef122:	d302      	bcc.n	23ef12a <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xee>
	__throw_length_error(__N("vector::reserve"));
 23ef124:	482c      	ldr	r0, [pc, #176]	; (23ef1d8 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x19c>)
 23ef126:	f007 fd0f 	bl	23f6b48 <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 23ef12a:	b190      	cbz	r0, 23ef152 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x116>
      _M_allocate(size_t __n)
 23ef12c:	f7fb fb3a 	bl	23ea7a4 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEE11_M_allocateEj.part.0>
      return __relocate_a_1(std::__niter_base(__first),
 23ef130:	4602      	mov	r2, r0
 23ef132:	4682      	mov	sl, r0
 23ef134:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 23ef138:	f7fb fc3b 	bl	23ea9b2 <_ZSt14__relocate_a_1IPfS0_N2ei7EiAllocIfEEET0_T_S5_S4_RT1_.isra.0>
	  _M_deallocate(this->_M_impl._M_start,
 23ef13c:	9805      	ldr	r0, [sp, #20]
	if (__p)
 23ef13e:	b108      	cbz	r0, 23ef144 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x108>
 23ef140:	f000 ffad 	bl	23f009e <_Z7ei_freePv>
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 23ef144:	2038      	movs	r0, #56	; 0x38
 23ef146:	9b03      	ldr	r3, [sp, #12]
	  this->_M_impl._M_finish = __tmp + __old_size;
 23ef148:	e9cd aa05 	strd	sl, sl, [sp, #20]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 23ef14c:	fb00 a203 	mla	r2, r0, r3, sl
 23ef150:	9207      	str	r2, [sp, #28]
        wavedec_features(x, len, wav, level, features);
 23ef152:	f10d 0a14 	add.w	sl, sp, #20
 23ef156:	4643      	mov	r3, r8
 23ef158:	ee18 2a10 	vmov	r2, s16
 23ef15c:	4649      	mov	r1, r9
 23ef15e:	ee18 0a90 	vmov	r0, s17
 23ef162:	f8cd a000 	str.w	sl, [sp]
 23ef166:	f7ff fee1 	bl	23eef2c <_ZN2ei8spectral7wavelet16wavedec_featuresEPKfiPKciRSt6vectorIfNS_7EiAllocIfEEE>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 23ef16a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
            assert(num_features == output_matrix->cols / input_matrix->rows);
 23ef16e:	6869      	ldr	r1, [r5, #4]
 23ef170:	1a9b      	subs	r3, r3, r2
 23ef172:	68ba      	ldr	r2, [r7, #8]
 23ef174:	1098      	asrs	r0, r3, #2
 23ef176:	fbb2 f2f1 	udiv	r2, r2, r1
 23ef17a:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 23ef17e:	d110      	bne.n	23ef1a2 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x166>
 23ef180:	9b02      	ldr	r3, [sp, #8]
 23ef182:	009a      	lsls	r2, r3, #2
            for (size_t i = 0; i < num_features; i++) {
 23ef184:	2300      	movs	r3, #0
 23ef186:	4283      	cmp	r3, r0
 23ef188:	d010      	beq.n	23ef1ac <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x170>
                output_matrix->buffer[out_idx++] = features[i];
 23ef18a:	9905      	ldr	r1, [sp, #20]
 23ef18c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 23ef190:	f8d1 c000 	ldr.w	ip, [r1]
 23ef194:	6839      	ldr	r1, [r7, #0]
            for (size_t i = 0; i < num_features; i++) {
 23ef196:	3301      	adds	r3, #1
                output_matrix->buffer[out_idx++] = features[i];
 23ef198:	4411      	add	r1, r2
 23ef19a:	f8c1 c000 	str.w	ip, [r1]
            for (size_t i = 0; i < num_features; i++) {
 23ef19e:	3204      	adds	r2, #4
 23ef1a0:	e7f1      	b.n	23ef186 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x14a>
            assert(num_features == output_matrix->cols / input_matrix->rows);
 23ef1a2:	f44f 71ac 	mov.w	r1, #344	; 0x158
 23ef1a6:	4b0d      	ldr	r3, [pc, #52]	; (23ef1dc <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a0>)
 23ef1a8:	4a0d      	ldr	r2, [pc, #52]	; (23ef1e0 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1a4>)
 23ef1aa:	e7af      	b.n	23ef10c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd0>
 23ef1ac:	9a02      	ldr	r2, [sp, #8]
      }
 23ef1ae:	4650      	mov	r0, sl
 23ef1b0:	441a      	add	r2, r3
 23ef1b2:	9202      	str	r2, [sp, #8]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 23ef1b4:	f10b 0b01 	add.w	fp, fp, #1
 23ef1b8:	f7fd fa36 	bl	23ec628 <_ZNSt12_Vector_baseIfN2ei7EiAllocIfEEED1Ev>
 23ef1bc:	e760      	b.n	23ef080 <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x44>
 23ef1be:	bf00      	nop
 23ef1c0:	023fb3ca 	.word	0x023fb3ca
 23ef1c4:	fffffc11 	.word	0xfffffc11
 23ef1c8:	023fb3ce 	.word	0x023fb3ce
 23ef1cc:	023fb985 	.word	0x023fb985
 23ef1d0:	023fb990 	.word	0x023fb990
 23ef1d4:	023fb786 	.word	0x023fb786
 23ef1d8:	023fb9f9 	.word	0x023fb9f9
 23ef1dc:	023fba09 	.word	0x023fba09
 23ef1e0:	023fba42 	.word	0x023fba42

023ef1e4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>:

    static int extract_spectral_analysis_features_v4(
 23ef1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ef1e8:	ed2d 8b02 	vpush	{d8}
 23ef1ec:	b09c      	sub	sp, #112	; 0x70
 23ef1ee:	4604      	mov	r4, r0
 23ef1f0:	460d      	mov	r5, r1
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        ei_dsp_config_spectral_analysis_t *config_p,
        const float sampling_freq)
    {
        auto config_copy = *config_p;
 23ef1f2:	a80b      	add	r0, sp, #44	; 0x2c
    static int extract_spectral_analysis_features_v4(
 23ef1f4:	4611      	mov	r1, r2
        auto config_copy = *config_p;
 23ef1f6:	2244      	movs	r2, #68	; 0x44
    static int extract_spectral_analysis_features_v4(
 23ef1f8:	eeb0 8a40 	vmov.f32	s16, s0
        auto config_copy = *config_p;
 23ef1fc:	f009 fd6a 	bl	23f8cd4 <memcpy>
        auto config = &config_copy;
        if (strcmp(config->analysis_type, "Wavelet") == 0) {
 23ef200:	496b      	ldr	r1, [pc, #428]	; (23ef3b0 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1cc>)
 23ef202:	9813      	ldr	r0, [sp, #76]	; 0x4c
 23ef204:	f7f9 f98e 	bl	23e8524 <strcmp>
 23ef208:	b968      	cbnz	r0, 23ef226 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x42>
            return wavelet::extract_wavelet_features(input_matrix, output_matrix, config, sampling_freq);
 23ef20a:	eeb0 0a48 	vmov.f32	s0, s16
 23ef20e:	4629      	mov	r1, r5
 23ef210:	4620      	mov	r0, r4
 23ef212:	aa0b      	add	r2, sp, #44	; 0x2c
 23ef214:	f7ff ff12 	bl	23ef03c <_ZN2ei8spectral7wavelet24extract_wavelet_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 23ef218:	4603      	mov	r3, r0
                    true,
                    false);
            }
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
        }
    }
 23ef21a:	4618      	mov	r0, r3
 23ef21c:	b01c      	add	sp, #112	; 0x70
 23ef21e:	ecbd 8b02 	vpop	{d8}
 23ef222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if (config->extra_low_freq == false && config->input_decimation_ratio == 1) {
 23ef226:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 23ef22a:	b983      	cbnz	r3, 23ef24e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x6a>
 23ef22c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 23ef22e:	2b01      	cmp	r3, #1
 23ef230:	d10d      	bne.n	23ef24e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x6a>
                extract_spec_features(input_matrix, output_matrix, config, sampling_freq);
 23ef232:	9300      	str	r3, [sp, #0]
 23ef234:	aa0b      	add	r2, sp, #44	; 0x2c
 23ef236:	eeb0 0a48 	vmov.f32	s0, s16
 23ef23a:	4629      	mov	r1, r5
 23ef23c:	4620      	mov	r0, r4
 23ef23e:	f7fe fcbb 	bl	23edbb8 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 23ef242:	68aa      	ldr	r2, [r5, #8]
 23ef244:	4b5b      	ldr	r3, [pc, #364]	; (23ef3b4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d0>)
 23ef246:	4282      	cmp	r2, r0
 23ef248:	bf08      	it	eq
 23ef24a:	2300      	moveq	r3, #0
 23ef24c:	e7e5      	b.n	23ef21a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36>
            numpy::transpose_in_place(input_matrix);
 23ef24e:	4620      	mov	r0, r4
 23ef250:	f7fb ff76 	bl	23eb140 <_ZN2ei5numpy18transpose_in_placeEPNS_9ei_matrixE>
            EI_TRY(numpy::scale(input_matrix, config->scale_axes));
 23ef254:	ed9d 0a0e 	vldr	s0, [sp, #56]	; 0x38
 23ef258:	4620      	mov	r0, r4
 23ef25a:	f7fc f811 	bl	23eb280 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 23ef25e:	4606      	mov	r6, r0
 23ef260:	2800      	cmp	r0, #0
 23ef262:	d164      	bne.n	23ef32e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x14a>
            if (config->input_decimation_ratio > 1) {
 23ef264:	990f      	ldr	r1, [sp, #60]	; 0x3c
 23ef266:	2901      	cmp	r1, #1
 23ef268:	dd2d      	ble.n	23ef2c6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xe2>
                ei_vector<int> ratio_combo = get_ratio_combo(config->input_decimation_ratio);
 23ef26a:	a807      	add	r0, sp, #28
 23ef26c:	f7fd fd4c 	bl	23ecd08 <_ZN2ei8spectral7feature15get_ratio_comboEi>
      : _M_current(__i) { }
 23ef270:	e9dd 7807 	ldrd	r7, r8, [sp, #28]
                size_t out_size = input_matrix->cols;
 23ef274:	68a0      	ldr	r0, [r4, #8]
                for (int r : ratio_combo) {
 23ef276:	4547      	cmp	r7, r8
 23ef278:	d006      	beq.n	23ef288 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xa4>
                    out_size = _decimate(input_matrix, input_matrix, r);
 23ef27a:	4621      	mov	r1, r4
 23ef27c:	4620      	mov	r0, r4
 23ef27e:	f857 2b04 	ldr.w	r2, [r7], #4
 23ef282:	f7fe fbad 	bl	23ed9e0 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>
	return *this;
 23ef286:	e7f6      	b.n	23ef276 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x92>
                for(uint32_t r = 1; r < input_matrix->rows; r++) {
 23ef288:	2201      	movs	r2, #1
                float* out = input_matrix->get_row_ptr(0) + out_size;
 23ef28a:	6823      	ldr	r3, [r4, #0]
 23ef28c:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 23ef290:	eb03 0380 	add.w	r3, r3, r0, lsl #2
                for(uint32_t r = 1; r < input_matrix->rows; r++) {
 23ef294:	6861      	ldr	r1, [r4, #4]
 23ef296:	4291      	cmp	r1, r2
 23ef298:	d910      	bls.n	23ef2bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd8>
                    for(size_t c = 0; c < out_size; c++) {
 23ef29a:	68a1      	ldr	r1, [r4, #8]
 23ef29c:	eb03 0e0c 	add.w	lr, r3, ip
 23ef2a0:	fb01 f702 	mul.w	r7, r1, r2
 23ef2a4:	6821      	ldr	r1, [r4, #0]
 23ef2a6:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 23ef2aa:	4573      	cmp	r3, lr
 23ef2ac:	d004      	beq.n	23ef2b8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xd4>
                        *out++ = row[c];
 23ef2ae:	f851 7b04 	ldr.w	r7, [r1], #4
 23ef2b2:	f843 7b04 	str.w	r7, [r3], #4
                    for(size_t c = 0; c < out_size; c++) {
 23ef2b6:	e7f8      	b.n	23ef2aa <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xc6>
                for(uint32_t r = 1; r < input_matrix->rows; r++) {
 23ef2b8:	3201      	adds	r2, #1
 23ef2ba:	e7eb      	b.n	23ef294 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xb0>
                input_matrix->cols = out_size;
 23ef2bc:	60a0      	str	r0, [r4, #8]
	_M_deallocate(_M_impl._M_start,
 23ef2be:	9807      	ldr	r0, [sp, #28]
	if (__p)
 23ef2c0:	b108      	cbz	r0, 23ef2c6 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0xe2>
 23ef2c2:	f000 feec 	bl	23f009e <_Z7ei_freePv>
            float new_sampling_freq = sampling_freq / config->input_decimation_ratio;
 23ef2c6:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 23ef2ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (strcmp(config->filter_type, "low") == 0) {
 23ef2ce:	9f10      	ldr	r7, [sp, #64]	; 0x40
 23ef2d0:	4939      	ldr	r1, [pc, #228]	; (23ef3b8 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d4>)
 23ef2d2:	4638      	mov	r0, r7
            float new_sampling_freq = sampling_freq / config->input_decimation_ratio;
 23ef2d4:	eec8 8a27 	vdiv.f32	s17, s16, s15
            if (strcmp(config->filter_type, "low") == 0) {
 23ef2d8:	f7f9 f924 	bl	23e8524 <strcmp>
 23ef2dc:	2800      	cmp	r0, #0
 23ef2de:	d135      	bne.n	23ef34c <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x168>
                if( config->filter_order ) {
 23ef2e0:	9912      	ldr	r1, [sp, #72]	; 0x48
 23ef2e2:	bb31      	cbnz	r1, 23ef332 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x14e>
            config->filter_order = 0;
 23ef2e4:	2700      	movs	r7, #0
        return (input_size + factor - 1) / factor;
 23ef2e6:	f04f 080a 	mov.w	r8, #10
 23ef2ea:	68a2      	ldr	r2, [r4, #8]
            matrix_t lf_signal(input_matrix->rows, decimated_size);
 23ef2ec:	463b      	mov	r3, r7
 23ef2ee:	3209      	adds	r2, #9
 23ef2f0:	6861      	ldr	r1, [r4, #4]
 23ef2f2:	fbb2 f2f8 	udiv	r2, r2, r8
 23ef2f6:	a803      	add	r0, sp, #12
            config->filter_order = 0;
 23ef2f8:	9712      	str	r7, [sp, #72]	; 0x48
            matrix_t lf_signal(input_matrix->rows, decimated_size);
 23ef2fa:	f7fb fef4 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
            _decimate(input_matrix, &lf_signal, decimation);
 23ef2fe:	4642      	mov	r2, r8
 23ef300:	4620      	mov	r0, r4
 23ef302:	a903      	add	r1, sp, #12
 23ef304:	f7fe fb6c 	bl	23ed9e0 <_ZN2ei8spectral7feature9_decimateEPNS_9ei_matrixES3_j>
            size_t n_features = extract_spec_features(
 23ef308:	4620      	mov	r0, r4
 23ef30a:	2301      	movs	r3, #1
 23ef30c:	eeb0 0a68 	vmov.f32	s0, s17
 23ef310:	4629      	mov	r1, r5
 23ef312:	9700      	str	r7, [sp, #0]
 23ef314:	aa0b      	add	r2, sp, #44	; 0x2c
 23ef316:	f7fe fc4f 	bl	23edbb8 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
            if (n_features > 0 && config->extra_low_freq) {
 23ef31a:	4604      	mov	r4, r0
 23ef31c:	bb40      	cbnz	r0, 23ef370 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x18c>
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 23ef31e:	68aa      	ldr	r2, [r5, #8]
 23ef320:	4b24      	ldr	r3, [pc, #144]	; (23ef3b4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d0>)
            matrix_t lf_signal(input_matrix->rows, decimated_size);
 23ef322:	a803      	add	r0, sp, #12
            return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 23ef324:	42a2      	cmp	r2, r4
 23ef326:	bf18      	it	ne
 23ef328:	461e      	movne	r6, r3
            matrix_t lf_signal(input_matrix->rows, decimated_size);
 23ef32a:	f7fb fef1 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
 23ef32e:	4633      	mov	r3, r6
 23ef330:	e773      	b.n	23ef21a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36>
                    EI_TRY(spectral::processing::butterworth_lowpass_filter(
 23ef332:	eddd 0a11 	vldr	s1, [sp, #68]	; 0x44
 23ef336:	eeb0 0a68 	vmov.f32	s0, s17
 23ef33a:	4620      	mov	r0, r4
 23ef33c:	b2c9      	uxtb	r1, r1
 23ef33e:	f7fb f837 	bl	23ea3b0 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
                    EI_TRY(spectral::processing::butterworth_highpass_filter(
 23ef342:	4603      	mov	r3, r0
 23ef344:	2800      	cmp	r0, #0
 23ef346:	f47f af68 	bne.w	23ef21a <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x36>
 23ef34a:	e7cb      	b.n	23ef2e4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x100>
            else if (strcmp(config->filter_type, "high") == 0) {
 23ef34c:	4638      	mov	r0, r7
 23ef34e:	491b      	ldr	r1, [pc, #108]	; (23ef3bc <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x1d8>)
 23ef350:	f7f9 f8e8 	bl	23e8524 <strcmp>
 23ef354:	2800      	cmp	r0, #0
 23ef356:	d1c5      	bne.n	23ef2e4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x100>
                if( config->filter_order ) {
 23ef358:	9912      	ldr	r1, [sp, #72]	; 0x48
 23ef35a:	2900      	cmp	r1, #0
 23ef35c:	d0c2      	beq.n	23ef2e4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x100>
                    EI_TRY(spectral::processing::butterworth_highpass_filter(
 23ef35e:	eddd 0a11 	vldr	s1, [sp, #68]	; 0x44
 23ef362:	eeb0 0a68 	vmov.f32	s0, s17
 23ef366:	4620      	mov	r0, r4
 23ef368:	b2c9      	uxtb	r1, r1
 23ef36a:	f7fb fcf5 	bl	23ead58 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 23ef36e:	e7e8      	b.n	23ef342 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x15e>
            if (n_features > 0 && config->extra_low_freq) {
 23ef370:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 23ef374:	2b00      	cmp	r3, #0
 23ef376:	d0d2      	beq.n	23ef31e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13a>
                matrix_t lf_features(1, output_matrix->rows * output_matrix->cols - n_features,
 23ef378:	e9d5 3200 	ldrd	r3, r2, [r5]
 23ef37c:	68a9      	ldr	r1, [r5, #8]
                    output_matrix->buffer + n_features);
 23ef37e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
                matrix_t lf_features(1, output_matrix->rows * output_matrix->cols - n_features,
 23ef382:	434a      	muls	r2, r1
                    output_matrix->buffer + n_features);
 23ef384:	2101      	movs	r1, #1
 23ef386:	1a12      	subs	r2, r2, r0
 23ef388:	a807      	add	r0, sp, #28
 23ef38a:	f7fb feac 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
                n_features += extract_spec_features(
 23ef38e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 23ef392:	2301      	movs	r3, #1
 23ef394:	ee88 0a80 	vdiv.f32	s0, s17, s0
 23ef398:	9700      	str	r7, [sp, #0]
 23ef39a:	aa0b      	add	r2, sp, #44	; 0x2c
 23ef39c:	a907      	add	r1, sp, #28
 23ef39e:	a803      	add	r0, sp, #12
 23ef3a0:	f7fe fc0a 	bl	23edbb8 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
 23ef3a4:	4404      	add	r4, r0
                    output_matrix->buffer + n_features);
 23ef3a6:	a807      	add	r0, sp, #28
 23ef3a8:	f7fb feb2 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
 23ef3ac:	e7b7      	b.n	23ef31e <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf+0x13a>
 23ef3ae:	bf00      	nop
 23ef3b0:	023fbac6 	.word	0x023fbac6
 23ef3b4:	fffffc14 	.word	0xfffffc14
 23ef3b8:	023fb3ca 	.word	0x023fb3ca
 23ef3bc:	023fb3ce 	.word	0x023fb3ce

023ef3c0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
{
 23ef3c0:	b570      	push	{r4, r5, r6, lr}
 23ef3c2:	460e      	mov	r6, r1
 23ef3c4:	4615      	mov	r5, r2
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 23ef3c6:	6901      	ldr	r1, [r0, #16]
 23ef3c8:	6892      	ldr	r2, [r2, #8]
{
 23ef3ca:	b088      	sub	sp, #32
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 23ef3cc:	2300      	movs	r3, #0
{
 23ef3ce:	4604      	mov	r4, r0
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 23ef3d0:	fbb1 f1f2 	udiv	r1, r1, r2
 23ef3d4:	a804      	add	r0, sp, #16
{
 23ef3d6:	ed8d 0a03 	vstr	s0, [sp, #12]
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 23ef3da:	f7fb fe84 	bl	23eb0e6 <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 23ef3de:	9b04      	ldr	r3, [sp, #16]
 23ef3e0:	b383      	cbz	r3, 23ef444 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x84>
    signal->get_data(0, signal->total_length, input_matrix.buffer);
 23ef3e2:	6922      	ldr	r2, [r4, #16]
 23ef3e4:	2100      	movs	r1, #0
 23ef3e6:	4620      	mov	r0, r4
 23ef3e8:	f7fd f926 	bl	23ec638 <_ZNKSt8functionIFijjPfEEclEjjS0_>
    if (strcmp(config->analysis_type, "FFT") == 0) {
 23ef3ec:	4917      	ldr	r1, [pc, #92]	; (23ef44c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x8c>)
 23ef3ee:	6a28      	ldr	r0, [r5, #32]
 23ef3f0:	f7f9 f898 	bl	23e8524 <strcmp>
 23ef3f4:	4604      	mov	r4, r0
 23ef3f6:	bb38      	cbnz	r0, 23ef448 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x88>
        if (config->implementation_version == 1) {
 23ef3f8:	88ab      	ldrh	r3, [r5, #4]
 23ef3fa:	ed9d 0a03 	vldr	s0, [sp, #12]
 23ef3fe:	2b01      	cmp	r3, #1
 23ef400:	d10b      	bne.n	23ef41a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x5a>
            return spectral::feature::extract_spectral_analysis_features_v1(
 23ef402:	462a      	mov	r2, r5
 23ef404:	4631      	mov	r1, r6
 23ef406:	a804      	add	r0, sp, #16
 23ef408:	f7fe f9ae 	bl	23ed768 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v1EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
            return spectral::feature::extract_spectral_analysis_features_v4(
 23ef40c:	4604      	mov	r4, r0
    matrix_t input_matrix(signal->total_length / config->axes, config->axes);
 23ef40e:	a804      	add	r0, sp, #16
 23ef410:	f7fb fe7e 	bl	23eb110 <_ZN2ei9ei_matrixD1Ev>
}
 23ef414:	4620      	mov	r0, r4
 23ef416:	b008      	add	sp, #32
 23ef418:	bd70      	pop	{r4, r5, r6, pc}
        } else if (config->implementation_version == 4) {
 23ef41a:	2b04      	cmp	r3, #4
 23ef41c:	d105      	bne.n	23ef42a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x6a>
            return spectral::feature::extract_spectral_analysis_features_v4(
 23ef41e:	462a      	mov	r2, r5
 23ef420:	4631      	mov	r1, r6
 23ef422:	a804      	add	r0, sp, #16
 23ef424:	f7ff fede 	bl	23ef1e4 <_ZN2ei8spectral7feature37extract_spectral_analysis_features_v4EPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tf>
 23ef428:	e7f0      	b.n	23ef40c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4c>
            extract_spec_features(input_matrix, output_matrix, config, sampling_freq);
 23ef42a:	2301      	movs	r3, #1
 23ef42c:	462a      	mov	r2, r5
 23ef42e:	9300      	str	r3, [sp, #0]
 23ef430:	4631      	mov	r1, r6
 23ef432:	a804      	add	r0, sp, #16
 23ef434:	f7fe fbc0 	bl	23edbb8 <_ZN2ei8spectral7feature21extract_spec_featuresEPNS_9ei_matrixES3_P33ei_dsp_config_spectral_analysis_tfbb>
        return n_features == output_matrix->cols ? EIDSP_OK : EIDSP_MATRIX_SIZE_MISMATCH;
 23ef438:	68b2      	ldr	r2, [r6, #8]
 23ef43a:	4b05      	ldr	r3, [pc, #20]	; (23ef450 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x90>)
 23ef43c:	4290      	cmp	r0, r2
 23ef43e:	bf18      	it	ne
 23ef440:	461c      	movne	r4, r3
 23ef442:	e7e4      	b.n	23ef40e <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4e>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 23ef444:	4c03      	ldr	r4, [pc, #12]	; (23ef454 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x94>)
 23ef446:	e7e2      	b.n	23ef40e <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4e>
    return EIDSP_NOT_SUPPORTED;
 23ef448:	4c03      	ldr	r4, [pc, #12]	; (23ef458 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x98>)
 23ef44a:	e7e0      	b.n	23ef40e <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x4e>
 23ef44c:	023fbace 	.word	0x023fbace
 23ef450:	fffffc14 	.word	0xfffffc14
 23ef454:	fffffc16 	.word	0xfffffc16
 23ef458:	fffffc0a 	.word	0xfffffc0a

023ef45c <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
}
 23ef45c:	b530      	push	{r4, r5, lr}
const ei_config_tflite_graph_t ei_config_tflite_graph_7 = {
    .implementation_version = 1,
    .model = tflite_learn_7,
    .model_size = tflite_learn_7_len,
    .arena_size = tflite_learn_7_arena_size
};
 23ef45e:	4b32      	ldr	r3, [pc, #200]	; (23ef528 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xcc>)
 23ef460:	b091      	sub	sp, #68	; 0x44
 23ef462:	681a      	ldr	r2, [r3, #0]
 23ef464:	4b31      	ldr	r3, [pc, #196]	; (23ef52c <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xd0>)
SYSTEM_THREAD(ENABLED);
 23ef466:	2100      	movs	r1, #0
 23ef468:	2001      	movs	r0, #1
 23ef46a:	609a      	str	r2, [r3, #8]
 23ef46c:	f005 f878 	bl	23f4560 <system_thread_set_state>
        capacity_(0) {
 23ef470:	2300      	movs	r3, #0
 23ef472:	e9cd 3303 	strd	r3, r3, [sp, #12]
 23ef476:	9305      	str	r3, [sp, #20]
            StreamLogHandler(Serial, level, filters) {
 23ef478:	f007 f902 	bl	23f6680 <_Z16_fetch_usbserialv>
 23ef47c:	4605      	mov	r5, r0
 23ef47e:	a903      	add	r1, sp, #12
 23ef480:	a806      	add	r0, sp, #24
 23ef482:	f7fe fa4f 	bl	23ed924 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 23ef486:	a906      	add	r1, sp, #24
 23ef488:	a809      	add	r0, sp, #36	; 0x24
 23ef48a:	f7fe fa4b 	bl	23ed924 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23ef48e:	4c28      	ldr	r4, [pc, #160]	; (23ef530 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xd4>)
 23ef490:	4b28      	ldr	r3, [pc, #160]	; (23ef534 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xd8>)
 23ef492:	a909      	add	r1, sp, #36	; 0x24
 23ef494:	6023      	str	r3, [r4, #0]
 23ef496:	a80c      	add	r0, sp, #48	; 0x30
 23ef498:	f7fe fa44 	bl	23ed924 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23ef49c:	aa0c      	add	r2, sp, #48	; 0x30
 23ef49e:	2132      	movs	r1, #50	; 0x32
 23ef4a0:	1d20      	adds	r0, r4, #4
 23ef4a2:	f006 f98d 	bl	23f57c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23ef4a6:	a80c      	add	r0, sp, #48	; 0x30
 23ef4a8:	f7fc fef2 	bl	23ec290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23ef4ac:	a809      	add	r0, sp, #36	; 0x24
 23ef4ae:	f7fc feef 	bl	23ec290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23ef4b2:	4b21      	ldr	r3, [pc, #132]	; (23ef538 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xdc>)
 23ef4b4:	6225      	str	r5, [r4, #32]
 23ef4b6:	6023      	str	r3, [r4, #0]
 23ef4b8:	a806      	add	r0, sp, #24
 23ef4ba:	f7fc fee9 	bl	23ec290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23ef4be:	4b1f      	ldr	r3, [pc, #124]	; (23ef53c <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xe0>)
 23ef4c0:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23ef4c2:	f007 f8dd 	bl	23f6680 <_Z16_fetch_usbserialv>
 23ef4c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23ef4ca:	f007 f8c7 	bl	23f665c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23ef4ce:	f005 fe5b 	bl	23f5188 <_ZN5spark10LogManager8instanceEv>
 23ef4d2:	4621      	mov	r1, r4
 23ef4d4:	f006 f84c 	bl	23f5570 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_ERROR);
 23ef4d8:	a803      	add	r0, sp, #12
 23ef4da:	f7fc fed9 	bl	23ec290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ef4de:	4c18      	ldr	r4, [pc, #96]	; (23ef540 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xe4>)
 23ef4e0:	e8d4 1f8f 	ldab	r1, [r4]
 23ef4e4:	f011 0101 	ands.w	r1, r1, #1
 23ef4e8:	d10b      	bne.n	23ef502 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xa6>
 23ef4ea:	4620      	mov	r0, r4
 23ef4ec:	9101      	str	r1, [sp, #4]
 23ef4ee:	f7f9 f85b 	bl	23e85a8 <__cxa_guard_acquire>
 23ef4f2:	9901      	ldr	r1, [sp, #4]
 23ef4f4:	b128      	cbz	r0, 23ef502 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xa6>
 23ef4f6:	4813      	ldr	r0, [pc, #76]	; (23ef544 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xe8>)
 23ef4f8:	f006 fe9a 	bl	23f6230 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ef4fc:	4620      	mov	r0, r4
 23ef4fe:	f7f9 f858 	bl	23e85b2 <__cxa_guard_release>
      dataMode_{dataMode}
 23ef502:	4b11      	ldr	r3, [pc, #68]	; (23ef548 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xec>)
static ADXL362DMA accel(SPI, D13); // A2 is D13, but is undefined in <project>_inferencing.h
 23ef504:	220d      	movs	r2, #13
 23ef506:	930c      	str	r3, [sp, #48]	; 0x30
 23ef508:	2300      	movs	r3, #0
 23ef50a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 23ef50e:	4b0f      	ldr	r3, [pc, #60]	; (23ef54c <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xf0>)
 23ef510:	490c      	ldr	r1, [pc, #48]	; (23ef544 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xe8>)
 23ef512:	930e      	str	r3, [sp, #56]	; 0x38
 23ef514:	2301      	movs	r3, #1
 23ef516:	480e      	ldr	r0, [pc, #56]	; (23ef550 <_GLOBAL__sub_I__ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xf4>)
 23ef518:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 23ef51c:	ab0c      	add	r3, sp, #48	; 0x30
 23ef51e:	f004 fc41 	bl	23f3da4 <_ZN10ADXL362DMAC1ER8SPIClassiN8particle11SPISettingsE>
}
 23ef522:	b011      	add	sp, #68	; 0x44
 23ef524:	bd30      	pop	{r4, r5, pc}
 23ef526:	bf00      	nop
 23ef528:	1007a4a8 	.word	0x1007a4a8
 23ef52c:	1007a428 	.word	0x1007a428
 23ef530:	1007aa28 	.word	0x1007aa28
 23ef534:	023fbaf0 	.word	0x023fbaf0
 23ef538:	023ff8d0 	.word	0x023ff8d0
 23ef53c:	023fbb08 	.word	0x023fbb08
 23ef540:	1007a694 	.word	0x1007a694
 23ef544:	1007a698 	.word	0x1007a698
 23ef548:	023fbadc 	.word	0x023fbadc
 23ef54c:	003d0900 	.word	0x003d0900
 23ef550:	1007a6a4 	.word	0x1007a6a4

023ef554 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 23ef554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ef558:	ed2d 8b08 	vpush	{d8-d11}
 23ef55c:	4616      	mov	r6, r2
 23ef55e:	b089      	sub	sp, #36	; 0x24
 23ef560:	e9dd 251a 	ldrd	r2, r5, [sp, #104]	; 0x68
 23ef564:	460f      	mov	r7, r1
    kiss_fft_cpx * Fout_beg=Fout;
    const int p=*factors++; /* the radix  */
    const int m=*factors++; /* stage's fft length/p */
 23ef566:	f8d2 a004 	ldr.w	sl, [r2, #4]
    const int p=*factors++; /* the radix  */
 23ef56a:	6811      	ldr	r1, [r2, #0]
        }
        return;
    }
#endif

    if (m==1) {
 23ef56c:	f1ba 0f01 	cmp.w	sl, #1
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 23ef570:	fb0a f901 	mul.w	r9, sl, r1
    const int p=*factors++; /* the radix  */
 23ef574:	9103      	str	r1, [sp, #12]
        do{
            *Fout = *f;
            f += fstride*in_stride;
 23ef576:	fb06 f103 	mul.w	r1, r6, r3
{
 23ef57a:	4604      	mov	r4, r0
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 23ef57c:	eb00 09c9 	add.w	r9, r0, r9, lsl #3
            f += fstride*in_stride;
 23ef580:	ea4f 08c1 	mov.w	r8, r1, lsl #3
    if (m==1) {
 23ef584:	d116      	bne.n	23ef5b4 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x60>
 23ef586:	4603      	mov	r3, r0
            *Fout = *f;
 23ef588:	e897 0003 	ldmia.w	r7, {r0, r1}
 23ef58c:	e883 0003 	stmia.w	r3, {r0, r1}
        }while(++Fout != Fout_end );
 23ef590:	3308      	adds	r3, #8
 23ef592:	4599      	cmp	r9, r3
            f += fstride*in_stride;
 23ef594:	4447      	add	r7, r8
        }while(++Fout != Fout_end );
 23ef596:	d1f7      	bne.n	23ef588 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x34>
    kiss_fft_cpx * tw1 = st->twiddles;
 23ef598:	f505 7384 	add.w	r3, r5, #264	; 0x108
 23ef59c:	9305      	str	r3, [sp, #20]
 23ef59e:	9b03      	ldr	r3, [sp, #12]
 23ef5a0:	3b02      	subs	r3, #2
 23ef5a2:	2b03      	cmp	r3, #3
 23ef5a4:	f200 828a 	bhi.w	23efabc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x568>
 23ef5a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 23ef5ac:	0056001b 	.word	0x0056001b
 23ef5b0:	019b00fb 	.word	0x019b00fb
    const int m=*factors++; /* stage's fft length/p */
 23ef5b4:	3208      	adds	r2, #8
 23ef5b6:	9204      	str	r2, [sp, #16]
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 23ef5b8:	9a03      	ldr	r2, [sp, #12]
            f += fstride*in_stride;
        }while( (Fout += m) != Fout_end );
 23ef5ba:	ea4f 0bca 	mov.w	fp, sl, lsl #3
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 23ef5be:	4372      	muls	r2, r6
 23ef5c0:	9904      	ldr	r1, [sp, #16]
 23ef5c2:	9501      	str	r5, [sp, #4]
 23ef5c4:	9100      	str	r1, [sp, #0]
 23ef5c6:	4639      	mov	r1, r7
 23ef5c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23ef5cc:	9005      	str	r0, [sp, #20]
 23ef5ce:	f7ff ffc1 	bl	23ef554 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        }while( (Fout += m) != Fout_end );
 23ef5d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 23ef5d6:	9805      	ldr	r0, [sp, #20]
            f += fstride*in_stride;
 23ef5d8:	4447      	add	r7, r8
        }while( (Fout += m) != Fout_end );
 23ef5da:	4458      	add	r0, fp
 23ef5dc:	4581      	cmp	r9, r0
 23ef5de:	d1ef      	bne.n	23ef5c0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x6c>
 23ef5e0:	e7da      	b.n	23ef598 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x44>
    Fout2 = Fout + m;
 23ef5e2:	f10a 0301 	add.w	r3, sl, #1
 23ef5e6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
        tw1 += fstride;
 23ef5ea:	00f6      	lsls	r6, r6, #3
 23ef5ec:	3408      	adds	r4, #8
        C_MUL (t,  *Fout2 , *tw1);
 23ef5ee:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
 23ef5f2:	ed53 5a01 	vldr	s11, [r3, #-4]
 23ef5f6:	edd5 7a42 	vldr	s15, [r5, #264]	; 0x108
 23ef5fa:	ed13 6a02 	vldr	s12, [r3, #-8]
 23ef5fe:	ee26 7ae5 	vnmul.f32	s14, s13, s11
 23ef602:	eea6 7a27 	vfma.f32	s14, s12, s15
 23ef606:	ee67 7aa5 	vmul.f32	s15, s15, s11
 23ef60a:	eee6 7a26 	vfma.f32	s15, s12, s13
        C_SUB( *Fout2 ,  *Fout , t );
 23ef60e:	ed54 6a02 	vldr	s13, [r4, #-8]
 23ef612:	ee76 6ac7 	vsub.f32	s13, s13, s14
 23ef616:	ed43 6a02 	vstr	s13, [r3, #-8]
 23ef61a:	ed54 6a01 	vldr	s13, [r4, #-4]
 23ef61e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 23ef622:	ed43 6a01 	vstr	s13, [r3, #-4]
        C_ADDTO( *Fout ,  t );
 23ef626:	ed54 6a02 	vldr	s13, [r4, #-8]
 23ef62a:	ee36 7a87 	vadd.f32	s14, s13, s14
 23ef62e:	ed04 7a02 	vstr	s14, [r4, #-8]
 23ef632:	ed14 7a01 	vldr	s14, [r4, #-4]
 23ef636:	ee77 7a27 	vadd.f32	s15, s14, s15
    }while (--m);
 23ef63a:	f1ba 0a01 	subs.w	sl, sl, #1
        C_ADDTO( *Fout ,  t );
 23ef63e:	ed44 7a01 	vstr	s15, [r4, #-4]
    }while (--m);
 23ef642:	f103 0308 	add.w	r3, r3, #8
 23ef646:	f104 0408 	add.w	r4, r4, #8
 23ef64a:	4435      	add	r5, r6
 23ef64c:	d1cf      	bne.n	23ef5ee <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x9a>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
        case 4: kf_bfly4(Fout,fstride,st,m); break;
        case 5: kf_bfly5(Fout,fstride,st,m); break;
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
    }
}
 23ef64e:	b009      	add	sp, #36	; 0x24
 23ef650:	ecbd 8b08 	vpop	{d8-d11}
 23ef654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     epi3 = st->twiddles[fstride*m];
 23ef658:	fb06 f30a 	mul.w	r3, r6, sl
 23ef65c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 23ef660:	ed93 9a43 	vldr	s18, [r3, #268]	; 0x10c
 23ef664:	eb04 08ca 	add.w	r8, r4, sl, lsl #3
         tw2 += fstride*2;
 23ef668:	0133      	lsls	r3, r6, #4
 23ef66a:	eb04 190a 	add.w	r9, r4, sl, lsl #4
         tw1 += fstride;
 23ef66e:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
 23ef672:	f104 0608 	add.w	r6, r4, #8
 23ef676:	4644      	mov	r4, r8
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 23ef678:	4657      	mov	r7, sl
         Fout[m2].i = Fout[m].i - scratch[0].r;
 23ef67a:	eef1 9a49 	vneg.f32	s19, s18
         tw2 += fstride*2;
 23ef67e:	46aa      	mov	sl, r5
 23ef680:	9303      	str	r3, [sp, #12]
 23ef682:	3404      	adds	r4, #4
         C_MUL(scratch[1],Fout[m] , *tw1);
 23ef684:	edd8 7a01 	vldr	s15, [r8, #4]
 23ef688:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
 23ef68c:	ee66 8ae7 	vnmul.f32	s17, s13, s15
 23ef690:	ed14 6a01 	vldr	s12, [r4, #-4]
 23ef694:	ed95 8a42 	vldr	s16, [r5, #264]	; 0x108
 23ef698:	eeb0 7a68 	vmov.f32	s14, s17
 23ef69c:	eea6 7a08 	vfma.f32	s14, s12, s16
 23ef6a0:	ee28 8a27 	vmul.f32	s16, s16, s15
 23ef6a4:	eef0 7a48 	vmov.f32	s15, s16
         C_MUL(scratch[2],Fout[m2] , *tw2);
 23ef6a8:	edd9 5a01 	vldr	s11, [r9, #4]
         C_MUL(scratch[1],Fout[m] , *tw1);
 23ef6ac:	eee6 7a26 	vfma.f32	s15, s12, s13
         C_MUL(scratch[2],Fout[m2] , *tw2);
 23ef6b0:	edda 6a43 	vldr	s13, [sl, #268]	; 0x10c
 23ef6b4:	ed99 6a00 	vldr	s12, [r9]
 23ef6b8:	ed9a 8a42 	vldr	s16, [sl, #264]	; 0x108
 23ef6bc:	ee66 8ae5 	vnmul.f32	s17, s13, s11
 23ef6c0:	eee6 8a08 	vfma.f32	s17, s12, s16
 23ef6c4:	ee28 8a25 	vmul.f32	s16, s16, s11
 23ef6c8:	eea6 8a26 	vfma.f32	s16, s12, s13
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 23ef6cc:	f856 0c08 	ldr.w	r0, [r6, #-8]
         C_ADD(scratch[3],scratch[1],scratch[2]);
 23ef6d0:	ee37 aa88 	vadd.f32	s20, s15, s16
 23ef6d4:	ee77 aa28 	vadd.f32	s21, s14, s17
         C_SUB(scratch[0],scratch[1],scratch[2]);
 23ef6d8:	ee37 8ac8 	vsub.f32	s16, s15, s16
 23ef6dc:	ee77 8a68 	vsub.f32	s17, s14, s17
         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 23ef6e0:	f7f8 f982 	bl	23e79e8 <__aeabi_f2d>
 23ef6e4:	ec41 0b1b 	vmov	d11, r0, r1
 23ef6e8:	ee1a 0a90 	vmov	r0, s21
 23ef6ec:	f7f8 f97c 	bl	23e79e8 <__aeabi_f2d>
 23ef6f0:	2200      	movs	r2, #0
 23ef6f2:	4bf1      	ldr	r3, [pc, #964]	; (23efab8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x564>)
 23ef6f4:	f7f8 f9d0 	bl	23e7a98 <__aeabi_dmul>
 23ef6f8:	4602      	mov	r2, r0
 23ef6fa:	460b      	mov	r3, r1
 23ef6fc:	ec51 0b1b 	vmov	r0, r1, d11
 23ef700:	f7f8 f812 	bl	23e7728 <__aeabi_dsub>
 23ef704:	f7f8 fcc0 	bl	23e8088 <__aeabi_d2f>
 23ef708:	f844 0c04 	str.w	r0, [r4, #-4]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 23ef70c:	f856 0c04 	ldr.w	r0, [r6, #-4]
 23ef710:	f7f8 f96a 	bl	23e79e8 <__aeabi_f2d>
 23ef714:	ec41 0b1b 	vmov	d11, r0, r1
 23ef718:	ee1a 0a10 	vmov	r0, s20
 23ef71c:	f7f8 f964 	bl	23e79e8 <__aeabi_f2d>
 23ef720:	2200      	movs	r2, #0
 23ef722:	4be5      	ldr	r3, [pc, #916]	; (23efab8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x564>)
 23ef724:	f7f8 f9b8 	bl	23e7a98 <__aeabi_dmul>
 23ef728:	460b      	mov	r3, r1
 23ef72a:	4602      	mov	r2, r0
 23ef72c:	ec51 0b1b 	vmov	r0, r1, d11
 23ef730:	f7f7 fffa 	bl	23e7728 <__aeabi_dsub>
 23ef734:	f7f8 fca8 	bl	23e8088 <__aeabi_d2f>
 23ef738:	f8c8 0004 	str.w	r0, [r8, #4]
         C_ADDTO(*Fout,scratch[3]);
 23ef73c:	ed56 7a02 	vldr	s15, [r6, #-8]
 23ef740:	ee77 7aaa 	vadd.f32	s15, s15, s21
 23ef744:	ed46 7a02 	vstr	s15, [r6, #-8]
 23ef748:	ed56 7a01 	vldr	s15, [r6, #-4]
 23ef74c:	ee77 7a8a 	vadd.f32	s15, s15, s20
 23ef750:	ed46 7a01 	vstr	s15, [r6, #-4]
         Fout[m2].r = Fout[m].r + scratch[0].i;
 23ef754:	ed54 7a01 	vldr	s15, [r4, #-4]
 23ef758:	eee9 7a08 	vfma.f32	s15, s18, s16
 23ef75c:	edc9 7a00 	vstr	s15, [r9]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 23ef760:	edd8 7a01 	vldr	s15, [r8, #4]
 23ef764:	eee9 7aa8 	vfma.f32	s15, s19, s17
 23ef768:	edc9 7a01 	vstr	s15, [r9, #4]
         Fout[m].r -= scratch[0].i;
 23ef76c:	ed54 7a01 	vldr	s15, [r4, #-4]
 23ef770:	eee9 7a88 	vfma.f32	s15, s19, s16
 23ef774:	ed44 7a01 	vstr	s15, [r4, #-4]
         Fout[m].i += scratch[0].r;
 23ef778:	edd8 7a01 	vldr	s15, [r8, #4]
 23ef77c:	eee9 7a28 	vfma.f32	s15, s18, s17
 23ef780:	edc8 7a01 	vstr	s15, [r8, #4]
     }while(--k);
 23ef784:	9b03      	ldr	r3, [sp, #12]
 23ef786:	3f01      	subs	r7, #1
 23ef788:	f106 0608 	add.w	r6, r6, #8
 23ef78c:	f108 0808 	add.w	r8, r8, #8
 23ef790:	445d      	add	r5, fp
 23ef792:	f109 0908 	add.w	r9, r9, #8
 23ef796:	449a      	add	sl, r3
 23ef798:	f104 0408 	add.w	r4, r4, #8
 23ef79c:	f47f af72 	bne.w	23ef684 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x130>
 23ef7a0:	e755      	b.n	23ef64e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        tw3 += fstride*3;
 23ef7a2:	2218      	movs	r2, #24
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 23ef7a4:	4657      	mov	r7, sl
    tw3 = tw2 = tw1 = st->twiddles;
 23ef7a6:	46a9      	mov	r9, r5
        tw3 += fstride*3;
 23ef7a8:	46ae      	mov	lr, r5
 23ef7aa:	46a8      	mov	r8, r5
        tw1 += fstride;
 23ef7ac:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
        tw2 += fstride*2;
 23ef7b0:	ea4f 1a06 	mov.w	sl, r6, lsl #4
        tw3 += fstride*3;
 23ef7b4:	4356      	muls	r6, r2
 23ef7b6:	eb04 1007 	add.w	r0, r4, r7, lsl #4
 23ef7ba:	eb04 01c7 	add.w	r1, r4, r7, lsl #3
 23ef7be:	eb00 03c7 	add.w	r3, r0, r7, lsl #3
 23ef7c2:	f104 0c04 	add.w	ip, r4, #4
        C_MUL(scratch[0],Fout[m] , *tw1 );
 23ef7c6:	ed91 7a01 	vldr	s14, [r1, #4]
 23ef7ca:	edd9 6a43 	vldr	s13, [r9, #268]	; 0x10c
 23ef7ce:	ed91 5a00 	vldr	s10, [r1]
 23ef7d2:	edd9 7a42 	vldr	s15, [r9, #264]	; 0x108
 23ef7d6:	ee26 6ac7 	vnmul.f32	s12, s13, s14
 23ef7da:	eea5 6a27 	vfma.f32	s12, s10, s15
 23ef7de:	ee67 7a87 	vmul.f32	s15, s15, s14
 23ef7e2:	eee5 7a26 	vfma.f32	s15, s10, s13
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 23ef7e6:	edd0 4a01 	vldr	s9, [r0, #4]
        C_MUL(scratch[0],Fout[m] , *tw1 );
 23ef7ea:	eeb0 7a67 	vmov.f32	s14, s15
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 23ef7ee:	edd8 7a43 	vldr	s15, [r8, #268]	; 0x10c
 23ef7f2:	ed90 5a00 	vldr	s10, [r0]
        C_MUL(scratch[0],Fout[m] , *tw1 );
 23ef7f6:	eef0 5a46 	vmov.f32	s11, s12
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 23ef7fa:	ee67 6ae4 	vnmul.f32	s13, s15, s9
 23ef7fe:	ed98 6a42 	vldr	s12, [r8, #264]	; 0x108
 23ef802:	eee5 6a06 	vfma.f32	s13, s10, s12
 23ef806:	ee26 6a24 	vmul.f32	s12, s12, s9
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 23ef80a:	edd3 3a01 	vldr	s7, [r3, #4]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 23ef80e:	eea5 6a27 	vfma.f32	s12, s10, s15
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 23ef812:	ed9e 5a43 	vldr	s10, [lr, #268]	; 0x10c
 23ef816:	edd3 4a00 	vldr	s9, [r3]
 23ef81a:	edde 7a42 	vldr	s15, [lr, #264]	; 0x108
 23ef81e:	ee25 4a63 	vnmul.f32	s8, s10, s7
        C_SUB( scratch[5] , *Fout, scratch[1] );
 23ef822:	ed1c 3a01 	vldr	s6, [ip, #-4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 23ef826:	eea4 4aa7 	vfma.f32	s8, s9, s15
 23ef82a:	ee67 7aa3 	vmul.f32	s15, s15, s7
        C_SUB( scratch[5] , *Fout, scratch[1] );
 23ef82e:	edd4 3a01 	vldr	s7, [r4, #4]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 23ef832:	eee4 7a85 	vfma.f32	s15, s9, s10
        C_SUB( scratch[5] , *Fout, scratch[1] );
 23ef836:	ee73 4a66 	vsub.f32	s9, s6, s13
        C_ADDTO(*Fout, scratch[1]);
 23ef83a:	ee76 6a83 	vadd.f32	s13, s13, s6
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 23ef83e:	ee35 3a84 	vadd.f32	s6, s11, s8
        C_ADDTO(*Fout, scratch[1]);
 23ef842:	ed4c 6a01 	vstr	s13, [ip, #-4]
        C_SUB( scratch[5] , *Fout, scratch[1] );
 23ef846:	ee33 5ac6 	vsub.f32	s10, s7, s12
        C_SUB( Fout[m2], *Fout, scratch[3] );
 23ef84a:	ee76 6ac3 	vsub.f32	s13, s13, s6
        C_ADDTO(*Fout, scratch[1]);
 23ef84e:	ee36 6a23 	vadd.f32	s12, s12, s7
 23ef852:	ed84 6a01 	vstr	s12, [r4, #4]
        C_SUB( Fout[m2], *Fout, scratch[3] );
 23ef856:	edc0 6a00 	vstr	s13, [r0]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 23ef85a:	ee77 3a27 	vadd.f32	s7, s14, s15
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 23ef85e:	ee35 6ac4 	vsub.f32	s12, s11, s8
        C_SUB( Fout[m2], *Fout, scratch[3] );
 23ef862:	edd4 5a01 	vldr	s11, [r4, #4]
 23ef866:	ee75 5ae3 	vsub.f32	s11, s11, s7
 23ef86a:	edc0 5a01 	vstr	s11, [r0, #4]
        C_ADDTO( *Fout , scratch[3] );
 23ef86e:	ed5c 6a01 	vldr	s13, [ip, #-4]
 23ef872:	ee76 6a83 	vadd.f32	s13, s13, s6
 23ef876:	ed4c 6a01 	vstr	s13, [ip, #-4]
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 23ef87a:	ee77 7a67 	vsub.f32	s15, s14, s15
        C_ADDTO( *Fout , scratch[3] );
 23ef87e:	ed94 7a01 	vldr	s14, [r4, #4]
 23ef882:	ee37 7a23 	vadd.f32	s14, s14, s7
 23ef886:	ed84 7a01 	vstr	s14, [r4, #4]
        if(st->inverse) {
 23ef88a:	686a      	ldr	r2, [r5, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 23ef88c:	ee74 6aa7 	vadd.f32	s13, s9, s15
            Fout[m3].i = scratch[5].i - scratch[4].r;
 23ef890:	ee35 7a46 	vsub.f32	s14, s10, s12
            Fout[m].r = scratch[5].r - scratch[4].i;
 23ef894:	ee74 7ae7 	vsub.f32	s15, s9, s15
            Fout[m].i = scratch[5].i + scratch[4].r;
 23ef898:	ee35 6a06 	vadd.f32	s12, s10, s12
        if(st->inverse) {
 23ef89c:	b1c2      	cbz	r2, 23ef8d0 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x37c>
            Fout[m].r = scratch[5].r - scratch[4].i;
 23ef89e:	edc1 7a00 	vstr	s15, [r1]
            Fout[m].i = scratch[5].i + scratch[4].r;
 23ef8a2:	ed81 6a01 	vstr	s12, [r1, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 23ef8a6:	edc3 6a00 	vstr	s13, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 23ef8aa:	ed83 7a01 	vstr	s14, [r3, #4]
    }while(--k);
 23ef8ae:	3f01      	subs	r7, #1
        ++Fout;
 23ef8b0:	f104 0408 	add.w	r4, r4, #8
    }while(--k);
 23ef8b4:	f101 0108 	add.w	r1, r1, #8
 23ef8b8:	44d9      	add	r9, fp
 23ef8ba:	f100 0008 	add.w	r0, r0, #8
 23ef8be:	44d0      	add	r8, sl
 23ef8c0:	f103 0308 	add.w	r3, r3, #8
 23ef8c4:	44b6      	add	lr, r6
 23ef8c6:	f10c 0c08 	add.w	ip, ip, #8
 23ef8ca:	f47f af7c 	bne.w	23ef7c6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x272>
 23ef8ce:	e6be      	b.n	23ef64e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
            Fout[m].r = scratch[5].r + scratch[4].i;
 23ef8d0:	edc1 6a00 	vstr	s13, [r1]
            Fout[m].i = scratch[5].i - scratch[4].r;
 23ef8d4:	ed81 7a01 	vstr	s14, [r1, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 23ef8d8:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 23ef8dc:	ed83 6a01 	vstr	s12, [r3, #4]
 23ef8e0:	e7e5      	b.n	23ef8ae <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x35a>
    ya = twiddles[fstride*m];
 23ef8e2:	fb0a f306 	mul.w	r3, sl, r6
 23ef8e6:	9a05      	ldr	r2, [sp, #20]
    Fout4=Fout0+4*m;
 23ef8e8:	46ac      	mov	ip, r5
    ya = twiddles[fstride*m];
 23ef8ea:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 23ef8ee:	ed97 2a01 	vldr	s4, [r7, #4]
 23ef8f2:	00f2      	lsls	r2, r6, #3
 23ef8f4:	9203      	str	r2, [sp, #12]
 23ef8f6:	2218      	movs	r2, #24
    Fout4=Fout0+4*m;
 23ef8f8:	46ae      	mov	lr, r5
 23ef8fa:	46a8      	mov	r8, r5
    for ( u=0; u<m; ++u ) {
 23ef8fc:	f04f 0900 	mov.w	r9, #0
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 23ef900:	eef1 0a42 	vneg.f32	s1, s4
 23ef904:	4372      	muls	r2, r6
    ya = twiddles[fstride*m];
 23ef906:	edd7 1a00 	vldr	s3, [r7]
    yb = twiddles[fstride*2*m];
 23ef90a:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    Fout2=Fout0+2*m;
 23ef90e:	eb04 130a 	add.w	r3, r4, sl, lsl #4
    yb = twiddles[fstride*2*m];
 23ef912:	ed97 1a00 	vldr	s2, [r7]
 23ef916:	edd7 2a01 	vldr	s5, [r7, #4]
    for ( u=0; u<m; ++u ) {
 23ef91a:	ea4f 1b06 	mov.w	fp, r6, lsl #4
 23ef91e:	eb04 07ca 	add.w	r7, r4, sl, lsl #3
 23ef922:	eb03 01ca 	add.w	r1, r3, sl, lsl #3
    Fout4=Fout0+4*m;
 23ef926:	eb03 100a 	add.w	r0, r3, sl, lsl #4
 23ef92a:	9204      	str	r2, [sp, #16]
 23ef92c:	0176      	lsls	r6, r6, #5
    for ( u=0; u<m; ++u ) {
 23ef92e:	45ca      	cmp	sl, r9
 23ef930:	f104 0408 	add.w	r4, r4, #8
 23ef934:	f107 0708 	add.w	r7, r7, #8
 23ef938:	f103 0308 	add.w	r3, r3, #8
 23ef93c:	f101 0108 	add.w	r1, r1, #8
 23ef940:	f100 0008 	add.w	r0, r0, #8
 23ef944:	f77f ae83 	ble.w	23ef64e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xfa>
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 23ef948:	edd5 6a43 	vldr	s13, [r5, #268]	; 0x10c
 23ef94c:	ed57 3a01 	vldr	s7, [r7, #-4]
 23ef950:	edd5 5a42 	vldr	s11, [r5, #264]	; 0x108
 23ef954:	ed17 6a02 	vldr	s12, [r7, #-8]
 23ef958:	ee26 3ae3 	vnmul.f32	s6, s13, s7
 23ef95c:	eea6 3a25 	vfma.f32	s6, s12, s11
 23ef960:	ee65 5aa3 	vmul.f32	s11, s11, s7
 23ef964:	eee6 5a26 	vfma.f32	s11, s12, s13
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 23ef968:	edd8 4a42 	vldr	s9, [r8, #264]	; 0x108
 23ef96c:	ed53 6a01 	vldr	s13, [r3, #-4]
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 23ef970:	eef0 3a65 	vmov.f32	s7, s11
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 23ef974:	edd8 5a43 	vldr	s11, [r8, #268]	; 0x10c
 23ef978:	ed13 5a02 	vldr	s10, [r3, #-8]
 23ef97c:	ee25 6ae6 	vnmul.f32	s12, s11, s13
 23ef980:	ee64 6aa6 	vmul.f32	s13, s9, s13
 23ef984:	eee5 6a25 	vfma.f32	s13, s10, s11
 23ef988:	eea5 6a24 	vfma.f32	s12, s10, s9
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23ef98c:	edde 5a43 	vldr	s11, [lr, #268]	; 0x10c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 23ef990:	eef0 4a66 	vmov.f32	s9, s13
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23ef994:	ed51 6a01 	vldr	s13, [r1, #-4]
 23ef998:	ed9e 5a42 	vldr	s10, [lr, #264]	; 0x108
 23ef99c:	ed11 4a02 	vldr	s8, [r1, #-8]
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 23ef9a0:	eef0 8a46 	vmov.f32	s17, s12
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23ef9a4:	ee25 6ae6 	vnmul.f32	s12, s11, s13
 23ef9a8:	eea4 6a05 	vfma.f32	s12, s8, s10
 23ef9ac:	ee25 5a26 	vmul.f32	s10, s10, s13
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 23ef9b0:	eddc 6a43 	vldr	s13, [ip, #268]	; 0x10c
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23ef9b4:	eea4 5a25 	vfma.f32	s10, s8, s11
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 23ef9b8:	ed50 5a01 	vldr	s11, [r0, #-4]
 23ef9bc:	ed9c 4a42 	vldr	s8, [ip, #264]	; 0x108
        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 23ef9c0:	eef0 9a43 	vmov.f32	s19, s6
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 23ef9c4:	eeb0 0a46 	vmov.f32	s0, s12
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 23ef9c8:	ee26 3ae5 	vnmul.f32	s6, s13, s11
 23ef9cc:	ed10 6a02 	vldr	s12, [r0, #-8]
 23ef9d0:	eea6 3a04 	vfma.f32	s6, s12, s8
 23ef9d4:	ee64 5a25 	vmul.f32	s11, s8, s11
        C_ADD( scratch[7],scratch[1],scratch[4]);
 23ef9d8:	ee39 aa83 	vadd.f32	s20, s19, s6
        C_SUB( scratch[10],scratch[1],scratch[4]);
 23ef9dc:	ee39 3ac3 	vsub.f32	s6, s19, s6
        C_ADD( scratch[8],scratch[2],scratch[3]);
 23ef9e0:	ee78 9a80 	vadd.f32	s19, s17, s0
        scratch[0] = *Fout0;
 23ef9e4:	ed14 7a02 	vldr	s14, [r4, #-8]
        C_ADD( scratch[8],scratch[2],scratch[3]);
 23ef9e8:	ee34 8a85 	vadd.f32	s16, s9, s10
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 23ef9ec:	eee6 5a26 	vfma.f32	s11, s12, s13
        C_SUB( scratch[9],scratch[2],scratch[3]);
 23ef9f0:	ee74 6ac5 	vsub.f32	s13, s9, s10
        Fout0->r += scratch[7].r + scratch[8].r;
 23ef9f4:	ee3a 5a29 	vadd.f32	s10, s20, s19
        C_ADD( scratch[7],scratch[1],scratch[4]);
 23ef9f8:	ee33 9aa5 	vadd.f32	s18, s7, s11
        Fout0->r += scratch[7].r + scratch[8].r;
 23ef9fc:	ee35 5a07 	vadd.f32	s10, s10, s14
        scratch[0] = *Fout0;
 23efa00:	ed54 7a01 	vldr	s15, [r4, #-4]
        Fout0->r += scratch[7].r + scratch[8].r;
 23efa04:	ed04 5a02 	vstr	s10, [r4, #-8]
        Fout0->i += scratch[7].i + scratch[8].i;
 23efa08:	ee39 5a08 	vadd.f32	s10, s18, s16
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 23efa0c:	eef0 4a47 	vmov.f32	s9, s14
        Fout0->i += scratch[7].i + scratch[8].i;
 23efa10:	ee35 5a27 	vadd.f32	s10, s10, s15
        C_SUB( scratch[9],scratch[2],scratch[3]);
 23efa14:	ee38 6ac0 	vsub.f32	s12, s17, s0
        Fout0->i += scratch[7].i + scratch[8].i;
 23efa18:	ed04 5a01 	vstr	s10, [r4, #-4]
        C_SUB( scratch[10],scratch[1],scratch[4]);
 23efa1c:	ee73 5ae5 	vsub.f32	s11, s7, s11
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 23efa20:	eeb0 5a67 	vmov.f32	s10, s15
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 23efa24:	ee62 3aa6 	vmul.f32	s7, s5, s13
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 23efa28:	eee1 4a8a 	vfma.f32	s9, s3, s20
        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 23efa2c:	eee2 3a25 	vfma.f32	s7, s4, s11
        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 23efa30:	eee1 4a29 	vfma.f32	s9, s2, s19
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 23efa34:	ee26 4a62 	vnmul.f32	s8, s12, s5
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 23efa38:	eea1 5a89 	vfma.f32	s10, s3, s18
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 23efa3c:	eea1 7a0a 	vfma.f32	s14, s2, s20
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 23efa40:	ee65 5ae2 	vnmul.f32	s11, s11, s5
        C_SUB(*Fout1,scratch[5],scratch[6]);
 23efa44:	ee34 0ae3 	vsub.f32	s0, s9, s7
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 23efa48:	eee2 5a26 	vfma.f32	s11, s4, s13
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 23efa4c:	eea1 5a08 	vfma.f32	s10, s2, s16
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 23efa50:	eea0 4a83 	vfma.f32	s8, s1, s6
        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 23efa54:	eea1 7aa9 	vfma.f32	s14, s3, s19
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 23efa58:	ee66 6a42 	vnmul.f32	s13, s12, s4
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 23efa5c:	eee1 7a09 	vfma.f32	s15, s2, s18
        C_SUB(*Fout1,scratch[5],scratch[6]);
 23efa60:	ed07 0a02 	vstr	s0, [r7, #-8]
        C_ADD(*Fout2,scratch[11],scratch[12]);
 23efa64:	ee37 6a25 	vadd.f32	s12, s14, s11
        C_SUB(*Fout1,scratch[5],scratch[6]);
 23efa68:	ee35 0a44 	vsub.f32	s0, s10, s8
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 23efa6c:	eee1 7a88 	vfma.f32	s15, s3, s16
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 23efa70:	eee2 6a83 	vfma.f32	s13, s5, s6
        C_ADD(*Fout4,scratch[5],scratch[6]);
 23efa74:	ee74 4aa3 	vadd.f32	s9, s9, s7
 23efa78:	ee35 5a04 	vadd.f32	s10, s10, s8
        C_SUB(*Fout1,scratch[5],scratch[6]);
 23efa7c:	ed07 0a01 	vstr	s0, [r7, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 23efa80:	ee37 7a65 	vsub.f32	s14, s14, s11
        C_ADD(*Fout4,scratch[5],scratch[6]);
 23efa84:	ed40 4a02 	vstr	s9, [r0, #-8]
 23efa88:	ed00 5a01 	vstr	s10, [r0, #-4]
        C_ADD(*Fout2,scratch[11],scratch[12]);
 23efa8c:	ed03 6a02 	vstr	s12, [r3, #-8]
 23efa90:	ee37 6aa6 	vadd.f32	s12, s15, s13
        C_SUB(*Fout3,scratch[11],scratch[12]);
 23efa94:	ee77 7ae6 	vsub.f32	s15, s15, s13
 23efa98:	9a03      	ldr	r2, [sp, #12]
        C_ADD(*Fout2,scratch[11],scratch[12]);
 23efa9a:	ed03 6a01 	vstr	s12, [r3, #-4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 23efa9e:	4415      	add	r5, r2
 23efaa0:	9a04      	ldr	r2, [sp, #16]
 23efaa2:	ed01 7a02 	vstr	s14, [r1, #-8]
 23efaa6:	ed41 7a01 	vstr	s15, [r1, #-4]
    for ( u=0; u<m; ++u ) {
 23efaaa:	f109 0901 	add.w	r9, r9, #1
 23efaae:	44d8      	add	r8, fp
 23efab0:	4496      	add	lr, r2
 23efab2:	44b4      	add	ip, r6
 23efab4:	e73b      	b.n	23ef92e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3da>
 23efab6:	bf00      	nop
 23efab8:	3fe00000 	.word	0x3fe00000
    int Norig = st->nfft;
 23efabc:	682b      	ldr	r3, [r5, #0]
 23efabe:	9304      	str	r3, [sp, #16]
    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 23efac0:	9b03      	ldr	r3, [sp, #12]
 23efac2:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 23efac6:	4658      	mov	r0, fp
 23efac8:	f000 fae5 	bl	23f0096 <_Z9ei_mallocj>
 23efacc:	f04f 0c00 	mov.w	ip, #0
 23efad0:	4603      	mov	r3, r0
    for ( u=0; u<m; ++u ) {
 23efad2:	4665      	mov	r5, ip
 23efad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 23efad8:	9207      	str	r2, [sp, #28]
 23efada:	fb0a f206 	mul.w	r2, sl, r6
 23efade:	4483      	add	fp, r0
 23efae0:	9206      	str	r2, [sp, #24]
 23efae2:	45aa      	cmp	sl, r5
 23efae4:	dd51      	ble.n	23efb8a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x636>
 23efae6:	46ae      	mov	lr, r5
        for ( q1=0 ; q1<p ; ++q1 ) {
 23efae8:	2200      	movs	r2, #0
 23efaea:	9903      	ldr	r1, [sp, #12]
 23efaec:	4291      	cmp	r1, r2
 23efaee:	dc38      	bgt.n	23efb62 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x60e>
 23efaf0:	46e6      	mov	lr, ip
        for ( q1=0 ; q1<p ; ++q1 ) {
 23efaf2:	f04f 0800 	mov.w	r8, #0
 23efaf6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 23efafa:	9903      	ldr	r1, [sp, #12]
 23efafc:	4541      	cmp	r1, r8
 23efafe:	dd41      	ble.n	23efb84 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x630>
            Fout[ k ] = scratch[0];
 23efb00:	e893 0003 	ldmia.w	r3, {r0, r1}
 23efb04:	e882 0003 	stmia.w	r2, {r0, r1}
            int twidx=0;
 23efb08:	2100      	movs	r1, #0
 23efb0a:	f103 0008 	add.w	r0, r3, #8
            for (q=1;q<p;++q ) {
 23efb0e:	4558      	cmp	r0, fp
 23efb10:	d031      	beq.n	23efb76 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x622>
                if (twidx>=Norig) twidx-=Norig;
 23efb12:	9f04      	ldr	r7, [sp, #16]
                twidx += fstride * k;
 23efb14:	4471      	add	r1, lr
                if (twidx>=Norig) twidx-=Norig;
 23efb16:	428f      	cmp	r7, r1
 23efb18:	bfd8      	it	le
 23efb1a:	1bc9      	suble	r1, r1, r7
                C_MUL(t,scratch[q] , twiddles[twidx] );
 23efb1c:	9f05      	ldr	r7, [sp, #20]
 23efb1e:	ed90 5a01 	vldr	s10, [r0, #4]
 23efb22:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
 23efb26:	ed99 6a01 	vldr	s12, [r9, #4]
 23efb2a:	edd0 5a00 	vldr	s11, [r0]
 23efb2e:	edd9 7a00 	vldr	s15, [r9]
 23efb32:	ee26 7a45 	vnmul.f32	s14, s12, s10
 23efb36:	eea5 7aa7 	vfma.f32	s14, s11, s15
 23efb3a:	eef0 6a47 	vmov.f32	s13, s14
                C_ADDTO( Fout[ k ] ,t);
 23efb3e:	ed92 7a00 	vldr	s14, [r2]
                C_MUL(t,scratch[q] , twiddles[twidx] );
 23efb42:	ee67 7a85 	vmul.f32	s15, s15, s10
                C_ADDTO( Fout[ k ] ,t);
 23efb46:	ee37 7a26 	vadd.f32	s14, s14, s13
                C_MUL(t,scratch[q] , twiddles[twidx] );
 23efb4a:	eee5 7a86 	vfma.f32	s15, s11, s12
                C_ADDTO( Fout[ k ] ,t);
 23efb4e:	ed82 7a00 	vstr	s14, [r2]
 23efb52:	ed92 7a01 	vldr	s14, [r2, #4]
 23efb56:	ee77 7a27 	vadd.f32	s15, s14, s15
 23efb5a:	3008      	adds	r0, #8
 23efb5c:	edc2 7a01 	vstr	s15, [r2, #4]
            for (q=1;q<p;++q ) {
 23efb60:	e7d5      	b.n	23efb0e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5ba>
            scratch[q1] = Fout[ k  ];
 23efb62:	eb03 08c2 	add.w	r8, r3, r2, lsl #3
 23efb66:	eb04 01ce 	add.w	r1, r4, lr, lsl #3
 23efb6a:	c903      	ldmia	r1, {r0, r1}
            k += m;
 23efb6c:	44d6      	add	lr, sl
            scratch[q1] = Fout[ k  ];
 23efb6e:	e888 0003 	stmia.w	r8, {r0, r1}
        for ( q1=0 ; q1<p ; ++q1 ) {
 23efb72:	3201      	adds	r2, #1
 23efb74:	e7b9      	b.n	23efaea <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x596>
        for ( q1=0 ; q1<p ; ++q1 ) {
 23efb76:	9907      	ldr	r1, [sp, #28]
 23efb78:	f108 0801 	add.w	r8, r8, #1
 23efb7c:	440a      	add	r2, r1
 23efb7e:	9906      	ldr	r1, [sp, #24]
 23efb80:	448e      	add	lr, r1
 23efb82:	e7ba      	b.n	23efafa <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x5a6>
    for ( u=0; u<m; ++u ) {
 23efb84:	3501      	adds	r5, #1
 23efb86:	44b4      	add	ip, r6
 23efb88:	e7ab      	b.n	23efae2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x58e>
    KISS_FFT_TMP_FREE(scratch);
 23efb8a:	4618      	mov	r0, r3
}
 23efb8c:	b009      	add	sp, #36	; 0x24
 23efb8e:	ecbd 8b08 	vpop	{d8-d11}
 23efb92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    KISS_FFT_TMP_FREE(scratch);
 23efb96:	f000 ba82 	b.w	23f009e <_Z7ei_freePv>
 23efb9a:	bf00      	nop
 23efb9c:	0000      	movs	r0, r0
	...

023efba0 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 23efba0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    kiss_fft_cfg st=NULL;
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 23efba4:	f100 0721 	add.w	r7, r0, #33	; 0x21
{
 23efba8:	ed2d 8b02 	vpush	{d8}
 23efbac:	4604      	mov	r4, r0
 23efbae:	460e      	mov	r6, r1
 23efbb0:	4615      	mov	r5, r2
 23efbb2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    size_t memneeded = sizeof(struct kiss_fft_state)
 23efbb6:	00ff      	lsls	r7, r7, #3

    if ( lenmem==NULL ) {
 23efbb8:	2b00      	cmp	r3, #0
 23efbba:	d13d      	bne.n	23efc38 <kiss_fft_alloc+0x98>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 23efbbc:	4638      	mov	r0, r7
 23efbbe:	f000 fa6a 	bl	23f0096 <_Z9ei_mallocj>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
            st = (kiss_fft_cfg)mem;
        *lenmem = memneeded;
    }
    if (st) {
 23efbc2:	4605      	mov	r5, r0
 23efbc4:	b3d0      	cbz	r0, 23efc3c <kiss_fft_alloc+0x9c>
        int i;
        st->nfft=nfft;
        st->inverse = inverse_fft;
 23efbc6:	e9c5 4600 	strd	r4, r6, [r5]
        if (inverse_fft)
 23efbca:	f505 7a84 	add.w	sl, r5, #264	; 0x108
 23efbce:	2e00      	cmp	r6, #0
 23efbd0:	d044      	beq.n	23efc5c <kiss_fft_alloc+0xbc>
 23efbd2:	4656      	mov	r6, sl
        {
            for (i=0;i<nfft;++i) {
 23efbd4:	f04f 0a00 	mov.w	sl, #0
    floor_sqrt = floor( sqrt((double)n) );
 23efbd8:	4620      	mov	r0, r4
 23efbda:	f7f7 fef3 	bl	23e79c4 <__aeabi_i2d>
            for (i=0;i<nfft;++i) {
 23efbde:	45a2      	cmp	sl, r4
    floor_sqrt = floor( sqrt((double)n) );
 23efbe0:	4680      	mov	r8, r0
 23efbe2:	4689      	mov	r9, r1
            for (i=0;i<nfft;++i) {
 23efbe4:	f106 0608 	add.w	r6, r6, #8
 23efbe8:	da67      	bge.n	23efcba <kiss_fft_alloc+0x11a>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
                double phase = 2*pi*i / nfft;
 23efbea:	4650      	mov	r0, sl
 23efbec:	f7f7 feea 	bl	23e79c4 <__aeabi_i2d>
 23efbf0:	a34b      	add	r3, pc, #300	; (adr r3, 23efd20 <kiss_fft_alloc+0x180>)
 23efbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23efbf6:	f7f7 ff4f 	bl	23e7a98 <__aeabi_dmul>
 23efbfa:	4642      	mov	r2, r8
 23efbfc:	464b      	mov	r3, r9
 23efbfe:	f7f8 f875 	bl	23e7cec <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
 23efc02:	ec41 0b10 	vmov	d0, r0, r1
                double phase = 2*pi*i / nfft;
 23efc06:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
 23efc0a:	f006 ffa5 	bl	23f6b58 <cos>
 23efc0e:	ec51 0b10 	vmov	r0, r1, d0
 23efc12:	f7f8 fa39 	bl	23e8088 <__aeabi_d2f>
 23efc16:	eeb0 0a48 	vmov.f32	s0, s16
 23efc1a:	eef0 0a68 	vmov.f32	s1, s17
 23efc1e:	f846 0c08 	str.w	r0, [r6, #-8]
 23efc22:	f007 f909 	bl	23f6e38 <sin>
 23efc26:	ec51 0b10 	vmov	r0, r1, d0
 23efc2a:	f7f8 fa2d 	bl	23e8088 <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
 23efc2e:	f10a 0a01 	add.w	sl, sl, #1
                kf_cexp(st->twiddles+i, phase );
 23efc32:	f846 0c04 	str.w	r0, [r6, #-4]
            for (i=0;i<nfft;++i) {
 23efc36:	e7cf      	b.n	23efbd8 <kiss_fft_alloc+0x38>
        if (mem != NULL && *lenmem >= memneeded)
 23efc38:	b952      	cbnz	r2, 23efc50 <kiss_fft_alloc+0xb0>
        *lenmem = memneeded;
 23efc3a:	601f      	str	r7, [r3, #0]
        }

        kf_factor(nfft,st->factors);
    }

    if (memallocated != NULL) {
 23efc3c:	f1bb 0f00 	cmp.w	fp, #0
 23efc40:	d001      	beq.n	23efc46 <kiss_fft_alloc+0xa6>
        *memallocated = memneeded;
 23efc42:	f8cb 7000 	str.w	r7, [fp]
    }

    return st;
}
 23efc46:	4628      	mov	r0, r5
 23efc48:	ecbd 8b02 	vpop	{d8}
 23efc4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mem != NULL && *lenmem >= memneeded)
 23efc50:	681a      	ldr	r2, [r3, #0]
        *lenmem = memneeded;
 23efc52:	601f      	str	r7, [r3, #0]
        if (mem != NULL && *lenmem >= memneeded)
 23efc54:	42ba      	cmp	r2, r7
 23efc56:	d2b6      	bcs.n	23efbc6 <kiss_fft_alloc+0x26>
    kiss_fft_cfg st=NULL;
 23efc58:	2500      	movs	r5, #0
 23efc5a:	e7ef      	b.n	23efc3c <kiss_fft_alloc+0x9c>
    floor_sqrt = floor( sqrt((double)n) );
 23efc5c:	4620      	mov	r0, r4
 23efc5e:	f7f7 feb1 	bl	23e79c4 <__aeabi_i2d>
            for (i=0;i<nfft;++i) {
 23efc62:	42a6      	cmp	r6, r4
    floor_sqrt = floor( sqrt((double)n) );
 23efc64:	4680      	mov	r8, r0
 23efc66:	4689      	mov	r9, r1
            for (i=0;i<nfft;++i) {
 23efc68:	f10a 0a08 	add.w	sl, sl, #8
 23efc6c:	da25      	bge.n	23efcba <kiss_fft_alloc+0x11a>
                double phase = -2*pi*i / nfft;
 23efc6e:	4630      	mov	r0, r6
 23efc70:	f7f7 fea8 	bl	23e79c4 <__aeabi_i2d>
 23efc74:	a32c      	add	r3, pc, #176	; (adr r3, 23efd28 <kiss_fft_alloc+0x188>)
 23efc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 23efc7a:	f7f7 ff0d 	bl	23e7a98 <__aeabi_dmul>
 23efc7e:	4642      	mov	r2, r8
 23efc80:	464b      	mov	r3, r9
 23efc82:	f7f8 f833 	bl	23e7cec <__aeabi_ddiv>
                kf_cexp(st->twiddles+i, phase );
 23efc86:	ec41 0b10 	vmov	d0, r0, r1
                double phase = -2*pi*i / nfft;
 23efc8a:	ec41 0b18 	vmov	d8, r0, r1
                kf_cexp(st->twiddles+i, phase );
 23efc8e:	f006 ff63 	bl	23f6b58 <cos>
 23efc92:	ec51 0b10 	vmov	r0, r1, d0
 23efc96:	f7f8 f9f7 	bl	23e8088 <__aeabi_d2f>
 23efc9a:	eeb0 0a48 	vmov.f32	s0, s16
 23efc9e:	eef0 0a68 	vmov.f32	s1, s17
 23efca2:	f84a 0c08 	str.w	r0, [sl, #-8]
 23efca6:	f007 f8c7 	bl	23f6e38 <sin>
 23efcaa:	ec51 0b10 	vmov	r0, r1, d0
 23efcae:	f7f8 f9eb 	bl	23e8088 <__aeabi_d2f>
            for (i=0;i<nfft;++i) {
 23efcb2:	3601      	adds	r6, #1
                kf_cexp(st->twiddles+i, phase );
 23efcb4:	f84a 0c04 	str.w	r0, [sl, #-4]
            for (i=0;i<nfft;++i) {
 23efcb8:	e7d0      	b.n	23efc5c <kiss_fft_alloc+0xbc>
    floor_sqrt = floor( sqrt((double)n) );
 23efcba:	4620      	mov	r0, r4
 23efcbc:	f7f7 fe82 	bl	23e79c4 <__aeabi_i2d>
 23efcc0:	ec41 0b10 	vmov	d0, r0, r1
 23efcc4:	f007 f96e 	bl	23f6fa4 <sqrt>
 23efcc8:	f006 ffa6 	bl	23f6c18 <floor>
    int p=4;
 23efccc:	2604      	movs	r6, #4
    floor_sqrt = floor( sqrt((double)n) );
 23efcce:	ec59 8b10 	vmov	r8, r9, d0
        kf_factor(nfft,st->factors);
 23efcd2:	f105 0a08 	add.w	sl, r5, #8
        while (n % p) {
 23efcd6:	fb94 f3f6 	sdiv	r3, r4, r6
 23efcda:	fb06 4213 	mls	r2, r6, r3, r4
 23efcde:	b1aa      	cbz	r2, 23efd0c <kiss_fft_alloc+0x16c>
            switch (p) {
 23efce0:	2e02      	cmp	r6, #2
 23efce2:	d00f      	beq.n	23efd04 <kiss_fft_alloc+0x164>
 23efce4:	2e04      	cmp	r6, #4
 23efce6:	d00f      	beq.n	23efd08 <kiss_fft_alloc+0x168>
                default: p += 2; break;
 23efce8:	3602      	adds	r6, #2
            if (p > floor_sqrt)
 23efcea:	4630      	mov	r0, r6
 23efcec:	f7f7 fe6a 	bl	23e79c4 <__aeabi_i2d>
 23efcf0:	4602      	mov	r2, r0
 23efcf2:	460b      	mov	r3, r1
 23efcf4:	4640      	mov	r0, r8
 23efcf6:	4649      	mov	r1, r9
 23efcf8:	f7f8 f940 	bl	23e7f7c <__aeabi_dcmplt>
                p = n;          /* no more factors, skip to end */
 23efcfc:	2800      	cmp	r0, #0
 23efcfe:	bf18      	it	ne
 23efd00:	4626      	movne	r6, r4
 23efd02:	e7e8      	b.n	23efcd6 <kiss_fft_alloc+0x136>
                case 2: p = 3; break;
 23efd04:	2603      	movs	r6, #3
 23efd06:	e7f0      	b.n	23efcea <kiss_fft_alloc+0x14a>
            switch (p) {
 23efd08:	2602      	movs	r6, #2
 23efd0a:	e7ee      	b.n	23efcea <kiss_fft_alloc+0x14a>
    } while (n > 1);
 23efd0c:	2b01      	cmp	r3, #1
        n /= p;
 23efd0e:	461c      	mov	r4, r3
        *facbuf++ = n;
 23efd10:	e9ca 6300 	strd	r6, r3, [sl]
    } while (n > 1);
 23efd14:	dd92      	ble.n	23efc3c <kiss_fft_alloc+0x9c>
        *facbuf++ = n;
 23efd16:	f10a 0a08 	add.w	sl, sl, #8
 23efd1a:	e7dc      	b.n	23efcd6 <kiss_fft_alloc+0x136>
 23efd1c:	f3af 8000 	nop.w
 23efd20:	54442d18 	.word	0x54442d18
 23efd24:	401921fb 	.word	0x401921fb
 23efd28:	54442d18 	.word	0x54442d18
 23efd2c:	c01921fb 	.word	0xc01921fb

023efd30 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 23efd30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23efd34:	4604      	mov	r4, r0
    if (fin == fout) {
 23efd36:	4291      	cmp	r1, r2
{
 23efd38:	460d      	mov	r5, r1
 23efd3a:	4610      	mov	r0, r2
 23efd3c:	461f      	mov	r7, r3
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 23efd3e:	f104 0808 	add.w	r8, r4, #8
    if (fin == fout) {
 23efd42:	d117      	bne.n	23efd74 <kiss_fft_stride+0x44>
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 23efd44:	6820      	ldr	r0, [r4, #0]
 23efd46:	00c0      	lsls	r0, r0, #3
 23efd48:	f000 f9a5 	bl	23f0096 <_Z9ei_mallocj>
 23efd4c:	4606      	mov	r6, r0
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 23efd4e:	463b      	mov	r3, r7
 23efd50:	4629      	mov	r1, r5
 23efd52:	2201      	movs	r2, #1
 23efd54:	e9cd 8400 	strd	r8, r4, [sp]
 23efd58:	f7ff fbfc 	bl	23ef554 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 23efd5c:	6822      	ldr	r2, [r4, #0]
 23efd5e:	4631      	mov	r1, r6
 23efd60:	4628      	mov	r0, r5
 23efd62:	00d2      	lsls	r2, r2, #3
 23efd64:	f008 ffb6 	bl	23f8cd4 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 23efd68:	4630      	mov	r0, r6
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 23efd6a:	b002      	add	sp, #8
 23efd6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        KISS_FFT_TMP_FREE(tmpbuf);
 23efd70:	f000 b995 	b.w	23f009e <_Z7ei_freePv>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 23efd74:	2201      	movs	r2, #1
 23efd76:	e9cd 8400 	strd	r8, r4, [sp]
 23efd7a:	f7ff fbeb 	bl	23ef554 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 23efd7e:	b002      	add	sp, #8
 23efd80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023efd84 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
    kiss_fft_stride(cfg,fin,fout,1);
 23efd84:	2301      	movs	r3, #1
 23efd86:	f7ff bfd3 	b.w	23efd30 <kiss_fft_stride>
 23efd8a:	0000      	movs	r0, r0
 23efd8c:	0000      	movs	r0, r0
	...

023efd90 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 23efd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23efd94:	ed2d 8b02 	vpush	{d8}
    int i;
    kiss_fftr_cfg st = NULL;
    size_t subsize = 0, memneeded;
 23efd98:	2500      	movs	r5, #0
{
 23efd9a:	b085      	sub	sp, #20

    if (nfft & 1) {
 23efd9c:	f010 0a01 	ands.w	sl, r0, #1
{
 23efda0:	468b      	mov	fp, r1
 23efda2:	4614      	mov	r4, r2
 23efda4:	461f      	mov	r7, r3
    size_t subsize = 0, memneeded;
 23efda6:	9503      	str	r5, [sp, #12]
    if (nfft & 1) {
 23efda8:	d009      	beq.n	23efdbe <kiss_fftr_alloc+0x2e>
        ei_printf("FFT length must be even\n");
 23efdaa:	4863      	ldr	r0, [pc, #396]	; (23eff38 <kiss_fftr_alloc+0x1a8>)
 23efdac:	f000 f946 	bl	23f003c <_Z9ei_printfPKcz>
        return NULL;
 23efdb0:	462c      	mov	r4, r5
    if (memallocated != NULL) {
        *memallocated = memneeded;
    }

    return st;
}
 23efdb2:	4620      	mov	r0, r4
 23efdb4:	b005      	add	sp, #20
 23efdb6:	ecbd 8b02 	vpop	{d8}
 23efdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nfft >>= 1;
 23efdbe:	1045      	asrs	r5, r0, #1
    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 23efdc0:	ab03      	add	r3, sp, #12
 23efdc2:	4652      	mov	r2, sl
 23efdc4:	4628      	mov	r0, r5
 23efdc6:	f8cd a000 	str.w	sl, [sp]
 23efdca:	f7ff fee9 	bl	23efba0 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 23efdce:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 23efdd2:	9b03      	ldr	r3, [sp, #12]
 23efdd4:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 23efdd8:	1076      	asrs	r6, r6, #1
 23efdda:	330c      	adds	r3, #12
 23efddc:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    if (lenmem == NULL) {
 23efde0:	2f00      	cmp	r7, #0
 23efde2:	d158      	bne.n	23efe96 <kiss_fftr_alloc+0x106>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 23efde4:	4630      	mov	r0, r6
 23efde6:	f000 f956 	bl	23f0096 <_Z9ei_mallocj>
 23efdea:	4604      	mov	r4, r0
    if (!st)
 23efdec:	2c00      	cmp	r4, #0
 23efdee:	d0e0      	beq.n	23efdb2 <kiss_fftr_alloc+0x22>
    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 23efdf0:	f104 020c 	add.w	r2, r4, #12
 23efdf4:	6022      	str	r2, [r4, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 23efdf6:	9b03      	ldr	r3, [sp, #12]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 23efdf8:	4659      	mov	r1, fp
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 23efdfa:	4413      	add	r3, r2
 23efdfc:	6063      	str	r3, [r4, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 23efdfe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 23efe02:	60a3      	str	r3, [r4, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 23efe04:	2300      	movs	r3, #0
 23efe06:	4628      	mov	r0, r5
 23efe08:	9300      	str	r3, [sp, #0]
        for (i = 0; i < nfft/2; ++i) {
 23efe0a:	eb05 77d5 	add.w	r7, r5, r5, lsr #31
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 23efe0e:	ab03      	add	r3, sp, #12
 23efe10:	f7ff fec6 	bl	23efba0 <kiss_fft_alloc>
        for (i = 0; i < nfft/2; ++i) {
 23efe14:	107f      	asrs	r7, r7, #1
    if (inverse_fft) {
 23efe16:	f1bb 0f00 	cmp.w	fp, #0
 23efe1a:	d042      	beq.n	23efea2 <kiss_fftr_alloc+0x112>
        for (i = 0; i < nfft/2; ++i) {
 23efe1c:	4557      	cmp	r7, sl
 23efe1e:	dd7d      	ble.n	23eff1c <kiss_fftr_alloc+0x18c>
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 23efe20:	f10a 0a01 	add.w	sl, sl, #1
 23efe24:	4650      	mov	r0, sl
 23efe26:	f7f7 fdcd 	bl	23e79c4 <__aeabi_i2d>
 23efe2a:	4680      	mov	r8, r0
 23efe2c:	4628      	mov	r0, r5
 23efe2e:	4689      	mov	r9, r1
 23efe30:	f7f7 fdc8 	bl	23e79c4 <__aeabi_i2d>
 23efe34:	4602      	mov	r2, r0
 23efe36:	460b      	mov	r3, r1
 23efe38:	4640      	mov	r0, r8
 23efe3a:	4649      	mov	r1, r9
 23efe3c:	f7f7 ff56 	bl	23e7cec <__aeabi_ddiv>
 23efe40:	2200      	movs	r2, #0
 23efe42:	4b3e      	ldr	r3, [pc, #248]	; (23eff3c <kiss_fftr_alloc+0x1ac>)
 23efe44:	f7f7 fc72 	bl	23e772c <__adddf3>
            double phase =
 23efe48:	a337      	add	r3, pc, #220	; (adr r3, 23eff28 <kiss_fftr_alloc+0x198>)
 23efe4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23efe4e:	f7f7 fe23 	bl	23e7a98 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
 23efe52:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
 23efe56:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
 23efe5a:	f006 fe7d 	bl	23f6b58 <cos>
 23efe5e:	ea4f 08ca 	mov.w	r8, sl, lsl #3
 23efe62:	68a3      	ldr	r3, [r4, #8]
 23efe64:	ec51 0b10 	vmov	r0, r1, d0
 23efe68:	f1a8 0808 	sub.w	r8, r8, #8
 23efe6c:	eb03 0908 	add.w	r9, r3, r8
 23efe70:	f7f8 f90a 	bl	23e8088 <__aeabi_d2f>
 23efe74:	eeb0 0a48 	vmov.f32	s0, s16
 23efe78:	eef0 0a68 	vmov.f32	s1, s17
 23efe7c:	f8c9 0000 	str.w	r0, [r9]
 23efe80:	f006 ffda 	bl	23f6e38 <sin>
 23efe84:	68a3      	ldr	r3, [r4, #8]
 23efe86:	ec51 0b10 	vmov	r0, r1, d0
 23efe8a:	4498      	add	r8, r3
 23efe8c:	f7f8 f8fc 	bl	23e8088 <__aeabi_d2f>
 23efe90:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
 23efe94:	e7c2      	b.n	23efe1c <kiss_fftr_alloc+0x8c>
        if (*lenmem >= memneeded)
 23efe96:	683b      	ldr	r3, [r7, #0]
        *lenmem = memneeded;
 23efe98:	603e      	str	r6, [r7, #0]
        if (*lenmem >= memneeded)
 23efe9a:	42b3      	cmp	r3, r6
 23efe9c:	d2a6      	bcs.n	23efdec <kiss_fftr_alloc+0x5c>
        return NULL;
 23efe9e:	4654      	mov	r4, sl
 23efea0:	e787      	b.n	23efdb2 <kiss_fftr_alloc+0x22>
        for (i = 0; i < nfft/2; ++i) {
 23efea2:	455f      	cmp	r7, fp
 23efea4:	dd3a      	ble.n	23eff1c <kiss_fftr_alloc+0x18c>
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 23efea6:	f10b 0b01 	add.w	fp, fp, #1
 23efeaa:	4658      	mov	r0, fp
 23efeac:	f7f7 fd8a 	bl	23e79c4 <__aeabi_i2d>
 23efeb0:	4680      	mov	r8, r0
 23efeb2:	4628      	mov	r0, r5
 23efeb4:	4689      	mov	r9, r1
 23efeb6:	f7f7 fd85 	bl	23e79c4 <__aeabi_i2d>
 23efeba:	4602      	mov	r2, r0
 23efebc:	460b      	mov	r3, r1
 23efebe:	4640      	mov	r0, r8
 23efec0:	4649      	mov	r1, r9
 23efec2:	f7f7 ff13 	bl	23e7cec <__aeabi_ddiv>
 23efec6:	2200      	movs	r2, #0
 23efec8:	4b1c      	ldr	r3, [pc, #112]	; (23eff3c <kiss_fftr_alloc+0x1ac>)
 23efeca:	f7f7 fc2f 	bl	23e772c <__adddf3>
            double phase =
 23efece:	a318      	add	r3, pc, #96	; (adr r3, 23eff30 <kiss_fftr_alloc+0x1a0>)
 23efed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23efed4:	f7f7 fde0 	bl	23e7a98 <__aeabi_dmul>
            kf_cexp (st->super_twiddles+i,phase);
 23efed8:	ec41 0b10 	vmov	d0, r0, r1
            double phase =
 23efedc:	ec41 0b18 	vmov	d8, r0, r1
            kf_cexp (st->super_twiddles+i,phase);
 23efee0:	f006 fe3a 	bl	23f6b58 <cos>
 23efee4:	ea4f 08cb 	mov.w	r8, fp, lsl #3
 23efee8:	68a3      	ldr	r3, [r4, #8]
 23efeea:	ec51 0b10 	vmov	r0, r1, d0
 23efeee:	f1a8 0808 	sub.w	r8, r8, #8
 23efef2:	eb03 0908 	add.w	r9, r3, r8
 23efef6:	f7f8 f8c7 	bl	23e8088 <__aeabi_d2f>
 23efefa:	eeb0 0a48 	vmov.f32	s0, s16
 23efefe:	eef0 0a68 	vmov.f32	s1, s17
 23eff02:	f8c9 0000 	str.w	r0, [r9]
 23eff06:	f006 ff97 	bl	23f6e38 <sin>
 23eff0a:	68a3      	ldr	r3, [r4, #8]
 23eff0c:	ec51 0b10 	vmov	r0, r1, d0
 23eff10:	4498      	add	r8, r3
 23eff12:	f7f8 f8b9 	bl	23e8088 <__aeabi_d2f>
 23eff16:	f8c8 0004 	str.w	r0, [r8, #4]
        for (i = 0; i < nfft/2; ++i) {
 23eff1a:	e7c2      	b.n	23efea2 <kiss_fftr_alloc+0x112>
    if (memallocated != NULL) {
 23eff1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23eff1e:	2b00      	cmp	r3, #0
 23eff20:	f43f af47 	beq.w	23efdb2 <kiss_fftr_alloc+0x22>
        *memallocated = memneeded;
 23eff24:	601e      	str	r6, [r3, #0]
 23eff26:	e744      	b.n	23efdb2 <kiss_fftr_alloc+0x22>
 23eff28:	54442d18 	.word	0x54442d18
 23eff2c:	400921fb 	.word	0x400921fb
 23eff30:	54442d18 	.word	0x54442d18
 23eff34:	c00921fb 	.word	0xc00921fb
 23eff38:	023fdb00 	.word	0x023fdb00
 23eff3c:	3fe00000 	.word	0x3fe00000

023eff40 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 23eff40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 23eff42:	6803      	ldr	r3, [r0, #0]
{
 23eff44:	4604      	mov	r4, r0
    if ( st->substate->inverse) {
 23eff46:	685b      	ldr	r3, [r3, #4]
{
 23eff48:	4616      	mov	r6, r2
    if ( st->substate->inverse) {
 23eff4a:	b123      	cbz	r3, 23eff56 <kiss_fftr+0x16>
        ei_printf("kiss fft usage error: improper alloc\n");
 23eff4c:	4836      	ldr	r0, [pc, #216]	; (23f0028 <kiss_fftr+0xe8>)
 23eff4e:	9101      	str	r1, [sp, #4]
 23eff50:	f000 f874 	bl	23f003c <_Z9ei_printfPKcz>
 23eff54:	9901      	ldr	r1, [sp, #4]
    }

    ncfft = st->substate->nfft;
 23eff56:	6820      	ldr	r0, [r4, #0]

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 23eff58:	6862      	ldr	r2, [r4, #4]
    ncfft = st->substate->nfft;
 23eff5a:	6805      	ldr	r5, [r0, #0]
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 23eff5c:	f7ff ff12 	bl	23efd84 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 23eff60:	6863      	ldr	r3, [r4, #4]
    freqdata[0].r = tdc.r + tdc.i;
    freqdata[ncfft].r = tdc.r - tdc.i;
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 23eff62:	2200      	movs	r2, #0
    tdc.r = st->tmpbuf[0].r;
 23eff64:	edd3 7a00 	vldr	s15, [r3]
    tdc.i = st->tmpbuf[0].i;
 23eff68:	ed93 7a01 	vldr	s14, [r3, #4]
    freqdata[0].r = tdc.r + tdc.i;
 23eff6c:	ee77 6a87 	vadd.f32	s13, s15, s14
    freqdata[ncfft].r = tdc.r - tdc.i;
 23eff70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 23eff74:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
    freqdata[0].r = tdc.r + tdc.i;
 23eff78:	edc6 6a00 	vstr	s13, [r6]
    freqdata[ncfft].r = tdc.r - tdc.i;
 23eff7c:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].i = freqdata[0].i = 0;
 23eff80:	6072      	str	r2, [r6, #4]
 23eff82:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
        fpk    = st->tmpbuf[k];
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 23eff84:	f06f 0207 	mvn.w	r2, #7
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23eff88:	2701      	movs	r7, #1

        C_ADD( f1k, fpk , fpnk );
        C_SUB( f2k, fpk , fpnk );
        C_MUL( tw , f2k , st->super_twiddles[k-1]);

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 23eff8a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23eff8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 23eff92:	106d      	asrs	r5, r5, #1
 23eff94:	f106 0c08 	add.w	ip, r6, #8
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 23eff98:	1b92      	subs	r2, r2, r6
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23eff9a:	42bd      	cmp	r5, r7
 23eff9c:	f10c 0c08 	add.w	ip, ip, #8
 23effa0:	db3f      	blt.n	23f0022 <kiss_fftr+0xe2>
        fpk    = st->tmpbuf[k];
 23effa2:	6861      	ldr	r1, [r4, #4]
 23effa4:	00f8      	lsls	r0, r7, #3
 23effa6:	eb01 06c7 	add.w	r6, r1, r7, lsl #3
 23effaa:	edd6 5a01 	vldr	s11, [r6, #4]
 23effae:	edd6 6a00 	vldr	s13, [r6]
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 23effb2:	18d6      	adds	r6, r2, r3
 23effb4:	4431      	add	r1, r6
 23effb6:	edd1 4a00 	vldr	s9, [r1]
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 23effba:	edd1 7a01 	vldr	s15, [r1, #4]
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 23effbe:	68a1      	ldr	r1, [r4, #8]
 23effc0:	3808      	subs	r0, #8
 23effc2:	4401      	add	r1, r0
        C_ADD( f1k, fpk , fpnk );
 23effc4:	ee34 7aa6 	vadd.f32	s14, s9, s13
 23effc8:	ee35 5ae7 	vsub.f32	s10, s11, s15
        C_SUB( f2k, fpk , fpnk );
 23effcc:	ee76 6ae4 	vsub.f32	s13, s13, s9
 23effd0:	ee77 7aa5 	vadd.f32	s15, s15, s11
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 23effd4:	edd1 4a01 	vldr	s9, [r1, #4]
 23effd8:	ed91 4a00 	vldr	s8, [r1]
 23effdc:	ee64 5ae7 	vnmul.f32	s11, s9, s15
 23effe0:	ee67 7a84 	vmul.f32	s15, s15, s8
 23effe4:	eee6 5a84 	vfma.f32	s11, s13, s8
 23effe8:	eee6 7aa4 	vfma.f32	s15, s13, s9
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 23effec:	ee77 6a25 	vadd.f32	s13, s14, s11
 23efff0:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 23efff4:	ee37 7a65 	vsub.f32	s14, s14, s11
        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 23efff8:	ed4c 6a02 	vstr	s13, [ip, #-8]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 23efffc:	ee77 6a85 	vadd.f32	s13, s15, s10
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 23f0000:	ee77 7ac5 	vsub.f32	s15, s15, s10
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 23f0004:	ee66 6a86 	vmul.f32	s13, s13, s12
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 23f0008:	ee27 7a06 	vmul.f32	s14, s14, s12
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 23f000c:	ee67 7a86 	vmul.f32	s15, s15, s12
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 23f0010:	ed4c 6a01 	vstr	s13, [ip, #-4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23f0014:	3701      	adds	r7, #1
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 23f0016:	ed03 7a02 	vstr	s14, [r3, #-8]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 23f001a:	ed43 7a01 	vstr	s15, [r3, #-4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 23f001e:	3b08      	subs	r3, #8
 23f0020:	e7bb      	b.n	23eff9a <kiss_fftr+0x5a>
    }
}
 23f0022:	b003      	add	sp, #12
 23f0024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f0026:	bf00      	nop
 23f0028:	023fdb19 	.word	0x023fdb19

023f002c <_Z29ei_run_impulse_check_canceledv>:

#define EI_WEAK_FN __attribute__((weak))

EI_WEAK_FN EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
    return EI_IMPULSE_OK;
}
 23f002c:	2000      	movs	r0, #0
 23f002e:	4770      	bx	lr

023f0030 <_Z16ei_read_timer_usv>:

uint64_t ei_read_timer_ms() {
    return millis();
}

uint64_t ei_read_timer_us() {
 23f0030:	b508      	push	{r3, lr}
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 23f0032:	f003 fff5 	bl	23f4020 <HAL_Timer_Get_Micro_Seconds>
    return micros();
}
 23f0036:	2100      	movs	r1, #0
 23f0038:	bd08      	pop	{r3, pc}
	...

023f003c <_Z9ei_printfPKcz>:
}

/**
 *  Printf function uses vsnprintf and output using Arduino Serial
 */
__attribute__((weak)) void ei_printf(const char *format, ...) {
 23f003c:	b40f      	push	{r0, r1, r2, r3}
 23f003e:	b513      	push	{r0, r1, r4, lr}
 23f0040:	ab04      	add	r3, sp, #16
 23f0042:	f853 2b04 	ldr.w	r2, [r3], #4
    static char print_buf[1024] = { 0 };

    va_list args;
    va_start(args, format);
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
 23f0046:	f44f 6180 	mov.w	r1, #1024	; 0x400
 23f004a:	480b      	ldr	r0, [pc, #44]	; (23f0078 <_Z9ei_printfPKcz+0x3c>)
    va_start(args, format);
 23f004c:	9301      	str	r3, [sp, #4]
    int r = vsnprintf(print_buf, sizeof(print_buf), format, args);
 23f004e:	f004 fb9f 	bl	23f4790 <vsnprintf>
    va_end(args);

    if (r > 0) {
 23f0052:	2800      	cmp	r0, #0
 23f0054:	dd0b      	ble.n	23f006e <_Z9ei_printfPKcz+0x32>
        Serial.write(print_buf);
 23f0056:	f006 fb13 	bl	23f6680 <_Z16_fetch_usbserialv>
 23f005a:	4604      	mov	r4, r0
      return write((const uint8_t *)str, strlen(str));
 23f005c:	4806      	ldr	r0, [pc, #24]	; (23f0078 <_Z9ei_printfPKcz+0x3c>)
 23f005e:	f7f8 fa6b 	bl	23e8538 <strlen>
 23f0062:	6823      	ldr	r3, [r4, #0]
 23f0064:	4602      	mov	r2, r0
 23f0066:	68db      	ldr	r3, [r3, #12]
 23f0068:	4620      	mov	r0, r4
 23f006a:	4903      	ldr	r1, [pc, #12]	; (23f0078 <_Z9ei_printfPKcz+0x3c>)
 23f006c:	4798      	blx	r3
    }
}
 23f006e:	b002      	add	sp, #8
 23f0070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f0074:	b004      	add	sp, #16
 23f0076:	4770      	bx	lr
 23f0078:	1007aa4c 	.word	0x1007aa4c

023f007c <_Z15ei_printf_floatf>:

__attribute__((weak)) void ei_printf_float(float f) {
 23f007c:	b507      	push	{r0, r1, r2, lr}
 23f007e:	ed8d 0a01 	vstr	s0, [sp, #4]
    Serial.print(f, 6);
 23f0082:	f006 fafd 	bl	23f6680 <_Z16_fetch_usbserialv>
 23f0086:	2106      	movs	r1, #6
 23f0088:	ed9d 0a01 	vldr	s0, [sp, #4]
}
 23f008c:	b003      	add	sp, #12
 23f008e:	f85d eb04 	ldr.w	lr, [sp], #4
    Serial.print(f, 6);
 23f0092:	f006 b881 	b.w	23f6198 <_ZN5Print5printEfi>

023f0096 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
    return malloc(size);
 23f0096:	f004 bb51 	b.w	23f473c <malloc>

023f009a <_Z9ei_callocjj>:
}

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
    return calloc(nitems, size);
 23f009a:	f008 be0b 	b.w	23f8cb4 <calloc>

023f009e <_Z7ei_freePv>:
}

__attribute__((weak)) void ei_free(void *ptr) {
    free(ptr);
 23f009e:	f004 bb5b 	b.w	23f4758 <free>

023f00a2 <TfLiteIntArrayGetSizeInBytes>:
extern "C" {

size_t TfLiteIntArrayGetSizeInBytes(int size) {
  static TfLiteIntArray dummy;

  size_t computed_size = sizeof(dummy) + sizeof(dummy.data[0]) * size;
 23f00a2:	3001      	adds	r0, #1
#if defined(_MSC_VER)
  // Context for why this is needed is in http://b/189926408#comment21
  computed_size -= sizeof(dummy.data[0]);
#endif
  return computed_size;
}
 23f00a4:	0080      	lsls	r0, r0, #2
 23f00a6:	4770      	bx	lr

023f00a8 <TfLiteTypeGetName>:
  return TfLiteTensorResizeMaybeCopy(num_bytes, tensor, true);
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
 23f00a8:	2812      	cmp	r0, #18
 23f00aa:	bf9a      	itte	ls
 23f00ac:	4b02      	ldrls	r3, [pc, #8]	; (23f00b8 <TfLiteTypeGetName+0x10>)
 23f00ae:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
 23f00b2:	4802      	ldrhi	r0, [pc, #8]	; (23f00bc <TfLiteTypeGetName+0x14>)
      return "VARIANT";
    case kTfLiteInt4:
      return "INT4";
  }
  return "Unknown type";
}
 23f00b4:	4770      	bx	lr
 23f00b6:	bf00      	nop
 23f00b8:	023fdbc0 	.word	0x023fdbc0
 23f00bc:	023fdb3f 	.word	0x023fdb3f

023f00c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "edge-impulse-sdk/tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 23f00c0:	b40e      	push	{r1, r2, r3}
 23f00c2:	b503      	push	{r0, r1, lr}
 23f00c4:	aa03      	add	r2, sp, #12
 23f00c6:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
 23f00ca:	6803      	ldr	r3, [r0, #0]
  va_start(args, format);
 23f00cc:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
 23f00ce:	689b      	ldr	r3, [r3, #8]
 23f00d0:	4798      	blx	r3
  va_end(args);
  return code;
}
 23f00d2:	b002      	add	sp, #8
 23f00d4:	f85d eb04 	ldr.w	lr, [sp], #4
 23f00d8:	b003      	add	sp, #12
 23f00da:	4770      	bx	lr

023f00dc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 23f00dc:	b40c      	push	{r2, r3}
 23f00de:	b507      	push	{r0, r1, r2, lr}
 23f00e0:	aa04      	add	r2, sp, #16
 23f00e2:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
 23f00e6:	6803      	ldr	r3, [r0, #0]
  va_start(args, format);
 23f00e8:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
 23f00ea:	689b      	ldr	r3, [r3, #8]
 23f00ec:	4798      	blx	r3
  va_end(args);
  return code;
}
 23f00ee:	b003      	add	sp, #12
 23f00f0:	f85d eb04 	ldr.w	lr, [sp], #4
 23f00f4:	b002      	add	sp, #8
 23f00f6:	4770      	bx	lr

023f00f8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 23f00f8:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op != nullptr);
 23f00fa:	b908      	cbnz	r0, 23f0100 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8>
 23f00fc:	f004 fb56 	bl	23f47ac <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 23f0100:	2900      	cmp	r1, #0
 23f0102:	d0fb      	beq.n	23f00fc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(allocator != nullptr);
 23f0104:	2a00      	cmp	r2, #0
 23f0106:	d0f9      	beq.n	23f00fc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(builtin_data != nullptr);
 23f0108:	2b00      	cmp	r3, #0
 23f010a:	d0f7      	beq.n	23f00fc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
}
 23f010c:	bd08      	pop	{r3, pc}

023f010e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>:
    void operator()(void* data) { allocator_->Deallocate(data); }
 23f010e:	6803      	ldr	r3, [r0, #0]
 23f0110:	685b      	ldr	r3, [r3, #4]
 23f0112:	4718      	bx	r3

023f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:
    return data_ - ReadScalar<soffset_t>(data_);
 23f0114:	6803      	ldr	r3, [r0, #0]
 23f0116:	1ac0      	subs	r0, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 23f0118:	8803      	ldrh	r3, [r0, #0]
 23f011a:	428b      	cmp	r3, r1
 23f011c:	bf8c      	ite	hi
 23f011e:	5a40      	ldrhhi	r0, [r0, r1]
 23f0120:	2000      	movls	r0, #0
  }
 23f0122:	4770      	bx	lr

023f0124 <_ZNK6tflite8Operator15builtin_optionsEv>:
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
  }
  tflite::BuiltinOptions builtin_options_type() const {
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
  }
  const void *builtin_options() const {
 23f0124:	b510      	push	{r4, lr}
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
 23f0126:	210c      	movs	r1, #12
 23f0128:	4604      	mov	r4, r0
 23f012a:	f7ff fff3 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f012e:	b110      	cbz	r0, 23f0136 <_ZNK6tflite8Operator15builtin_optionsEv+0x12>
    auto p = data_ + field_offset;
 23f0130:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0132:	5820      	ldr	r0, [r4, r0]
 23f0134:	4418      	add	r0, r3
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
  }
 23f0136:	bd10      	pop	{r4, pc}

023f0138 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 23f0138:	b508      	push	{r3, lr}
 23f013a:	4603      	mov	r3, r0
 23f013c:	4610      	mov	r0, r2
 23f013e:	2b11      	cmp	r3, #17
 23f0140:	d830      	bhi.n	23f01a4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x6c>
 23f0142:	e8df f003 	tbb	[pc, r3]
 23f0146:	090d      	.short	0x090d
 23f0148:	211d1915 	.word	0x211d1915
 23f014c:	1b251123 	.word	0x1b251123
 23f0150:	291f270f 	.word	0x291f270f
 23f0154:	2d13172b 	.word	0x2d13172b
  switch (tensor_type) {
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 23f0158:	230a      	movs	r3, #10
      return kTfLiteOk;
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
      return kTfLiteOk;
 23f015a:	2000      	movs	r0, #0
      *type = kTfLiteFloat32;
 23f015c:	700b      	strb	r3, [r1, #0]
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
 23f015e:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat32;
 23f0160:	2301      	movs	r3, #1
 23f0162:	e7fa      	b.n	23f015a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteFloat64;
 23f0164:	230b      	movs	r3, #11
 23f0166:	e7f8      	b.n	23f015a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt16;
 23f0168:	2307      	movs	r3, #7
 23f016a:	e7f6      	b.n	23f015a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt16;
 23f016c:	2311      	movs	r3, #17
 23f016e:	e7f4      	b.n	23f015a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt32;
 23f0170:	2302      	movs	r3, #2
 23f0172:	e7f2      	b.n	23f015a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt32;
 23f0174:	2310      	movs	r3, #16
 23f0176:	e7f0      	b.n	23f015a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt8;
 23f0178:	2303      	movs	r3, #3
 23f017a:	e7ee      	b.n	23f015a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt8;
 23f017c:	2309      	movs	r3, #9
 23f017e:	e7ec      	b.n	23f015a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt64;
 23f0180:	2304      	movs	r3, #4
 23f0182:	e7ea      	b.n	23f015a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteUInt64;
 23f0184:	230d      	movs	r3, #13
 23f0186:	e7e8      	b.n	23f015a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteString;
 23f0188:	2305      	movs	r3, #5
 23f018a:	e7e6      	b.n	23f015a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteBool;
 23f018c:	2306      	movs	r3, #6
 23f018e:	e7e4      	b.n	23f015a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex64;
 23f0190:	2308      	movs	r3, #8
 23f0192:	e7e2      	b.n	23f015a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteComplex128;
 23f0194:	230c      	movs	r3, #12
 23f0196:	e7e0      	b.n	23f015a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteResource;
 23f0198:	230e      	movs	r3, #14
 23f019a:	e7de      	b.n	23f015a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteVariant;
 23f019c:	230f      	movs	r3, #15
 23f019e:	e7dc      	b.n	23f015a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteInt4;
 23f01a0:	2312      	movs	r3, #18
 23f01a2:	e7da      	b.n	23f015a <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x22>
      *type = kTfLiteNoType;
 23f01a4:	2200      	movs	r2, #0
 23f01a6:	700a      	strb	r2, [r1, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 23f01a8:	461a      	mov	r2, r3
 23f01aa:	4902      	ldr	r1, [pc, #8]	; (23f01b4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x7c>)
 23f01ac:	f7ff ff88 	bl	23f00c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 23f01b0:	2001      	movs	r0, #1
 23f01b2:	e7d4      	b.n	23f015e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x26>
 23f01b4:	023fdc0c 	.word	0x023fdc0c

023f01b8 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 23f01b8:	b538      	push	{r3, r4, r5, lr}
 23f01ba:	4605      	mov	r5, r0
 23f01bc:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
 23f01be:	f7ff ffa9 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f01c2:	b100      	cbz	r0, 23f01c6 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0xe>
 23f01c4:	562c      	ldrsb	r4, [r5, r0]
  }
 23f01c6:	4620      	mov	r0, r4
 23f01c8:	bd38      	pop	{r3, r4, r5, pc}

023f01ca <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 23f01ca:	b538      	push	{r3, r4, r5, lr}
 23f01cc:	4605      	mov	r5, r0
 23f01ce:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
 23f01d0:	f7ff ffa0 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f01d4:	b100      	cbz	r0, 23f01d8 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0xe>
 23f01d6:	582c      	ldr	r4, [r5, r0]
  }
 23f01d8:	4620      	mov	r0, r4
 23f01da:	bd38      	pop	{r3, r4, r5, pc}

023f01dc <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 23f01dc:	b538      	push	{r3, r4, r5, lr}
 23f01de:	4605      	mov	r5, r0
 23f01e0:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
 23f01e2:	f7ff ff97 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f01e6:	b100      	cbz	r0, 23f01ea <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0xe>
 23f01e8:	5c2c      	ldrb	r4, [r5, r0]
  }
 23f01ea:	4620      	mov	r0, r4
 23f01ec:	bd38      	pop	{r3, r4, r5, pc}

023f01ee <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 23f01ee:	b508      	push	{r3, lr}
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 23f01f0:	2200      	movs	r2, #0
 23f01f2:	210a      	movs	r1, #10
 23f01f4:	f7ff fff2 	bl	23f01dc <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
  }
 23f01f8:	bd08      	pop	{r3, pc}
	...

023f01fc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 23f01fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f0200:	4617      	mov	r7, r2
 23f0202:	4605      	mov	r5, r0
 23f0204:	4688      	mov	r8, r1
 23f0206:	4699      	mov	r9, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 23f0208:	f7ff ff76 	bl	23f00f8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 23f020c:	683b      	ldr	r3, [r7, #0]
 23f020e:	2201      	movs	r2, #1
 23f0210:	2104      	movs	r1, #4
 23f0212:	4638      	mov	r0, r7
 23f0214:	681b      	ldr	r3, [r3, #0]
 23f0216:	4798      	blx	r3
    return new (allocated_memory) T();
 23f0218:	4604      	mov	r4, r0
 23f021a:	2800      	cmp	r0, #0
 23f021c:	d045      	beq.n	23f02aa <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
 23f021e:	f04f 0b00 	mov.w	fp, #0
 23f0222:	f8c0 b000 	str.w	fp, [r0]
  }
  const tflite::RNNOptions *builtin_options_as_RNNOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_RNNOptions ? static_cast<const tflite::RNNOptions *>(builtin_options()) : nullptr;
  }
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 23f0226:	4628      	mov	r0, r5
 23f0228:	f7ff ffe1 	bl	23f01ee <_ZNK6tflite8Operator20builtin_options_typeEv>
 23f022c:	2808      	cmp	r0, #8
 23f022e:	4682      	mov	sl, r0
 23f0230:	d135      	bne.n	23f029e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>
 23f0232:	4628      	mov	r0, r5
 23f0234:	f7ff ff76 	bl	23f0124 <_ZNK6tflite8Operator15builtin_optionsEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();

  if (schema_params != nullptr) {
 23f0238:	4605      	mov	r5, r0
 23f023a:	b380      	cbz	r0, 23f029e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa2>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 23f023c:	465a      	mov	r2, fp
 23f023e:	2104      	movs	r1, #4
 23f0240:	f7ff ffba 	bl	23f01b8 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
  switch (activation) {
 23f0244:	b2c6      	uxtb	r6, r0
 23f0246:	1e73      	subs	r3, r6, #1
 23f0248:	2b04      	cmp	r3, #4
 23f024a:	bf88      	it	hi
 23f024c:	465e      	movhi	r6, fp
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 23f024e:	465a      	mov	r2, fp
 23f0250:	4651      	mov	r1, sl
 23f0252:	4628      	mov	r0, r5
    params->activation =
 23f0254:	7026      	strb	r6, [r4, #0]
 23f0256:	f7ff ffc1 	bl	23f01dc <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 23f025a:	ebb0 000b 	subs.w	r0, r0, fp
 23f025e:	bf18      	it	ne
 23f0260:	2001      	movne	r0, #1
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 23f0262:	465a      	mov	r2, fp
 23f0264:	210a      	movs	r1, #10
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 23f0266:	70a0      	strb	r0, [r4, #2]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 23f0268:	4628      	mov	r0, r5
 23f026a:	f7ff ffb7 	bl	23f01dc <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 23f026e:	ebb0 000b 	subs.w	r0, r0, fp
 23f0272:	bf18      	it	ne
 23f0274:	2001      	movne	r0, #1
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 23f0276:	465a      	mov	r2, fp
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 23f0278:	70e0      	strb	r0, [r4, #3]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 23f027a:	2106      	movs	r1, #6
 23f027c:	4628      	mov	r0, r5
 23f027e:	f7ff ff9b 	bl	23f01b8 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
        ConvertActivation(schema_params->fused_activation_function());
    params->keep_num_dims = schema_params->keep_num_dims();
    params->asymmetric_quantize_inputs =
        schema_params->asymmetric_quantize_inputs();

    switch (schema_params->weights_format()) {
 23f0282:	b158      	cbz	r0, 23f029c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
 23f0284:	2801      	cmp	r0, #1
 23f0286:	d009      	beq.n	23f029c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa0>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 23f0288:	490e      	ldr	r1, [pc, #56]	; (23f02c4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>)
 23f028a:	4640      	mov	r0, r8
 23f028c:	f7ff ff18 	bl	23f00c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  get_deleter()(std::move(__ptr));
 23f0290:	4621      	mov	r1, r4
 23f0292:	4638      	mov	r0, r7
 23f0294:	f7ff ff3b 	bl	23f010e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 23f0298:	2001      	movs	r0, #1
 23f029a:	e003      	b.n	23f02a4 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa8>
        params->weights_format =
 23f029c:	7060      	strb	r0, [r4, #1]
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
 23f029e:	2000      	movs	r0, #0
  *builtin_data = params.release();
 23f02a0:	f8c9 4000 	str.w	r4, [r9]
}
 23f02a4:	b003      	add	sp, #12
 23f02a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 23f02aa:	4b07      	ldr	r3, [pc, #28]	; (23f02c8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xcc>)
 23f02ac:	4641      	mov	r1, r8
 23f02ae:	9301      	str	r3, [sp, #4]
 23f02b0:	f240 5386 	movw	r3, #1414	; 0x586
 23f02b4:	4640      	mov	r0, r8
 23f02b6:	9300      	str	r3, [sp, #0]
 23f02b8:	4a04      	ldr	r2, [pc, #16]	; (23f02cc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd0>)
 23f02ba:	4b05      	ldr	r3, [pc, #20]	; (23f02d0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>)
 23f02bc:	f7ff ff0e 	bl	23f00dc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 23f02c0:	e7ea      	b.n	23f0298 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>
 23f02c2:	bf00      	nop
 23f02c4:	023fdce8 	.word	0x023fdce8
 23f02c8:	023fdcd6 	.word	0x023fdcd6
 23f02cc:	023fdcbf 	.word	0x023fdcbf
 23f02d0:	023fdc30 	.word	0x023fdc30

023f02d4 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 23f02d4:	b510      	push	{r4, lr}
 23f02d6:	ed2d 8b02 	vpush	{d8}
 23f02da:	4604      	mov	r4, r0
 23f02dc:	eeb0 8a40 	vmov.f32	s16, s0
    auto field_offset = GetOptionalFieldOffset(field);
 23f02e0:	f7ff ff18 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f02e4:	b110      	cbz	r0, 23f02ec <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x18>
 23f02e6:	4404      	add	r4, r0
 23f02e8:	ed94 8a00 	vldr	s16, [r4]
  }
 23f02ec:	eeb0 0a48 	vmov.f32	s0, s16
 23f02f0:	ecbd 8b02 	vpop	{d8}
 23f02f4:	bd10      	pop	{r4, pc}
	...

023f02f8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 23f02f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f02fa:	ed2d 8b02 	vpush	{d8}
 23f02fe:	4614      	mov	r4, r2
 23f0300:	b083      	sub	sp, #12
 23f0302:	4605      	mov	r5, r0
 23f0304:	460e      	mov	r6, r1
 23f0306:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 23f0308:	f7ff fef6 	bl	23f00f8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 23f030c:	2204      	movs	r2, #4
 23f030e:	6823      	ldr	r3, [r4, #0]
 23f0310:	4620      	mov	r0, r4
 23f0312:	4611      	mov	r1, r2
 23f0314:	681b      	ldr	r3, [r3, #0]
 23f0316:	4798      	blx	r3
    return new (allocated_memory) T();
 23f0318:	4604      	mov	r4, r0
 23f031a:	b1c8      	cbz	r0, 23f0350 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
 23f031c:	ed9f 8a13 	vldr	s16, [pc, #76]	; 23f036c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x74>
 23f0320:	ed80 8a00 	vstr	s16, [r0]
  }
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 23f0324:	4628      	mov	r0, r5
 23f0326:	f7ff ff62 	bl	23f01ee <_ZNK6tflite8Operator20builtin_options_typeEv>
 23f032a:	2809      	cmp	r0, #9
 23f032c:	d10a      	bne.n	23f0344 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4c>
 23f032e:	4628      	mov	r0, r5
 23f0330:	f7ff fef8 	bl	23f0124 <_ZNK6tflite8Operator15builtin_optionsEv>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();

  if (schema_params != nullptr) {
 23f0334:	b130      	cbz	r0, 23f0344 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4c>
    return GetField<float>(VT_BETA, 0.0f);
 23f0336:	eeb0 0a48 	vmov.f32	s0, s16
 23f033a:	2104      	movs	r1, #4
 23f033c:	f7ff ffca 	bl	23f02d4 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    params->beta = schema_params->beta();
 23f0340:	ed84 0a00 	vstr	s0, [r4]
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
 23f0344:	2000      	movs	r0, #0
  *builtin_data = params.release();
 23f0346:	603c      	str	r4, [r7, #0]
}
 23f0348:	b003      	add	sp, #12
 23f034a:	ecbd 8b02 	vpop	{d8}
 23f034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 23f0350:	4b07      	ldr	r3, [pc, #28]	; (23f0370 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>)
 23f0352:	4631      	mov	r1, r6
 23f0354:	9301      	str	r3, [sp, #4]
 23f0356:	f640 0329 	movw	r3, #2089	; 0x829
 23f035a:	4630      	mov	r0, r6
 23f035c:	9300      	str	r3, [sp, #0]
 23f035e:	4a05      	ldr	r2, [pc, #20]	; (23f0374 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c>)
 23f0360:	4b05      	ldr	r3, [pc, #20]	; (23f0378 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>)
 23f0362:	f7ff febb 	bl	23f00dc <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 23f0366:	2001      	movs	r0, #1
 23f0368:	e7ee      	b.n	23f0348 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
 23f036a:	bf00      	nop
 23f036c:	00000000 	.word	0x00000000
 23f0370:	023fdcd6 	.word	0x023fdcd6
 23f0374:	023fdcbf 	.word	0x023fdcbf
 23f0378:	023fdc30 	.word	0x023fdc30

023f037c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 23f037c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23f0380:	4698      	mov	r8, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
 23f0382:	2300      	movs	r3, #0
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 23f0384:	4605      	mov	r5, r0
  *registration = nullptr;
 23f0386:	f8c8 3000 	str.w	r3, [r8]
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 23f038a:	4617      	mov	r7, r2
 23f038c:	460e      	mov	r6, r1
  auto builtin_code = GetBuiltinCode(opcode);
 23f038e:	f002 f8d6 	bl	23f253e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
    return data_ - ReadScalar<soffset_t>(data_);
 23f0392:	682b      	ldr	r3, [r5, #0]
 23f0394:	4604      	mov	r4, r0
 23f0396:	1aeb      	subs	r3, r5, r3
 23f0398:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 23f039a:	2a08      	cmp	r2, #8
 23f039c:	d90e      	bls.n	23f03bc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x40>
 23f039e:	8919      	ldrh	r1, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f03a0:	b161      	cbz	r1, 23f03bc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x40>
 23f03a2:	f855 9001 	ldr.w	r9, [r5, r1]
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX) {
 23f03a6:	2c9e      	cmp	r4, #158	; 0x9e
 23f03a8:	dd0b      	ble.n	23f03c2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x46>
    TF_LITE_REPORT_ERROR(
 23f03aa:	4622      	mov	r2, r4
 23f03ac:	4638      	mov	r0, r7
 23f03ae:	491f      	ldr	r1, [pc, #124]	; (23f042c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb0>)
 23f03b0:	f7ff fe86 	bl	23f00c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'. "
          "This model is not supported by EON Compiler of TensorFlow Lite Micro,",
          "but is in full TFLite (e.g. on Linux).\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 23f03b4:	2001      	movs	r0, #1
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
 23f03b6:	b003      	add	sp, #12
 23f03b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23f03bc:	f04f 0901 	mov.w	r9, #1
 23f03c0:	e7f1      	b.n	23f03a6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x2a>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 23f03c2:	2c20      	cmp	r4, #32
 23f03c4:	d017      	beq.n	23f03f6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7a>
    *registration = op_resolver.FindOp(builtin_code, version);
 23f03c6:	6833      	ldr	r3, [r6, #0]
 23f03c8:	464a      	mov	r2, r9
 23f03ca:	4621      	mov	r1, r4
 23f03cc:	4630      	mov	r0, r6
 23f03ce:	681b      	ldr	r3, [r3, #0]
 23f03d0:	4798      	blx	r3
 23f03d2:	f8c8 0000 	str.w	r0, [r8]
    if (*registration == nullptr) {
 23f03d6:	bb30      	cbnz	r0, 23f0426 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xaa>
// Check 'v' is out of closed range [low; high].
// Workaround for GCC warning [-Werror=type-limits]:
// comparison is always true due to limited range of data type.
template<typename T>
inline bool IsOutRange(const T &v, const T &low, const T &high) {
  return (v < low) || (high < v);
 23f03d8:	2c00      	cmp	r4, #0
}

inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_SIGN)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBuiltinOperator()[index];
 23f03da:	bfa8      	it	ge
 23f03dc:	4b14      	ldrge	r3, [pc, #80]	; (23f0430 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb4>)
      TF_LITE_REPORT_ERROR(
 23f03de:	4638      	mov	r0, r7
 23f03e0:	bfac      	ite	ge
 23f03e2:	f853 3024 	ldrge.w	r3, [r3, r4, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_SIGN)) return "";
 23f03e6:	4b13      	ldrlt	r3, [pc, #76]	; (23f0434 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb8>)
 23f03e8:	4a13      	ldr	r2, [pc, #76]	; (23f0438 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xbc>)
 23f03ea:	4914      	ldr	r1, [pc, #80]	; (23f043c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc0>)
 23f03ec:	f8cd 9000 	str.w	r9, [sp]
 23f03f0:	f7ff fe66 	bl	23f00c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
 23f03f4:	e7de      	b.n	23f03b4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 23f03f6:	2a06      	cmp	r2, #6
 23f03f8:	d910      	bls.n	23f041c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa0>
  return EndianScalar(*reinterpret_cast<const T *>(p));
 23f03fa:	88db      	ldrh	r3, [r3, #6]
    auto p = data_ + field_offset;
 23f03fc:	18e9      	adds	r1, r5, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f03fe:	b16b      	cbz	r3, 23f041c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa0>
 23f0400:	58eb      	ldr	r3, [r5, r3]
    *registration = op_resolver.FindOp(name, version);
 23f0402:	464a      	mov	r2, r9
 23f0404:	4419      	add	r1, r3
 23f0406:	6833      	ldr	r3, [r6, #0]
 23f0408:	4630      	mov	r0, r6
 23f040a:	685b      	ldr	r3, [r3, #4]
 23f040c:	3104      	adds	r1, #4
 23f040e:	4798      	blx	r3
 23f0410:	f8c8 0000 	str.w	r0, [r8]
    status = kTfLiteError;
 23f0414:	fab0 f080 	clz	r0, r0
 23f0418:	0940      	lsrs	r0, r0, #5
 23f041a:	e7cc      	b.n	23f03b6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x3a>
    TF_LITE_REPORT_ERROR(
 23f041c:	4638      	mov	r0, r7
 23f041e:	4908      	ldr	r1, [pc, #32]	; (23f0440 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc4>)
 23f0420:	f7ff fe4e 	bl	23f00c0 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
 23f0424:	e7c6      	b.n	23f03b4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
  TfLiteStatus status = kTfLiteOk;
 23f0426:	2000      	movs	r0, #0
 23f0428:	e7c5      	b.n	23f03b6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x3a>
 23f042a:	bf00      	nop
 23f042c:	023fdd12 	.word	0x023fdd12
 23f0430:	023fe4a4 	.word	0x023fe4a4
 23f0434:	023fb03b 	.word	0x023fb03b
 23f0438:	023fdd66 	.word	0x023fdd66
 23f043c:	023fdd8e 	.word	0x023fdd8e
 23f0440:	023fde09 	.word	0x023fde09

023f0444 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>:

namespace {

inline TfLiteStatus Quantize(TfLiteContext* context, float scale,
                             int32_t zero_point, float f, int32_t& q) {
  const float tmp = TfLiteRound(f / scale);
 23f0444:	eec0 7a80 	vdiv.f32	s15, s1, s0
  const bool no_integer_overflow_from_quantization =
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 23f0448:	ed9f 7a11 	vldr	s14, [pc, #68]	; 23f0490 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x4c>
  { return __builtin_roundf(__x); }
 23f044c:	fef8 7a67 	vrinta.f32	s15, s15
 23f0450:	eef4 7ac7 	vcmpe.f32	s15, s14
 23f0454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                             int32_t zero_point, float f, int32_t& q) {
 23f0458:	b513      	push	{r0, r1, r4, lr}
      (tmp >= static_cast<float>(std::numeric_limits<int32_t>::min()) &&
 23f045a:	db0f      	blt.n	23f047c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x38>
 23f045c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 23f0494 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x50>
 23f0460:	eef4 7ac7 	vcmpe.f32	s15, s14
 23f0464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f0468:	d808      	bhi.n	23f047c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x38>
       tmp <= static_cast<float>(std::numeric_limits<int32_t>::max()));
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
  q = zero_point + static_cast<int32_t>(tmp);
 23f046a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f046e:	ee17 3a90 	vmov	r3, s15
  return kTfLiteOk;
 23f0472:	2000      	movs	r0, #0
  q = zero_point + static_cast<int32_t>(tmp);
 23f0474:	440b      	add	r3, r1
 23f0476:	6013      	str	r3, [r2, #0]
}
 23f0478:	b002      	add	sp, #8
 23f047a:	bd10      	pop	{r4, pc}
  TF_LITE_ENSURE(context, no_integer_overflow_from_quantization);
 23f047c:	4b06      	ldr	r3, [pc, #24]	; (23f0498 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x54>)
 23f047e:	4a07      	ldr	r2, [pc, #28]	; (23f049c <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x58>)
 23f0480:	9300      	str	r3, [sp, #0]
 23f0482:	6904      	ldr	r4, [r0, #16]
 23f0484:	f240 1357 	movw	r3, #343	; 0x157
 23f0488:	4905      	ldr	r1, [pc, #20]	; (23f04a0 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x5c>)
 23f048a:	47a0      	blx	r4
 23f048c:	2001      	movs	r0, #1
 23f048e:	e7f3      	b.n	23f0478 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl+0x34>
 23f0490:	cf000000 	.word	0xcf000000
 23f0494:	4f000000 	.word	0x4f000000
 23f0498:	023fe7ac 	.word	0x023fe7ac
 23f049c:	023fe724 	.word	0x023fe724
 23f04a0:	023fdcbf 	.word	0x023fdcbf

023f04a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              double* multiplier) {
 23f04a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      static_cast<double>(input->params.scale * filter->params.scale);
 23f04a6:	edd1 7a03 	vldr	s15, [r1, #12]
 23f04aa:	ed92 7a03 	vldr	s14, [r2, #12]
 23f04ae:	ee67 7a87 	vmul.f32	s15, s15, s14
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 23f04b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 23f04b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                              double* multiplier) {
 23f04ba:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 23f04bc:	da0a      	bge.n	23f04d4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x30>
 23f04be:	4b0f      	ldr	r3, [pc, #60]	; (23f04fc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
 23f04c0:	4a0f      	ldr	r2, [pc, #60]	; (23f0500 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
 23f04c2:	9300      	str	r3, [sp, #0]
 23f04c4:	6904      	ldr	r4, [r0, #16]
 23f04c6:	f240 1349 	movw	r3, #329	; 0x149
 23f04ca:	490e      	ldr	r1, [pc, #56]	; (23f0504 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
 23f04cc:	47a0      	blx	r4
 23f04ce:	2001      	movs	r0, #1
}
 23f04d0:	b002      	add	sp, #8
 23f04d2:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
 23f04d4:	ee17 0a90 	vmov	r0, s15
 23f04d8:	f7f7 fa86 	bl	23e79e8 <__aeabi_f2d>
 23f04dc:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 23f04de:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale =
 23f04e0:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 23f04e2:	f7f7 fa81 	bl	23e79e8 <__aeabi_f2d>
 23f04e6:	460b      	mov	r3, r1
 23f04e8:	4602      	mov	r2, r0
 23f04ea:	4629      	mov	r1, r5
 23f04ec:	4620      	mov	r0, r4
 23f04ee:	f7f7 fbfd 	bl	23e7cec <__aeabi_ddiv>
 23f04f2:	9b06      	ldr	r3, [sp, #24]
 23f04f4:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
 23f04f8:	2000      	movs	r0, #0
 23f04fa:	e7e9      	b.n	23f04d0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2c>
 23f04fc:	023fe7d2 	.word	0x023fe7d2
 23f0500:	023fe724 	.word	0x023fe724
 23f0504:	023fdcbf 	.word	0x023fdcbf

023f0508 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
                                              double* multiplier) {
 23f0508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f050c:	4604      	mov	r4, r0
 23f050e:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f0512:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
 23f0514:	4615      	mov	r5, r2
 23f0516:	461e      	mov	r6, r3
 23f0518:	468a      	mov	sl, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f051a:	f7f7 fa65 	bl	23e79e8 <__aeabi_f2d>
 23f051e:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
 23f0520:	68e8      	ldr	r0, [r5, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f0522:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
 23f0524:	f7f7 fa60 	bl	23e79e8 <__aeabi_f2d>
 23f0528:	4602      	mov	r2, r0
 23f052a:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 23f052c:	4640      	mov	r0, r8
 23f052e:	4649      	mov	r1, r9
 23f0530:	f7f7 fab2 	bl	23e7a98 <__aeabi_dmul>
 23f0534:	4680      	mov	r8, r0
 23f0536:	4689      	mov	r9, r1
  if (bias) {
 23f0538:	b1d6      	cbz	r6, 23f0570 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x68>
    const double bias_scale = static_cast<double>(bias->params.scale);
 23f053a:	68f0      	ldr	r0, [r6, #12]
 23f053c:	f7f7 fa54 	bl	23e79e8 <__aeabi_f2d>
 23f0540:	4602      	mov	r2, r0
 23f0542:	460b      	mov	r3, r1
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 23f0544:	4640      	mov	r0, r8
 23f0546:	4649      	mov	r1, r9
 23f0548:	f7f7 f8ee 	bl	23e7728 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 23f054c:	4680      	mov	r8, r0
    const double output_scale = static_cast<double>(output->params.scale);
 23f054e:	68f8      	ldr	r0, [r7, #12]
 23f0550:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 23f0554:	f7f7 fa48 	bl	23e79e8 <__aeabi_f2d>
 23f0558:	4602      	mov	r2, r0
 23f055a:	460b      	mov	r3, r1
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 23f055c:	4640      	mov	r0, r8
 23f055e:	4649      	mov	r1, r9
 23f0560:	f7f7 fbc4 	bl	23e7cec <__aeabi_ddiv>
 23f0564:	a311      	add	r3, pc, #68	; (adr r3, 23f05ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
 23f0566:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f056a:	f7f7 fd11 	bl	23e7f90 <__aeabi_dcmple>
 23f056e:	b150      	cbz	r0, 23f0586 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7e>
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 23f0570:	463b      	mov	r3, r7
 23f0572:	462a      	mov	r2, r5
 23f0574:	4651      	mov	r1, sl
 23f0576:	4620      	mov	r0, r4
 23f0578:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
}
 23f057c:	b003      	add	sp, #12
 23f057e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 23f0582:	f7ff bf8f 	b.w	23f04a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 23f0586:	4b06      	ldr	r3, [pc, #24]	; (23f05a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
 23f0588:	4620      	mov	r0, r4
 23f058a:	9300      	str	r3, [sp, #0]
 23f058c:	6925      	ldr	r5, [r4, #16]
 23f058e:	f44f 739e 	mov.w	r3, #316	; 0x13c
 23f0592:	4a04      	ldr	r2, [pc, #16]	; (23f05a4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
 23f0594:	4904      	ldr	r1, [pc, #16]	; (23f05a8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
 23f0596:	47a8      	blx	r5
}
 23f0598:	2001      	movs	r0, #1
 23f059a:	b003      	add	sp, #12
 23f059c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f05a0:	023fe7eb 	.word	0x023fe7eb
 23f05a4:	023fe724 	.word	0x023fe724
 23f05a8:	023fdcbf 	.word	0x023fdcbf
 23f05ac:	47ae147b 	.word	0x47ae147b
 23f05b0:	3f947ae1 	.word	0x3f947ae1

023f05b4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 23f05b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f05b8:	461f      	mov	r7, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
 23f05ba:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
 23f05bc:	b086      	sub	sp, #24
  if (output->type == kTfLiteUInt8) {
 23f05be:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
 23f05c0:	4606      	mov	r6, r0
 23f05c2:	468c      	mov	ip, r1
 23f05c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (output->type == kTfLiteUInt8) {
 23f05c6:	d00f      	beq.n	23f05e8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x34>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
 23f05c8:	2b09      	cmp	r3, #9
 23f05ca:	d026      	beq.n	23f061a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
 23f05cc:	2b07      	cmp	r3, #7
 23f05ce:	d028      	beq.n	23f0622 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x6e>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
 23f05d0:	4b37      	ldr	r3, [pc, #220]	; (23f06b0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xfc>)
 23f05d2:	4a38      	ldr	r2, [pc, #224]	; (23f06b4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x100>)
 23f05d4:	9300      	str	r3, [sp, #0]
 23f05d6:	6904      	ldr	r4, [r0, #16]
 23f05d8:	f240 138f 	movw	r3, #399	; 0x18f
 23f05dc:	4936      	ldr	r1, [pc, #216]	; (23f06b8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x104>)
 23f05de:	47a0      	blx	r4
 23f05e0:	2001      	movs	r0, #1
  }

  return CalculateActivationRangeQuantizedImpl(context, activation, qmin, qmax,
                                               output, act_min, act_max);
}
 23f05e2:	b006      	add	sp, #24
 23f05e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    qmax = std::numeric_limits<uint8_t>::max();
 23f05e8:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
 23f05ea:	f04f 0800 	mov.w	r8, #0
  if (activation == kTfLiteActRelu) {
 23f05ee:	f1bc 0f01 	cmp.w	ip, #1
  const auto scale = output->params.scale;
 23f05f2:	ed92 0a03 	vldr	s0, [r2, #12]
  const auto zero_point = output->params.zero_point;
 23f05f6:	6911      	ldr	r1, [r2, #16]
  if (activation == kTfLiteActRelu) {
 23f05f8:	d118      	bne.n	23f062c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x78>
    TF_LITE_ENSURE_OK(context,
 23f05fa:	eddf 0a30 	vldr	s1, [pc, #192]	; 23f06bc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x108>
 23f05fe:	4630      	mov	r0, r6
 23f0600:	aa05      	add	r2, sp, #20
 23f0602:	f7ff ff1f 	bl	23f0444 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 23f0606:	2800      	cmp	r0, #0
 23f0608:	d1eb      	bne.n	23f05e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    *act_min = std::max(qmin, tmp_q);
 23f060a:	9b05      	ldr	r3, [sp, #20]
 23f060c:	4543      	cmp	r3, r8
 23f060e:	bfac      	ite	ge
 23f0610:	603b      	strge	r3, [r7, #0]
 23f0612:	f8c7 8000 	strlt.w	r8, [r7]
    *act_max = qmax;
 23f0616:	602c      	str	r4, [r5, #0]
 23f0618:	e7e3      	b.n	23f05e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    qmax = std::numeric_limits<int8_t>::max();
 23f061a:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
 23f061c:	f06f 087f 	mvn.w	r8, #127	; 0x7f
 23f0620:	e7e5      	b.n	23f05ee <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x3a>
    qmax = std::numeric_limits<int16_t>::max();
 23f0622:	f647 74ff 	movw	r4, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
 23f0626:	f8df 8098 	ldr.w	r8, [pc, #152]	; 23f06c0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x10c>
 23f062a:	e7e0      	b.n	23f05ee <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x3a>
  } else if (activation == kTfLiteActRelu6) {
 23f062c:	f1bc 0f03 	cmp.w	ip, #3
 23f0630:	d121      	bne.n	23f0676 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xc2>
    TF_LITE_ENSURE_OK(context,
 23f0632:	eddf 0a22 	vldr	s1, [pc, #136]	; 23f06bc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x108>
 23f0636:	4630      	mov	r0, r6
 23f0638:	aa05      	add	r2, sp, #20
 23f063a:	ed8d 0a02 	vstr	s0, [sp, #8]
 23f063e:	9103      	str	r1, [sp, #12]
 23f0640:	f7ff ff00 	bl	23f0444 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 23f0644:	2800      	cmp	r0, #0
 23f0646:	d1cc      	bne.n	23f05e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    TF_LITE_ENSURE_OK(context,
 23f0648:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, tmp_q);
 23f064c:	9b05      	ldr	r3, [sp, #20]
    TF_LITE_ENSURE_OK(context,
 23f064e:	aa05      	add	r2, sp, #20
    *act_min = std::max(qmin, tmp_q);
 23f0650:	4543      	cmp	r3, r8
 23f0652:	bfac      	ite	ge
 23f0654:	603b      	strge	r3, [r7, #0]
 23f0656:	f8c7 8000 	strlt.w	r8, [r7]
    TF_LITE_ENSURE_OK(context,
 23f065a:	ed9d 0a02 	vldr	s0, [sp, #8]
 23f065e:	4630      	mov	r0, r6
 23f0660:	9903      	ldr	r1, [sp, #12]
 23f0662:	f7ff feef 	bl	23f0444 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 23f0666:	2800      	cmp	r0, #0
 23f0668:	d1bb      	bne.n	23f05e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    *act_max = std::min(qmax, tmp_q);
 23f066a:	9b05      	ldr	r3, [sp, #20]
 23f066c:	42a3      	cmp	r3, r4
 23f066e:	bfd4      	ite	le
 23f0670:	602b      	strle	r3, [r5, #0]
 23f0672:	602c      	strgt	r4, [r5, #0]
 23f0674:	e7b5      	b.n	23f05e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
  } else if (activation == kTfLiteActReluN1To1) {
 23f0676:	f1bc 0f02 	cmp.w	ip, #2
 23f067a:	d114      	bne.n	23f06a6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf2>
    TF_LITE_ENSURE_OK(context,
 23f067c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 23f0680:	4630      	mov	r0, r6
 23f0682:	aa05      	add	r2, sp, #20
 23f0684:	ed8d 0a02 	vstr	s0, [sp, #8]
 23f0688:	9103      	str	r1, [sp, #12]
 23f068a:	f7ff fedb 	bl	23f0444 <_ZN6tflite12_GLOBAL__N_18QuantizeEP13TfLiteContextflfRl>
 23f068e:	2800      	cmp	r0, #0
 23f0690:	d1a7      	bne.n	23f05e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
    *act_min = std::max(qmin, tmp_q);
 23f0692:	9b05      	ldr	r3, [sp, #20]
    TF_LITE_ENSURE_OK(context,
 23f0694:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, tmp_q);
 23f0698:	4543      	cmp	r3, r8
 23f069a:	bfac      	ite	ge
 23f069c:	603b      	strge	r3, [r7, #0]
 23f069e:	f8c7 8000 	strlt.w	r8, [r7]
    TF_LITE_ENSURE_OK(context,
 23f06a2:	aa05      	add	r2, sp, #20
 23f06a4:	e7d9      	b.n	23f065a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa6>
    *act_min = qmin;
 23f06a6:	f8c7 8000 	str.w	r8, [r7]
  return kTfLiteOk;
 23f06aa:	2000      	movs	r0, #0
    *act_max = qmax;
 23f06ac:	602c      	str	r4, [r5, #0]
                                               output, act_min, act_max);
 23f06ae:	e798      	b.n	23f05e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x2e>
 23f06b0:	023fe80d 	.word	0x023fe80d
 23f06b4:	023fe724 	.word	0x023fe724
 23f06b8:	023fdcbf 	.word	0x023fdcbf
 23f06bc:	00000000 	.word	0x00000000
 23f06c0:	ffff8000 	.word	0xffff8000

023f06c4 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>:
  }
}

void UnpackDenseInt4IntoInt8(const int8_t* src_buffer, int num_elements,
                             int8_t* dst_buffer) {
  for (int i = 0; i < num_elements; i += 2) {
 23f06c4:	2300      	movs	r3, #0
                             int8_t* dst_buffer) {
 23f06c6:	b570      	push	{r4, r5, r6, lr}
    // Shift left first so that sign is properly extended when shifted right
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
    // Break early if the tensor has odd length and the higher nibble should be
    // ignored.
    if (i + 1 == num_elements) break;
    dst_buffer[i + 1] = static_cast<int8_t>(src_buffer[i / 2]) >> 4;
 23f06c8:	1c56      	adds	r6, r2, #1
  for (int i = 0; i < num_elements; i += 2) {
 23f06ca:	428b      	cmp	r3, r1
 23f06cc:	da0c      	bge.n	23f06e8 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x24>
    dst_buffer[i] = static_cast<int8_t>(src_buffer[i / 2] << 4) >> 4;
 23f06ce:	105d      	asrs	r5, r3, #1
 23f06d0:	5744      	ldrsb	r4, [r0, r5]
 23f06d2:	f344 0403 	sbfx	r4, r4, #0, #4
 23f06d6:	54d4      	strb	r4, [r2, r3]
    if (i + 1 == num_elements) break;
 23f06d8:	1c5c      	adds	r4, r3, #1
 23f06da:	42a1      	cmp	r1, r4
 23f06dc:	d004      	beq.n	23f06e8 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x24>
    dst_buffer[i + 1] = static_cast<int8_t>(src_buffer[i / 2]) >> 4;
 23f06de:	5744      	ldrsb	r4, [r0, r5]
 23f06e0:	1124      	asrs	r4, r4, #4
 23f06e2:	54f4      	strb	r4, [r6, r3]
  for (int i = 0; i < num_elements; i += 2) {
 23f06e4:	3302      	adds	r3, #2
 23f06e6:	e7f0      	b.n	23f06ca <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa+0x6>
  }
}
 23f06e8:	bd70      	pop	{r4, r5, r6, pc}
	...

023f06ec <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 23f06ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
#if TFLITE_SINGLE_ROUNDING
  // Single-rounding MultiplyByQuantizedMultiplier only supports positive
  // multipliers.
  // TFLITE_DCHECK(double_multiplier >= 0);
#endif
  if (double_multiplier == 0.) {
 23f06ee:	2200      	movs	r2, #0
                        int* shift) {
 23f06f0:	4606      	mov	r6, r0
 23f06f2:	460c      	mov	r4, r1
  if (double_multiplier == 0.) {
 23f06f4:	2300      	movs	r3, #0
 23f06f6:	ec51 0b10 	vmov	r0, r1, d0
 23f06fa:	ed8d 0b00 	vstr	d0, [sp]
 23f06fe:	f7f7 fc33 	bl	23e7f68 <__aeabi_dcmpeq>
 23f0702:	ed9d 0b00 	vldr	d0, [sp]
 23f0706:	4605      	mov	r5, r0
 23f0708:	b120      	cbz	r0, 23f0714 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x28>
    *quantized_multiplier = 0;
 23f070a:	2300      	movs	r3, #0
 23f070c:	6033      	str	r3, [r6, #0]
    *shift = 0;
 23f070e:	6023      	str	r3, [r4, #0]
    *shift = 30;
    q_fixed = (1LL << 31) - 1;
  }
#endif
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
 23f0710:	b002      	add	sp, #8
 23f0712:	bd70      	pop	{r4, r5, r6, pc}
  const double q = std::frexp(double_multiplier, shift);
 23f0714:	4620      	mov	r0, r4
 23f0716:	f006 fb03 	bl	23f6d20 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 23f071a:	2200      	movs	r2, #0
 23f071c:	4b13      	ldr	r3, [pc, #76]	; (23f076c <_ZN6tflite18QuantizeMultiplierEdPlPi+0x80>)
  const double q = std::frexp(double_multiplier, shift);
 23f071e:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 23f0722:	f7f7 f9b9 	bl	23e7a98 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 23f0726:	ec41 0b10 	vmov	d0, r0, r1
 23f072a:	f006 fb31 	bl	23f6d90 <round>
 23f072e:	ec51 0b10 	vmov	r0, r1, d0
 23f0732:	f7f7 fd49 	bl	23e81c8 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 23f0736:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 23f073a:	4282      	cmp	r2, r0
 23f073c:	eb75 0c01 	sbcs.w	ip, r5, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1LL << 31)));
 23f0740:	4603      	mov	r3, r0
  TFLITE_CHECK(q_fixed <= (1LL << 31));
 23f0742:	da01      	bge.n	23f0748 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x5c>
 23f0744:	f004 f832 	bl	23f47ac <abort>
  if (q_fixed == (1LL << 31)) {
 23f0748:	42a9      	cmp	r1, r5
 23f074a:	bf08      	it	eq
 23f074c:	4290      	cmpeq	r0, r2
    ++*shift;
 23f074e:	bf02      	ittt	eq
 23f0750:	6823      	ldreq	r3, [r4, #0]
 23f0752:	3301      	addeq	r3, #1
 23f0754:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
 23f0756:	6822      	ldr	r2, [r4, #0]
    q_fixed /= 2;
 23f0758:	bf08      	it	eq
 23f075a:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
  if (*shift < -31) {
 23f075e:	321f      	adds	r2, #31
    *shift = 0;
 23f0760:	bfbc      	itt	lt
 23f0762:	2300      	movlt	r3, #0
 23f0764:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 23f0766:	6033      	str	r3, [r6, #0]
 23f0768:	e7d2      	b.n	23f0710 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x24>
 23f076a:	bf00      	nop
 23f076c:	41e00000 	.word	0x41e00000

023f0770 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 23f0770:	b537      	push	{r0, r1, r2, r4, r5, lr}
  TFLITE_CHECK_GT(double_multiplier, 1.);
 23f0772:	4b0c      	ldr	r3, [pc, #48]	; (23f07a4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x34>)
                                      int* left_shift) {
 23f0774:	4605      	mov	r5, r0
 23f0776:	460c      	mov	r4, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
 23f0778:	2200      	movs	r2, #0
 23f077a:	ec51 0b10 	vmov	r0, r1, d0
 23f077e:	ed8d 0b00 	vstr	d0, [sp]
 23f0782:	f7f7 fc19 	bl	23e7fb8 <__aeabi_dcmpgt>
 23f0786:	ed9d 0b00 	vldr	d0, [sp]
 23f078a:	b908      	cbnz	r0, 23f0790 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x20>
 23f078c:	f004 f80e 	bl	23f47ac <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 23f0790:	4621      	mov	r1, r4
 23f0792:	4628      	mov	r0, r5
 23f0794:	f7ff ffaa 	bl	23f06ec <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 23f0798:	6823      	ldr	r3, [r4, #0]
 23f079a:	2b00      	cmp	r3, #0
 23f079c:	dbf6      	blt.n	23f078c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x1c>
}
 23f079e:	b003      	add	sp, #12
 23f07a0:	bd30      	pop	{r4, r5, pc}
 23f07a2:	bf00      	nop
 23f07a4:	3ff00000 	.word	0x3ff00000

023f07a8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 23f07a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      0) {
    input_beta_real_multiplier = max_real_multiplier;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier =
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
 23f07ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
 23f07b0:	ed2d 8b02 	vpush	{d8}
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
 23f07b4:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
 23f07b8:	ec57 6b10 	vmov	r6, r7, d0
 23f07bc:	ec59 8b11 	vmov	r8, r9, d1
 23f07c0:	4693      	mov	fp, r2
 23f07c2:	468a      	mov	sl, r1
      std::min<double>(beta * input_scale * (1 << (31 - input_integer_bits)),
 23f07c4:	f7f7 f8fe 	bl	23e79c4 <__aeabi_i2d>
 23f07c8:	4642      	mov	r2, r8
 23f07ca:	4604      	mov	r4, r0
 23f07cc:	460d      	mov	r5, r1
 23f07ce:	464b      	mov	r3, r9
 23f07d0:	4630      	mov	r0, r6
 23f07d2:	4639      	mov	r1, r7
 23f07d4:	f7f7 f960 	bl	23e7a98 <__aeabi_dmul>
 23f07d8:	4602      	mov	r2, r0
 23f07da:	460b      	mov	r3, r1
 23f07dc:	4620      	mov	r0, r4
 23f07de:	4629      	mov	r1, r5
 23f07e0:	f7f7 f95a 	bl	23e7a98 <__aeabi_dmul>
 23f07e4:	4602      	mov	r2, r0
 23f07e6:	460b      	mov	r3, r1
 23f07e8:	ec43 2b18 	vmov	d8, r2, r3
      if (__b < __a)
 23f07ec:	a30a      	add	r3, pc, #40	; (adr r3, 23f0818 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>)
 23f07ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f07f2:	f7f7 fbe1 	bl	23e7fb8 <__aeabi_dcmpgt>
 23f07f6:	b108      	cbz	r0, 23f07fc <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x54>
	return __b;
 23f07f8:	ed9f 8b07 	vldr	d8, [pc, #28]	; 23f0818 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x70>
                       max_real_multiplier);
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 23f07fc:	4659      	mov	r1, fp
 23f07fe:	4650      	mov	r0, sl
 23f0800:	eeb0 0a48 	vmov.f32	s0, s16
 23f0804:	eef0 0a68 	vmov.f32	s1, s17
                                   quantized_multiplier, left_shift);
}
 23f0808:	ecbd 8b02 	vpop	{d8}
 23f080c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 23f0810:	f7ff bfae 	b.w	23f0770 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
 23f0814:	f3af 8000 	nop.w
 23f0818:	ffc00000 	.word	0xffc00000
 23f081c:	41dfffff 	.word	0x41dfffff

023f0820 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 23f0820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 23f0824:	2401      	movs	r4, #1
                         int total_signed_bits) {
 23f0826:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
 23f0828:	fa04 f000 	lsl.w	r0, r4, r0
 23f082c:	3801      	subs	r0, #1
                         int total_signed_bits) {
 23f082e:	4688      	mov	r8, r1
 23f0830:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
 23f0832:	f7f7 f8c7 	bl	23e79c4 <__aeabi_i2d>
 23f0836:	4606      	mov	r6, r0
      (1LL << (total_signed_bits - input_integer_bits)) /
 23f0838:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
 23f083c:	460f      	mov	r7, r1
      (1LL << (total_signed_bits - input_integer_bits)) /
 23f083e:	f1c0 0320 	rsb	r3, r0, #32
 23f0842:	f1a0 0120 	sub.w	r1, r0, #32
 23f0846:	fa24 f303 	lsr.w	r3, r4, r3
 23f084a:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 23f084e:	fa04 f000 	lsl.w	r0, r4, r0
 23f0852:	4319      	orrs	r1, r3
 23f0854:	f7f7 f8f2 	bl	23e7a3c <__aeabi_l2d>
 23f0858:	4602      	mov	r2, r0
 23f085a:	460b      	mov	r3, r1
 23f085c:	4630      	mov	r0, r6
 23f085e:	4639      	mov	r1, r7
 23f0860:	f7f7 f91a 	bl	23e7a98 <__aeabi_dmul>
      (1LL << input_left_shift);
 23f0864:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
 23f0868:	460f      	mov	r7, r1
      (1LL << input_left_shift);
 23f086a:	f1a8 0120 	sub.w	r1, r8, #32
 23f086e:	fa24 f303 	lsr.w	r3, r4, r3
 23f0872:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 23f0876:	4606      	mov	r6, r0
      (1LL << (total_signed_bits - input_integer_bits)) /
 23f0878:	4319      	orrs	r1, r3
 23f087a:	fa04 f008 	lsl.w	r0, r4, r8
 23f087e:	f7f7 f8dd 	bl	23e7a3c <__aeabi_l2d>
 23f0882:	4602      	mov	r2, r0
 23f0884:	460b      	mov	r3, r1
  const double max_input_rescaled =
 23f0886:	4630      	mov	r0, r6
 23f0888:	4639      	mov	r1, r7
 23f088a:	f7f7 fa2f 	bl	23e7cec <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 23f088e:	ec41 0b10 	vmov	d0, r0, r1
 23f0892:	f006 f9c1 	bl	23f6c18 <floor>
 23f0896:	ec51 0b10 	vmov	r0, r1, d0
 23f089a:	f7f7 fbad 	bl	23e7ff8 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
 23f089e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

023f08a2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>:
#include "edge-impulse-sdk/tensorflow/lite/core/api/flatbuffer_conversions.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_error_reporter.h"
#include "edge-impulse-sdk/tensorflow/lite/schema/schema_generated.h"

namespace tflite {
TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type) {
 23f08a2:	b513      	push	{r0, r1, r4, lr}
 23f08a4:	4604      	mov	r4, r0
 23f08a6:	9101      	str	r1, [sp, #4]
  return ConvertTensorType(tensor_type, type, tflite::GetMicroErrorReporter());
 23f08a8:	f001 f9ca 	bl	23f1c40 <_ZN6tflite21GetMicroErrorReporterEv>
 23f08ac:	4602      	mov	r2, r0
 23f08ae:	4620      	mov	r0, r4
 23f08b0:	9901      	ldr	r1, [sp, #4]
}
 23f08b2:	b002      	add	sp, #8
 23f08b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return ConvertTensorType(tensor_type, type, tflite::GetMicroErrorReporter());
 23f08b8:	f7ff bc3e 	b.w	23f0138 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>

023f08bc <_ZN6tflite24CallBuiltinParseFunctionEPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvES3_S7_S9_>:

TfLiteStatus CallBuiltinParseFunction(TfLiteBridgeBuiltinParseFunction parser,
                                      const Operator* op,
                                      BuiltinDataAllocator* allocator,
                                      void** builtin_data) {
 23f08bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f08be:	460d      	mov	r5, r1
 23f08c0:	4604      	mov	r4, r0
 23f08c2:	e9cd 3200 	strd	r3, r2, [sp]
  return parser(op, tflite::GetMicroErrorReporter(), allocator, builtin_data);
 23f08c6:	f001 f9bb 	bl	23f1c40 <_ZN6tflite21GetMicroErrorReporterEv>
 23f08ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 23f08ce:	4601      	mov	r1, r0
 23f08d0:	46a4      	mov	ip, r4
 23f08d2:	4628      	mov	r0, r5
}
 23f08d4:	b003      	add	sp, #12
 23f08d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return parser(op, tflite::GetMicroErrorReporter(), allocator, builtin_data);
 23f08da:	4760      	bx	ip

023f08dc <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>:
    return data_ - ReadScalar<soffset_t>(data_);
 23f08dc:	6803      	ldr	r3, [r0, #0]
 23f08de:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 23f08e0:	881a      	ldrh	r2, [r3, #0]
 23f08e2:	2a0a      	cmp	r2, #10
 23f08e4:	d905      	bls.n	23f08f2 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x16>
 23f08e6:	895b      	ldrh	r3, [r3, #10]
    auto p = data_ + field_offset;
 23f08e8:	18c2      	adds	r2, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f08ea:	b113      	cbz	r3, 23f08f2 <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE+0x16>
      scalar_tag;

  static FLATBUFFERS_CONSTEXPR bool is_span_observable =
      scalar_tag::value && (FLATBUFFERS_LITTLEENDIAN || sizeof(T) == 1);

  uoffset_t size() const { return EndianScalar(length_); }
 23f08ec:	58c3      	ldr	r3, [r0, r3]
 23f08ee:	58d0      	ldr	r0, [r2, r3]
}

// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const SubGraph* subgraph) {
  if (subgraph->operators() != nullptr) {
    return subgraph->operators()->size();
 23f08f0:	4770      	bx	lr
  } else {
    return 0;
 23f08f2:	2000      	movs	r0, #0
 23f08f4:	4770      	bx	lr
	...

023f08f8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>:
  }
}
// TODO(b/192589496): Ops must always be there. Remove this function when fixed
uint32_t NumSubgraphOperators(const Model* model, int subgraph_idx) {
 23f08f8:	b510      	push	{r4, lr}
    return data_ - ReadScalar<soffset_t>(data_);
 23f08fa:	6803      	ldr	r3, [r0, #0]
 23f08fc:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 23f08fe:	881a      	ldrh	r2, [r3, #0]
 23f0900:	2a08      	cmp	r2, #8
 23f0902:	d917      	bls.n	23f0934 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x3c>
 23f0904:	891b      	ldrh	r3, [r3, #8]
    auto p = data_ + field_offset;
 23f0906:	18c4      	adds	r4, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0908:	b1a3      	cbz	r3, 23f0934 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x3c>
 23f090a:	58c2      	ldr	r2, [r0, r3]
 23f090c:	18a3      	adds	r3, r4, r2
  typedef typename IndirectHelper<T>::return_type return_type;
  typedef typename IndirectHelper<T>::mutable_return_type mutable_return_type;
  typedef return_type value_type;

  return_type Get(uoffset_t i) const {
    FLATBUFFERS_ASSERT(i < size());
 23f090e:	58a2      	ldr	r2, [r4, r2]
 23f0910:	4291      	cmp	r1, r2
 23f0912:	d305      	bcc.n	23f0920 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x28>
 23f0914:	21aa      	movs	r1, #170	; 0xaa
 23f0916:	4b09      	ldr	r3, [pc, #36]	; (23f093c <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x44>)
 23f0918:	4a09      	ldr	r2, [pc, #36]	; (23f0940 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x48>)
 23f091a:	480a      	ldr	r0, [pc, #40]	; (23f0944 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi+0x4c>)
 23f091c:	f003 ff70 	bl	23f4800 <__assert_func>
    return const_cast<mutable_return_type>(IndirectHelper<T>::Read(Data(), i));
  }

  // The raw data in little endian format. Use with care.
  const uint8_t *Data() const {
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 23f0920:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
 23f0922:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 23f0926:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
  return NumSubgraphOperators(subgraph);
}
 23f092a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return NumSubgraphOperators(subgraph);
 23f092e:	4418      	add	r0, r3
 23f0930:	f7ff bfd4 	b.w	23f08dc <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
  uoffset_t size() const { return EndianScalar(length_); }
 23f0934:	2300      	movs	r3, #0
 23f0936:	681b      	ldr	r3, [r3, #0]
 23f0938:	deff      	udf	#255	; 0xff
 23f093a:	bf00      	nop
 23f093c:	023fe813 	.word	0x023fe813
 23f0940:	023fe81e 	.word	0x023fe81e
 23f0944:	023fe918 	.word	0x023fe918

023f0948 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>:
  // layout as flatbuffers:Vector<int32_t>, so we can reinterpret_cast the
  // flatbuffer vector and avoid a copy and malloc.
  // TODO(b/188459715): audit this usage of const_cast.
  return const_cast<TfLiteIntArray*>(
      reinterpret_cast<const TfLiteIntArray*>(flatbuffer_array));
}
 23f0948:	4770      	bx	lr

023f094a <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIfEE>:
 23f094a:	4770      	bx	lr

023f094c <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 23f094c:	1e4b      	subs	r3, r1, #1
 23f094e:	4418      	add	r0, r3
 23f0950:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
 23f0954:	4348      	muls	r0, r1
 23f0956:	4770      	bx	lr

023f0958 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 23f0958:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
 23f095c:	4348      	muls	r0, r1
 23f095e:	4770      	bx	lr

023f0960 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 23f0960:	3801      	subs	r0, #1
 23f0962:	4408      	add	r0, r1
 23f0964:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_size;
}
 23f0968:	4348      	muls	r0, r1
 23f096a:	4770      	bx	lr

023f096c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
 23f096c:	3801      	subs	r0, #1
 23f096e:	2811      	cmp	r0, #17
 23f0970:	d816      	bhi.n	23f09a0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x34>
 23f0972:	e8df f000 	tbb	[pc, r0]
 23f0976:	0d0d      	.short	0x0d0d
 23f0978:	11150f11 	.word	0x11150f11
 23f097c:	09110f09 	.word	0x09110f09
 23f0980:	0d0f130f 	.word	0x0d0f130f
 23f0984:	11150d15 	.word	0x11150d15
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 23f0988:	2302      	movs	r3, #2
      *size = sizeof(int8_t);
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
 23f098a:	2000      	movs	r0, #0
      *size = sizeof(float);
 23f098c:	600b      	str	r3, [r1, #0]
      break;
 23f098e:	4770      	bx	lr
      *size = sizeof(float);
 23f0990:	2304      	movs	r3, #4
 23f0992:	e7fa      	b.n	23f098a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1e>
      *size = sizeof(double);
 23f0994:	2308      	movs	r3, #8
 23f0996:	e7f8      	b.n	23f098a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1e>
      *size = sizeof(uint8_t);
 23f0998:	2301      	movs	r3, #1
 23f099a:	e7f6      	b.n	23f098a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1e>
      *size = sizeof(double) * 2;
 23f099c:	2310      	movs	r3, #16
 23f099e:	e7f4      	b.n	23f098a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1e>
  return kTfLiteOk;
 23f09a0:	2001      	movs	r0, #1
}
 23f09a2:	4770      	bx	lr

023f09a4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size) {
 23f09a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return data_ - ReadScalar<soffset_t>(data_);
 23f09a6:	6803      	ldr	r3, [r0, #0]
 23f09a8:	460d      	mov	r5, r1
 23f09aa:	1ac3      	subs	r3, r0, r3
 23f09ac:	881f      	ldrh	r7, [r3, #0]
 23f09ae:	4614      	mov	r4, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 23f09b0:	2f04      	cmp	r7, #4
 23f09b2:	d926      	bls.n	23f0a02 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x5e>
 23f09b4:	8899      	ldrh	r1, [r3, #4]
    auto p = data_ + field_offset;
 23f09b6:	1842      	adds	r2, r0, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f09b8:	b169      	cbz	r1, 23f09d6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x32>
 23f09ba:	5841      	ldr	r1, [r0, r1]
  int element_count = 1;
 23f09bc:	2601      	movs	r6, #1
 23f09be:	f852 e001 	ldr.w	lr, [r2, r1]
 23f09c2:	440a      	add	r2, r1
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 23f09c4:	2100      	movs	r1, #0
 23f09c6:	4571      	cmp	r1, lr
 23f09c8:	d006      	beq.n	23f09d8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x34>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 23f09ca:	f852 cf04 	ldr.w	ip, [r2, #4]!
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 23f09ce:	3101      	adds	r1, #1
      element_count *= flatbuffer_tensor.shape()->Get(n);
 23f09d0:	fb0c f606 	mul.w	r6, ip, r6
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 23f09d4:	e7f7      	b.n	23f09c6 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x22>
  int element_count = 1;
 23f09d6:	2601      	movs	r6, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 23f09d8:	2f06      	cmp	r7, #6
 23f09da:	d913      	bls.n	23f0a04 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x60>
 23f09dc:	88db      	ldrh	r3, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f09de:	b19b      	cbz	r3, 23f0a08 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x64>
 23f09e0:	56c0      	ldrsb	r0, [r0, r3]
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(
 23f09e2:	f10d 0107 	add.w	r1, sp, #7
 23f09e6:	f7ff ff5c 	bl	23f08a2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>
 23f09ea:	b940      	cbnz	r0, 23f09fe <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x5a>
      ConvertTensorType(flatbuffer_tensor.type(), &tf_lite_type));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 23f09ec:	4621      	mov	r1, r4
 23f09ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
 23f09f2:	f7ff ffbb 	bl	23f096c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 23f09f6:	b910      	cbnz	r0, 23f09fe <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x5a>
  *bytes = element_count * (*type_size);
 23f09f8:	6823      	ldr	r3, [r4, #0]
 23f09fa:	435e      	muls	r6, r3
 23f09fc:	602e      	str	r6, [r5, #0]
  return kTfLiteOk;
}
 23f09fe:	b003      	add	sp, #12
 23f0a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  int element_count = 1;
 23f0a02:	2601      	movs	r6, #1
 23f0a04:	2000      	movs	r0, #0
 23f0a06:	e7ec      	b.n	23f09e2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x3e>
 23f0a08:	4618      	mov	r0, r3
 23f0a0a:	e7ea      	b.n	23f09e2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_+0x3e>

023f0a0c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
  TFLITE_DCHECK(out_bytes != nullptr);
 23f0a0c:	460a      	mov	r2, r1
                                        size_t* out_bytes) {
 23f0a0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  TFLITE_DCHECK(out_bytes != nullptr);
 23f0a10:	b909      	cbnz	r1, 23f0a16 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0xa>
 23f0a12:	f003 fecb 	bl	23f47ac <abort>

  int element_count = 1;
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 23f0a16:	6843      	ldr	r3, [r0, #4]
 23f0a18:	b153      	cbz	r3, 23f0a30 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 23f0a1a:	2100      	movs	r1, #0
  int element_count = 1;
 23f0a1c:	2401      	movs	r4, #1
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 23f0a1e:	f853 6b04 	ldr.w	r6, [r3], #4
 23f0a22:	428e      	cmp	r6, r1
 23f0a24:	dd05      	ble.n	23f0a32 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x26>
      element_count *= eval_tensor->dims->data[n];
 23f0a26:	f853 5b04 	ldr.w	r5, [r3], #4
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 23f0a2a:	3101      	adds	r1, #1
      element_count *= eval_tensor->dims->data[n];
 23f0a2c:	436c      	muls	r4, r5
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 23f0a2e:	e7f8      	b.n	23f0a22 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x16>
  int element_count = 1;
 23f0a30:	2401      	movs	r4, #1
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 23f0a32:	7a00      	ldrb	r0, [r0, #8]
 23f0a34:	a901      	add	r1, sp, #4
 23f0a36:	f7ff ff99 	bl	23f096c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 23f0a3a:	b910      	cbnz	r0, 23f0a42 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x36>
  *out_bytes = element_count * type_size;
 23f0a3c:	9b01      	ldr	r3, [sp, #4]
 23f0a3e:	4363      	muls	r3, r4
 23f0a40:	6013      	str	r3, [r2, #0]
  return kTfLiteOk;
}
 23f0a42:	b002      	add	sp, #8
 23f0a44:	bd70      	pop	{r4, r5, r6, pc}

023f0a46 <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 23f0a46:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
 23f0a48:	210e      	movs	r1, #14
 23f0a4a:	4604      	mov	r4, r0
 23f0a4c:	f7ff fb62 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f0a50:	b100      	cbz	r0, 23f0a54 <_ZNK6tflite6Tensor11is_variableEv+0xe>
 23f0a52:	5c20      	ldrb	r0, [r4, r0]
  }
 23f0a54:	3800      	subs	r0, #0
 23f0a56:	bf18      	it	ne
 23f0a58:	2001      	movne	r0, #1
 23f0a5a:	bd10      	pop	{r4, pc}

023f0a5c <_ZNK6tflite8SubGraph7tensorsEv>:
    VT_INPUTS = 6,
    VT_OUTPUTS = 8,
    VT_OPERATORS = 10,
    VT_NAME = 12
  };
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 23f0a5c:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
 23f0a5e:	2104      	movs	r1, #4
 23f0a60:	4604      	mov	r4, r0
 23f0a62:	f7ff fb57 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0a66:	b110      	cbz	r0, 23f0a6e <_ZNK6tflite8SubGraph7tensorsEv+0x12>
    auto p = data_ + field_offset;
 23f0a68:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0a6a:	5820      	ldr	r0, [r4, r0]
 23f0a6c:	4418      	add	r0, r3
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
  }
 23f0a6e:	bd10      	pop	{r4, pc}

023f0a70 <_ZNK6tflite5Model9subgraphsEv>:
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 23f0a70:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
 23f0a72:	2108      	movs	r1, #8
 23f0a74:	4604      	mov	r4, r0
 23f0a76:	f7ff fb4d 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0a7a:	b110      	cbz	r0, 23f0a82 <_ZNK6tflite5Model9subgraphsEv+0x12>
    auto p = data_ + field_offset;
 23f0a7c:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0a7e:	5820      	ldr	r0, [r4, r0]
 23f0a80:	4418      	add	r0, r3
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
  }
 23f0a82:	bd10      	pop	{r4, pc}

023f0a84 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>:

// Mark the given Allocation info as first created at the specified allocation
// scope count. Only the first creation must be recorded since the allocation
// scope count monotonically increases throughout the lifetime marking process.
void AllocationInfoBuilder::UpdateFirstCreated(AllocationInfo* current,
                                               int allocation_scope_count) {
 23f0a84:	b508      	push	{r3, lr}
  TFLITE_DCHECK(current->first_created <= allocation_scope_count);
 23f0a86:	688b      	ldr	r3, [r1, #8]
 23f0a88:	4293      	cmp	r3, r2
 23f0a8a:	dd01      	ble.n	23f0a90 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi+0xc>
 23f0a8c:	f003 fe8e 	bl	23f47ac <abort>
  if (current->first_created == kUninitializedLifetime) {
 23f0a90:	3301      	adds	r3, #1
    current->first_created = allocation_scope_count;
 23f0a92:	bf08      	it	eq
 23f0a94:	608a      	streq	r2, [r1, #8]
  }
}
 23f0a96:	bd08      	pop	{r3, pc}

023f0a98 <_ZN6tflite21AllocationInfoBuilder18FreeAllocationInfoEv>:
    return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus AllocationInfoBuilder::FreeAllocationInfo() {
 23f0a98:	b510      	push	{r4, lr}
 23f0a9a:	4604      	mov	r4, r0
  non_persistent_allocator_->DeallocateTemp(
 23f0a9c:	6840      	ldr	r0, [r0, #4]
 23f0a9e:	68a1      	ldr	r1, [r4, #8]
      reinterpret_cast<uint8_t*>(info_.allocation_info));
 23f0aa0:	6803      	ldr	r3, [r0, #0]
  non_persistent_allocator_->DeallocateTemp(
 23f0aa2:	68db      	ldr	r3, [r3, #12]
 23f0aa4:	4798      	blx	r3
  non_persistent_allocator_->DeallocateTemp(
 23f0aa6:	6860      	ldr	r0, [r4, #4]
 23f0aa8:	6921      	ldr	r1, [r4, #16]
      reinterpret_cast<uint8_t*>(info_.subgraph_offsets));
 23f0aaa:	6803      	ldr	r3, [r0, #0]
  non_persistent_allocator_->DeallocateTemp(
 23f0aac:	68db      	ldr	r3, [r3, #12]
 23f0aae:	4798      	blx	r3
  return kTfLiteOk;
}
 23f0ab0:	2000      	movs	r0, #0
 23f0ab2:	bd10      	pop	{r4, pc}

023f0ab4 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl>:
}

// Get offline tensors allocation plan. See
// micro/docs/memory_management.md for more info.
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const int32_t** offline_planner_offsets) {
 23f0ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f0ab8:	4606      	mov	r6, r0
 23f0aba:	460f      	mov	r7, r1
    auto field_offset = GetOptionalFieldOffset(field);
 23f0abc:	6800      	ldr	r0, [r0, #0]
 23f0abe:	2110      	movs	r1, #16
 23f0ac0:	f7ff fb28 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0ac4:	2800      	cmp	r0, #0
 23f0ac6:	d05e      	beq.n	23f0b86 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xd2>
  if (model_->metadata()) {
    for (size_t i = 0; i < model_->metadata()->size(); ++i) {
 23f0ac8:	2500      	movs	r5, #0
      auto metadata = model_->metadata()->Get(i);

      if (metadata->name()) {
        const size_t metadata_name_size = metadata->name()->size();

        if ((strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 23f0aca:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 23f0ba4 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xf0>
  }
  const flatbuffers::Vector<int32_t> *metadata_buffer() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_METADATA_BUFFER);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 23f0ace:	6834      	ldr	r4, [r6, #0]
    auto field_offset = GetOptionalFieldOffset(field);
 23f0ad0:	2110      	movs	r1, #16
 23f0ad2:	4620      	mov	r0, r4
 23f0ad4:	f7ff fb1e 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0ad8:	2800      	cmp	r0, #0
 23f0ada:	d059      	beq.n	23f0b90 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xdc>
 23f0adc:	5822      	ldr	r2, [r4, r0]
    auto p = data_ + field_offset;
 23f0ade:	1821      	adds	r1, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0ae0:	188b      	adds	r3, r1, r2
    for (size_t i = 0; i < model_->metadata()->size(); ++i) {
 23f0ae2:	588a      	ldr	r2, [r1, r2]
 23f0ae4:	42aa      	cmp	r2, r5
 23f0ae6:	d94e      	bls.n	23f0b86 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xd2>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 23f0ae8:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
 23f0aea:	eb03 0985 	add.w	r9, r3, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 23f0aee:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    auto field_offset = GetOptionalFieldOffset(field);
 23f0af2:	2104      	movs	r1, #4
 23f0af4:	4499      	add	r9, r3
 23f0af6:	4648      	mov	r0, r9
 23f0af8:	f7ff fb0c 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0afc:	2800      	cmp	r0, #0
 23f0afe:	d040      	beq.n	23f0b82 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xce>
 23f0b00:	f859 3000 	ldr.w	r3, [r9, r0]
    auto p = data_ + field_offset;
 23f0b04:	eb09 0200 	add.w	r2, r9, r0
  uoffset_t size() const { return EndianScalar(length_); }
 23f0b08:	f852 a003 	ldr.w	sl, [r2, r3]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0b0c:	18d0      	adds	r0, r2, r3
        if ((strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 23f0b0e:	4652      	mov	r2, sl
 23f0b10:	2a17      	cmp	r2, #23
 23f0b12:	bf28      	it	cs
 23f0b14:	2217      	movcs	r2, #23
 23f0b16:	4641      	mov	r1, r8
 23f0b18:	3004      	adds	r0, #4
 23f0b1a:	f008 f966 	bl	23f8dea <strncmp>
                     std::min(metadata_name_size,
                              strlen(kOfflineMemAllocMetadata))) == 0) &&
 23f0b1e:	bb80      	cbnz	r0, 23f0b82 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xce>
 23f0b20:	f1ba 0f17 	cmp.w	sl, #23
 23f0b24:	d12d      	bne.n	23f0b82 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xce>
    auto field_offset = GetOptionalFieldOffset(field);
 23f0b26:	210c      	movs	r1, #12
 23f0b28:	4620      	mov	r0, r4
 23f0b2a:	f7ff faf3 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0b2e:	b190      	cbz	r0, 23f0b56 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xa2>
    auto p = data_ + field_offset;
 23f0b30:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0b32:	5824      	ldr	r4, [r4, r0]
 23f0b34:	441c      	add	r4, r3
    auto field_offset = GetOptionalFieldOffset(field);
 23f0b36:	2106      	movs	r1, #6
 23f0b38:	4648      	mov	r0, r9
 23f0b3a:	f7ff faeb 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f0b3e:	b108      	cbz	r0, 23f0b44 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x90>
 23f0b40:	f859 0000 	ldr.w	r0, [r9, r0]
    FLATBUFFERS_ASSERT(i < size());
 23f0b44:	6823      	ldr	r3, [r4, #0]
 23f0b46:	4283      	cmp	r3, r0
 23f0b48:	d807      	bhi.n	23f0b5a <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xa6>
 23f0b4a:	21aa      	movs	r1, #170	; 0xaa
 23f0b4c:	4b12      	ldr	r3, [pc, #72]	; (23f0b98 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xe4>)
 23f0b4e:	4a13      	ldr	r2, [pc, #76]	; (23f0b9c <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xe8>)
 23f0b50:	4813      	ldr	r0, [pc, #76]	; (23f0ba0 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xec>)
 23f0b52:	f003 fe55 	bl	23f4800 <__assert_func>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0b56:	4604      	mov	r4, r0
 23f0b58:	e7ed      	b.n	23f0b36 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x82>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 23f0b5a:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
 23f0b5c:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 23f0b60:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
    auto field_offset = GetOptionalFieldOffset(field);
 23f0b64:	2104      	movs	r1, #4
 23f0b66:	441c      	add	r4, r3
 23f0b68:	4620      	mov	r0, r4
 23f0b6a:	f7ff fad3 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0b6e:	b188      	cbz	r0, 23f0b94 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xe0>
 23f0b70:	5822      	ldr	r2, [r4, r0]
    auto p = data_ + field_offset;
 23f0b72:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0b74:	4413      	add	r3, r2
              model_->buffers();
          auto* buffer = (*buffers)[metadata->buffer()];
          auto* array = buffer->data();
          const uint32_t* metadata_buffer =
              reinterpret_cast<const uint32_t*>(array->data());
          const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 23f0b76:	68da      	ldr	r2, [r3, #12]
          *offline_planner_offsets =
              reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 23f0b78:	3310      	adds	r3, #16
          *offline_planner_offsets =
 23f0b7a:	603b      	str	r3, [r7, #0]

          if (info_.tensor_count != nbr_tensors) {
 23f0b7c:	69b3      	ldr	r3, [r6, #24]
 23f0b7e:	429a      	cmp	r2, r3
 23f0b80:	d104      	bne.n	23f0b8c <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xd8>
    for (size_t i = 0; i < model_->metadata()->size(); ++i) {
 23f0b82:	3501      	adds	r5, #1
 23f0b84:	e7a3      	b.n	23f0ace <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0x1a>
          }
        }
      }
    }
  }
  return kTfLiteOk;
 23f0b86:	2000      	movs	r0, #0
}
 23f0b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return kTfLiteError;
 23f0b8c:	2001      	movs	r0, #1
 23f0b8e:	e7fb      	b.n	23f0b88 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xd4>
  uoffset_t size() const { return EndianScalar(length_); }
 23f0b90:	6803      	ldr	r3, [r0, #0]
 23f0b92:	deff      	udf	#255	; 0xff
          const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 23f0b94:	68c3      	ldr	r3, [r0, #12]
 23f0b96:	e7fc      	b.n	23f0b92 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl+0xde>
 23f0b98:	023fe813 	.word	0x023fe813
 23f0b9c:	023fe9ab 	.word	0x023fe9ab
 23f0ba0:	023fe918 	.word	0x023fe918
 23f0ba4:	023fee61 	.word	0x023fee61

023f0ba8 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 23f0ba8:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
 23f0baa:	6803      	ldr	r3, [r0, #0]
 23f0bac:	4299      	cmp	r1, r3
 23f0bae:	d305      	bcc.n	23f0bbc <_ZNK11flatbuffers6VectorIlE3GetEm+0x14>
 23f0bb0:	21aa      	movs	r1, #170	; 0xaa
 23f0bb2:	4b04      	ldr	r3, [pc, #16]	; (23f0bc4 <_ZNK11flatbuffers6VectorIlE3GetEm+0x1c>)
 23f0bb4:	4a04      	ldr	r2, [pc, #16]	; (23f0bc8 <_ZNK11flatbuffers6VectorIlE3GetEm+0x20>)
 23f0bb6:	4805      	ldr	r0, [pc, #20]	; (23f0bcc <_ZNK11flatbuffers6VectorIlE3GetEm+0x24>)
 23f0bb8:	f003 fe22 	bl	23f4800 <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 23f0bbc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  }
 23f0bc0:	6840      	ldr	r0, [r0, #4]
 23f0bc2:	bd08      	pop	{r3, pc}
 23f0bc4:	023fe813 	.word	0x023fe813
 23f0bc8:	023feaa1 	.word	0x023feaa1
 23f0bcc:	023fe918 	.word	0x023fe918

023f0bd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 23f0bd0:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
 23f0bd2:	6803      	ldr	r3, [r0, #0]
 23f0bd4:	4299      	cmp	r1, r3
 23f0bd6:	d305      	bcc.n	23f0be4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x14>
 23f0bd8:	21aa      	movs	r1, #170	; 0xaa
 23f0bda:	4b06      	ldr	r3, [pc, #24]	; (23f0bf4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x24>)
 23f0bdc:	4a06      	ldr	r2, [pc, #24]	; (23f0bf8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x28>)
 23f0bde:	4807      	ldr	r0, [pc, #28]	; (23f0bfc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x2c>)
 23f0be0:	f003 fe0e 	bl	23f4800 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 23f0be4:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
 23f0be6:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 23f0bea:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
 23f0bee:	4410      	add	r0, r2
 23f0bf0:	bd08      	pop	{r3, pc}
 23f0bf2:	bf00      	nop
 23f0bf4:	023fe813 	.word	0x023fe813
 23f0bf8:	023feb6f 	.word	0x023feb6f
 23f0bfc:	023fe918 	.word	0x023fe918

023f0c00 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 23f0c00:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
 23f0c02:	6803      	ldr	r3, [r0, #0]
 23f0c04:	4299      	cmp	r1, r3
 23f0c06:	d305      	bcc.n	23f0c14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x14>
 23f0c08:	21aa      	movs	r1, #170	; 0xaa
 23f0c0a:	4b06      	ldr	r3, [pc, #24]	; (23f0c24 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x24>)
 23f0c0c:	4a06      	ldr	r2, [pc, #24]	; (23f0c28 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x28>)
 23f0c0e:	4807      	ldr	r0, [pc, #28]	; (23f0c2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x2c>)
 23f0c10:	f003 fdf6 	bl	23f4800 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 23f0c14:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
 23f0c16:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 23f0c1a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
 23f0c1e:	4410      	add	r0, r2
 23f0c20:	bd08      	pop	{r3, pc}
 23f0c22:	bf00      	nop
 23f0c24:	023fe813 	.word	0x023fe813
 23f0c28:	023fec65 	.word	0x023fec65
 23f0c2c:	023fe918 	.word	0x023fe918

023f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 23f0c30:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
 23f0c32:	6803      	ldr	r3, [r0, #0]
 23f0c34:	4299      	cmp	r1, r3
 23f0c36:	d305      	bcc.n	23f0c44 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x14>
 23f0c38:	21aa      	movs	r1, #170	; 0xaa
 23f0c3a:	4b06      	ldr	r3, [pc, #24]	; (23f0c54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x24>)
 23f0c3c:	4a06      	ldr	r2, [pc, #24]	; (23f0c58 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x28>)
 23f0c3e:	4807      	ldr	r0, [pc, #28]	; (23f0c5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x2c>)
 23f0c40:	f003 fdde 	bl	23f4800 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 23f0c44:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
 23f0c46:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 23f0c4a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
 23f0c4e:	4410      	add	r0, r2
 23f0c50:	bd08      	pop	{r3, pc}
 23f0c52:	bf00      	nop
 23f0c54:	023fe813 	.word	0x023fe813
 23f0c58:	023fe81e 	.word	0x023fe81e
 23f0c5c:	023fe918 	.word	0x023fe918

023f0c60 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi>:
    int scratch_buffer_request_count) {
 23f0c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f0c62:	4604      	mov	r4, r0
  size_t subgraph_offsets_length = model_->subgraphs()->size() * sizeof(size_t);
 23f0c64:	6800      	ldr	r0, [r0, #0]
    int scratch_buffer_request_count) {
 23f0c66:	460f      	mov	r7, r1
  size_t subgraph_offsets_length = model_->subgraphs()->size() * sizeof(size_t);
 23f0c68:	f7ff ff02 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
      reinterpret_cast<size_t*>(non_persistent_allocator_->AllocateTemp(
 23f0c6c:	6863      	ldr	r3, [r4, #4]
  size_t subgraph_offsets_length = model_->subgraphs()->size() * sizeof(size_t);
 23f0c6e:	6801      	ldr	r1, [r0, #0]
          subgraph_offsets_length, alignof(size_t)));
 23f0c70:	681a      	ldr	r2, [r3, #0]
      reinterpret_cast<size_t*>(non_persistent_allocator_->AllocateTemp(
 23f0c72:	4618      	mov	r0, r3
 23f0c74:	6895      	ldr	r5, [r2, #8]
 23f0c76:	0089      	lsls	r1, r1, #2
 23f0c78:	2204      	movs	r2, #4
 23f0c7a:	47a8      	blx	r5
  info_.subgraph_offsets =
 23f0c7c:	6120      	str	r0, [r4, #16]
  if (info_.subgraph_offsets == nullptr) {
 23f0c7e:	b338      	cbz	r0, 23f0cd0 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x70>
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 23f0c80:	2600      	movs	r6, #0
  size_t tensor_count = 0;
 23f0c82:	4635      	mov	r5, r6
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 23f0c84:	6820      	ldr	r0, [r4, #0]
 23f0c86:	f7ff fef3 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f0c8a:	6803      	ldr	r3, [r0, #0]
 23f0c8c:	42b3      	cmp	r3, r6
 23f0c8e:	d90e      	bls.n	23f0cae <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x4e>
    info_.subgraph_offsets[subgraph_idx] = tensor_count;
 23f0c90:	6923      	ldr	r3, [r4, #16]
 23f0c92:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
    tensor_count += model_->subgraphs()->Get(subgraph_idx)->tensors()->size();
 23f0c96:	6820      	ldr	r0, [r4, #0]
 23f0c98:	f7ff feea 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f0c9c:	4631      	mov	r1, r6
 23f0c9e:	f7ff ffc7 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 23f0ca2:	f7ff fedb 	bl	23f0a5c <_ZNK6tflite8SubGraph7tensorsEv>
 23f0ca6:	6803      	ldr	r3, [r0, #0]
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 23f0ca8:	3601      	adds	r6, #1
    tensor_count += model_->subgraphs()->Get(subgraph_idx)->tensors()->size();
 23f0caa:	441d      	add	r5, r3
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 23f0cac:	e7ea      	b.n	23f0c84 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x24>
      non_persistent_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 23f0cae:	2118      	movs	r1, #24
  info_.scratch_offset = tensor_count;
 23f0cb0:	e9c4 5505 	strd	r5, r5, [r4, #20]
      non_persistent_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 23f0cb4:	6860      	ldr	r0, [r4, #4]
  info_.allocation_info_count = tensor_count + scratch_buffer_request_count;
 23f0cb6:	443d      	add	r5, r7
 23f0cb8:	60e5      	str	r5, [r4, #12]
  info_.scratch_buffer_count = scratch_buffer_request_count;
 23f0cba:	61e7      	str	r7, [r4, #28]
      non_persistent_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 23f0cbc:	6803      	ldr	r3, [r0, #0]
 23f0cbe:	2204      	movs	r2, #4
 23f0cc0:	4369      	muls	r1, r5
 23f0cc2:	689b      	ldr	r3, [r3, #8]
 23f0cc4:	4798      	blx	r3
  info_.allocation_info = reinterpret_cast<AllocationInfo*>(
 23f0cc6:	60a0      	str	r0, [r4, #8]
    return kTfLiteError;
 23f0cc8:	fab0 f080 	clz	r0, r0
 23f0ccc:	0940      	lsrs	r0, r0, #5
}
 23f0cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return kTfLiteError;
 23f0cd0:	2001      	movs	r0, #1
 23f0cd2:	e7fc      	b.n	23f0cce <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi+0x6e>

023f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 23f0cd4:	b510      	push	{r4, lr}
 23f0cd6:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
 23f0cd8:	f7ff fa1c 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0cdc:	b110      	cbz	r0, 23f0ce4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x10>
    auto p = data_ + field_offset;
 23f0cde:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0ce0:	5820      	ldr	r0, [r4, r0]
 23f0ce2:	4418      	add	r0, r3
                        : nullptr;
  }
 23f0ce4:	bd10      	pop	{r4, pc}

023f0ce6 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor>:
    const SubGraph* subgraph, TfLiteEvalTensor* eval_tensors) {
 23f0ce6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 23f0cea:	4608      	mov	r0, r1
    const SubGraph* subgraph, TfLiteEvalTensor* eval_tensors) {
 23f0cec:	460c      	mov	r4, r1
 23f0cee:	4617      	mov	r7, r2
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 23f0cf0:	f7ff fdf4 	bl	23f08dc <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
  for (uint32_t i = 0; i < operators_size; i++) {
 23f0cf4:	2500      	movs	r5, #0
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 23f0cf6:	4606      	mov	r6, r0
      size_t tensor_size = -1;
 23f0cf8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
  for (uint32_t i = 0; i < operators_size; i++) {
 23f0cfc:	42b5      	cmp	r5, r6
 23f0cfe:	d02d      	beq.n	23f0d5c <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x76>
    auto field_offset = GetOptionalFieldOffset(field);
 23f0d00:	210a      	movs	r1, #10
 23f0d02:	4620      	mov	r0, r4
 23f0d04:	f7ff fa06 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0d08:	b110      	cbz	r0, 23f0d10 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x2a>
    auto p = data_ + field_offset;
 23f0d0a:	1822      	adds	r2, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0d0c:	5820      	ldr	r0, [r4, r0]
 23f0d0e:	4410      	add	r0, r2
    const auto op = subgraph->operators()->Get(i);
 23f0d10:	4629      	mov	r1, r5
 23f0d12:	f7ff ff75 	bl	23f0c00 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
    for (size_t n = 0;
 23f0d16:	f04f 0a00 	mov.w	sl, #0
    const auto op = subgraph->operators()->Get(i);
 23f0d1a:	4681      	mov	r9, r0
  template<typename P> P GetPointer(voffset_t field) const {
    return const_cast<Table *>(this)->GetPointer<P>(field);
 23f0d1c:	2114      	movs	r1, #20
 23f0d1e:	4648      	mov	r0, r9
 23f0d20:	f7ff ffd8 	bl	23f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
         op->intermediates() != nullptr && n < op->intermediates()->size();
 23f0d24:	b188      	cbz	r0, 23f0d4a <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x64>
 23f0d26:	6803      	ldr	r3, [r0, #0]
 23f0d28:	459a      	cmp	sl, r3
 23f0d2a:	d20e      	bcs.n	23f0d4a <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x64>
      const int tensor_index = op->intermediates()->Get(n);
 23f0d2c:	4651      	mov	r1, sl
 23f0d2e:	f7ff ff3b 	bl	23f0ba8 <_ZNK11flatbuffers6VectorIlE3GetEm>
      TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 23f0d32:	230c      	movs	r3, #12
 23f0d34:	a901      	add	r1, sp, #4
 23f0d36:	fb03 7000 	mla	r0, r3, r0, r7
      size_t tensor_size = -1;
 23f0d3a:	f8cd 8004 	str.w	r8, [sp, #4]
      TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 23f0d3e:	f7ff fe65 	bl	23f0a0c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 23f0d42:	b120      	cbz	r0, 23f0d4e <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x68>
}
 23f0d44:	b002      	add	sp, #8
 23f0d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (uint32_t i = 0; i < operators_size; i++) {
 23f0d4a:	3501      	adds	r5, #1
 23f0d4c:	e7d6      	b.n	23f0cfc <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x16>
      if (tensor_size != 0) {
 23f0d4e:	9b01      	ldr	r3, [sp, #4]
 23f0d50:	b913      	cbnz	r3, 23f0d58 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x72>
    for (size_t n = 0;
 23f0d52:	f10a 0a01 	add.w	sl, sl, #1
 23f0d56:	e7e1      	b.n	23f0d1c <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x36>
        return kTfLiteError;
 23f0d58:	2001      	movs	r0, #1
 23f0d5a:	e7f3      	b.n	23f0d44 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x5e>
  return kTfLiteOk;
 23f0d5c:	2000      	movs	r0, #0
 23f0d5e:	e7f1      	b.n	23f0d44 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor+0x5e>

023f0d60 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE>:
    const int32_t* offline_offsets, SubgraphAllocations* allocations) {
 23f0d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f0d64:	4605      	mov	r5, r0
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 23f0d66:	2700      	movs	r7, #0
      current->first_created = kUninitializedLifetime;
 23f0d68:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    const int32_t* offline_offsets, SubgraphAllocations* allocations) {
 23f0d6c:	b085      	sub	sp, #20
    TfLiteEvalTensor* eval_tensors = allocations[subgraph_idx].tensors;
 23f0d6e:	1d13      	adds	r3, r2, #4
  AllocationInfo* allocation_info = info_.allocation_info;
 23f0d70:	6884      	ldr	r4, [r0, #8]
    const int32_t* offline_offsets, SubgraphAllocations* allocations) {
 23f0d72:	9101      	str	r1, [sp, #4]
    TfLiteEvalTensor* eval_tensors = allocations[subgraph_idx].tensors;
 23f0d74:	9302      	str	r3, [sp, #8]
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 23f0d76:	6828      	ldr	r0, [r5, #0]
 23f0d78:	f7ff fe7a 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f0d7c:	6803      	ldr	r3, [r0, #0]
 23f0d7e:	429f      	cmp	r7, r3
 23f0d80:	d25c      	bcs.n	23f0e3c <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xdc>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 23f0d82:	4639      	mov	r1, r7
 23f0d84:	f7ff ff54 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    TfLiteEvalTensor* eval_tensors = allocations[subgraph_idx].tensors;
 23f0d88:	9b02      	ldr	r3, [sp, #8]
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 23f0d8a:	4681      	mov	r9, r0
    TfLiteEvalTensor* eval_tensors = allocations[subgraph_idx].tensors;
 23f0d8c:	f853 6037 	ldr.w	r6, [r3, r7, lsl #3]
        &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 23f0d90:	692b      	ldr	r3, [r5, #16]
    TF_LITE_ENSURE_STATUS(ValidateSubgraph(subgraph, eval_tensors));
 23f0d92:	4601      	mov	r1, r0
 23f0d94:	4632      	mov	r2, r6
 23f0d96:	4628      	mov	r0, r5
        &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 23f0d98:	f853 a027 	ldr.w	sl, [r3, r7, lsl #2]
    TF_LITE_ENSURE_STATUS(ValidateSubgraph(subgraph, eval_tensors));
 23f0d9c:	f7ff ffa3 	bl	23f0ce6 <_ZN6tflite21AllocationInfoBuilder16ValidateSubgraphEPKNS_8SubGraphEP16TfLiteEvalTensor>
 23f0da0:	2800      	cmp	r0, #0
 23f0da2:	d160      	bne.n	23f0e66 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x106>
 23f0da4:	2318      	movs	r3, #24
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 23f0da6:	4680      	mov	r8, r0
 23f0da8:	fb03 4a0a 	mla	sl, r3, sl, r4
 23f0dac:	4648      	mov	r0, r9
 23f0dae:	f7ff fe55 	bl	23f0a5c <_ZNK6tflite8SubGraph7tensorsEv>
 23f0db2:	6802      	ldr	r2, [r0, #0]
 23f0db4:	4590      	cmp	r8, r2
 23f0db6:	d23f      	bcs.n	23f0e38 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xd8>
      TF_LITE_ENSURE_STATUS(
 23f0db8:	4651      	mov	r1, sl
 23f0dba:	4630      	mov	r0, r6
      current->output_ptr = &(eval_tensors[i].data.data);
 23f0dbc:	f8ca 6004 	str.w	r6, [sl, #4]
      TF_LITE_ENSURE_STATUS(
 23f0dc0:	f7ff fe24 	bl	23f0a0c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 23f0dc4:	2800      	cmp	r0, #0
 23f0dc6:	d14e      	bne.n	23f0e66 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x106>
      current->last_used = kUninitializedLifetime;
 23f0dc8:	e9ca bb02 	strd	fp, fp, [sl, #8]
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 23f0dcc:	6832      	ldr	r2, [r6, #0]
 23f0dce:	b97a      	cbnz	r2, 23f0df0 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x90>
 23f0dd0:	4648      	mov	r0, r9
 23f0dd2:	9203      	str	r2, [sp, #12]
 23f0dd4:	f7ff fe42 	bl	23f0a5c <_ZNK6tflite8SubGraph7tensorsEv>
 23f0dd8:	4641      	mov	r1, r8
 23f0dda:	f7ff fef9 	bl	23f0bd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 23f0dde:	f7ff fe32 	bl	23f0a46 <_ZNK6tflite6Tensor11is_variableEv>
          (eval_tensors[i].data.data == nullptr) &&
 23f0de2:	9a03      	ldr	r2, [sp, #12]
 23f0de4:	bb18      	cbnz	r0, 23f0e2e <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xce>
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 23f0de6:	f8da 0000 	ldr.w	r0, [sl]
 23f0dea:	3800      	subs	r0, #0
 23f0dec:	bf18      	it	ne
 23f0dee:	2001      	movne	r0, #1
      if (offline_offsets) {
 23f0df0:	9b01      	ldr	r3, [sp, #4]
      current->needs_allocating =
 23f0df2:	f88a 0014 	strb.w	r0, [sl, #20]
      if (offline_offsets) {
 23f0df6:	b1e3      	cbz	r3, 23f0e32 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xd2>
        current->offline_offset = offline_offsets[i];
 23f0df8:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
        if (subgraph->tensors()->Get(i)->is_variable() &&
 23f0dfc:	4648      	mov	r0, r9
        current->offline_offset = offline_offsets[i];
 23f0dfe:	f8ca 2010 	str.w	r2, [sl, #16]
 23f0e02:	9203      	str	r2, [sp, #12]
        if (subgraph->tensors()->Get(i)->is_variable() &&
 23f0e04:	f7ff fe2a 	bl	23f0a5c <_ZNK6tflite8SubGraph7tensorsEv>
 23f0e08:	4641      	mov	r1, r8
 23f0e0a:	f7ff fee1 	bl	23f0bd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 23f0e0e:	f7ff fe1a 	bl	23f0a46 <_ZNK6tflite6Tensor11is_variableEv>
 23f0e12:	b130      	cbz	r0, 23f0e22 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xc2>
 23f0e14:	9a03      	ldr	r2, [sp, #12]
 23f0e16:	3201      	adds	r2, #1
 23f0e18:	d003      	beq.n	23f0e22 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xc2>
          current->needs_allocating = true;
 23f0e1a:	f04f 0301 	mov.w	r3, #1
 23f0e1e:	f88a 3014 	strb.w	r3, [sl, #20]
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 23f0e22:	f108 0801 	add.w	r8, r8, #1
 23f0e26:	f10a 0a18 	add.w	sl, sl, #24
 23f0e2a:	360c      	adds	r6, #12
 23f0e2c:	e7be      	b.n	23f0dac <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x4c>
          (!subgraph->tensors()->Get(i)->is_variable()) &&
 23f0e2e:	4610      	mov	r0, r2
 23f0e30:	e7de      	b.n	23f0df0 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x90>
        current->offline_offset = kOnlinePlannedBuffer;
 23f0e32:	f8ca b010 	str.w	fp, [sl, #16]
 23f0e36:	e7f4      	b.n	23f0e22 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xc2>
  for (size_t subgraph_idx = 0; subgraph_idx < model_->subgraphs()->size();
 23f0e38:	3701      	adds	r7, #1
 23f0e3a:	e79c      	b.n	23f0d76 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x16>
  for (size_t i = 0; i < info_.scratch_buffer_count; i++) {
 23f0e3c:	2218      	movs	r2, #24
 23f0e3e:	696b      	ldr	r3, [r5, #20]
    current->needs_allocating = true;
 23f0e40:	2101      	movs	r1, #1
 23f0e42:	fb02 4403 	mla	r4, r2, r3, r4
  for (size_t i = 0; i < info_.scratch_buffer_count; i++) {
 23f0e46:	2300      	movs	r3, #0
    current->first_created = kUninitializedLifetime;
 23f0e48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  for (size_t i = 0; i < info_.scratch_buffer_count; i++) {
 23f0e4c:	69e8      	ldr	r0, [r5, #28]
 23f0e4e:	3418      	adds	r4, #24
 23f0e50:	4298      	cmp	r0, r3
 23f0e52:	d907      	bls.n	23f0e64 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0x104>
    current->last_used = kUninitializedLifetime;
 23f0e54:	e944 2204 	strd	r2, r2, [r4, #-16]
    current->needs_allocating = true;
 23f0e58:	f804 1c04 	strb.w	r1, [r4, #-4]
    current->offline_offset = kOnlinePlannedBuffer;
 23f0e5c:	f844 2c08 	str.w	r2, [r4, #-8]
  for (size_t i = 0; i < info_.scratch_buffer_count; i++) {
 23f0e60:	3301      	adds	r3, #1
 23f0e62:	e7f3      	b.n	23f0e4c <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE+0xec>
  return kTfLiteOk;
 23f0e64:	2000      	movs	r0, #0
}
 23f0e66:	b005      	add	sp, #20
 23f0e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f0e6c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>:
    SubgraphAllocations* allocations) {
 23f0e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f0e70:	ed2d 8b02 	vpush	{d8}
 23f0e74:	4689      	mov	r9, r1
 23f0e76:	4604      	mov	r4, r0
 23f0e78:	b089      	sub	sp, #36	; 0x24
  const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 23f0e7a:	6800      	ldr	r0, [r0, #0]
    SubgraphAllocations* allocations) {
 23f0e7c:	e9cd 2303 	strd	r2, r3, [sp, #12]
  const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 23f0e80:	f7ff fdf6 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f0e84:	4649      	mov	r1, r9
 23f0e86:	f7ff fed3 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
      &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 23f0e8a:	f04f 0818 	mov.w	r8, #24
  AllocationInfo* allocation_info = info_.allocation_info;
 23f0e8e:	68a3      	ldr	r3, [r4, #8]
  const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 23f0e90:	4606      	mov	r6, r0
  AllocationInfo* allocation_info = info_.allocation_info;
 23f0e92:	9302      	str	r3, [sp, #8]
      &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 23f0e94:	6923      	ldr	r3, [r4, #16]
  for (size_t i = 0;
 23f0e96:	f04f 0b00 	mov.w	fp, #0
      &allocation_info[info_.subgraph_offsets[subgraph_idx]];
 23f0e9a:	f853 7029 	ldr.w	r7, [r3, r9, lsl #2]
  AllocationInfo* subgraph_allocation_info =
 23f0e9e:	9b02      	ldr	r3, [sp, #8]
 23f0ea0:	fb08 3707 	mla	r7, r8, r7, r3
  uint32_t operators_size = NumSubgraphOperators(subgraph);
 23f0ea4:	f7ff fd1a 	bl	23f08dc <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
 23f0ea8:	9005      	str	r0, [sp, #20]
 23f0eaa:	2106      	movs	r1, #6
 23f0eac:	4630      	mov	r0, r6
 23f0eae:	f7ff ff11 	bl	23f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
       subgraph->inputs() != nullptr && i < subgraph->inputs()->size(); ++i) {
 23f0eb2:	4605      	mov	r5, r0
 23f0eb4:	b1b8      	cbz	r0, 23f0ee6 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x7a>
 23f0eb6:	6803      	ldr	r3, [r0, #0]
 23f0eb8:	459b      	cmp	fp, r3
 23f0eba:	d213      	bcs.n	23f0ee4 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x78>
    const int tensor_index = subgraph->inputs()->Get(i);
 23f0ebc:	4659      	mov	r1, fp
 23f0ebe:	f7ff fe73 	bl	23f0ba8 <_ZNK11flatbuffers6VectorIlE3GetEm>
    AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 23f0ec2:	fb08 7500 	mla	r5, r8, r0, r7
    UpdateFirstCreated(current, allocation_scope_count_);
 23f0ec6:	6a22      	ldr	r2, [r4, #32]
 23f0ec8:	4629      	mov	r1, r5
 23f0eca:	4620      	mov	r0, r4
 23f0ecc:	f7ff fdda 	bl	23f0a84 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
    UpdateLastUsed(current, allocation_scope_count_);
 23f0ed0:	6a23      	ldr	r3, [r4, #32]
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 23f0ed2:	68ea      	ldr	r2, [r5, #12]
 23f0ed4:	4293      	cmp	r3, r2
 23f0ed6:	da01      	bge.n	23f0edc <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x70>
 23f0ed8:	f003 fc68 	bl	23f47ac <abort>
  current->last_used = allocation_scope_count;
 23f0edc:	60eb      	str	r3, [r5, #12]
  for (size_t i = 0;
 23f0ede:	f10b 0b01 	add.w	fp, fp, #1
 23f0ee2:	e7e2      	b.n	23f0eaa <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x3e>
 23f0ee4:	2500      	movs	r5, #0
      AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 23f0ee6:	f04f 0b18 	mov.w	fp, #24
  for (uint32_t i = 0; i < operators_size; i++) {
 23f0eea:	9b05      	ldr	r3, [sp, #20]
 23f0eec:	429d      	cmp	r5, r3
 23f0eee:	f000 8093 	beq.w	23f1018 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1ac>
    allocation_scope_count_++;
 23f0ef2:	6a23      	ldr	r3, [r4, #32]
    auto field_offset = GetOptionalFieldOffset(field);
 23f0ef4:	210a      	movs	r1, #10
 23f0ef6:	3301      	adds	r3, #1
 23f0ef8:	4630      	mov	r0, r6
 23f0efa:	6223      	str	r3, [r4, #32]
 23f0efc:	f7ff f90a 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0f00:	b110      	cbz	r0, 23f0f08 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x9c>
    auto p = data_ + field_offset;
 23f0f02:	1833      	adds	r3, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f0f04:	5830      	ldr	r0, [r6, r0]
 23f0f06:	4418      	add	r0, r3
    const auto* op = subgraph->operators()->Get(i);
 23f0f08:	4629      	mov	r1, r5
 23f0f0a:	f7ff fe79 	bl	23f0c00 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 23f0f0e:	f04f 0a00 	mov.w	sl, #0
    const auto* op = subgraph->operators()->Get(i);
 23f0f12:	4680      	mov	r8, r0
    return const_cast<Table *>(this)->GetPointer<P>(field);
 23f0f14:	2108      	movs	r1, #8
 23f0f16:	4640      	mov	r0, r8
 23f0f18:	f7ff fedc 	bl	23f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 23f0f1c:	bb20      	cbnz	r0, 23f0f68 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xfc>
    int start_allocation_scope_count = allocation_scope_count_;
 23f0f1e:	6a23      	ldr	r3, [r4, #32]
    MarkSubgraphLifetimesIfNecessary(op, scratch_buffer_requests,
 23f0f20:	4641      	mov	r1, r8
    int start_allocation_scope_count = allocation_scope_count_;
 23f0f22:	ee08 3a10 	vmov	s16, r3
    MarkSubgraphLifetimesIfNecessary(op, scratch_buffer_requests,
 23f0f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23f0f28:	4620      	mov	r0, r4
 23f0f2a:	9300      	str	r3, [sp, #0]
 23f0f2c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 23f0f30:	f000 f898 	bl	23f1064 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
    for (size_t n = 0; op->inputs() != nullptr && n < op->inputs()->size();
 23f0f34:	f04f 0a00 	mov.w	sl, #0
 23f0f38:	2106      	movs	r1, #6
 23f0f3a:	4640      	mov	r0, r8
 23f0f3c:	f7ff feca 	bl	23f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 23f0f40:	4603      	mov	r3, r0
 23f0f42:	b308      	cbz	r0, 23f0f88 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x11c>
 23f0f44:	6803      	ldr	r3, [r0, #0]
 23f0f46:	459a      	cmp	sl, r3
 23f0f48:	d21d      	bcs.n	23f0f86 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x11a>
      const int tensor_index = op->inputs()->Get(n);
 23f0f4a:	4651      	mov	r1, sl
 23f0f4c:	f7ff fe2c 	bl	23f0ba8 <_ZNK11flatbuffers6VectorIlE3GetEm>
      if (tensor_index >= 0) {
 23f0f50:	2800      	cmp	r0, #0
 23f0f52:	db06      	blt.n	23f0f62 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xf6>
        AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 23f0f54:	fb0b 7000 	mla	r0, fp, r0, r7
        UpdateLastUsed(current, allocation_scope_count_);
 23f0f58:	6a23      	ldr	r3, [r4, #32]
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 23f0f5a:	68c1      	ldr	r1, [r0, #12]
 23f0f5c:	428b      	cmp	r3, r1
 23f0f5e:	dbbb      	blt.n	23f0ed8 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x6c>
  current->last_used = allocation_scope_count;
 23f0f60:	60c3      	str	r3, [r0, #12]
    for (size_t n = 0; op->inputs() != nullptr && n < op->inputs()->size();
 23f0f62:	f10a 0a01 	add.w	sl, sl, #1
 23f0f66:	e7e7      	b.n	23f0f38 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xcc>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 23f0f68:	6802      	ldr	r2, [r0, #0]
 23f0f6a:	4592      	cmp	sl, r2
 23f0f6c:	d2d7      	bcs.n	23f0f1e <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xb2>
      const int tensor_index = op->outputs()->Get(n);
 23f0f6e:	4651      	mov	r1, sl
 23f0f70:	f7ff fe1a 	bl	23f0ba8 <_ZNK11flatbuffers6VectorIlE3GetEm>
      UpdateFirstCreated(current, allocation_scope_count_);
 23f0f74:	6a22      	ldr	r2, [r4, #32]
 23f0f76:	fb0b 7100 	mla	r1, fp, r0, r7
 23f0f7a:	4620      	mov	r0, r4
 23f0f7c:	f7ff fd82 	bl	23f0a84 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 23f0f80:	f10a 0a01 	add.w	sl, sl, #1
 23f0f84:	e7c6      	b.n	23f0f14 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xa8>
 23f0f86:	2300      	movs	r3, #0
 23f0f88:	2108      	movs	r1, #8
 23f0f8a:	4640      	mov	r0, r8
 23f0f8c:	9306      	str	r3, [sp, #24]
 23f0f8e:	f7ff fea1 	bl	23f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 23f0f92:	b118      	cbz	r0, 23f0f9c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x130>
 23f0f94:	6802      	ldr	r2, [r0, #0]
 23f0f96:	9b06      	ldr	r3, [sp, #24]
 23f0f98:	4293      	cmp	r3, r2
 23f0f9a:	d32c      	bcc.n	23f0ff6 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x18a>
    for (size_t scratch_idx = 0; scratch_idx < info_.scratch_buffer_count;
 23f0f9c:	9b02      	ldr	r3, [sp, #8]
 23f0f9e:	6961      	ldr	r1, [r4, #20]
 23f0fa0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 23f0fa4:	fb0b 3101 	mla	r1, fp, r1, r3
 23f0fa8:	2300      	movs	r3, #0
 23f0faa:	69e2      	ldr	r2, [r4, #28]
 23f0fac:	429a      	cmp	r2, r3
 23f0fae:	d931      	bls.n	23f1014 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1a8>
      if (request.node_idx == static_cast<int>(i) &&
 23f0fb0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 23f0fb4:	42aa      	cmp	r2, r5
 23f0fb6:	d119      	bne.n	23f0fec <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x180>
 23f0fb8:	f8d8 2008 	ldr.w	r2, [r8, #8]
 23f0fbc:	4591      	cmp	r9, r2
 23f0fbe:	d115      	bne.n	23f0fec <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x180>
        current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 23f0fc0:	9804      	ldr	r0, [sp, #16]
      internal::ScratchBufferRequest request =
 23f0fc2:	f8d8 2000 	ldr.w	r2, [r8]
        current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 23f0fc6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
        current->bytes = request.bytes;
 23f0fca:	e9c1 2000 	strd	r2, r0, [r1]
        UpdateFirstCreated(current, start_allocation_scope_count);
 23f0fce:	ee18 2a10 	vmov	r2, s16
 23f0fd2:	4620      	mov	r0, r4
 23f0fd4:	9106      	str	r1, [sp, #24]
        current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 23f0fd6:	9307      	str	r3, [sp, #28]
        UpdateFirstCreated(current, start_allocation_scope_count);
 23f0fd8:	f7ff fd54 	bl	23f0a84 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 23f0fdc:	9906      	ldr	r1, [sp, #24]
        UpdateLastUsed(current, allocation_scope_count_);
 23f0fde:	6a22      	ldr	r2, [r4, #32]
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 23f0fe0:	68c8      	ldr	r0, [r1, #12]
 23f0fe2:	4282      	cmp	r2, r0
 23f0fe4:	f6ff af78 	blt.w	23f0ed8 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x6c>
  current->last_used = allocation_scope_count;
 23f0fe8:	9b07      	ldr	r3, [sp, #28]
 23f0fea:	60ca      	str	r2, [r1, #12]
    for (size_t scratch_idx = 0; scratch_idx < info_.scratch_buffer_count;
 23f0fec:	3301      	adds	r3, #1
 23f0fee:	3118      	adds	r1, #24
 23f0ff0:	f108 080c 	add.w	r8, r8, #12
 23f0ff4:	e7d9      	b.n	23f0faa <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x13e>
      const int tensor_index = op->outputs()->Get(n);
 23f0ff6:	4619      	mov	r1, r3
 23f0ff8:	9306      	str	r3, [sp, #24]
 23f0ffa:	f7ff fdd5 	bl	23f0ba8 <_ZNK11flatbuffers6VectorIlE3GetEm>
      AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 23f0ffe:	fb0b 7000 	mla	r0, fp, r0, r7
      UpdateLastUsed(current, allocation_scope_count_);
 23f1002:	6a22      	ldr	r2, [r4, #32]
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 23f1004:	68c1      	ldr	r1, [r0, #12]
 23f1006:	428a      	cmp	r2, r1
 23f1008:	f6ff af66 	blt.w	23f0ed8 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x6c>
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 23f100c:	9b06      	ldr	r3, [sp, #24]
  current->last_used = allocation_scope_count;
 23f100e:	60c2      	str	r2, [r0, #12]
    for (size_t n = 0; op->outputs() != nullptr && n < op->outputs()->size();
 23f1010:	3301      	adds	r3, #1
 23f1012:	e7b9      	b.n	23f0f88 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x11c>
  for (uint32_t i = 0; i < operators_size; i++) {
 23f1014:	3501      	adds	r5, #1
 23f1016:	e768      	b.n	23f0eea <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x7e>
  for (size_t i = 0;
 23f1018:	f04f 0800 	mov.w	r8, #0
    AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 23f101c:	f04f 0918 	mov.w	r9, #24
 23f1020:	2108      	movs	r1, #8
 23f1022:	4630      	mov	r0, r6
 23f1024:	f7ff fe56 	bl	23f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
       subgraph->outputs() != nullptr && i < subgraph->outputs()->size(); ++i) {
 23f1028:	b1a8      	cbz	r0, 23f1056 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1ea>
 23f102a:	6803      	ldr	r3, [r0, #0]
 23f102c:	4598      	cmp	r8, r3
 23f102e:	d212      	bcs.n	23f1056 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1ea>
    const int tensor_index = subgraph->outputs()->Get(i);
 23f1030:	4641      	mov	r1, r8
 23f1032:	f7ff fdb9 	bl	23f0ba8 <_ZNK11flatbuffers6VectorIlE3GetEm>
    AllocationInfo* current = &subgraph_allocation_info[tensor_index];
 23f1036:	fb09 7500 	mla	r5, r9, r0, r7
    UpdateFirstCreated(current, allocation_scope_count_);
 23f103a:	6a22      	ldr	r2, [r4, #32]
 23f103c:	4629      	mov	r1, r5
 23f103e:	4620      	mov	r0, r4
 23f1040:	f7ff fd20 	bl	23f0a84 <_ZN6tflite21AllocationInfoBuilder18UpdateFirstCreatedEPNS_14AllocationInfoEi>
    UpdateLastUsed(current, allocation_scope_count_);
 23f1044:	6a23      	ldr	r3, [r4, #32]
  TFLITE_DCHECK(current->last_used <= allocation_scope_count);
 23f1046:	68ea      	ldr	r2, [r5, #12]
 23f1048:	4293      	cmp	r3, r2
 23f104a:	f6ff af45 	blt.w	23f0ed8 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x6c>
  current->last_used = allocation_scope_count;
 23f104e:	60eb      	str	r3, [r5, #12]
  for (size_t i = 0;
 23f1050:	f108 0801 	add.w	r8, r8, #1
 23f1054:	e7e4      	b.n	23f1020 <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x1b4>
}
 23f1056:	2000      	movs	r0, #0
 23f1058:	b009      	add	sp, #36	; 0x24
 23f105a:	ecbd 8b02 	vpop	{d8}
 23f105e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

023f1064 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>:
    SubgraphAllocations* allocations) {
 23f1064:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 23f1068:	f8d0 a000 	ldr.w	sl, [r0]
 23f106c:	4606      	mov	r6, r0
 23f106e:	460d      	mov	r5, r1
    auto field_offset = GetOptionalFieldOffset(field);
 23f1070:	4650      	mov	r0, sl
 23f1072:	2106      	movs	r1, #6
 23f1074:	4617      	mov	r7, r2
 23f1076:	4698      	mov	r8, r3
 23f1078:	f7ff f84c 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 23f107c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f1080:	4604      	mov	r4, r0
 23f1082:	b118      	cbz	r0, 23f108c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x28>
 23f1084:	f85a 4004 	ldr.w	r4, [sl, r4]
    auto p = data_ + field_offset;
 23f1088:	4450      	add	r0, sl
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f108a:	4404      	add	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
 23f108c:	2104      	movs	r1, #4
 23f108e:	4628      	mov	r0, r5
 23f1090:	f7ff f840 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f1094:	b148      	cbz	r0, 23f10aa <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x46>
 23f1096:	582b      	ldr	r3, [r5, r0]
    FLATBUFFERS_ASSERT(i < size());
 23f1098:	6822      	ldr	r2, [r4, #0]
 23f109a:	429a      	cmp	r2, r3
 23f109c:	d807      	bhi.n	23f10ae <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x4a>
 23f109e:	21aa      	movs	r1, #170	; 0xaa
 23f10a0:	4b34      	ldr	r3, [pc, #208]	; (23f1174 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x110>)
 23f10a2:	4a35      	ldr	r2, [pc, #212]	; (23f1178 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x114>)
 23f10a4:	4835      	ldr	r0, [pc, #212]	; (23f117c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x118>)
 23f10a6:	f003 fbab 	bl	23f4800 <__assert_func>
 23f10aa:	4603      	mov	r3, r0
 23f10ac:	e7f4      	b.n	23f1098 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x34>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 23f10ae:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
 23f10b0:	eb04 0083 	add.w	r0, r4, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 23f10b4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
  }
  int32_t version() const {
    return GetField<int32_t>(VT_VERSION, 1);
  }
  tflite::BuiltinOperator builtin_code() const {
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 23f10b8:	2200      	movs	r2, #0
 23f10ba:	210a      	movs	r1, #10
 23f10bc:	4418      	add	r0, r3
 23f10be:	f7ff f884 	bl	23f01ca <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
  switch (opcode->builtin_code()) {
 23f10c2:	2877      	cmp	r0, #119	; 0x77
 23f10c4:	d04b      	beq.n	23f115e <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xfa>
 23f10c6:	2881      	cmp	r0, #129	; 0x81
 23f10c8:	d034      	beq.n	23f1134 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xd0>
 23f10ca:	2876      	cmp	r0, #118	; 0x76
 23f10cc:	d141      	bne.n	23f1152 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xee>
    return builtin_options_type() == tflite::BuiltinOptions_IfOptions ? static_cast<const tflite::IfOptions *>(builtin_options()) : nullptr;
 23f10ce:	4628      	mov	r0, r5
 23f10d0:	f7ff f88d 	bl	23f01ee <_ZNK6tflite8Operator20builtin_options_typeEv>
 23f10d4:	285c      	cmp	r0, #92	; 0x5c
    return builtin_options_type() == tflite::BuiltinOptions_WhileOptions ? static_cast<const tflite::WhileOptions *>(builtin_options()) : nullptr;
 23f10d6:	d147      	bne.n	23f1168 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x104>
 23f10d8:	4628      	mov	r0, r5
 23f10da:	f7ff f823 	bl	23f0124 <_ZNK6tflite8Operator15builtin_optionsEv>
 23f10de:	4605      	mov	r5, r0
    return GetField<int32_t>(VT_COND_SUBGRAPH_INDEX, 0);
 23f10e0:	2200      	movs	r2, #0
 23f10e2:	2104      	movs	r1, #4
 23f10e4:	4628      	mov	r0, r5
 23f10e6:	f7ff f870 	bl	23f01ca <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
    return GetField<int32_t>(VT_BODY_SUBGRAPH_INDEX, 0);
 23f10ea:	2200      	movs	r2, #0
    return GetField<int32_t>(VT_COND_SUBGRAPH_INDEX, 0);
 23f10ec:	4604      	mov	r4, r0
    return GetField<int32_t>(VT_BODY_SUBGRAPH_INDEX, 0);
 23f10ee:	2106      	movs	r1, #6
 23f10f0:	4628      	mov	r0, r5
 23f10f2:	f7ff f86a 	bl	23f01ca <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
  if (first_subgraph_index != -1) {
 23f10f6:	1c62      	adds	r2, r4, #1
 23f10f8:	4605      	mov	r5, r0
 23f10fa:	d00b      	beq.n	23f1114 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xb0>
    allocation_scope_count_++;
 23f10fc:	6a33      	ldr	r3, [r6, #32]
    TF_LITE_ENSURE_STATUS(
 23f10fe:	463a      	mov	r2, r7
    allocation_scope_count_++;
 23f1100:	3301      	adds	r3, #1
 23f1102:	6233      	str	r3, [r6, #32]
    TF_LITE_ENSURE_STATUS(
 23f1104:	4621      	mov	r1, r4
 23f1106:	4643      	mov	r3, r8
 23f1108:	4630      	mov	r0, r6
 23f110a:	f8cd 9000 	str.w	r9, [sp]
 23f110e:	f7ff fead 	bl	23f0e6c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
 23f1112:	b9f8      	cbnz	r0, 23f1154 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xf0>
  if (second_subgraph_index != -1) {
 23f1114:	1c6b      	adds	r3, r5, #1
 23f1116:	d01c      	beq.n	23f1152 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xee>
    allocation_scope_count_++;
 23f1118:	6a33      	ldr	r3, [r6, #32]
    TF_LITE_ENSURE_STATUS(
 23f111a:	463a      	mov	r2, r7
    allocation_scope_count_++;
 23f111c:	3301      	adds	r3, #1
 23f111e:	6233      	str	r3, [r6, #32]
    TF_LITE_ENSURE_STATUS(
 23f1120:	4629      	mov	r1, r5
 23f1122:	4643      	mov	r3, r8
 23f1124:	4630      	mov	r0, r6
 23f1126:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
}
 23f112a:	b002      	add	sp, #8
 23f112c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TF_LITE_ENSURE_STATUS(
 23f1130:	f7ff be9c 	b.w	23f0e6c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
    return builtin_options_type() == tflite::BuiltinOptions_CallOnceOptions ? static_cast<const tflite::CallOnceOptions *>(builtin_options()) : nullptr;
 23f1134:	4628      	mov	r0, r5
 23f1136:	f7ff f85a 	bl	23f01ee <_ZNK6tflite8Operator20builtin_options_typeEv>
 23f113a:	2867      	cmp	r0, #103	; 0x67
 23f113c:	d10d      	bne.n	23f115a <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xf6>
 23f113e:	4628      	mov	r0, r5
 23f1140:	f7fe fff0 	bl	23f0124 <_ZNK6tflite8Operator15builtin_optionsEv>
    return GetField<int32_t>(VT_INIT_SUBGRAPH_INDEX, 0);
 23f1144:	2104      	movs	r1, #4
 23f1146:	2200      	movs	r2, #0
 23f1148:	f7ff f83f 	bl	23f01ca <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
  if (first_subgraph_index != -1) {
 23f114c:	1c41      	adds	r1, r0, #1
 23f114e:	4604      	mov	r4, r0
 23f1150:	d10c      	bne.n	23f116c <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x108>
  switch (opcode->builtin_code()) {
 23f1152:	2000      	movs	r0, #0
}
 23f1154:	b002      	add	sp, #8
 23f1156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return builtin_options_type() == tflite::BuiltinOptions_CallOnceOptions ? static_cast<const tflite::CallOnceOptions *>(builtin_options()) : nullptr;
 23f115a:	2000      	movs	r0, #0
 23f115c:	e7f2      	b.n	23f1144 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0xe0>
    return builtin_options_type() == tflite::BuiltinOptions_WhileOptions ? static_cast<const tflite::WhileOptions *>(builtin_options()) : nullptr;
 23f115e:	4628      	mov	r0, r5
 23f1160:	f7ff f845 	bl	23f01ee <_ZNK6tflite8Operator20builtin_options_typeEv>
 23f1164:	285d      	cmp	r0, #93	; 0x5d
 23f1166:	e7b6      	b.n	23f10d6 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x72>
 23f1168:	2500      	movs	r5, #0
 23f116a:	e7b9      	b.n	23f10e0 <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x7c>
  int second_subgraph_index = -1;
 23f116c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23f1170:	e7c4      	b.n	23f10fc <_ZN6tflite21AllocationInfoBuilder32MarkSubgraphLifetimesIfNecessaryEPKNS_8OperatorEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE+0x98>
 23f1172:	bf00      	nop
 23f1174:	023fe813 	.word	0x023fe813
 23f1178:	023fed5f 	.word	0x023fed5f
 23f117c:	023fe918 	.word	0x023fe918

023f1180 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
  explicit MicroBuiltinDataAllocator(
      IPersistentBufferAllocator* persistent_allocator)
      : persistent_allocator_(persistent_allocator) {}

  void* Allocate(size_t size, size_t alignment_hint) override {
    return persistent_allocator_->AllocatePersistentBuffer(size,
 23f1180:	6840      	ldr	r0, [r0, #4]
                                                           alignment_hint);
 23f1182:	6803      	ldr	r3, [r0, #0]
    return persistent_allocator_->AllocatePersistentBuffer(size,
 23f1184:	689b      	ldr	r3, [r3, #8]
 23f1186:	4718      	bx	r3

023f1188 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
  void Deallocate(void* data) override {
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 23f1188:	4770      	bx	lr

023f118a <_ZN6tflite14MicroAllocatorD1Ev>:
    : non_persistent_buffer_allocator_(non_persistent_buffer_allocator),
      persistent_buffer_allocator_(persistent_buffer_allocator),
      memory_planner_(memory_planner),
      model_is_allocating_(false) {}

MicroAllocator::~MicroAllocator() {}
 23f118a:	4770      	bx	lr

023f118c <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:
  model_is_allocating_ = false;
  return kTfLiteOk;
}

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
  return persistent_buffer_allocator_->AllocatePersistentBuffer(
 23f118c:	6880      	ldr	r0, [r0, #8]
 23f118e:	2210      	movs	r2, #16
      bytes, MicroArenaBufferAlignment());
 23f1190:	6803      	ldr	r3, [r0, #0]
  return persistent_buffer_allocator_->AllocatePersistentBuffer(
 23f1192:	689b      	ldr	r3, [r3, #8]
 23f1194:	4718      	bx	r3

023f1196 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
  }
  return tensor;
}

TfLiteStatus MicroAllocator::ResetTempAllocations() {
  return non_persistent_buffer_allocator_->ResetTempAllocations();
 23f1196:	6840      	ldr	r0, [r0, #4]
 23f1198:	6803      	ldr	r3, [r0, #0]
 23f119a:	695b      	ldr	r3, [r3, #20]
 23f119c:	4718      	bx	r3

023f119e <_ZN6tflite14MicroAllocator20IsAllTempDeallocatedEv>:
}

bool MicroAllocator::IsAllTempDeallocated() {
  return non_persistent_buffer_allocator_->IsAllTempDeallocated();
 23f119e:	6840      	ldr	r0, [r0, #4]
 23f11a0:	6803      	ldr	r3, [r0, #0]
 23f11a2:	691b      	ldr	r3, [r3, #16]
 23f11a4:	4718      	bx	r3

023f11a6 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEv>:
  return kTfLiteOk;
}

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal() {
  return reinterpret_cast<TfLiteTensor*>(
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 23f11a6:	6880      	ldr	r0, [r0, #8]
 23f11a8:	2204      	movs	r2, #4
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 23f11aa:	6803      	ldr	r3, [r0, #0]
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 23f11ac:	2140      	movs	r1, #64	; 0x40
 23f11ae:	689b      	ldr	r3, [r3, #8]
 23f11b0:	4718      	bx	r3

023f11b2 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public TfLiteBridgeBuiltinDataAllocator {
 23f11b2:	4770      	bx	lr

023f11b4 <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor>:
void MicroAllocator::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
 23f11b4:	b570      	push	{r4, r5, r6, lr}
 23f11b6:	4605      	mov	r5, r0
  TFLITE_DCHECK(tensor != nullptr);
 23f11b8:	460c      	mov	r4, r1
 23f11ba:	b909      	cbnz	r1, 23f11c0 <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0xc>
 23f11bc:	f003 faf6 	bl	23f47ac <abort>
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
 23f11c0:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 23f11c4:	2b01      	cmp	r3, #1
 23f11c6:	d10c      	bne.n	23f11e2 <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0x2e>
    TFLITE_DCHECK(tensor->quantization.params != nullptr);
 23f11c8:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 23f11ca:	2e00      	cmp	r6, #0
 23f11cc:	d0f6      	beq.n	23f11bc <_ZN6tflite14MicroAllocator26DeallocateTempTfLiteTensorEP12TfLiteTensor+0x8>
    non_persistent_buffer_allocator_->DeallocateTemp(
 23f11ce:	6840      	ldr	r0, [r0, #4]
 23f11d0:	6871      	ldr	r1, [r6, #4]
        reinterpret_cast<uint8_t*>(quantization->zero_point));
 23f11d2:	6803      	ldr	r3, [r0, #0]
    non_persistent_buffer_allocator_->DeallocateTemp(
 23f11d4:	68db      	ldr	r3, [r3, #12]
 23f11d6:	4798      	blx	r3
    non_persistent_buffer_allocator_->DeallocateTemp(
 23f11d8:	6868      	ldr	r0, [r5, #4]
 23f11da:	4631      	mov	r1, r6
        reinterpret_cast<uint8_t*>(quantization));
 23f11dc:	6803      	ldr	r3, [r0, #0]
    non_persistent_buffer_allocator_->DeallocateTemp(
 23f11de:	68db      	ldr	r3, [r3, #12]
 23f11e0:	4798      	blx	r3
  tensor->quantization.type = kTfLiteNoQuantization;
 23f11e2:	2300      	movs	r3, #0
  tensor->dims = nullptr;
 23f11e4:	e9c4 3301 	strd	r3, r3, [r4, #4]
  tensor->quantization.type = kTfLiteNoQuantization;
 23f11e8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  tensor->quantization.params = nullptr;
 23f11ec:	6363      	str	r3, [r4, #52]	; 0x34
  non_persistent_buffer_allocator_->DeallocateTemp(
 23f11ee:	6868      	ldr	r0, [r5, #4]
 23f11f0:	4621      	mov	r1, r4
}
 23f11f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      reinterpret_cast<uint8_t*>(tensor));
 23f11f6:	6803      	ldr	r3, [r0, #0]
  non_persistent_buffer_allocator_->DeallocateTemp(
 23f11f8:	68db      	ldr	r3, [r3, #12]
 23f11fa:	4718      	bx	r3

023f11fc <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
 23f11fc:	b510      	push	{r4, lr}
 23f11fe:	4604      	mov	r4, r0
 23f1200:	2124      	movs	r1, #36	; 0x24
 23f1202:	f7f7 f9c2 	bl	23e858a <_ZdlPvj>
 23f1206:	4620      	mov	r0, r4
 23f1208:	bd10      	pop	{r4, pc}

023f120a <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public TfLiteBridgeBuiltinDataAllocator {
 23f120a:	b510      	push	{r4, lr}
 23f120c:	4604      	mov	r4, r0
 23f120e:	2108      	movs	r1, #8
 23f1210:	f7f7 f9bb 	bl	23e858a <_ZdlPvj>
 23f1214:	4620      	mov	r0, r4
 23f1216:	bd10      	pop	{r4, pc}

023f1218 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:
          max_head_buffer_usage_, MicroArenaBufferAlignment()));
  return kTfLiteOk;
}

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 23f1218:	b538      	push	{r3, r4, r5, lr}
 23f121a:	4613      	mov	r3, r2
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 23f121c:	460c      	mov	r4, r1
 23f121e:	b909      	cbnz	r1, 23f1224 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0xc>
 23f1220:	f003 fac4 	bl	23f47ac <abort>

  if (scratch_buffer_request_count_ == 0) {
 23f1224:	6982      	ldr	r2, [r0, #24]
 23f1226:	b132      	cbz	r2, 23f1236 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1e>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 23f1228:	6880      	ldr	r0, [r0, #8]
 23f122a:	0099      	lsls	r1, r3, #2
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 23f122c:	6802      	ldr	r2, [r0, #0]
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 23f122e:	6895      	ldr	r5, [r2, #8]
 23f1230:	2204      	movs	r2, #4
 23f1232:	47a8      	blx	r5
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 23f1234:	6020      	str	r0, [r4, #0]

  return kTfLiteOk;
}
 23f1236:	2000      	movs	r0, #0
 23f1238:	bd38      	pop	{r3, r4, r5, pc}

023f123a <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 23f123a:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
 23f123c:	2108      	movs	r1, #8
 23f123e:	4604      	mov	r4, r0
 23f1240:	f7fe ff68 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f1244:	b110      	cbz	r0, 23f124c <_ZNK6tflite22QuantizationParameters5scaleEv+0x12>
    auto p = data_ + field_offset;
 23f1246:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f1248:	5820      	ldr	r0, [r4, r0]
 23f124a:	4418      	add	r0, r3
  }
 23f124c:	bd10      	pop	{r4, pc}

023f124e <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 23f124e:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
 23f1250:	210a      	movs	r1, #10
 23f1252:	4604      	mov	r4, r0
 23f1254:	f7fe ff5e 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f1258:	b110      	cbz	r0, 23f1260 <_ZNK6tflite22QuantizationParameters10zero_pointEv+0x12>
    auto p = data_ + field_offset;
 23f125a:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f125c:	5820      	ldr	r0, [r4, r0]
 23f125e:	4418      	add	r0, r3
  }
 23f1260:	bd10      	pop	{r4, pc}

023f1262 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 23f1262:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
 23f1264:	2106      	movs	r1, #6
 23f1266:	4604      	mov	r4, r0
 23f1268:	f7fe ff54 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f126c:	b100      	cbz	r0, 23f1270 <_ZNK6tflite6Tensor4typeEv+0xe>
 23f126e:	5620      	ldrsb	r0, [r4, r0]
  }
 23f1270:	bd10      	pop	{r4, pc}
	...

023f1274 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 23f1274:	b538      	push	{r3, r4, r5, lr}
 23f1276:	460c      	mov	r4, r1
    auto field_offset = GetOptionalFieldOffset(field);
 23f1278:	2108      	movs	r1, #8
 23f127a:	4605      	mov	r5, r0
 23f127c:	f7fe ff4a 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f1280:	b100      	cbz	r0, 23f1284 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x10>
 23f1282:	5828      	ldr	r0, [r5, r0]
    FLATBUFFERS_ASSERT(i < size());
 23f1284:	6823      	ldr	r3, [r4, #0]
 23f1286:	4283      	cmp	r3, r0
 23f1288:	d805      	bhi.n	23f1296 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x22>
 23f128a:	21aa      	movs	r1, #170	; 0xaa
 23f128c:	4b0b      	ldr	r3, [pc, #44]	; (23f12bc <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x48>)
 23f128e:	4a0c      	ldr	r2, [pc, #48]	; (23f12c0 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x4c>)
 23f1290:	480c      	ldr	r0, [pc, #48]	; (23f12c4 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x50>)
 23f1292:	f003 fab5 	bl	23f4800 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 23f1296:	3404      	adds	r4, #4
    p += i * sizeof(uoffset_t);
 23f1298:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 23f129c:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
    auto field_offset = GetOptionalFieldOffset(field);
 23f12a0:	2104      	movs	r1, #4
 23f12a2:	441c      	add	r4, r3
 23f12a4:	4620      	mov	r0, r4
 23f12a6:	f7fe ff35 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f12aa:	b128      	cbz	r0, 23f12b8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x44>
 23f12ac:	5823      	ldr	r3, [r4, r0]
    auto p = data_ + field_offset;
 23f12ae:	1822      	adds	r2, r4, r0
      if (array->size()) {
 23f12b0:	58d0      	ldr	r0, [r2, r3]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f12b2:	18d1      	adds	r1, r2, r3
 23f12b4:	b100      	cbz	r0, 23f12b8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x44>
 23f12b6:	1d08      	adds	r0, r1, #4
}
 23f12b8:	bd38      	pop	{r3, r4, r5, pc}
 23f12ba:	bf00      	nop
 23f12bc:	023fe813 	.word	0x023fe813
 23f12c0:	023fe9ab 	.word	0x023fe9ab
 23f12c4:	023fe918 	.word	0x023fe918

023f12c8 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEP16TfLiteEvalTensor>:
    TfLiteEvalTensor* result) {
 23f12c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *result = {};
 23f12ca:	4616      	mov	r6, r2
 23f12cc:	2300      	movs	r3, #0
 23f12ce:	e9c2 3300 	strd	r3, r3, [r2]
 23f12d2:	f846 3f08 	str.w	r3, [r6, #8]!
    TfLiteEvalTensor* result) {
 23f12d6:	460f      	mov	r7, r1
 23f12d8:	4614      	mov	r4, r2
 23f12da:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(
 23f12dc:	f7ff ffc1 	bl	23f1262 <_ZNK6tflite6Tensor4typeEv>
 23f12e0:	4631      	mov	r1, r6
 23f12e2:	f7ff fade 	bl	23f08a2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>
 23f12e6:	4606      	mov	r6, r0
 23f12e8:	b978      	cbnz	r0, 23f130a <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEP16TfLiteEvalTensor+0x42>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 23f12ea:	4639      	mov	r1, r7
 23f12ec:	4628      	mov	r0, r5
 23f12ee:	f7ff ffc1 	bl	23f1274 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    auto field_offset = GetOptionalFieldOffset(field);
 23f12f2:	2104      	movs	r1, #4
 23f12f4:	6020      	str	r0, [r4, #0]
 23f12f6:	4628      	mov	r0, r5
 23f12f8:	f7fe ff0c 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f12fc:	b138      	cbz	r0, 23f130e <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEP16TfLiteEvalTensor+0x46>
    auto p = data_ + field_offset;
 23f12fe:	182a      	adds	r2, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f1300:	5828      	ldr	r0, [r5, r0]
    result->dims = FlatBufferVectorToTfLiteTypeArray(flatbuffer_tensor.shape());
 23f1302:	4410      	add	r0, r2
 23f1304:	f7ff fb20 	bl	23f0948 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>
 23f1308:	6060      	str	r0, [r4, #4]
}
 23f130a:	4630      	mov	r0, r6
 23f130c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 23f130e:	4b01      	ldr	r3, [pc, #4]	; (23f1314 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEP16TfLiteEvalTensor+0x4c>)
 23f1310:	6063      	str	r3, [r4, #4]
 23f1312:	e7fa      	b.n	23f130a <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEP16TfLiteEvalTensor+0x42>
 23f1314:	023fef54 	.word	0x023fef54

023f1318 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE>:
    MicroMemoryPlanner* memory_planner) {
 23f1318:	b538      	push	{r3, r4, r5, lr}
 23f131a:	460d      	mov	r5, r1
  TFLITE_DCHECK(memory_allocator != nullptr);
 23f131c:	4604      	mov	r4, r0
 23f131e:	b908      	cbnz	r0, 23f1324 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE+0xc>
 23f1320:	f003 fa44 	bl	23f47ac <abort>
  TFLITE_DCHECK(memory_planner != nullptr);
 23f1324:	2900      	cmp	r1, #0
 23f1326:	d0fb      	beq.n	23f1320 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE+0x8>
      sizeof(MicroAllocator), alignof(MicroAllocator));
 23f1328:	6803      	ldr	r3, [r0, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocatePersistentBuffer(
 23f132a:	2204      	movs	r2, #4
 23f132c:	2124      	movs	r1, #36	; 0x24
 23f132e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f1330:	4798      	blx	r3
      MicroAllocator(memory_allocator, memory_allocator, memory_planner);
 23f1332:	b150      	cbz	r0, 23f134a <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE+0x32>
      model_is_allocating_(false) {}
 23f1334:	4b05      	ldr	r3, [pc, #20]	; (23f134c <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE+0x34>)
 23f1336:	6105      	str	r5, [r0, #16]
 23f1338:	e9c0 3400 	strd	r3, r4, [r0]
 23f133c:	2300      	movs	r3, #0
 23f133e:	e9c0 3306 	strd	r3, r3, [r0, #24]
      MicroAllocator(memory_allocator, memory_allocator, memory_planner);
 23f1342:	3404      	adds	r4, #4
      model_is_allocating_(false) {}
 23f1344:	6084      	str	r4, [r0, #8]
 23f1346:	7503      	strb	r3, [r0, #20]
 23f1348:	6203      	str	r3, [r0, #32]
}
 23f134a:	bd38      	pop	{r3, r4, r5, pc}
 23f134c:	023fef78 	.word	0x023fef78

023f1350 <_ZN6tflite14MicroAllocator6CreateEPhj>:
                                       size_t arena_size) {
 23f1350:	b538      	push	{r3, r4, r5, lr}
 23f1352:	460d      	mov	r5, r1
 23f1354:	4604      	mov	r4, r0
      AlignPointerUp(tensor_arena, MicroArenaBufferAlignment());
 23f1356:	2110      	movs	r1, #16
 23f1358:	f7ff faf8 	bl	23f094c <_ZN6tflite14AlignPointerUpEPhj>
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 23f135c:	442c      	add	r4, r5
      SingleArenaBufferAllocator::Create(aligned_arena, aligned_arena_size);
 23f135e:	1a21      	subs	r1, r4, r0
 23f1360:	f001 f9e4 	bl	23f272c <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj>
      sizeof(GreedyMemoryPlanner), alignof(GreedyMemoryPlanner));
 23f1364:	6803      	ldr	r3, [r0, #0]
  uint8_t* memory_planner_buffer = memory_allocator->AllocatePersistentBuffer(
 23f1366:	2204      	movs	r2, #4
 23f1368:	212c      	movs	r1, #44	; 0x2c
 23f136a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      SingleArenaBufferAllocator::Create(aligned_arena, aligned_arena_size);
 23f136c:	4604      	mov	r4, r0
  uint8_t* memory_planner_buffer = memory_allocator->AllocatePersistentBuffer(
 23f136e:	4798      	blx	r3
      new (memory_planner_buffer) GreedyMemoryPlanner();
 23f1370:	4605      	mov	r5, r0
 23f1372:	b108      	cbz	r0, 23f1378 <_ZN6tflite14MicroAllocator6CreateEPhj+0x28>
 23f1374:	f002 fbe6 	bl	23f3b44 <_ZN6tflite19GreedyMemoryPlannerC1Ev>
  return Create(memory_allocator, memory_planner);
 23f1378:	4629      	mov	r1, r5
 23f137a:	4620      	mov	r0, r4
}
 23f137c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return Create(memory_allocator, memory_planner);
 23f1380:	f7ff bfca 	b.w	23f1318 <_ZN6tflite14MicroAllocator6CreateEPNS_26SingleArenaBufferAllocatorEPNS_18MicroMemoryPlannerE>

023f1384 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle** scratch_buffer_handles) {
 23f1384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f1388:	461d      	mov	r5, r3
  if (!model_is_allocating_) {
 23f138a:	7d03      	ldrb	r3, [r0, #20]
    ScratchBufferHandle** scratch_buffer_handles) {
 23f138c:	4604      	mov	r4, r0
 23f138e:	460e      	mov	r6, r1
 23f1390:	4617      	mov	r7, r2
  if (!model_is_allocating_) {
 23f1392:	b18b      	cbz	r3, 23f13b8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x34>
  TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 23f1394:	6803      	ldr	r3, [r0, #0]
 23f1396:	4629      	mov	r1, r5
 23f1398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f139a:	6982      	ldr	r2, [r0, #24]
 23f139c:	4798      	blx	r3
 23f139e:	b948      	cbnz	r0, 23f13b4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x30>
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph_allocations,
 23f13a0:	6823      	ldr	r3, [r4, #0]
 23f13a2:	463a      	mov	r2, r7
 23f13a4:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 23f13a8:	4631      	mov	r1, r6
 23f13aa:	4620      	mov	r0, r4
 23f13ac:	682b      	ldr	r3, [r5, #0]
 23f13ae:	47c0      	blx	r8
 23f13b0:	b900      	cbnz	r0, 23f13b4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x30>
  model_is_allocating_ = false;
 23f13b2:	7520      	strb	r0, [r4, #20]
}
 23f13b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return kTfLiteError;
 23f13b8:	2001      	movs	r0, #1
 23f13ba:	e7fb      	b.n	23f13b4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE+0x30>

023f13bc <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 23f13bc:	2300      	movs	r3, #0
TfLiteStatus MicroAllocator::InitScratchBufferData() {
 23f13be:	b510      	push	{r4, lr}
  scratch_buffer_request_count_ = 0;
 23f13c0:	6183      	str	r3, [r0, #24]
TfLiteStatus MicroAllocator::InitScratchBufferData() {
 23f13c2:	4604      	mov	r4, r0

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  scratch_buffer_head_ =
      non_persistent_buffer_allocator_->AllocateResizableBuffer(
 23f13c4:	6840      	ldr	r0, [r0, #4]
 23f13c6:	2204      	movs	r2, #4
          sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
          alignof(internal::ScratchBufferRequest));
 23f13c8:	6803      	ldr	r3, [r0, #0]
      non_persistent_buffer_allocator_->AllocateResizableBuffer(
 23f13ca:	2190      	movs	r1, #144	; 0x90
 23f13cc:	699b      	ldr	r3, [r3, #24]
 23f13ce:	4798      	blx	r3
  scratch_buffer_head_ =
 23f13d0:	61e0      	str	r0, [r4, #28]
  if (scratch_buffer_head_ == nullptr) {
    return kTfLiteError;
  }

  return kTfLiteOk;
}
 23f13d2:	fab0 f080 	clz	r0, r0
 23f13d6:	0940      	lsrs	r0, r0, #5
 23f13d8:	bd10      	pop	{r4, pc}
	...

023f13dc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>:
SubgraphAllocations* MicroAllocator::StartModelAllocation(const Model* model) {
 23f13dc:	b570      	push	{r4, r5, r6, lr}
 23f13de:	4604      	mov	r4, r0
  TFLITE_DCHECK(model != nullptr);
 23f13e0:	460e      	mov	r6, r1
 23f13e2:	b909      	cbnz	r1, 23f13e8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0xc>
 23f13e4:	f003 f9e2 	bl	23f47ac <abort>
  if (model_is_allocating_) {
 23f13e8:	7d03      	ldrb	r3, [r0, #20]
 23f13ea:	bb63      	cbnz	r3, 23f1446 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6a>
  model_is_allocating_ = true;
 23f13ec:	2301      	movs	r3, #1
 23f13ee:	7503      	strb	r3, [r0, #20]
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 23f13f0:	6880      	ldr	r0, [r0, #8]
 23f13f2:	2204      	movs	r2, #4
          alignof(MicroBuiltinDataAllocator));
 23f13f4:	6803      	ldr	r3, [r0, #0]
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 23f13f6:	2108      	movs	r1, #8
 23f13f8:	689b      	ldr	r3, [r3, #8]
 23f13fa:	4798      	blx	r3
  builtin_data_allocator_ = new (data_allocator_buffer)
 23f13fc:	b118      	cbz	r0, 23f1406 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x2a>
      MicroBuiltinDataAllocator(persistent_buffer_allocator_);
 23f13fe:	68a3      	ldr	r3, [r4, #8]
      : persistent_allocator_(persistent_allocator) {}
 23f1400:	4a12      	ldr	r2, [pc, #72]	; (23f144c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x70>)
 23f1402:	e9c0 2300 	strd	r2, r3, [r0]
  builtin_data_allocator_ = new (data_allocator_buffer)
 23f1406:	60e0      	str	r0, [r4, #12]
  if (InitScratchBufferData() != kTfLiteOk) {
 23f1408:	4620      	mov	r0, r4
 23f140a:	f7ff ffd7 	bl	23f13bc <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 23f140e:	b9d0      	cbnz	r0, 23f1446 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6a>
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 23f1410:	4630      	mov	r0, r6
 23f1412:	f7ff fb2d 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 23f1416:	68a5      	ldr	r5, [r4, #8]
          sizeof(SubgraphAllocations) * model->subgraphs()->size(),
 23f1418:	6801      	ldr	r1, [r0, #0]
          alignof(SubgraphAllocations)));
 23f141a:	682b      	ldr	r3, [r5, #0]
      persistent_buffer_allocator_->AllocatePersistentBuffer(
 23f141c:	4628      	mov	r0, r5
 23f141e:	2204      	movs	r2, #4
 23f1420:	689b      	ldr	r3, [r3, #8]
 23f1422:	00c9      	lsls	r1, r1, #3
 23f1424:	4798      	blx	r3
  if (output == nullptr) {
 23f1426:	4605      	mov	r5, r0
 23f1428:	b168      	cbz	r0, 23f1446 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6a>
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 23f142a:	6823      	ldr	r3, [r4, #0]
 23f142c:	4602      	mov	r2, r0
 23f142e:	4631      	mov	r1, r6
 23f1430:	4620      	mov	r0, r4
 23f1432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f1434:	4798      	blx	r3
 23f1436:	b930      	cbnz	r0, 23f1446 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6a>
      AllocateNodeAndRegistrations(model, output) != kTfLiteOk) {
 23f1438:	6823      	ldr	r3, [r4, #0]
 23f143a:	462a      	mov	r2, r5
 23f143c:	4631      	mov	r1, r6
 23f143e:	4620      	mov	r0, r4
 23f1440:	6a1b      	ldr	r3, [r3, #32]
 23f1442:	4798      	blx	r3
  if (AllocateTfLiteEvalTensors(model, output) != kTfLiteOk ||
 23f1444:	b100      	cbz	r0, 23f1448 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE+0x6c>
    return nullptr;
 23f1446:	2500      	movs	r5, #0
}
 23f1448:	4628      	mov	r0, r5
 23f144a:	bd70      	pop	{r4, r5, r6, pc}
 23f144c:	023fef60 	.word	0x023fef60

023f1450 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
  return reinterpret_cast<internal::ScratchBufferRequest*>(AlignPointerUp(
 23f1450:	2104      	movs	r1, #4
 23f1452:	69c0      	ldr	r0, [r0, #28]
 23f1454:	f7ff ba7a 	b.w	23f094c <_ZN6tflite14AlignPointerUpEPhj>

023f1458 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 23f1458:	b570      	push	{r4, r5, r6, lr}
  TF_LITE_ENSURE_STATUS(ResetTempAllocations());
 23f145a:	6803      	ldr	r3, [r0, #0]
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 23f145c:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(ResetTempAllocations());
 23f145e:	68db      	ldr	r3, [r3, #12]
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 23f1460:	460e      	mov	r6, r1
  TF_LITE_ENSURE_STATUS(ResetTempAllocations());
 23f1462:	4798      	blx	r3
 23f1464:	4604      	mov	r4, r0
 23f1466:	b9c8      	cbnz	r0, 23f149c <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x44>
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 23f1468:	4628      	mov	r0, r5
 23f146a:	f7ff fff1 	bl	23f1450 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 23f146e:	4623      	mov	r3, r4
 23f1470:	69aa      	ldr	r2, [r5, #24]
 23f1472:	429a      	cmp	r2, r3
 23f1474:	d906      	bls.n	23f1484 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x2c>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 23f1476:	6842      	ldr	r2, [r0, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 23f1478:	3301      	adds	r3, #1
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 23f147a:	3201      	adds	r2, #1
      requests[i].node_idx = node_id;
 23f147c:	bf08      	it	eq
 23f147e:	6046      	streq	r6, [r0, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 23f1480:	300c      	adds	r0, #12
 23f1482:	e7f5      	b.n	23f1470 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x18>
  TF_LITE_ENSURE_STATUS(non_persistent_buffer_allocator_->ResizeBuffer(
 23f1484:	230c      	movs	r3, #12
 23f1486:	6868      	ldr	r0, [r5, #4]
 23f1488:	435a      	muls	r2, r3
 23f148a:	6803      	ldr	r3, [r0, #0]
 23f148c:	69e9      	ldr	r1, [r5, #28]
 23f148e:	69dc      	ldr	r4, [r3, #28]
 23f1490:	3290      	adds	r2, #144	; 0x90
 23f1492:	46a4      	mov	ip, r4
}
 23f1494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  TF_LITE_ENSURE_STATUS(non_persistent_buffer_allocator_->ResizeBuffer(
 23f1498:	2304      	movs	r3, #4
 23f149a:	4760      	bx	ip
}
 23f149c:	bd70      	pop	{r4, r5, r6, pc}

023f149e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>:
                                                         int* buffer_idx) {
 23f149e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23f14a2:	4604      	mov	r4, r0
 23f14a4:	4689      	mov	r9, r1
 23f14a6:	4690      	mov	r8, r2
 23f14a8:	461f      	mov	r7, r3
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 23f14aa:	f7ff ffd1 	bl	23f1450 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 23f14ae:	230c      	movs	r3, #12
 23f14b0:	4605      	mov	r5, r0
  size_t current_node_request_count = 0;
 23f14b2:	2200      	movs	r2, #0
 23f14b4:	69a6      	ldr	r6, [r4, #24]
 23f14b6:	435e      	muls	r6, r3
 23f14b8:	1981      	adds	r1, r0, r6
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 23f14ba:	428d      	cmp	r5, r1
 23f14bc:	d005      	beq.n	23f14ca <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x2c>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 23f14be:	686b      	ldr	r3, [r5, #4]
 23f14c0:	350c      	adds	r5, #12
 23f14c2:	3301      	adds	r3, #1
      ++current_node_request_count;
 23f14c4:	bf08      	it	eq
 23f14c6:	3201      	addeq	r2, #1
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 23f14c8:	e7f7      	b.n	23f14ba <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x1c>
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 23f14ca:	2a0b      	cmp	r2, #11
 23f14cc:	d80d      	bhi.n	23f14ea <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x4c>
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 23f14ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  current_request->bytes = bytes;
 23f14d2:	f840 9006 	str.w	r9, [r0, r6]
  return kTfLiteOk;
 23f14d6:	2000      	movs	r0, #0
  current_request->subgraph_idx = subgraph_idx;
 23f14d8:	e9c5 3801 	strd	r3, r8, [r5, #4]
  *buffer_idx = scratch_buffer_request_count_;
 23f14dc:	69a3      	ldr	r3, [r4, #24]
 23f14de:	603b      	str	r3, [r7, #0]
  ++scratch_buffer_request_count_;
 23f14e0:	69a3      	ldr	r3, [r4, #24]
 23f14e2:	3301      	adds	r3, #1
 23f14e4:	61a3      	str	r3, [r4, #24]
}
 23f14e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return kTfLiteError;
 23f14ea:	2001      	movs	r0, #1
 23f14ec:	e7fb      	b.n	23f14e6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi+0x48>

023f14ee <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>:
      scratch_buffer_head_, alignof(internal::ScratchBufferRequest)));
}

TfLiteBridgeBuiltinDataAllocator* MicroAllocator::GetBuiltinDataAllocator() {
  return builtin_data_allocator_;
}
 23f14ee:	68c0      	ldr	r0, [r0, #12]
 23f14f0:	4770      	bx	lr
	...

023f14f4 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 23f14f4:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
 23f14f6:	6803      	ldr	r3, [r0, #0]
 23f14f8:	4299      	cmp	r1, r3
 23f14fa:	d305      	bcc.n	23f1508 <_ZNK11flatbuffers6VectorIxE3GetEm+0x14>
 23f14fc:	21aa      	movs	r1, #170	; 0xaa
 23f14fe:	4b05      	ldr	r3, [pc, #20]	; (23f1514 <_ZNK11flatbuffers6VectorIxE3GetEm+0x20>)
 23f1500:	4a05      	ldr	r2, [pc, #20]	; (23f1518 <_ZNK11flatbuffers6VectorIxE3GetEm+0x24>)
 23f1502:	4806      	ldr	r0, [pc, #24]	; (23f151c <_ZNK11flatbuffers6VectorIxE3GetEm+0x28>)
 23f1504:	f003 f97c 	bl	23f4800 <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 23f1508:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  }
 23f150c:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 23f1510:	bd08      	pop	{r3, pc}
 23f1512:	bf00      	nop
 23f1514:	023fe813 	.word	0x023fe813
 23f1518:	023fee79 	.word	0x023fee79
 23f151c:	023fe918 	.word	0x023fe918

023f1520 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor>:
    TfLiteTensor* result) {
 23f1520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f1524:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 23f1526:	4681      	mov	r9, r0
 23f1528:	468a      	mov	sl, r1
 23f152a:	4693      	mov	fp, r2
 23f152c:	461d      	mov	r5, r3
  TFLITE_DCHECK(result != nullptr);
 23f152e:	b90c      	cbnz	r4, 23f1534 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x14>
 23f1530:	f003 f93c 	bl	23f47ac <abort>
  *result = {};
 23f1534:	2240      	movs	r2, #64	; 0x40
 23f1536:	2100      	movs	r1, #0
 23f1538:	4620      	mov	r0, r4
 23f153a:	f007 fbf2 	bl	23f8d22 <memset>
  TF_LITE_ENSURE_STATUS(
 23f153e:	4628      	mov	r0, r5
 23f1540:	f7ff fe8f 	bl	23f1262 <_ZNK6tflite6Tensor4typeEv>
 23f1544:	4621      	mov	r1, r4
 23f1546:	f7ff f9ac 	bl	23f08a2 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteType>
 23f154a:	4607      	mov	r7, r0
 23f154c:	2800      	cmp	r0, #0
 23f154e:	d153      	bne.n	23f15f8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xd8>
  result->is_variable = flatbuffer_tensor.is_variable();
 23f1550:	4628      	mov	r0, r5
 23f1552:	f7ff fa78 	bl	23f0a46 <_ZNK6tflite6Tensor11is_variableEv>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 23f1556:	990c      	ldr	r1, [sp, #48]	; 0x30
  result->is_variable = flatbuffer_tensor.is_variable();
 23f1558:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 23f155c:	4628      	mov	r0, r5
 23f155e:	f7ff fe89 	bl	23f1274 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    result->allocation_type = kTfLiteMmapRo;
 23f1562:	2800      	cmp	r0, #0
 23f1564:	bf0c      	ite	eq
 23f1566:	2302      	moveq	r3, #2
 23f1568:	2301      	movne	r3, #1
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 23f156a:	6060      	str	r0, [r4, #4]
  if (result->data.data == nullptr) {
 23f156c:	7523      	strb	r3, [r4, #20]
  TF_LITE_ENSURE_STATUS(
 23f156e:	4628      	mov	r0, r5
 23f1570:	aa01      	add	r2, sp, #4
 23f1572:	f104 0118 	add.w	r1, r4, #24
 23f1576:	f7ff fa15 	bl	23f09a4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_>
 23f157a:	4607      	mov	r7, r0
 23f157c:	2800      	cmp	r0, #0
 23f157e:	d13b      	bne.n	23f15f8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xd8>
    auto field_offset = GetOptionalFieldOffset(field);
 23f1580:	2104      	movs	r1, #4
 23f1582:	4628      	mov	r0, r5
 23f1584:	f7fe fdc6 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f1588:	2800      	cmp	r0, #0
 23f158a:	d039      	beq.n	23f1600 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xe0>
    auto p = data_ + field_offset;
 23f158c:	182a      	adds	r2, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f158e:	5828      	ldr	r0, [r5, r0]
    result->dims = FlatBufferVectorToTfLiteTypeArray(flatbuffer_tensor.shape());
 23f1590:	4410      	add	r0, r2
 23f1592:	f7ff f9d9 	bl	23f0948 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>
 23f1596:	60a0      	str	r0, [r4, #8]
    auto field_offset = GetOptionalFieldOffset(field);
 23f1598:	210c      	movs	r1, #12
 23f159a:	4628      	mov	r0, r5
 23f159c:	f7fe fdba 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f15a0:	b350      	cbz	r0, 23f15f8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xd8>
 23f15a2:	582b      	ldr	r3, [r5, r0]
    auto p = data_ + field_offset;
 23f15a4:	182e      	adds	r6, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f15a6:	441e      	add	r6, r3
  if (src_quantization && src_quantization->scale() &&
 23f15a8:	4630      	mov	r0, r6
 23f15aa:	f7ff fe46 	bl	23f123a <_ZNK6tflite22QuantizationParameters5scaleEv>
 23f15ae:	4605      	mov	r5, r0
 23f15b0:	b310      	cbz	r0, 23f15f8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xd8>
 23f15b2:	6803      	ldr	r3, [r0, #0]
 23f15b4:	b303      	cbz	r3, 23f15f8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xd8>
      src_quantization->zero_point() &&
 23f15b6:	4630      	mov	r0, r6
 23f15b8:	f7ff fe49 	bl	23f124e <_ZNK6tflite22QuantizationParameters10zero_pointEv>
      (src_quantization->scale()->size() > 0) &&
 23f15bc:	b1e0      	cbz	r0, 23f15f8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xd8>
      src_quantization->zero_point() &&
 23f15be:	6803      	ldr	r3, [r0, #0]
 23f15c0:	b1d3      	cbz	r3, 23f15f8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xd8>
 23f15c2:	686b      	ldr	r3, [r5, #4]
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 23f15c4:	4630      	mov	r0, r6
    result->params.scale = src_quantization->scale()->Get(0);
 23f15c6:	60e3      	str	r3, [r4, #12]
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 23f15c8:	f7ff fe41 	bl	23f124e <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 23f15cc:	2100      	movs	r1, #0
 23f15ce:	f7ff ff91 	bl	23f14f4 <_ZNK11flatbuffers6VectorIxE3GetEm>
    result->params.zero_point =
 23f15d2:	6120      	str	r0, [r4, #16]
    int channels = src_quantization->scale()->size();
 23f15d4:	4630      	mov	r0, r6
 23f15d6:	f7ff fe30 	bl	23f123a <_ZNK6tflite22QuantizationParameters5scaleEv>
 23f15da:	f8d0 8000 	ldr.w	r8, [r0]
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 23f15de:	f1bb 0f00 	cmp.w	fp, #0
 23f15e2:	d010      	beq.n	23f1606 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xe6>
                      alignof(TfLiteAffineQuantization)))
 23f15e4:	f8da 3000 	ldr.w	r3, [sl]
                  non_persistent_buffer_allocator->AllocateTemp(
 23f15e8:	2204      	movs	r2, #4
 23f15ea:	210c      	movs	r1, #12
 23f15ec:	4650      	mov	r0, sl
 23f15ee:	689b      	ldr	r3, [r3, #8]
 23f15f0:	4798      	blx	r3
    if (quantization == nullptr) {
 23f15f2:	4605      	mov	r5, r0
 23f15f4:	b9e8      	cbnz	r0, 23f1632 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x112>
      return kTfLiteError;
 23f15f6:	2701      	movs	r7, #1
}
 23f15f8:	4638      	mov	r0, r7
 23f15fa:	b003      	add	sp, #12
 23f15fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 23f1600:	4b2b      	ldr	r3, [pc, #172]	; (23f16b0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x190>)
 23f1602:	60a3      	str	r3, [r4, #8]
 23f1604:	e7c8      	b.n	23f1598 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x78>
                      alignof(TfLiteAffineQuantization)));
 23f1606:	f8d9 3000 	ldr.w	r3, [r9]
                  persistent_buffer_allocator->AllocatePersistentBuffer(
 23f160a:	2204      	movs	r2, #4
 23f160c:	210c      	movs	r1, #12
 23f160e:	4648      	mov	r0, r9
 23f1610:	689b      	ldr	r3, [r3, #8]
 23f1612:	4798      	blx	r3
    if (quantization == nullptr) {
 23f1614:	4605      	mov	r5, r0
 23f1616:	2800      	cmp	r0, #0
 23f1618:	d0ed      	beq.n	23f15f6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xd6>
                      alignof(TfLiteIntArray)));
 23f161a:	f8d9 3000 	ldr.w	r3, [r9]
                  persistent_buffer_allocator->AllocatePersistentBuffer(
 23f161e:	4640      	mov	r0, r8
                      alignof(TfLiteIntArray)));
 23f1620:	f8d3 a008 	ldr.w	sl, [r3, #8]
                  persistent_buffer_allocator->AllocatePersistentBuffer(
 23f1624:	f7fe fd3d 	bl	23f00a2 <TfLiteIntArrayGetSizeInBytes>
 23f1628:	2204      	movs	r2, #4
 23f162a:	4601      	mov	r1, r0
 23f162c:	4648      	mov	r0, r9
 23f162e:	47d0      	blx	sl
 23f1630:	e00a      	b.n	23f1648 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x128>
                      alignof(TfLiteIntArray)))
 23f1632:	f8da 3000 	ldr.w	r3, [sl]
                  non_persistent_buffer_allocator->AllocateTemp(
 23f1636:	4640      	mov	r0, r8
                      alignof(TfLiteIntArray)))
 23f1638:	f8d3 9008 	ldr.w	r9, [r3, #8]
                  non_persistent_buffer_allocator->AllocateTemp(
 23f163c:	f7fe fd31 	bl	23f00a2 <TfLiteIntArrayGetSizeInBytes>
 23f1640:	2204      	movs	r2, #4
 23f1642:	4601      	mov	r1, r0
 23f1644:	4650      	mov	r0, sl
 23f1646:	47c8      	blx	r9
    quantization->zero_point =
 23f1648:	6068      	str	r0, [r5, #4]
    if (quantization->zero_point == nullptr) {
 23f164a:	2800      	cmp	r0, #0
 23f164c:	d0d3      	beq.n	23f15f6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xd6>
        FlatBufferVectorToTfLiteTypeArray(src_quantization->scale());
 23f164e:	4630      	mov	r0, r6
 23f1650:	f7ff fdf3 	bl	23f123a <_ZNK6tflite22QuantizationParameters5scaleEv>
 23f1654:	f7ff f979 	bl	23f094a <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIfEE>
    for (int i = 0; i < channels; i++) {
 23f1658:	f04f 0900 	mov.w	r9, #0
    quantization->zero_point->size = channels;
 23f165c:	686b      	ldr	r3, [r5, #4]
    quantization->scale =
 23f165e:	6028      	str	r0, [r5, #0]
    quantization->zero_point->size = channels;
 23f1660:	f8c3 8000 	str.w	r8, [r3]
    for (int i = 0; i < channels; i++) {
 23f1664:	f8d5 a004 	ldr.w	sl, [r5, #4]
 23f1668:	45c1      	cmp	r9, r8
 23f166a:	da15      	bge.n	23f1698 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x178>
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 23f166c:	4630      	mov	r0, r6
 23f166e:	f7ff fdee 	bl	23f124e <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 23f1672:	4683      	mov	fp, r0
                                   src_quantization->scale()->size()
 23f1674:	4630      	mov	r0, r6
 23f1676:	f7ff fde0 	bl	23f123a <_ZNK6tflite22QuantizationParameters5scaleEv>
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 23f167a:	f8db 2000 	ldr.w	r2, [fp]
 23f167e:	6803      	ldr	r3, [r0, #0]
                               : src_quantization->zero_point()->Get(0);
 23f1680:	4658      	mov	r0, fp
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 23f1682:	429a      	cmp	r2, r3
                               ? src_quantization->zero_point()->Get(i)
 23f1684:	bf0c      	ite	eq
 23f1686:	4649      	moveq	r1, r9
                               : src_quantization->zero_point()->Get(0);
 23f1688:	2100      	movne	r1, #0
 23f168a:	f7ff ff33 	bl	23f14f4 <_ZNK11flatbuffers6VectorIxE3GetEm>
    for (int i = 0; i < channels; i++) {
 23f168e:	f109 0901 	add.w	r9, r9, #1
      zero_point_data[i] = src_quantization->zero_point()->size() ==
 23f1692:	f84a 0f04 	str.w	r0, [sl, #4]!
    for (int i = 0; i < channels; i++) {
 23f1696:	e7e7      	b.n	23f1668 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x148>
    auto field_offset = GetOptionalFieldOffset(field);
 23f1698:	2110      	movs	r1, #16
 23f169a:	4630      	mov	r0, r6
 23f169c:	f7fe fd3a 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f16a0:	b100      	cbz	r0, 23f16a4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0x184>
 23f16a2:	5830      	ldr	r0, [r6, r0]
    result->quantization = {kTfLiteAffineQuantization, quantization};
 23f16a4:	2301      	movs	r3, #1
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 23f16a6:	60a8      	str	r0, [r5, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
 23f16a8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 23f16ac:	6365      	str	r5, [r4, #52]	; 0x34
 23f16ae:	e7a3      	b.n	23f15f8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor+0xd8>
 23f16b0:	023fef54 	.word	0x023fef54

023f16b4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl>:
    const int32_t* offline_planner_offsets) {
 23f16b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f16b8:	4607      	mov	r7, r0
 23f16ba:	4688      	mov	r8, r1
 23f16bc:	461e      	mov	r6, r3
 23f16be:	4614      	mov	r4, r2
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 23f16c0:	2500      	movs	r5, #0
 23f16c2:	4640      	mov	r0, r8
 23f16c4:	f7ff f9ca 	bl	23f0a5c <_ZNK6tflite8SubGraph7tensorsEv>
 23f16c8:	6803      	ldr	r3, [r0, #0]
 23f16ca:	429d      	cmp	r5, r3
 23f16cc:	d21e      	bcs.n	23f170c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x58>
    auto* tensor = subgraph->tensors()->Get(i);
 23f16ce:	4629      	mov	r1, r5
 23f16d0:	f7ff fa7e 	bl	23f0bd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
    if (tensor->is_variable()) {
 23f16d4:	f7ff f9b7 	bl	23f0a46 <_ZNK6tflite6Tensor11is_variableEv>
 23f16d8:	b1a8      	cbz	r0, 23f1706 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x52>
      if (offline_planner_offsets == nullptr ||
 23f16da:	b11e      	cbz	r6, 23f16e4 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x30>
 23f16dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 23f16e0:	3301      	adds	r3, #1
 23f16e2:	d110      	bne.n	23f1706 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x52>
        TF_LITE_ENSURE_STATUS(
 23f16e4:	4620      	mov	r0, r4
 23f16e6:	a901      	add	r1, sp, #4
 23f16e8:	f7ff f990 	bl	23f0a0c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 23f16ec:	b940      	cbnz	r0, 23f1700 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x4c>
            persistent_buffer_allocator_->AllocatePersistentBuffer(
 23f16ee:	68b8      	ldr	r0, [r7, #8]
 23f16f0:	2210      	movs	r2, #16
                buffer_size, MicroArenaBufferAlignment());
 23f16f2:	6803      	ldr	r3, [r0, #0]
            persistent_buffer_allocator_->AllocatePersistentBuffer(
 23f16f4:	9901      	ldr	r1, [sp, #4]
 23f16f6:	689b      	ldr	r3, [r3, #8]
 23f16f8:	4798      	blx	r3
        eval_tensors[i].data.data =
 23f16fa:	6020      	str	r0, [r4, #0]
        if (eval_tensors[i].data.data == nullptr) {
 23f16fc:	b918      	cbnz	r0, 23f1706 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x52>
          return kTfLiteError;
 23f16fe:	2001      	movs	r0, #1
}
 23f1700:	b002      	add	sp, #8
 23f1702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 23f1706:	3501      	adds	r5, #1
 23f1708:	340c      	adds	r4, #12
 23f170a:	e7da      	b.n	23f16c2 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0xe>
  return kTfLiteOk;
 23f170c:	2000      	movs	r0, #0
 23f170e:	e7f7      	b.n	23f1700 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensorPKl+0x4c>

023f1710 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 23f1710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23f1714:	4606      	mov	r6, r0
 23f1716:	460f      	mov	r7, r1
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 23f1718:	4615      	mov	r5, r2
 23f171a:	b90a      	cbnz	r2, 23f1720 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
 23f171c:	f003 f846 	bl	23f47ac <abort>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 23f1720:	2400      	movs	r4, #0
            sizeof(NodeAndRegistration) * operators_size,
 23f1722:	f04f 082c 	mov.w	r8, #44	; 0x2c
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 23f1726:	4638      	mov	r0, r7
 23f1728:	f7ff f9a2 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f172c:	6803      	ldr	r3, [r0, #0]
 23f172e:	429c      	cmp	r4, r3
 23f1730:	d214      	bcs.n	23f175c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x4c>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 23f1732:	4621      	mov	r1, r4
 23f1734:	f7ff fa7c 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    TFLITE_DCHECK(subgraph != nullptr);
 23f1738:	2800      	cmp	r0, #0
 23f173a:	d0ef      	beq.n	23f171c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xc>
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 23f173c:	f7ff f8ce 	bl	23f08dc <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 23f1740:	68b3      	ldr	r3, [r6, #8]
 23f1742:	fb08 f100 	mul.w	r1, r8, r0
            alignof(NodeAndRegistration)));
 23f1746:	681a      	ldr	r2, [r3, #0]
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 23f1748:	4618      	mov	r0, r3
 23f174a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 23f174e:	2204      	movs	r2, #4
 23f1750:	47c8      	blx	r9
    if (output == nullptr) {
 23f1752:	b130      	cbz	r0, 23f1762 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x52>
    subgraph_allocations[subgraph_idx].node_and_registrations = output;
 23f1754:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 23f1758:	3401      	adds	r4, #1
 23f175a:	e7e4      	b.n	23f1726 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
  return kTfLiteOk;
 23f175c:	2000      	movs	r0, #0
}
 23f175e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return kTfLiteError;
 23f1762:	2001      	movs	r0, #1
 23f1764:	e7fb      	b.n	23f175e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x4e>

023f1766 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
    int tensor_index, int subgraph_index) {
 23f1766:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f176a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 23f176e:	4607      	mov	r7, r0
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 23f1770:	4608      	mov	r0, r1
    int tensor_index, int subgraph_index) {
 23f1772:	4688      	mov	r8, r1
 23f1774:	4616      	mov	r6, r2
 23f1776:	461d      	mov	r5, r3
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 23f1778:	f7ff f97a 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f177c:	4649      	mov	r1, r9
 23f177e:	f7ff fa57 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
  TFLITE_DCHECK(subgraph != nullptr);
 23f1782:	b908      	cbnz	r0, 23f1788 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x22>
 23f1784:	f003 f812 	bl	23f47ac <abort>
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 23f1788:	683b      	ldr	r3, [r7, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(
 23f178a:	f04f 0a00 	mov.w	sl, #0
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 23f178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f1790:	4638      	mov	r0, r7
 23f1792:	4798      	blx	r3
  if (PopulateTfLiteTensorFromFlatbuffer(
 23f1794:	e9cd 9a00 	strd	r9, sl, [sp]
          /*allocate_temp=*/false) != kTfLiteOk) {
 23f1798:	683b      	ldr	r3, [r7, #0]
  TfLiteTensor* tensor = AllocatePersistentTfLiteTensorInternal();
 23f179a:	4604      	mov	r4, r0
  if (PopulateTfLiteTensorFromFlatbuffer(
 23f179c:	4602      	mov	r2, r0
 23f179e:	f8d3 b030 	ldr.w	fp, [r3, #48]	; 0x30
 23f17a2:	4641      	mov	r1, r8
 23f17a4:	462b      	mov	r3, r5
 23f17a6:	4638      	mov	r0, r7
 23f17a8:	47d8      	blx	fp
 23f17aa:	b978      	cbnz	r0, 23f17cc <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x66>
  if (subgraph_allocations != nullptr) {
 23f17ac:	b156      	cbz	r6, 23f17c4 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x5e>
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 23f17ae:	230c      	movs	r3, #12
 23f17b0:	435d      	muls	r5, r3
 23f17b2:	eb06 06c9 	add.w	r6, r6, r9, lsl #3
 23f17b6:	6873      	ldr	r3, [r6, #4]
 23f17b8:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
 23f17ba:	6063      	str	r3, [r4, #4]
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 23f17bc:	6873      	ldr	r3, [r6, #4]
 23f17be:	441d      	add	r5, r3
 23f17c0:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
 23f17c2:	60a3      	str	r3, [r4, #8]
}
 23f17c4:	4620      	mov	r0, r4
 23f17c6:	b003      	add	sp, #12
 23f17c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return nullptr;
 23f17cc:	4654      	mov	r4, sl
 23f17ce:	e7f9      	b.n	23f17c4 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x5e>

023f17d0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii>:
    int tensor_index, int subgraph_index) {
 23f17d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f17d4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 23f17d8:	4607      	mov	r7, r0
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 23f17da:	4608      	mov	r0, r1
    int tensor_index, int subgraph_index) {
 23f17dc:	4688      	mov	r8, r1
 23f17de:	4616      	mov	r6, r2
 23f17e0:	461d      	mov	r5, r3
  const SubGraph* subgraph = model->subgraphs()->Get(subgraph_index);
 23f17e2:	f7ff f945 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f17e6:	4649      	mov	r1, r9
 23f17e8:	f7ff fa22 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
  TFLITE_DCHECK(subgraph != nullptr);
 23f17ec:	b908      	cbnz	r0, 23f17f2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x22>
 23f17ee:	f002 ffdd 	bl	23f47ac <abort>
      non_persistent_buffer_allocator_->AllocateTemp(sizeof(TfLiteTensor),
 23f17f2:	6878      	ldr	r0, [r7, #4]
 23f17f4:	2204      	movs	r2, #4
                                                     alignof(TfLiteTensor)));
 23f17f6:	6803      	ldr	r3, [r0, #0]
      non_persistent_buffer_allocator_->AllocateTemp(sizeof(TfLiteTensor),
 23f17f8:	2140      	movs	r1, #64	; 0x40
 23f17fa:	689b      	ldr	r3, [r3, #8]
 23f17fc:	4798      	blx	r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 23f17fe:	2201      	movs	r2, #1
 23f1800:	e9cd 9200 	strd	r9, r2, [sp]
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 23f1804:	683b      	ldr	r3, [r7, #0]
      non_persistent_buffer_allocator_->AllocateTemp(sizeof(TfLiteTensor),
 23f1806:	4604      	mov	r4, r0
  if (PopulateTfLiteTensorFromFlatbuffer(model, tensor, tensor_index,
 23f1808:	4602      	mov	r2, r0
 23f180a:	f8d3 a030 	ldr.w	sl, [r3, #48]	; 0x30
 23f180e:	4641      	mov	r1, r8
 23f1810:	462b      	mov	r3, r5
 23f1812:	4638      	mov	r0, r7
 23f1814:	47d0      	blx	sl
 23f1816:	b978      	cbnz	r0, 23f1838 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x68>
  if (subgraph_allocations != nullptr) {
 23f1818:	b156      	cbz	r6, 23f1830 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x60>
        subgraph_allocations[subgraph_index].tensors[tensor_index].data.data;
 23f181a:	230c      	movs	r3, #12
 23f181c:	435d      	muls	r5, r3
 23f181e:	eb06 06c9 	add.w	r6, r6, r9, lsl #3
 23f1822:	6873      	ldr	r3, [r6, #4]
 23f1824:	595b      	ldr	r3, [r3, r5]
    tensor->data.data =
 23f1826:	6063      	str	r3, [r4, #4]
        subgraph_allocations[subgraph_index].tensors[tensor_index].dims;
 23f1828:	6873      	ldr	r3, [r6, #4]
 23f182a:	441d      	add	r5, r3
 23f182c:	686b      	ldr	r3, [r5, #4]
    tensor->dims =
 23f182e:	60a3      	str	r3, [r4, #8]
}
 23f1830:	4620      	mov	r0, r4
 23f1832:	b002      	add	sp, #8
 23f1834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return nullptr;
 23f1838:	2400      	movs	r4, #0
 23f183a:	e7f9      	b.n	23f1830 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEPKNS_19SubgraphAllocationsEii+0x60>

023f183c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle* scratch_buffer_handles) {
 23f183c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f1840:	4699      	mov	r9, r3
  AllocationInfoBuilder builder(model, non_persistent_buffer_allocator_);
 23f1842:	6843      	ldr	r3, [r0, #4]
    ScratchBufferHandle* scratch_buffer_handles) {
 23f1844:	b091      	sub	sp, #68	; 0x44
// `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(const Model* model,
                        INonPersistentBufferAllocator* non_persistent_allocator)
      : model_(model), non_persistent_allocator_(non_persistent_allocator) {}
 23f1846:	e9cd 1307 	strd	r1, r3, [sp, #28]
 23f184a:	2300      	movs	r3, #0
 23f184c:	4605      	mov	r5, r0
 23f184e:	4688      	mov	r8, r1
  TF_LITE_ENSURE_STATUS(
 23f1850:	6981      	ldr	r1, [r0, #24]
 23f1852:	a807      	add	r0, sp, #28
    ScratchBufferHandle* scratch_buffer_handles) {
 23f1854:	4616      	mov	r6, r2
 23f1856:	930f      	str	r3, [sp, #60]	; 0x3c
  TF_LITE_ENSURE_STATUS(
 23f1858:	f7ff fa02 	bl	23f0c60 <_ZN6tflite21AllocationInfoBuilder20CreateAllocationInfoEi>
 23f185c:	4604      	mov	r4, r0
 23f185e:	2800      	cmp	r0, #0
 23f1860:	d174      	bne.n	23f194c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x110>
  const int32_t* offline_planner_offsets = nullptr;
 23f1862:	9005      	str	r0, [sp, #20]
  TF_LITE_ENSURE_STATUS(
 23f1864:	a905      	add	r1, sp, #20
 23f1866:	a807      	add	r0, sp, #28
 23f1868:	f7ff f924 	bl	23f0ab4 <_ZN6tflite21AllocationInfoBuilder24GetOfflinePlannedOffsetsEPPKl>
 23f186c:	4604      	mov	r4, r0
 23f186e:	2800      	cmp	r0, #0
 23f1870:	d16c      	bne.n	23f194c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x110>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 23f1872:	4607      	mov	r7, r0
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 23f1874:	f106 0a04 	add.w	sl, r6, #4
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 23f1878:	4640      	mov	r0, r8
 23f187a:	f7ff f8f9 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f187e:	6803      	ldr	r3, [r0, #0]
 23f1880:	429f      	cmp	r7, r3
 23f1882:	d212      	bcs.n	23f18aa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x6e>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 23f1884:	4639      	mov	r1, r7
 23f1886:	f7ff f9d3 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    TFLITE_DCHECK(subgraph != nullptr);
 23f188a:	4601      	mov	r1, r0
 23f188c:	b908      	cbnz	r0, 23f1892 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x56>
 23f188e:	f002 ff8d 	bl	23f47ac <abort>
    TF_LITE_ENSURE_STATUS(AllocateVariables(
 23f1892:	682b      	ldr	r3, [r5, #0]
 23f1894:	4628      	mov	r0, r5
 23f1896:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 23f1898:	f85a 2037 	ldr.w	r2, [sl, r7, lsl #3]
 23f189c:	9b05      	ldr	r3, [sp, #20]
 23f189e:	47a0      	blx	r4
 23f18a0:	4604      	mov	r4, r0
 23f18a2:	2800      	cmp	r0, #0
 23f18a4:	d152      	bne.n	23f194c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x110>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 23f18a6:	3701      	adds	r7, #1
 23f18a8:	e7e6      	b.n	23f1878 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x3c>
  TF_LITE_ENSURE_STATUS(
 23f18aa:	4632      	mov	r2, r6
 23f18ac:	9905      	ldr	r1, [sp, #20]
 23f18ae:	a807      	add	r0, sp, #28
 23f18b0:	f7ff fa56 	bl	23f0d60 <_ZN6tflite21AllocationInfoBuilder24InitializeAllocationInfoEPKlPNS_19SubgraphAllocationsE>
 23f18b4:	4604      	mov	r4, r0
 23f18b6:	2800      	cmp	r0, #0
 23f18b8:	d148      	bne.n	23f194c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x110>
      GetScratchBufferRequests();
 23f18ba:	4628      	mov	r0, r5
 23f18bc:	f7ff fdc8 	bl	23f1450 <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
  TF_LITE_ENSURE_STATUS(builder.MarkAllocationLifetimes(
 23f18c0:	4621      	mov	r1, r4
      GetScratchBufferRequests();
 23f18c2:	4602      	mov	r2, r0
  TF_LITE_ENSURE_STATUS(builder.MarkAllocationLifetimes(
 23f18c4:	464b      	mov	r3, r9
 23f18c6:	9600      	str	r6, [sp, #0]
 23f18c8:	a807      	add	r0, sp, #28
 23f18ca:	f7ff facf 	bl	23f0e6c <_ZN6tflite21AllocationInfoBuilder23MarkAllocationLifetimesEiPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleEPNS_19SubgraphAllocationsE>
 23f18ce:	4604      	mov	r4, r0
 23f18d0:	2800      	cmp	r0, #0
 23f18d2:	d13b      	bne.n	23f194c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x110>
      internal::ScratchBufferRequest* scratch_buffer_requests,
      ScratchBufferHandle* scratch_buffer_handles,
      SubgraphAllocations* allocations);

  // Returns the number of allocations.
  int AllocationCount() const { return info_.allocation_info_count; }
 23f18d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      non_persistent_buffer_allocator_->GetAvailableMemory(
 23f18d6:	6868      	ldr	r0, [r5, #4]
 23f18d8:	9303      	str	r3, [sp, #12]
          MicroArenaBufferAlignment());
 23f18da:	6803      	ldr	r3, [r0, #0]
      non_persistent_buffer_allocator_->GetAvailableMemory(
 23f18dc:	2110      	movs	r1, #16
 23f18de:	6b1b      	ldr	r3, [r3, #48]	; 0x30

  // Returns a pointer to the built AllocationInfo array.
  AllocationInfo* Finish() const { return info_.allocation_info; }
 23f18e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23f18e2:	4798      	blx	r3
 23f18e4:	4680      	mov	r8, r0
  uint8_t* planner_arena = non_persistent_buffer_allocator_->AllocateTemp(
 23f18e6:	6868      	ldr	r0, [r5, #4]
 23f18e8:	2210      	movs	r2, #16
      remaining_arena_size, MicroArenaBufferAlignment());
 23f18ea:	6803      	ldr	r3, [r0, #0]
  uint8_t* planner_arena = non_persistent_buffer_allocator_->AllocateTemp(
 23f18ec:	4641      	mov	r1, r8
 23f18ee:	689b      	ldr	r3, [r3, #8]
 23f18f0:	4798      	blx	r3
  if (planner_arena == nullptr) {
 23f18f2:	4607      	mov	r7, r0
 23f18f4:	2800      	cmp	r0, #0
 23f18f6:	d034      	beq.n	23f1962 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x126>
  memory_planner_->Init(planner_arena, remaining_arena_size);
 23f18f8:	4642      	mov	r2, r8
  TF_LITE_ENSURE_STATUS(
 23f18fa:	46b1      	mov	r9, r6
 23f18fc:	46b0      	mov	r8, r6
  for (size_t i = 0; i < allocation_info_size; ++i) {
 23f18fe:	46a3      	mov	fp, r4
  memory_planner_->Init(planner_arena, remaining_arena_size);
 23f1900:	6928      	ldr	r0, [r5, #16]
 23f1902:	4639      	mov	r1, r7
 23f1904:	6803      	ldr	r3, [r0, #0]
 23f1906:	69db      	ldr	r3, [r3, #28]
 23f1908:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(
 23f190a:	f8d5 a010 	ldr.w	sl, [r5, #16]
  for (size_t i = 0; i < allocation_info_size; ++i) {
 23f190e:	9b03      	ldr	r3, [sp, #12]
 23f1910:	455b      	cmp	r3, fp
 23f1912:	d04f      	beq.n	23f19b4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x178>
    if (current->needs_allocating) {
 23f1914:	f899 3014 	ldrb.w	r3, [r9, #20]
 23f1918:	b923      	cbnz	r3, 23f1924 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xe8>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 23f191a:	f10b 0b01 	add.w	fp, fp, #1
 23f191e:	f109 0918 	add.w	r9, r9, #24
 23f1922:	e7f4      	b.n	23f190e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xd2>
          AlignSizeUp(current->bytes, MicroArenaBufferAlignment());
 23f1924:	2110      	movs	r1, #16
 23f1926:	f8d9 0000 	ldr.w	r0, [r9]
 23f192a:	f7ff f819 	bl	23f0960 <_ZN6tflite11AlignSizeUpEjj>
      if (current->offline_offset == kOnlinePlannedBuffer) {
 23f192e:	f8d9 2010 	ldr.w	r2, [r9, #16]
          AlignSizeUp(current->bytes, MicroArenaBufferAlignment());
 23f1932:	4601      	mov	r1, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
 23f1934:	1c53      	adds	r3, r2, #1
 23f1936:	f8da 3000 	ldr.w	r3, [sl]
 23f193a:	d10b      	bne.n	23f1954 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x118>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(aligned_bytes_required,
 23f193c:	689c      	ldr	r4, [r3, #8]
 23f193e:	4650      	mov	r0, sl
 23f1940:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
 23f1944:	47a0      	blx	r4
        TF_LITE_ENSURE_STATUS(
 23f1946:	4604      	mov	r4, r0
 23f1948:	2800      	cmp	r0, #0
 23f194a:	d0e6      	beq.n	23f191a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0xde>
}
 23f194c:	4620      	mov	r0, r4
 23f194e:	b011      	add	sp, #68	; 0x44
 23f1950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TF_LITE_ENSURE_STATUS(
 23f1954:	9200      	str	r2, [sp, #0]
 23f1956:	68dc      	ldr	r4, [r3, #12]
 23f1958:	4650      	mov	r0, sl
 23f195a:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
 23f195e:	47a0      	blx	r4
 23f1960:	e7f1      	b.n	23f1946 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x10a>
    return kTfLiteError;
 23f1962:	2401      	movs	r4, #1
 23f1964:	e7f2      	b.n	23f194c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x110>
  builder.FreeAllocationInfo();
 23f1966:	a807      	add	r0, sp, #28
 23f1968:	f7ff f896 	bl	23f0a98 <_ZN6tflite21AllocationInfoBuilder18FreeAllocationInfoEv>
  non_persistent_buffer_allocator_->DeallocateTemp(planner_arena);
 23f196c:	6868      	ldr	r0, [r5, #4]
 23f196e:	4639      	mov	r1, r7
 23f1970:	6803      	ldr	r3, [r0, #0]
 23f1972:	68db      	ldr	r3, [r3, #12]
 23f1974:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(
 23f1976:	6868      	ldr	r0, [r5, #4]
 23f1978:	6803      	ldr	r3, [r0, #0]
 23f197a:	695b      	ldr	r3, [r3, #20]
 23f197c:	4798      	blx	r3
 23f197e:	4604      	mov	r4, r0
 23f1980:	2800      	cmp	r0, #0
 23f1982:	d1e3      	bne.n	23f194c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x110>
  TF_LITE_ENSURE_STATUS(
 23f1984:	6868      	ldr	r0, [r5, #4]
 23f1986:	69e9      	ldr	r1, [r5, #28]
 23f1988:	6803      	ldr	r3, [r0, #0]
 23f198a:	6a1b      	ldr	r3, [r3, #32]
 23f198c:	4798      	blx	r3
 23f198e:	4604      	mov	r4, r0
 23f1990:	2800      	cmp	r0, #0
 23f1992:	d1db      	bne.n	23f194c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x110>
  head_usage = memory_planner_->GetMaximumMemorySize();
 23f1994:	6928      	ldr	r0, [r5, #16]
 23f1996:	6803      	ldr	r3, [r0, #0]
 23f1998:	691b      	ldr	r3, [r3, #16]
 23f199a:	4798      	blx	r3
  if (max_head_buffer_usage_ < head_usage) {
 23f199c:	6a2b      	ldr	r3, [r5, #32]
  TF_LITE_ENSURE_STATUS(
 23f199e:	2210      	movs	r2, #16
  if (max_head_buffer_usage_ < head_usage) {
 23f19a0:	4283      	cmp	r3, r0
    max_head_buffer_usage_ = head_usage;
 23f19a2:	bf38      	it	cc
 23f19a4:	6228      	strcc	r0, [r5, #32]
  TF_LITE_ENSURE_STATUS(
 23f19a6:	6868      	ldr	r0, [r5, #4]
 23f19a8:	6a29      	ldr	r1, [r5, #32]
 23f19aa:	6803      	ldr	r3, [r0, #0]
 23f19ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f19ae:	4798      	blx	r3
 23f19b0:	4604      	mov	r4, r0
 23f19b2:	e7cb      	b.n	23f194c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x110>
  TF_LITE_ENSURE_STATUS(
 23f19b4:	6868      	ldr	r0, [r5, #4]
 23f19b6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 23f19ba:	6803      	ldr	r3, [r0, #0]
  int planner_index = 0;
 23f19bc:	f04f 0b00 	mov.w	fp, #0
  TF_LITE_ENSURE_STATUS(
 23f19c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f19c2:	4798      	blx	r3
 23f19c4:	2318      	movs	r3, #24
 23f19c6:	4681      	mov	r9, r0
  for (size_t i = 0; i < allocation_info_size; ++i) {
 23f19c8:	9a03      	ldr	r2, [sp, #12]
 23f19ca:	fb03 6602 	mla	r6, r3, r2, r6
 23f19ce:	4546      	cmp	r6, r8
 23f19d0:	d0c9      	beq.n	23f1966 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x12a>
    if (current->needs_allocating) {
 23f19d2:	f898 3014 	ldrb.w	r3, [r8, #20]
 23f19d6:	b19b      	cbz	r3, 23f1a00 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x1c4>
      int offset = -1;
 23f19d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f19dc:	9306      	str	r3, [sp, #24]
      TF_LITE_ENSURE_STATUS(
 23f19de:	f8da 3000 	ldr.w	r3, [sl]
 23f19e2:	4659      	mov	r1, fp
 23f19e4:	4650      	mov	r0, sl
 23f19e6:	699b      	ldr	r3, [r3, #24]
 23f19e8:	aa06      	add	r2, sp, #24
 23f19ea:	4798      	blx	r3
 23f19ec:	4604      	mov	r4, r0
 23f19ee:	2800      	cmp	r0, #0
 23f19f0:	d1ac      	bne.n	23f194c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x110>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 23f19f2:	9b06      	ldr	r3, [sp, #24]
 23f19f4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 23f19f8:	444b      	add	r3, r9
 23f19fa:	6013      	str	r3, [r2, #0]
      ++planner_index;
 23f19fc:	f10b 0b01 	add.w	fp, fp, #1
  for (size_t i = 0; i < allocation_info_size; ++i) {
 23f1a00:	f108 0818 	add.w	r8, r8, #24
 23f1a04:	e7e3      	b.n	23f19ce <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPNS_19SubgraphAllocationsEPNS_19ScratchBufferHandleE+0x192>

023f1a06 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib>:
    int subgraph_idx, bool allocate_temp) {
 23f1a06:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f1a0a:	4698      	mov	r8, r3
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 23f1a0c:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
    int subgraph_idx, bool allocate_temp) {
 23f1a10:	4615      	mov	r5, r2
 23f1a12:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 23f1a16:	4608      	mov	r0, r1
    int subgraph_idx, bool allocate_temp) {
 23f1a18:	9201      	str	r2, [sp, #4]
 23f1a1a:	460c      	mov	r4, r1
      *model->subgraphs()->Get(subgraph_idx)->tensors()->Get(tensor_index),
 23f1a1c:	f7ff f828 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f1a20:	9908      	ldr	r1, [sp, #32]
 23f1a22:	f7ff f905 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 23f1a26:	f7ff f819 	bl	23f0a5c <_ZNK6tflite8SubGraph7tensorsEv>
 23f1a2a:	4641      	mov	r1, r8
 23f1a2c:	f7ff f8d0 	bl	23f0bd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
    auto field_offset = GetOptionalFieldOffset(field);
 23f1a30:	210c      	movs	r1, #12
 23f1a32:	9000      	str	r0, [sp, #0]
 23f1a34:	4620      	mov	r0, r4
 23f1a36:	f7fe fb6d 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f1a3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 23f1a3e:	b118      	cbz	r0, 23f1a48 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEP12TfLiteTensoriib+0x42>
    auto p = data_ + field_offset;
 23f1a40:	eb04 0c00 	add.w	ip, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f1a44:	5820      	ldr	r0, [r4, r0]
 23f1a46:	4460      	add	r0, ip
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 23f1a48:	e9cd 0508 	strd	r0, r5, [sp, #32]
 23f1a4c:	4639      	mov	r1, r7
 23f1a4e:	4630      	mov	r0, r6
}
 23f1a50:	b002      	add	sp, #8
 23f1a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 23f1a56:	f7ff bd63 	b.w	23f1520 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_26IPersistentBufferAllocatorEPNS_29INonPersistentBufferAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS8_6OffsetINS_6BufferEEEEEP12TfLiteTensor>

023f1a5a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE>:
    const Model* model, SubgraphAllocations* subgraph_allocations) {
 23f1a5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f1a5e:	4681      	mov	r9, r0
 23f1a60:	460c      	mov	r4, r1
  TFLITE_DCHECK(subgraph_allocations != nullptr);
 23f1a62:	9200      	str	r2, [sp, #0]
 23f1a64:	b90a      	cbnz	r2, 23f1a6a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x10>
 23f1a66:	f002 fea1 	bl	23f47ac <abort>
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 23f1a6a:	2500      	movs	r5, #0
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 23f1a6c:	f04f 0a0c 	mov.w	sl, #12
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 23f1a70:	4620      	mov	r0, r4
 23f1a72:	f7fe fffd 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f1a76:	6803      	ldr	r3, [r0, #0]
 23f1a78:	429d      	cmp	r5, r3
 23f1a7a:	d23b      	bcs.n	23f1af4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x9a>
    const SubGraph* subgraph = model->subgraphs()->Get(subgraph_idx);
 23f1a7c:	4629      	mov	r1, r5
 23f1a7e:	f7ff f8d7 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    TFLITE_DCHECK(subgraph != nullptr);
 23f1a82:	4680      	mov	r8, r0
 23f1a84:	2800      	cmp	r0, #0
 23f1a86:	d0ee      	beq.n	23f1a66 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0xc>
    size_t alloc_count = subgraph->tensors()->size();
 23f1a88:	f7fe ffe8 	bl	23f0a5c <_ZNK6tflite8SubGraph7tensorsEv>
  uoffset_t size() const { return EndianScalar(length_); }
 23f1a8c:	f8d0 b000 	ldr.w	fp, [r0]
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 23f1a90:	f8d9 0008 	ldr.w	r0, [r9, #8]
 23f1a94:	2204      	movs	r2, #4
            sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 23f1a96:	6803      	ldr	r3, [r0, #0]
        persistent_buffer_allocator_->AllocatePersistentBuffer(
 23f1a98:	fb0a f10b 	mul.w	r1, sl, fp
 23f1a9c:	689b      	ldr	r3, [r3, #8]
 23f1a9e:	4798      	blx	r3
    if (tensors == nullptr) {
 23f1aa0:	4606      	mov	r6, r0
 23f1aa2:	b918      	cbnz	r0, 23f1aac <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x52>
      return kTfLiteError;
 23f1aa4:	2001      	movs	r0, #1
}
 23f1aa6:	b003      	add	sp, #12
 23f1aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (size_t i = 0; i < alloc_count; ++i) {
 23f1aac:	2700      	movs	r7, #0
 23f1aae:	45bb      	cmp	fp, r7
 23f1ab0:	d01a      	beq.n	23f1ae8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8e>
          *subgraph->tensors()->Get(i), model->buffers(), &tensors[i]);
 23f1ab2:	4640      	mov	r0, r8
 23f1ab4:	f7fe ffd2 	bl	23f0a5c <_ZNK6tflite8SubGraph7tensorsEv>
 23f1ab8:	4639      	mov	r1, r7
 23f1aba:	f7ff f889 	bl	23f0bd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
    auto field_offset = GetOptionalFieldOffset(field);
 23f1abe:	210c      	movs	r1, #12
 23f1ac0:	9001      	str	r0, [sp, #4]
 23f1ac2:	4620      	mov	r0, r4
 23f1ac4:	f7fe fb26 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f1ac8:	9b01      	ldr	r3, [sp, #4]
 23f1aca:	b158      	cbz	r0, 23f1ae4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x8a>
    auto p = data_ + field_offset;
 23f1acc:	1821      	adds	r1, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f1ace:	5820      	ldr	r0, [r4, r0]
 23f1ad0:	4401      	add	r1, r0
      TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 23f1ad2:	4618      	mov	r0, r3
 23f1ad4:	fb0a 6207 	mla	r2, sl, r7, r6
 23f1ad8:	f7ff fbf6 	bl	23f12c8 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEEP16TfLiteEvalTensor>
      if (status != kTfLiteOk) {
 23f1adc:	2800      	cmp	r0, #0
 23f1ade:	d1e1      	bne.n	23f1aa4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x4a>
    for (size_t i = 0; i < alloc_count; ++i) {
 23f1ae0:	3701      	adds	r7, #1
 23f1ae2:	e7e4      	b.n	23f1aae <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x54>
 23f1ae4:	4601      	mov	r1, r0
 23f1ae6:	e7f4      	b.n	23f1ad2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x78>
    subgraph_allocations[subgraph_idx].tensors = tensors;
 23f1ae8:	9b00      	ldr	r3, [sp, #0]
 23f1aea:	3304      	adds	r3, #4
 23f1aec:	f843 6035 	str.w	r6, [r3, r5, lsl #3]
  for (size_t subgraph_idx = 0; subgraph_idx < model->subgraphs()->size();
 23f1af0:	3501      	adds	r5, #1
 23f1af2:	e7bd      	b.n	23f1a70 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x16>
  return kTfLiteOk;
 23f1af4:	2000      	movs	r0, #0
 23f1af6:	e7d6      	b.n	23f1aa6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPNS_19SubgraphAllocationsE+0x4c>

023f1af8 <_ZN6tflite12MicroContextD1Ev>:
namespace tflite {
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
                           MicroGraph* graph)
    : allocator_(*allocator), graph_(*graph), model_(model) {}

MicroContext::~MicroContext() {}
 23f1af8:	4770      	bx	lr

023f1afa <_ZN6tflite12MicroContext24AllocatePersistentBufferEj>:

void* MicroContext::AllocatePersistentBuffer(size_t bytes) {
  return allocator_.AllocatePersistentBuffer(bytes);
 23f1afa:	6840      	ldr	r0, [r0, #4]
 23f1afc:	6803      	ldr	r3, [r0, #0]
 23f1afe:	695b      	ldr	r3, [r3, #20]
 23f1b00:	4718      	bx	r3

023f1b02 <_ZN6tflite12MicroContext16GetScratchBufferEi>:
      bytes, graph_.GetCurrentSubgraphIndex(), buffer_idx);
}

void* MicroContext::GetScratchBuffer(int buffer_idx) {
  ScratchBufferHandle* handle = scratch_buffer_handles_ + buffer_idx;
  return handle->data;
 23f1b02:	6903      	ldr	r3, [r0, #16]
}
 23f1b04:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 23f1b08:	4770      	bx	lr

023f1b0a <_ZN6tflite12MicroContext24AllocateTempTfLiteTensorEi>:

TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
 23f1b0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 23f1b0c:	e9d0 4201 	ldrd	r4, r2, [r0, #4]
 23f1b10:	6955      	ldr	r5, [r2, #20]
TfLiteTensor* MicroContext::AllocateTempTfLiteTensor(int tensor_idx) {
 23f1b12:	460b      	mov	r3, r1
                                             tensor_idx,
                                             graph_.GetCurrentSubgraphIndex());
 23f1b14:	6821      	ldr	r1, [r4, #0]
  return allocator_.AllocateTempTfLiteTensor(model_, graph_.GetAllocations(),
 23f1b16:	9500      	str	r5, [sp, #0]
 23f1b18:	684d      	ldr	r5, [r1, #4]
 23f1b1a:	6912      	ldr	r2, [r2, #16]
 23f1b1c:	68c1      	ldr	r1, [r0, #12]
 23f1b1e:	4620      	mov	r0, r4
 23f1b20:	47a8      	blx	r5
}
 23f1b22:	b003      	add	sp, #12
 23f1b24:	bd30      	pop	{r4, r5, pc}

023f1b26 <_ZN6tflite12MicroContext26DeallocateTempTfLiteTensorEP12TfLiteTensor>:
  }
  return AllocateTempTfLiteTensor(tensor_index);
}

void MicroContext::DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
  return allocator_.DeallocateTempTfLiteTensor(tensor);
 23f1b26:	6840      	ldr	r0, [r0, #4]
 23f1b28:	6803      	ldr	r3, [r0, #0]
 23f1b2a:	689b      	ldr	r3, [r3, #8]
 23f1b2c:	4718      	bx	r3

023f1b2e <_ZN6tflite12MicroContext13GetEvalTensorEi>:
}

TfLiteEvalTensor* MicroContext::GetEvalTensor(int tensor_idx) {
  return &graph_.GetAllocations()[graph_.GetCurrentSubgraphIndex()]
 23f1b2e:	6882      	ldr	r2, [r0, #8]
              .tensors[tensor_idx];
 23f1b30:	e9d2 3004 	ldrd	r3, r0, [r2, #16]
 23f1b34:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
}
 23f1b38:	200c      	movs	r0, #12
              .tensors[tensor_idx];
 23f1b3a:	685b      	ldr	r3, [r3, #4]
}
 23f1b3c:	fb00 3001 	mla	r0, r0, r1, r3
 23f1b40:	4770      	bx	lr

023f1b42 <_ZN6tflite12MicroContextD0Ev>:
MicroContext::~MicroContext() {}
 23f1b42:	b510      	push	{r4, lr}
 23f1b44:	4604      	mov	r4, r0
 23f1b46:	2118      	movs	r1, #24
 23f1b48:	f7f6 fd1f 	bl	23e858a <_ZdlPvj>
 23f1b4c:	4620      	mov	r0, r4
 23f1b4e:	bd10      	pop	{r4, pc}

023f1b50 <_ZN6tflite12MicroContext27RequestScratchBufferInArenaEjPi>:
                                                       int* buffer_idx) {
 23f1b50:	b410      	push	{r4}
  // allowing MicroGraph to init / prepare / invoke subgraphs in the model.
  void SetSubgraphAllocations(SubgraphAllocations* subgraph_allocations);

  // Get the current subgraph index. Within an on operator, this is guaranteed
  // to be the subgraph of that operator.
  int GetCurrentSubgraphIndex() { return current_subgraph_index_; }
 23f1b52:	6884      	ldr	r4, [r0, #8]
 23f1b54:	4613      	mov	r3, r2
  return allocator_.RequestScratchBufferInArena(
 23f1b56:	6840      	ldr	r0, [r0, #4]
 23f1b58:	6962      	ldr	r2, [r4, #20]
}
 23f1b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return allocator_.RequestScratchBufferInArena(
 23f1b5e:	f7ff bc9e 	b.w	23f149e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjiPi>
	...

023f1b64 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>:
    : allocator_(*allocator), graph_(*graph), model_(model) {}
 23f1b64:	e9c0 3202 	strd	r3, r2, [r0, #8]
 23f1b68:	2300      	movs	r3, #0
MicroContext::MicroContext(MicroAllocator* allocator, const Model* model,
 23f1b6a:	b530      	push	{r4, r5, lr}
    : allocator_(*allocator), graph_(*graph), model_(model) {}
 23f1b6c:	4d02      	ldr	r5, [pc, #8]	; (23f1b78 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE+0x14>)
 23f1b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23f1b72:	e9c0 5100 	strd	r5, r1, [r0]
 23f1b76:	bd30      	pop	{r4, r5, pc}
 23f1b78:	023fefbc 	.word	0x023fefbc

023f1b7c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>:
  if (index >= 0 && index < max_size) {
 23f1b7c:	2900      	cmp	r1, #0
 23f1b7e:	db04      	blt.n	23f1b8a <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0xe>
 23f1b80:	4291      	cmp	r1, r2
 23f1b82:	da02      	bge.n	23f1b8a <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi+0xe>
    const int tensor_index = tensor_indices[index];
 23f1b84:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
    if (tensor_index != kTfLiteOptionalTensor) {
 23f1b88:	4770      	bx	lr
  return -1;
 23f1b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23f1b8e:	4770      	bx	lr

023f1b90 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei>:
                                                    int index) {
 23f1b90:	460b      	mov	r3, r1
 23f1b92:	b510      	push	{r4, lr}
 23f1b94:	4611      	mov	r1, r2
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 23f1b96:	681a      	ldr	r2, [r3, #0]
                                                    int index) {
 23f1b98:	4604      	mov	r4, r0
      GetTensorIndex(index, node->inputs->size, node->inputs->data);
 23f1b9a:	1d13      	adds	r3, r2, #4
 23f1b9c:	6812      	ldr	r2, [r2, #0]
 23f1b9e:	f7ff ffed 	bl	23f1b7c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
  if (tensor_index < 0) {
 23f1ba2:	1e01      	subs	r1, r0, #0
 23f1ba4:	db05      	blt.n	23f1bb2 <_ZN6tflite12MicroContext23AllocateTempInputTensorEPK10TfLiteNodei+0x22>
  return AllocateTempTfLiteTensor(tensor_index);
 23f1ba6:	6823      	ldr	r3, [r4, #0]
 23f1ba8:	4620      	mov	r0, r4
}
 23f1baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return AllocateTempTfLiteTensor(tensor_index);
 23f1bae:	695b      	ldr	r3, [r3, #20]
 23f1bb0:	4718      	bx	r3
}
 23f1bb2:	2000      	movs	r0, #0
 23f1bb4:	bd10      	pop	{r4, pc}

023f1bb6 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei>:
                                                     int index) {
 23f1bb6:	460b      	mov	r3, r1
 23f1bb8:	b510      	push	{r4, lr}
 23f1bba:	4611      	mov	r1, r2
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 23f1bbc:	685a      	ldr	r2, [r3, #4]
                                                     int index) {
 23f1bbe:	4604      	mov	r4, r0
      GetTensorIndex(index, node->outputs->size, node->outputs->data);
 23f1bc0:	1d13      	adds	r3, r2, #4
 23f1bc2:	6812      	ldr	r2, [r2, #0]
 23f1bc4:	f7ff ffda 	bl	23f1b7c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
  if (tensor_index < 0) {
 23f1bc8:	1e01      	subs	r1, r0, #0
 23f1bca:	db05      	blt.n	23f1bd8 <_ZN6tflite12MicroContext24AllocateTempOutputTensorEPK10TfLiteNodei+0x22>
  return AllocateTempTfLiteTensor(tensor_index);
 23f1bcc:	6823      	ldr	r3, [r4, #0]
 23f1bce:	4620      	mov	r0, r4
}
 23f1bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return AllocateTempTfLiteTensor(tensor_index);
 23f1bd4:	695b      	ldr	r3, [r3, #20]
 23f1bd6:	4718      	bx	r3
}
 23f1bd8:	2000      	movs	r0, #0
 23f1bda:	bd10      	pop	{r4, pc}

023f1bdc <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei>:
    const TfLiteNode* node, int index) {
 23f1bdc:	460b      	mov	r3, r1
 23f1bde:	b510      	push	{r4, lr}
 23f1be0:	4611      	mov	r1, r2
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 23f1be2:	689a      	ldr	r2, [r3, #8]
    const TfLiteNode* node, int index) {
 23f1be4:	4604      	mov	r4, r0
  const int tensor_index = GetTensorIndex(index, node->intermediates->size,
 23f1be6:	1d13      	adds	r3, r2, #4
 23f1be8:	6812      	ldr	r2, [r2, #0]
 23f1bea:	f7ff ffc7 	bl	23f1b7c <_ZN6tflite12MicroContext14GetTensorIndexEiiPKi>
  if (tensor_index < 0) {
 23f1bee:	1e01      	subs	r1, r0, #0
 23f1bf0:	db05      	blt.n	23f1bfe <_ZN6tflite12MicroContext30AllocateTempIntermediateTensorEPK10TfLiteNodei+0x22>
  return AllocateTempTfLiteTensor(tensor_index);
 23f1bf2:	6823      	ldr	r3, [r4, #0]
 23f1bf4:	4620      	mov	r0, r4
}
 23f1bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return AllocateTempTfLiteTensor(tensor_index);
 23f1bfa:	695b      	ldr	r3, [r3, #20]
 23f1bfc:	4718      	bx	r3
}
 23f1bfe:	2000      	movs	r0, #0
 23f1c00:	bd10      	pop	{r4, pc}

023f1c02 <_ZN6tflite12MicroContext23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>:

void MicroContext::SetScratchBufferHandles(
    ScratchBufferHandle* scratch_buffer_handles) {
  scratch_buffer_handles_ = scratch_buffer_handles;
 23f1c02:	6101      	str	r1, [r0, #16]
}
 23f1c04:	4770      	bx	lr

023f1c06 <_ZN6tflite25MicroContextReportOpErrorEP13TfLiteContextPKcz>:
  external_context_payload_ = external_context_payload;
  return kTfLiteOk;
}

void MicroContextReportOpError(struct TfLiteContext* context,
                               const char* format, ...) {
 23f1c06:	b40e      	push	{r1, r2, r3}
 23f1c08:	b503      	push	{r0, r1, lr}
 23f1c0a:	a903      	add	r1, sp, #12
 23f1c0c:	f851 0b04 	ldr.w	r0, [r1], #4
  va_list args;
  va_start(args, format);
 23f1c10:	9101      	str	r1, [sp, #4]
  Log(format, args);
 23f1c12:	f000 fc72 	bl	23f24fa <_Z3LogPKcSt9__va_list>
  va_end(args);
}
 23f1c16:	b002      	add	sp, #8
 23f1c18:	f85d eb04 	ldr.w	lr, [sp], #4
 23f1c1c:	b003      	add	sp, #12
 23f1c1e:	4770      	bx	lr

023f1c20 <_ZN6tflite18MicroErrorReporterD1Ev>:
namespace tflite {
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();
class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 23f1c20:	4770      	bx	lr

023f1c22 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
 23f1c22:	b508      	push	{r3, lr}
 23f1c24:	4608      	mov	r0, r1
  Log(format, args);
 23f1c26:	4611      	mov	r1, r2
 23f1c28:	f000 fc67 	bl	23f24fa <_Z3LogPKcSt9__va_list>
  return 0;
}
 23f1c2c:	2000      	movs	r0, #0
 23f1c2e:	bd08      	pop	{r3, pc}

023f1c30 <_ZN6tflite18MicroErrorReporterD0Ev>:
 23f1c30:	b510      	push	{r4, lr}
 23f1c32:	4604      	mov	r4, r0
 23f1c34:	2104      	movs	r1, #4
 23f1c36:	f7f6 fca8 	bl	23e858a <_ZdlPvj>
 23f1c3a:	4620      	mov	r0, r4
 23f1c3c:	bd10      	pop	{r4, pc}
	...

023f1c40 <_ZN6tflite21GetMicroErrorReporterEv>:
  if (error_reporter_ == nullptr) {
 23f1c40:	4b04      	ldr	r3, [pc, #16]	; (23f1c54 <_ZN6tflite21GetMicroErrorReporterEv+0x14>)
 23f1c42:	681a      	ldr	r2, [r3, #0]
 23f1c44:	b91a      	cbnz	r2, 23f1c4e <_ZN6tflite21GetMicroErrorReporterEv+0xe>
class MicroErrorReporter : public ErrorReporter {
 23f1c46:	4a04      	ldr	r2, [pc, #16]	; (23f1c58 <_ZN6tflite21GetMicroErrorReporterEv+0x18>)
 23f1c48:	4904      	ldr	r1, [pc, #16]	; (23f1c5c <_ZN6tflite21GetMicroErrorReporterEv+0x1c>)
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
 23f1c4a:	601a      	str	r2, [r3, #0]
 23f1c4c:	6011      	str	r1, [r2, #0]
}
 23f1c4e:	6818      	ldr	r0, [r3, #0]
 23f1c50:	4770      	bx	lr
 23f1c52:	bf00      	nop
 23f1c54:	1007ae4c 	.word	0x1007ae4c
 23f1c58:	1007ae50 	.word	0x1007ae50
 23f1c5c:	023feff0 	.word	0x023feff0

023f1c60 <_ZN6tflite10MicroGraphD1Ev>:
  if (model != nullptr) {
    subgraphs_ = model->subgraphs();
  }
}

MicroGraph::~MicroGraph() {}
 23f1c60:	4770      	bx	lr

023f1c62 <_ZN6tflite10MicroGraphD0Ev>:
 23f1c62:	b510      	push	{r4, lr}
 23f1c64:	4604      	mov	r4, r0
 23f1c66:	2120      	movs	r1, #32
 23f1c68:	f7f6 fc8f 	bl	23e858a <_ZdlPvj>
 23f1c6c:	4620      	mov	r0, r4
 23f1c6e:	bd10      	pop	{r4, pc}

023f1c70 <_ZN6tflite10MicroGraph13InitSubgraphsEv>:

TfLiteStatus MicroGraph::InitSubgraphs() {
 23f1c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f1c74:	4604      	mov	r4, r0
  int previous_subgraph_idx = current_subgraph_index_;

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 23f1c76:	2600      	movs	r6, #0
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    for (size_t i = 0; i < operators_size; ++i) {
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 23f1c78:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
  int previous_subgraph_idx = current_subgraph_index_;
 23f1c7c:	f8d0 9014 	ldr.w	r9, [r0, #20]
 23f1c80:	69e3      	ldr	r3, [r4, #28]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 23f1c82:	681b      	ldr	r3, [r3, #0]
 23f1c84:	429e      	cmp	r6, r3
 23f1c86:	d220      	bcs.n	23f1cca <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x5a>
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 23f1c88:	4631      	mov	r1, r6
 23f1c8a:	68a0      	ldr	r0, [r4, #8]
    current_subgraph_index_ = subgraph_idx;
 23f1c8c:	6166      	str	r6, [r4, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 23f1c8e:	f7fe fe33 	bl	23f08f8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
 23f1c92:	2700      	movs	r7, #0
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 23f1c94:	4680      	mov	r8, r0
    for (size_t i = 0; i < operators_size; ++i) {
 23f1c96:	ea4f 0bc6 	mov.w	fp, r6, lsl #3
 23f1c9a:	4547      	cmp	r7, r8
 23f1c9c:	d013      	beq.n	23f1cc6 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x56>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 23f1c9e:	6923      	ldr	r3, [r4, #16]
 23f1ca0:	f853 500b 	ldr.w	r5, [r3, fp]
 23f1ca4:	fb0a 5507 	mla	r5, sl, r7, r5
      const TfLiteRegistration* registration =
 23f1ca8:	6aab      	ldr	r3, [r5, #40]	; 0x28
      const char* init_data;
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
        init_data = reinterpret_cast<const char*>(node->custom_initial_data);
        init_data_size = node->custom_initial_data_size;
      } else {
        init_data = reinterpret_cast<const char*>(node->builtin_data);
 23f1caa:	6969      	ldr	r1, [r5, #20]
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 23f1cac:	695a      	ldr	r2, [r3, #20]
        init_data_size = 0;
      }
      if (registration->init) {
 23f1cae:	681b      	ldr	r3, [r3, #0]
      if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 23f1cb0:	2a20      	cmp	r2, #32
        init_data_size = 0;
 23f1cb2:	bf14      	ite	ne
 23f1cb4:	2200      	movne	r2, #0
        init_data_size = node->custom_initial_data_size;
 23f1cb6:	e9d5 1206 	ldrdeq	r1, r2, [r5, #24]
      if (registration->init) {
 23f1cba:	b113      	cbz	r3, 23f1cc2 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x52>
        node->user_data =
            registration->init(context_, init_data, init_data_size);
 23f1cbc:	6860      	ldr	r0, [r4, #4]
 23f1cbe:	4798      	blx	r3
        node->user_data =
 23f1cc0:	6128      	str	r0, [r5, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 23f1cc2:	3701      	adds	r7, #1
 23f1cc4:	e7e9      	b.n	23f1c9a <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x2a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 23f1cc6:	3601      	adds	r6, #1
 23f1cc8:	e7da      	b.n	23f1c80 <_ZN6tflite10MicroGraph13InitSubgraphsEv+0x10>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}
 23f1cca:	2000      	movs	r0, #0
  current_subgraph_index_ = previous_subgraph_idx;
 23f1ccc:	f8c4 9014 	str.w	r9, [r4, #20]
}
 23f1cd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f1cd4 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>:
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}

TfLiteStatus MicroGraph::FreeSubgraphs() {
 23f1cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f1cd8:	4604      	mov	r4, r0
  int previous_subgraph_idx = current_subgraph_index_;

  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 23f1cda:	2500      	movs	r5, #0
       subgraph_idx++) {
    current_subgraph_index_ = subgraph_idx;
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
    for (size_t i = 0; i < operators_size; ++i) {
      TfLiteNode* node =
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 23f1cdc:	f04f 092c 	mov.w	r9, #44	; 0x2c
  int previous_subgraph_idx = current_subgraph_index_;
 23f1ce0:	f8d0 8014 	ldr.w	r8, [r0, #20]
 23f1ce4:	69e3      	ldr	r3, [r4, #28]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 23f1ce6:	681b      	ldr	r3, [r3, #0]
 23f1ce8:	429d      	cmp	r5, r3
 23f1cea:	d21a      	bcs.n	23f1d22 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x4e>
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 23f1cec:	4629      	mov	r1, r5
 23f1cee:	68a0      	ldr	r0, [r4, #8]
    current_subgraph_index_ = subgraph_idx;
 23f1cf0:	6165      	str	r5, [r4, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 23f1cf2:	f7fe fe01 	bl	23f08f8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
 23f1cf6:	2600      	movs	r6, #0
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 23f1cf8:	4607      	mov	r7, r0
    for (size_t i = 0; i < operators_size; ++i) {
 23f1cfa:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
 23f1cfe:	42be      	cmp	r6, r7
 23f1d00:	d00d      	beq.n	23f1d1e <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x4a>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 23f1d02:	6923      	ldr	r3, [r4, #16]
 23f1d04:	f853 300a 	ldr.w	r3, [r3, sl]
 23f1d08:	fb09 3306 	mla	r3, r9, r6, r3
      const TfLiteRegistration* registration =
 23f1d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
          subgraph_allocations_[subgraph_idx]
              .node_and_registrations[i]
              .registration;
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 23f1d0e:	b122      	cbz	r2, 23f1d1a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x46>
 23f1d10:	6852      	ldr	r2, [r2, #4]
 23f1d12:	b112      	cbz	r2, 23f1d1a <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x46>
        registration->free(context_, node->user_data);
 23f1d14:	6919      	ldr	r1, [r3, #16]
 23f1d16:	6860      	ldr	r0, [r4, #4]
 23f1d18:	4790      	blx	r2
    for (size_t i = 0; i < operators_size; ++i) {
 23f1d1a:	3601      	adds	r6, #1
 23f1d1c:	e7ef      	b.n	23f1cfe <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x2a>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 23f1d1e:	3501      	adds	r5, #1
 23f1d20:	e7e0      	b.n	23f1ce4 <_ZN6tflite10MicroGraph13FreeSubgraphsEv+0x10>
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;

  return kTfLiteOk;
}
 23f1d22:	2000      	movs	r0, #0
  current_subgraph_index_ = previous_subgraph_idx;
 23f1d24:	f8c4 8014 	str.w	r8, [r4, #20]
}
 23f1d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023f1d2c <_ZN6tflite10MicroGraph16PrepareSubgraphsEb>:
TfLiteStatus MicroGraph::PrepareSubgraphs(bool run_all_prep_ops) {
 23f1d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f1d30:	4604      	mov	r4, r0
 23f1d32:	460e      	mov	r6, r1
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 23f1d34:	2500      	movs	r5, #0
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 23f1d36:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
  int previous_subgraph_idx = current_subgraph_index_;
 23f1d3a:	6943      	ldr	r3, [r0, #20]
 23f1d3c:	9301      	str	r3, [sp, #4]
 23f1d3e:	69e3      	ldr	r3, [r4, #28]
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 23f1d40:	681b      	ldr	r3, [r3, #0]
 23f1d42:	429d      	cmp	r5, r3
 23f1d44:	d22b      	bcs.n	23f1d9e <_ZN6tflite10MicroGraph16PrepareSubgraphsEb+0x72>
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 23f1d46:	4629      	mov	r1, r5
 23f1d48:	68a0      	ldr	r0, [r4, #8]
    current_subgraph_index_ = subgraph_idx;
 23f1d4a:	6165      	str	r5, [r4, #20]
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 23f1d4c:	f7fe fdd4 	bl	23f08f8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
    for (size_t i = 0; i < operators_size; ++i) {
 23f1d50:	f04f 0900 	mov.w	r9, #0
    uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 23f1d54:	4607      	mov	r7, r0
 23f1d56:	f04f 0801 	mov.w	r8, #1
 23f1d5a:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
    for (size_t i = 0; i < operators_size; ++i) {
 23f1d5e:	45b9      	cmp	r9, r7
 23f1d60:	d018      	beq.n	23f1d94 <_ZN6tflite10MicroGraph16PrepareSubgraphsEb+0x68>
          &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 23f1d62:	6922      	ldr	r2, [r4, #16]
 23f1d64:	f852 100b 	ldr.w	r1, [r2, fp]
 23f1d68:	fb0a 1109 	mla	r1, sl, r9, r1
      if (registration->prepare != nullptr) {
 23f1d6c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 23f1d6e:	6892      	ldr	r2, [r2, #8]
 23f1d70:	b14a      	cbz	r2, 23f1d86 <_ZN6tflite10MicroGraph16PrepareSubgraphsEb+0x5a>
        TfLiteStatus prepare_status = registration->prepare(context_, node);
 23f1d72:	6860      	ldr	r0, [r4, #4]
 23f1d74:	4790      	blx	r2
        if (prepare_status != kTfLiteOk) {
 23f1d76:	b130      	cbz	r0, 23f1d86 <_ZN6tflite10MicroGraph16PrepareSubgraphsEb+0x5a>
          if (!run_all_prep_ops) {
 23f1d78:	b91e      	cbnz	r6, 23f1d82 <_ZN6tflite10MicroGraph16PrepareSubgraphsEb+0x56>
            return kTfLiteError;
 23f1d7a:	2001      	movs	r0, #1
}
 23f1d7c:	b003      	add	sp, #12
 23f1d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          all_prep_ops_ok = false;
 23f1d82:	f04f 0800 	mov.w	r8, #0
      allocator_->FinishPrepareNodeAllocations(/*node_id=*/i);
 23f1d86:	4649      	mov	r1, r9
 23f1d88:	68e0      	ldr	r0, [r4, #12]
 23f1d8a:	f7ff fb65 	bl	23f1458 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
    for (size_t i = 0; i < operators_size; ++i) {
 23f1d8e:	f109 0901 	add.w	r9, r9, #1
 23f1d92:	e7e4      	b.n	23f1d5e <_ZN6tflite10MicroGraph16PrepareSubgraphsEb+0x32>
    if (!all_prep_ops_ok) {
 23f1d94:	f1b8 0f00 	cmp.w	r8, #0
 23f1d98:	d0ef      	beq.n	23f1d7a <_ZN6tflite10MicroGraph16PrepareSubgraphsEb+0x4e>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 23f1d9a:	3501      	adds	r5, #1
 23f1d9c:	e7cf      	b.n	23f1d3e <_ZN6tflite10MicroGraph16PrepareSubgraphsEb+0x12>
  current_subgraph_index_ = previous_subgraph_idx;
 23f1d9e:	9b01      	ldr	r3, [sp, #4]
  return kTfLiteOk;
 23f1da0:	2000      	movs	r0, #0
  current_subgraph_index_ = previous_subgraph_idx;
 23f1da2:	6163      	str	r3, [r4, #20]
  return kTfLiteOk;
 23f1da4:	e7ea      	b.n	23f1d7c <_ZN6tflite10MicroGraph16PrepareSubgraphsEb+0x50>

023f1da6 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>:

TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
 23f1da6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f1daa:	69c3      	ldr	r3, [r0, #28]
  int previous_subgraph_idx = current_subgraph_index_;
 23f1dac:	f8d0 8014 	ldr.w	r8, [r0, #20]
  current_subgraph_index_ = subgraph_idx;
 23f1db0:	6141      	str	r1, [r0, #20]

  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 23f1db2:	681b      	ldr	r3, [r3, #0]
TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
 23f1db4:	4604      	mov	r4, r0
  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 23f1db6:	4299      	cmp	r1, r3
TfLiteStatus MicroGraph::InvokeSubgraph(int subgraph_idx) {
 23f1db8:	460e      	mov	r6, r1
  if (static_cast<size_t>(subgraph_idx) >= subgraphs_->size()) {
 23f1dba:	d304      	bcc.n	23f1dc6 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x20>
    MicroPrintf("Accessing subgraph %d but only %d subgraphs found",
                subgraph_idx, subgraphs_->size());
    return kTfLiteError;
 23f1dbc:	f04f 0b01 	mov.w	fp, #1
      return invoke_status;
    }
  }
  current_subgraph_index_ = previous_subgraph_idx;
  return kTfLiteOk;
}
 23f1dc0:	4658      	mov	r0, fp
 23f1dc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 23f1dc6:	6880      	ldr	r0, [r0, #8]
 23f1dc8:	f7fe fd96 	bl	23f08f8 <_ZN6tflite20NumSubgraphOperatorsEPKNS_5ModelEi>
  for (size_t i = 0; i < operators_size; ++i) {
 23f1dcc:	2700      	movs	r7, #0
  uint32_t operators_size = NumSubgraphOperators(model_, subgraph_idx);
 23f1dce:	4681      	mov	r9, r0
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 23f1dd0:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
 23f1dd4:	00f6      	lsls	r6, r6, #3
  for (size_t i = 0; i < operators_size; ++i) {
 23f1dd6:	454f      	cmp	r7, r9
 23f1dd8:	d016      	beq.n	23f1e08 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x62>
        &(subgraph_allocations_[subgraph_idx].node_and_registrations[i].node);
 23f1dda:	6923      	ldr	r3, [r4, #16]
 23f1ddc:	5999      	ldr	r1, [r3, r6]
 23f1dde:	fb0a 1107 	mla	r1, sl, r7, r1
    TFLITE_DCHECK(registration->invoke);
 23f1de2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 23f1de4:	68db      	ldr	r3, [r3, #12]
 23f1de6:	b90b      	cbnz	r3, 23f1dec <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x46>
 23f1de8:	f002 fce0 	bl	23f47ac <abort>
    TfLiteStatus invoke_status = registration->invoke(context_, node);
 23f1dec:	6860      	ldr	r0, [r4, #4]
 23f1dee:	4798      	blx	r3
 23f1df0:	4605      	mov	r5, r0
 23f1df2:	4683      	mov	fp, r0
    allocator_->ResetTempAllocations();
 23f1df4:	68e0      	ldr	r0, [r4, #12]
 23f1df6:	6803      	ldr	r3, [r0, #0]
 23f1df8:	68db      	ldr	r3, [r3, #12]
 23f1dfa:	4798      	blx	r3
    if (invoke_status == kTfLiteError) {
 23f1dfc:	2d01      	cmp	r5, #1
 23f1dfe:	d0dd      	beq.n	23f1dbc <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x16>
    } else if (invoke_status != kTfLiteOk) {
 23f1e00:	2d00      	cmp	r5, #0
 23f1e02:	d1dd      	bne.n	23f1dc0 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x1a>
  for (size_t i = 0; i < operators_size; ++i) {
 23f1e04:	3701      	adds	r7, #1
 23f1e06:	e7e6      	b.n	23f1dd6 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x30>
  return kTfLiteOk;
 23f1e08:	f04f 0b00 	mov.w	fp, #0
  current_subgraph_index_ = previous_subgraph_idx;
 23f1e0c:	f8c4 8014 	str.w	r8, [r4, #20]
  return kTfLiteOk;
 23f1e10:	e7d6      	b.n	23f1dc0 <_ZN6tflite10MicroGraph14InvokeSubgraphEi+0x1a>

023f1e12 <_ZN6tflite10MicroGraph12NumSubgraphsEv>:
  }

  return kTfLiteOk;
}

int MicroGraph::NumSubgraphs() { return model_->subgraphs()->size(); }
 23f1e12:	b508      	push	{r3, lr}
 23f1e14:	6880      	ldr	r0, [r0, #8]
 23f1e16:	f7fe fe2b 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f1e1a:	6800      	ldr	r0, [r0, #0]
 23f1e1c:	bd08      	pop	{r3, pc}
	...

023f1e20 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE>:
MicroGraph::MicroGraph(TfLiteContext* context, const Model* model,
 23f1e20:	b510      	push	{r4, lr}
 23f1e22:	4604      	mov	r4, r0
      resource_variables_(resource_variables) {
 23f1e24:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23f1e28:	2300      	movs	r3, #0
 23f1e2a:	4807      	ldr	r0, [pc, #28]	; (23f1e48 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x28>)
 23f1e2c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 23f1e30:	9b02      	ldr	r3, [sp, #8]
 23f1e32:	e9c4 0100 	strd	r0, r1, [r4]
 23f1e36:	61a3      	str	r3, [r4, #24]
  if (model != nullptr) {
 23f1e38:	b11a      	cbz	r2, 23f1e42 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE+0x22>
    subgraphs_ = model->subgraphs();
 23f1e3a:	4610      	mov	r0, r2
 23f1e3c:	f7fe fe18 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f1e40:	61e0      	str	r0, [r4, #28]
}
 23f1e42:	4620      	mov	r0, r4
 23f1e44:	bd10      	pop	{r4, pc}
 23f1e46:	bf00      	nop
 23f1e48:	023ff004 	.word	0x023ff004

023f1e4c <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>:

void MicroGraph::SetSubgraphAllocations(
    SubgraphAllocations* subgraph_allocations) {
  subgraph_allocations_ = subgraph_allocations;
 23f1e4c:	6101      	str	r1, [r0, #16]
}
 23f1e4e:	4770      	bx	lr

023f1e50 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>:
TfLiteStatus MicroGraph::ResetVariableTensors() {
 23f1e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f1e54:	4605      	mov	r5, r0
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 23f1e56:	2700      	movs	r7, #0
 23f1e58:	69e8      	ldr	r0, [r5, #28]
 23f1e5a:	6803      	ldr	r3, [r0, #0]
 23f1e5c:	429f      	cmp	r7, r3
 23f1e5e:	d268      	bcs.n	23f1f32 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xe2>
  return_type operator[](uoffset_t i) const { return Get(i); }
 23f1e60:	4639      	mov	r1, r7
 23f1e62:	f7fe fee5 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 23f1e66:	2600      	movs	r6, #0
 23f1e68:	4680      	mov	r8, r0
 23f1e6a:	ea4f 09c7 	mov.w	r9, r7, lsl #3
    auto field_offset = GetOptionalFieldOffset(field);
 23f1e6e:	2104      	movs	r1, #4
 23f1e70:	4640      	mov	r0, r8
 23f1e72:	f7fe f94f 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f1e76:	2800      	cmp	r0, #0
 23f1e78:	d064      	beq.n	23f1f44 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xf4>
 23f1e7a:	f858 3000 	ldr.w	r3, [r8, r0]
    auto p = data_ + field_offset;
 23f1e7e:	eb08 0100 	add.w	r1, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f1e82:	18ca      	adds	r2, r1, r3
 23f1e84:	58cb      	ldr	r3, [r1, r3]
 23f1e86:	429e      	cmp	r6, r3
 23f1e88:	d251      	bcs.n	23f1f2e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xde>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 23f1e8a:	3204      	adds	r2, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 23f1e8c:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
    p += i * sizeof(uoffset_t);
 23f1e90:	eb02 0186 	add.w	r1, r2, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 23f1e94:	eb01 0b03 	add.w	fp, r1, r3
    auto field_offset = GetOptionalFieldOffset(field);
 23f1e98:	4658      	mov	r0, fp
 23f1e9a:	210e      	movs	r1, #14
 23f1e9c:	f7fe f93a 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f1ea0:	2800      	cmp	r0, #0
 23f1ea2:	d03e      	beq.n	23f1f22 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xd2>
      if (tensor->is_variable()) {
 23f1ea4:	f81b 2000 	ldrb.w	r2, [fp, r0]
 23f1ea8:	2a00      	cmp	r2, #0
 23f1eaa:	d03a      	beq.n	23f1f22 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xd2>
        TF_LITE_ENSURE_STATUS(TfLiteEvalTensorByteLength(
 23f1eac:	230c      	movs	r3, #12
 23f1eae:	692a      	ldr	r2, [r5, #16]
 23f1eb0:	fb03 fa06 	mul.w	sl, r3, r6
 23f1eb4:	444a      	add	r2, r9
 23f1eb6:	6850      	ldr	r0, [r2, #4]
 23f1eb8:	a901      	add	r1, sp, #4
 23f1eba:	4450      	add	r0, sl
 23f1ebc:	f7fe fda6 	bl	23f0a0c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 23f1ec0:	4604      	mov	r4, r0
 23f1ec2:	2800      	cmp	r0, #0
 23f1ec4:	d13a      	bne.n	23f1f3c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xec>
    auto field_offset = GetOptionalFieldOffset(field);
 23f1ec6:	2106      	movs	r1, #6
 23f1ec8:	4658      	mov	r0, fp
 23f1eca:	f7fe f923 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f1ece:	b350      	cbz	r0, 23f1f26 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xd6>
        if (tensor->type() == tflite::TensorType_INT8) {
 23f1ed0:	f91b 2000 	ldrsb.w	r2, [fp, r0]
 23f1ed4:	2a09      	cmp	r2, #9
 23f1ed6:	d128      	bne.n	23f1f2a <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xda>
    auto field_offset = GetOptionalFieldOffset(field);
 23f1ed8:	210c      	movs	r1, #12
 23f1eda:	4658      	mov	r0, fp
 23f1edc:	f7fe f91a 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f1ee0:	b1a0      	cbz	r0, 23f1f0c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xbc>
 23f1ee2:	f85b 4000 	ldr.w	r4, [fp, r0]
    auto p = data_ + field_offset;
 23f1ee6:	eb0b 0200 	add.w	r2, fp, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f1eea:	4414      	add	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
 23f1eec:	210a      	movs	r1, #10
 23f1eee:	4620      	mov	r0, r4
 23f1ef0:	f7fe f910 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f1ef4:	b330      	cbz	r0, 23f1f44 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xf4>
 23f1ef6:	5823      	ldr	r3, [r4, r0]
    auto p = data_ + field_offset;
 23f1ef8:	1822      	adds	r2, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f1efa:	18d1      	adds	r1, r2, r3
    FLATBUFFERS_ASSERT(i < size());
 23f1efc:	58d3      	ldr	r3, [r2, r3]
 23f1efe:	b93b      	cbnz	r3, 23f1f10 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc0>
 23f1f00:	21aa      	movs	r1, #170	; 0xaa
 23f1f02:	4b11      	ldr	r3, [pc, #68]	; (23f1f48 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xf8>)
 23f1f04:	4a11      	ldr	r2, [pc, #68]	; (23f1f4c <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xfc>)
 23f1f06:	4812      	ldr	r0, [pc, #72]	; (23f1f50 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x100>)
 23f1f08:	f002 fc7a 	bl	23f4800 <__assert_func>
 23f1f0c:	4604      	mov	r4, r0
 23f1f0e:	e7ed      	b.n	23f1eec <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x9c>
          value = tensor->quantization()->zero_point()->Get(0);
 23f1f10:	6849      	ldr	r1, [r1, #4]
        memset(subgraph_allocations_[subgraph_idx].tensors[i].data.raw, value,
 23f1f12:	692b      	ldr	r3, [r5, #16]
 23f1f14:	9a01      	ldr	r2, [sp, #4]
 23f1f16:	444b      	add	r3, r9
 23f1f18:	685b      	ldr	r3, [r3, #4]
 23f1f1a:	f853 000a 	ldr.w	r0, [r3, sl]
 23f1f1e:	f006 ff00 	bl	23f8d22 <memset>
    for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 23f1f22:	3601      	adds	r6, #1
 23f1f24:	e7a3      	b.n	23f1e6e <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x1e>
        int value = 0;
 23f1f26:	4601      	mov	r1, r0
 23f1f28:	e7f3      	b.n	23f1f12 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc2>
 23f1f2a:	4621      	mov	r1, r4
 23f1f2c:	e7f1      	b.n	23f1f12 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xc2>
  for (size_t subgraph_idx = 0; subgraph_idx < subgraphs_->size();
 23f1f2e:	3701      	adds	r7, #1
 23f1f30:	e792      	b.n	23f1e58 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0x8>
  if (resource_variables_ != nullptr) {
 23f1f32:	69a8      	ldr	r0, [r5, #24]
 23f1f34:	b108      	cbz	r0, 23f1f3a <_ZN6tflite10MicroGraph20ResetVariableTensorsEv+0xea>
    resource_variables_->ResetAll();
 23f1f36:	f000 fae1 	bl	23f24fc <_ZN6tflite22MicroResourceVariables8ResetAllEv>
  return kTfLiteOk;
 23f1f3a:	2400      	movs	r4, #0
}
 23f1f3c:	4620      	mov	r0, r4
 23f1f3e:	b003      	add	sp, #12
 23f1f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uoffset_t size() const { return EndianScalar(length_); }
 23f1f44:	6803      	ldr	r3, [r0, #0]
 23f1f46:	deff      	udf	#255	; 0xff
 23f1f48:	023fe813 	.word	0x023fe813
 23f1f4c:	023fee79 	.word	0x023fee79
 23f1f50:	023fe918 	.word	0x023fe918

023f1f54 <_ZN6tflite10MicroGraph16GetSubgraphInputEii>:
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
}

TfLiteEvalTensor* MicroGraph::GetSubgraphInput(int subgraph_idx,
                                               int input_idx) {
 23f1f54:	b570      	push	{r4, r5, r6, lr}
 23f1f56:	460c      	mov	r4, r1
 23f1f58:	4616      	mov	r6, r2
 23f1f5a:	4605      	mov	r5, r0
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->inputs()->Get(input_idx);
 23f1f5c:	6880      	ldr	r0, [r0, #8]
 23f1f5e:	f7fe fd87 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f1f62:	4621      	mov	r1, r4
 23f1f64:	f7fe fe64 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    return const_cast<Table *>(this)->GetPointer<P>(field);
 23f1f68:	2106      	movs	r1, #6
 23f1f6a:	f7fe feb3 	bl	23f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 23f1f6e:	4631      	mov	r1, r6
 23f1f70:	f7fe fe1a 	bl	23f0ba8 <_ZNK11flatbuffers6VectorIlE3GetEm>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
}
 23f1f74:	220c      	movs	r2, #12
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 23f1f76:	6929      	ldr	r1, [r5, #16]
 23f1f78:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 23f1f7c:	6863      	ldr	r3, [r4, #4]
}
 23f1f7e:	fb02 3000 	mla	r0, r2, r0, r3
 23f1f82:	bd70      	pop	{r4, r5, r6, pc}

023f1f84 <_ZN6tflite10MicroGraph17GetSubgraphOutputEii>:
size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
}

TfLiteEvalTensor* MicroGraph::GetSubgraphOutput(int subgraph_idx,
                                                int output_idx) {
 23f1f84:	b570      	push	{r4, r5, r6, lr}
 23f1f86:	460c      	mov	r4, r1
 23f1f88:	4616      	mov	r6, r2
 23f1f8a:	4605      	mov	r5, r0
  int tensor_idx =
      model_->subgraphs()->Get(subgraph_idx)->outputs()->Get(output_idx);
 23f1f8c:	6880      	ldr	r0, [r0, #8]
 23f1f8e:	f7fe fd6f 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f1f92:	4621      	mov	r1, r4
 23f1f94:	f7fe fe4c 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 23f1f98:	2108      	movs	r1, #8
 23f1f9a:	f7fe fe9b 	bl	23f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 23f1f9e:	4631      	mov	r1, r6
 23f1fa0:	f7fe fe02 	bl	23f0ba8 <_ZNK11flatbuffers6VectorIlE3GetEm>
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
}
 23f1fa4:	220c      	movs	r2, #12
  return &subgraph_allocations_[subgraph_idx].tensors[tensor_idx];
 23f1fa6:	6929      	ldr	r1, [r5, #16]
 23f1fa8:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 23f1fac:	6863      	ldr	r3, [r4, #4]
}
 23f1fae:	fb02 3000 	mla	r0, r2, r0, r3
 23f1fb2:	bd70      	pop	{r4, r5, r6, pc}

023f1fb4 <_ZN6tflite10MicroGraph17NumSubgraphInputsEi>:
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
 23f1fb4:	b507      	push	{r0, r1, r2, lr}
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 23f1fb6:	6880      	ldr	r0, [r0, #8]
size_t MicroGraph::NumSubgraphInputs(int subgraph_idx) {
 23f1fb8:	9101      	str	r1, [sp, #4]
  return model_->subgraphs()->Get(subgraph_idx)->inputs()->size();
 23f1fba:	f7fe fd59 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f1fbe:	9901      	ldr	r1, [sp, #4]
 23f1fc0:	f7fe fe36 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 23f1fc4:	2106      	movs	r1, #6
 23f1fc6:	f7fe fe85 	bl	23f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
}
 23f1fca:	6800      	ldr	r0, [r0, #0]
 23f1fcc:	b003      	add	sp, #12
 23f1fce:	f85d fb04 	ldr.w	pc, [sp], #4

023f1fd2 <_ZN6tflite10MicroGraph18NumSubgraphOutputsEi>:
size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
 23f1fd2:	b507      	push	{r0, r1, r2, lr}
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 23f1fd4:	6880      	ldr	r0, [r0, #8]
size_t MicroGraph::NumSubgraphOutputs(int subgraph_idx) {
 23f1fd6:	9101      	str	r1, [sp, #4]
  return model_->subgraphs()->Get(subgraph_idx)->outputs()->size();
 23f1fd8:	f7fe fd4a 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f1fdc:	9901      	ldr	r1, [sp, #4]
 23f1fde:	f7fe fe27 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 23f1fe2:	2108      	movs	r1, #8
 23f1fe4:	f7fe fe76 	bl	23f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
}
 23f1fe8:	6800      	ldr	r0, [r0, #0]
 23f1fea:	b003      	add	sp, #12
 23f1fec:	f85d fb04 	ldr.w	pc, [sp], #4

023f1ff0 <_ZN6tflite36MicroContextAllocatePersistentBufferEP13TfLiteContextj>:

  TF_LITE_REMOVE_VIRTUAL_DELETE
};

inline MicroContext* GetMicroContext(const struct TfLiteContext* context) {
  return reinterpret_cast<MicroContext*>(context->impl_);
 23f1ff0:	6880      	ldr	r0, [r0, #8]
// TODO(b/213010668): migrate all existing kernels to use MicroContext, delete
// these functions, and remove corresponding members from the TfLiteContext
// struct for TFLM.
inline void* MicroContextAllocatePersistentBuffer(TfLiteContext* ctx,
                                                  size_t bytes) {
  return GetMicroContext(ctx)->AllocatePersistentBuffer(bytes);
 23f1ff2:	6803      	ldr	r3, [r0, #0]
 23f1ff4:	689b      	ldr	r3, [r3, #8]
 23f1ff6:	4718      	bx	r3

023f1ff8 <_ZN6tflite39MicroContextRequestScratchBufferInArenaEP13TfLiteContextjPi>:
  return reinterpret_cast<MicroContext*>(context->impl_);
 23f1ff8:	6880      	ldr	r0, [r0, #8]
}
inline TfLiteStatus MicroContextRequestScratchBufferInArena(TfLiteContext* ctx,
                                                            size_t bytes,
                                                            int* buffer_idx) {
  return GetMicroContext(ctx)->RequestScratchBufferInArena(bytes, buffer_idx);
 23f1ffa:	6803      	ldr	r3, [r0, #0]
 23f1ffc:	68db      	ldr	r3, [r3, #12]
 23f1ffe:	4718      	bx	r3

023f2000 <_ZN6tflite28MicroContextGetScratchBufferEP13TfLiteContexti>:
  return reinterpret_cast<MicroContext*>(context->impl_);
 23f2000:	6880      	ldr	r0, [r0, #8]
}
inline void* MicroContextGetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
  return GetMicroContext(ctx)->GetScratchBuffer(buffer_idx);
 23f2002:	6803      	ldr	r3, [r0, #0]
 23f2004:	691b      	ldr	r3, [r3, #16]
 23f2006:	4718      	bx	r3

023f2008 <_ZN6tflite21MicroContextGetTensorEPK13TfLiteContexti>:
  return reinterpret_cast<MicroContext*>(context->impl_);
 23f2008:	6880      	ldr	r0, [r0, #8]
}
inline TfLiteTensor* MicroContextGetTensor(const struct TfLiteContext* context,
                                           int tensor_idx) {
  return GetMicroContext(context)->AllocateTempTfLiteTensor(tensor_idx);
 23f200a:	6803      	ldr	r3, [r0, #0]
 23f200c:	695b      	ldr	r3, [r3, #20]
 23f200e:	4718      	bx	r3

023f2010 <_ZN6tflite25MicroContextGetEvalTensorEPK13TfLiteContexti>:
  return reinterpret_cast<MicroContext*>(context->impl_);
 23f2010:	6880      	ldr	r0, [r0, #8]
}
inline TfLiteEvalTensor* MicroContextGetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
  return GetMicroContext(context)->GetEvalTensor(tensor_idx);
 23f2012:	6803      	ldr	r3, [r0, #0]
 23f2014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f2016:	4718      	bx	r3

023f2018 <_ZN6tflite30MicroContextGetExternalContextEP13TfLiteContext25TfLiteExternalContextType>:
  void* external_context() { return external_context_payload_; }
 23f2018:	6883      	ldr	r3, [r0, #8]
}
inline TfLiteExternalContext* MicroContextGetExternalContext(
    TfLiteContext* context, TfLiteExternalContextType unused) {
  return reinterpret_cast<TfLiteExternalContext*>(
      GetMicroContext(context)->external_context());
}
 23f201a:	6958      	ldr	r0, [r3, #20]
 23f201c:	4770      	bx	lr
	...

023f2020 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE>:
#include "edge-impulse-sdk/tensorflow/lite/schema/schema_generated.h"
#include "edge-impulse-sdk/tensorflow/lite/schema/schema_utils.h"

namespace tflite {

MicroInterpreter::MicroInterpreter(const Model* model,
 23f2020:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f2024:	461e      	mov	r6, r3
      graph_(&context_, model, &allocator_, resource_variables),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      input_tensors_(nullptr),
      output_tensors_(nullptr),
      micro_context_(&allocator_, model_, &graph_) {
 23f2026:	f100 0808 	add.w	r8, r0, #8
MicroInterpreter::MicroInterpreter(const Model* model,
 23f202a:	4604      	mov	r4, r0
      micro_context_(&allocator_, model_, &graph_) {
 23f202c:	e9c0 1200 	strd	r1, r2, [r0]
MicroInterpreter::MicroInterpreter(const Model* model,
 23f2030:	460d      	mov	r5, r1
      micro_context_(&allocator_, model_, &graph_) {
 23f2032:	2258      	movs	r2, #88	; 0x58
 23f2034:	2100      	movs	r1, #0
 23f2036:	4640      	mov	r0, r8
 23f2038:	f006 fe73 	bl	23f8d22 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size)),
 23f203c:	9908      	ldr	r1, [sp, #32]
 23f203e:	4630      	mov	r0, r6
 23f2040:	f7ff f986 	bl	23f1350 <_ZN6tflite14MicroAllocator6CreateEPhj>
      micro_context_(&allocator_, model_, &graph_) {
 23f2044:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23f2046:	f104 0764 	add.w	r7, r4, #100	; 0x64
 23f204a:	9200      	str	r2, [sp, #0]
 23f204c:	462a      	mov	r2, r5
 23f204e:	2500      	movs	r5, #0
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size)),
 23f2050:	4603      	mov	r3, r0
      micro_context_(&allocator_, model_, &graph_) {
 23f2052:	4641      	mov	r1, r8
 23f2054:	6620      	str	r0, [r4, #96]	; 0x60
 23f2056:	4638      	mov	r0, r7
 23f2058:	f7ff fee2 	bl	23f1e20 <_ZN6tflite10MicroGraphC1EP13TfLiteContextPKNS_5ModelEPNS_14MicroAllocatorEPNS_22MicroResourceVariablesE>
 23f205c:	f44f 7380 	mov.w	r3, #256	; 0x100
 23f2060:	4626      	mov	r6, r4
 23f2062:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
 23f2066:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 23f206a:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 23f206e:	f856 2b94 	ldr.w	r2, [r6], #148
 23f2072:	463b      	mov	r3, r7
 23f2074:	4630      	mov	r0, r6
 23f2076:	6e21      	ldr	r1, [r4, #96]	; 0x60
 23f2078:	f7ff fd74 	bl	23f1b64 <_ZN6tflite12MicroContextC1EPNS_14MicroAllocatorEPKNS_5ModelEPNS_10MicroGraphE>
  Init(profiler);
}
 23f207c:	4620      	mov	r0, r4
#endif
}

void MicroInterpreter::Init(MicroProfilerInterface* profiler) {
  context_.impl_ = static_cast<void*>(&micro_context_);
  context_.ReportError = MicroContextReportOpError;
 23f207e:	4b07      	ldr	r3, [pc, #28]	; (23f209c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE+0x7c>)
  context_.impl_ = static_cast<void*>(&micro_context_);
 23f2080:	6126      	str	r6, [r4, #16]
  context_.ReportError = MicroContextReportOpError;
 23f2082:	61a3      	str	r3, [r4, #24]
  context_.GetTensor = MicroContextGetTensor;
 23f2084:	4b06      	ldr	r3, [pc, #24]	; (23f20a0 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE+0x80>)
  context_.GetEvalTensor = MicroContextGetEvalTensor;
  context_.profiler = profiler;

  initialization_status_ = kTfLiteOk;
 23f2086:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
  context_.GetTensor = MicroContextGetTensor;
 23f208a:	6563      	str	r3, [r4, #84]	; 0x54
  context_.GetEvalTensor = MicroContextGetEvalTensor;
 23f208c:	4b05      	ldr	r3, [pc, #20]	; (23f20a4 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_22MicroResourceVariablesEPNS_22MicroProfilerInterfaceE+0x84>)
 23f208e:	65a3      	str	r3, [r4, #88]	; 0x58
  context_.profiler = profiler;
 23f2090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f2092:	63a3      	str	r3, [r4, #56]	; 0x38
}
 23f2094:	b002      	add	sp, #8
 23f2096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f209a:	bf00      	nop
 23f209c:	023f1c07 	.word	0x023f1c07
 23f20a0:	023f2009 	.word	0x023f2009
 23f20a4:	023f2011 	.word	0x023f2011

023f20a8 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>:
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const {
 23f20a8:	b508      	push	{r3, lr}
    return model_->subgraphs()->Get(0)->inputs()->size();
 23f20aa:	f7fe fce1 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f20ae:	2100      	movs	r1, #0
 23f20b0:	f7fe fdbe 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 23f20b4:	2106      	movs	r1, #6
 23f20b6:	f7fe fe0d 	bl	23f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
  }
 23f20ba:	6800      	ldr	r0, [r0, #0]
 23f20bc:	bd08      	pop	{r3, pc}

023f20be <_ZN6tflite16MicroInterpreter5inputEj>:
    TF_LITE_ENSURE_OK(&context_, AllocateTensors(true));
  }
  return graph_.InvokeSubgraph(0);
}

TfLiteTensor* MicroInterpreter::input(size_t index) {
 23f20be:	b538      	push	{r3, r4, r5, lr}
 23f20c0:	4605      	mov	r5, r0
  const size_t length = inputs_size();
 23f20c2:	6800      	ldr	r0, [r0, #0]
TfLiteTensor* MicroInterpreter::input(size_t index) {
 23f20c4:	460c      	mov	r4, r1
  const size_t length = inputs_size();
 23f20c6:	f7ff ffef 	bl	23f20a8 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
  if (index >= length) {
 23f20ca:	42a0      	cmp	r0, r4
    MicroPrintf("Input index %d out of range (length is %d)", index, length);
    return nullptr;
  }
  return input_tensors_[index];
 23f20cc:	bf8a      	itet	hi
 23f20ce:	f8d5 308c 	ldrhi.w	r3, [r5, #140]	; 0x8c
    return nullptr;
 23f20d2:	2000      	movls	r0, #0
  return input_tensors_[index];
 23f20d4:	f853 0024 	ldrhi.w	r0, [r3, r4, lsl #2]
}
 23f20d8:	bd38      	pop	{r3, r4, r5, pc}

023f20da <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const {
 23f20da:	b508      	push	{r3, lr}
    return model_->subgraphs()->Get(0)->outputs()->size();
 23f20dc:	f7fe fcc8 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f20e0:	2100      	movs	r1, #0
 23f20e2:	f7fe fda5 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 23f20e6:	2108      	movs	r1, #8
 23f20e8:	f7fe fdf4 	bl	23f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
  }
 23f20ec:	6800      	ldr	r0, [r0, #0]
 23f20ee:	bd08      	pop	{r3, pc}

023f20f0 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 23f20f0:	b538      	push	{r3, r4, r5, lr}
 23f20f2:	4605      	mov	r5, r0
  const size_t length = outputs_size();
 23f20f4:	6800      	ldr	r0, [r0, #0]
TfLiteTensor* MicroInterpreter::output(size_t index) {
 23f20f6:	460c      	mov	r4, r1
  const size_t length = outputs_size();
 23f20f8:	f7ff ffef 	bl	23f20da <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
  if (index >= length) {
 23f20fc:	42a0      	cmp	r0, r4
    MicroPrintf("Output index %d out of range (length is %d)", index, length);
    return nullptr;
  }
  return output_tensors_[index];
 23f20fe:	bf8a      	itet	hi
 23f2100:	f8d5 3090 	ldrhi.w	r3, [r5, #144]	; 0x90
    return nullptr;
 23f2104:	2000      	movls	r0, #0
  return output_tensors_[index];
 23f2106:	f853 0024 	ldrhi.w	r0, [r3, r4, lsl #2]
}
 23f210a:	bd38      	pop	{r3, r4, r5, pc}

023f210c <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
 23f210c:	b538      	push	{r3, r4, r5, lr}
  if (graph_.GetAllocations() != nullptr) {
 23f210e:	6f43      	ldr	r3, [r0, #116]	; 0x74
MicroInterpreter::~MicroInterpreter() {
 23f2110:	4604      	mov	r4, r0
    graph_.FreeSubgraphs();
 23f2112:	f100 0564 	add.w	r5, r0, #100	; 0x64
  if (graph_.GetAllocations() != nullptr) {
 23f2116:	b113      	cbz	r3, 23f211e <_ZN6tflite16MicroInterpreterD1Ev+0x12>
    graph_.FreeSubgraphs();
 23f2118:	4628      	mov	r0, r5
 23f211a:	f7ff fddb 	bl	23f1cd4 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
MicroInterpreter::~MicroInterpreter() {
 23f211e:	f104 0094 	add.w	r0, r4, #148	; 0x94
 23f2122:	f7ff fce9 	bl	23f1af8 <_ZN6tflite12MicroContextD1Ev>
 23f2126:	4628      	mov	r0, r5
 23f2128:	f7ff fd9a 	bl	23f1c60 <_ZN6tflite10MicroGraphD1Ev>
}
 23f212c:	4620      	mov	r0, r4
 23f212e:	bd38      	pop	{r3, r4, r5, pc}

023f2130 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>:
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 23f2130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f2134:	ed2d 8b02 	vpush	{d8}
 23f2138:	4606      	mov	r6, r0
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 23f213a:	f04f 0b00 	mov.w	fp, #0
TfLiteStatus MicroInterpreter::PrepareNodeAndRegistrationDataFromFlatbuffer() {
 23f213e:	b08b      	sub	sp, #44	; 0x2c
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 23f2140:	f106 0064 	add.w	r0, r6, #100	; 0x64
 23f2144:	f7ff fe65 	bl	23f1e12 <_ZN6tflite10MicroGraph12NumSubgraphsEv>
 23f2148:	4558      	cmp	r0, fp
 23f214a:	f340 80d7 	ble.w	23f22fc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1cc>
    const SubGraph* subgraph = model_->subgraphs()->Get(subgraph_idx);
 23f214e:	6835      	ldr	r5, [r6, #0]
 23f2150:	4628      	mov	r0, r5
 23f2152:	f7fe fc8d 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f2156:	4659      	mov	r1, fp
 23f2158:	f7fe fd6a 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    TFLITE_DCHECK(subgraph != nullptr);
 23f215c:	4680      	mov	r8, r0
 23f215e:	b908      	cbnz	r0, 23f2164 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x34>
 23f2160:	f002 fb24 	bl	23f47ac <abort>
    auto field_offset = GetOptionalFieldOffset(field);
 23f2164:	2106      	movs	r1, #6
 23f2166:	4628      	mov	r0, r5
 23f2168:	f7fd ffd4 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f216c:	b340      	cbz	r0, 23f21c0 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x90>
 23f216e:	582c      	ldr	r4, [r5, r0]
    auto p = data_ + field_offset;
 23f2170:	182b      	adds	r3, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f2172:	441c      	add	r4, r3
        allocator_.GetBuiltinDataAllocator();
 23f2174:	6e30      	ldr	r0, [r6, #96]	; 0x60
 23f2176:	f7ff f9ba 	bl	23f14ee <_ZN6tflite14MicroAllocator23GetBuiltinDataAllocatorEv>
 23f217a:	ee08 0a10 	vmov	s16, r0
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 23f217e:	4640      	mov	r0, r8
 23f2180:	f7fe fbac 	bl	23f08dc <_ZN6tflite20NumSubgraphOperatorsEPKNS_8SubGraphE>
    for (size_t i = 0; i < operators_size; ++i) {
 23f2184:	2700      	movs	r7, #0
 23f2186:	ea4f 03cb 	mov.w	r3, fp, lsl #3
    uint32_t operators_size = NumSubgraphOperators(subgraph);
 23f218a:	9004      	str	r0, [sp, #16]
    for (size_t i = 0; i < operators_size; ++i) {
 23f218c:	9301      	str	r3, [sp, #4]
 23f218e:	9b04      	ldr	r3, [sp, #16]
 23f2190:	429f      	cmp	r7, r3
 23f2192:	f000 80b0 	beq.w	23f22f6 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c6>
    auto field_offset = GetOptionalFieldOffset(field);
 23f2196:	210a      	movs	r1, #10
 23f2198:	4640      	mov	r0, r8
 23f219a:	f7fd ffbb 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f219e:	2800      	cmp	r0, #0
 23f21a0:	f000 80ae 	beq.w	23f2300 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d0>
 23f21a4:	f858 2000 	ldr.w	r2, [r8, r0]
    auto p = data_ + field_offset;
 23f21a8:	eb08 0100 	add.w	r1, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f21ac:	188b      	adds	r3, r1, r2
    FLATBUFFERS_ASSERT(i < size());
 23f21ae:	588a      	ldr	r2, [r1, r2]
 23f21b0:	4297      	cmp	r7, r2
 23f21b2:	d307      	bcc.n	23f21c4 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x94>
 23f21b4:	21aa      	movs	r1, #170	; 0xaa
 23f21b6:	4b53      	ldr	r3, [pc, #332]	; (23f2304 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d4>)
 23f21b8:	4a53      	ldr	r2, [pc, #332]	; (23f2308 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1d8>)
 23f21ba:	4854      	ldr	r0, [pc, #336]	; (23f230c <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1dc>)
 23f21bc:	f002 fb20 	bl	23f4800 <__assert_func>
 23f21c0:	4604      	mov	r4, r0
 23f21c2:	e7d7      	b.n	23f2174 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x44>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 23f21c4:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
 23f21c6:	eb03 0587 	add.w	r5, r3, r7, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 23f21ca:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    auto field_offset = GetOptionalFieldOffset(field);
 23f21ce:	2104      	movs	r1, #4
 23f21d0:	441d      	add	r5, r3
 23f21d2:	4628      	mov	r0, r5
 23f21d4:	f7fd ff9e 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f21d8:	b100      	cbz	r0, 23f21dc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xac>
 23f21da:	5828      	ldr	r0, [r5, r0]
      if (index >= opcodes->size()) {
 23f21dc:	6823      	ldr	r3, [r4, #0]
 23f21de:	4283      	cmp	r3, r0
 23f21e0:	f240 8087 	bls.w	23f22f2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c2>
  static return_type Read(const uint8_t *p, uoffset_t i) {
 23f21e4:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
 23f21e8:	1d23      	adds	r3, r4, #4
    p += i * sizeof(uoffset_t);
 23f21ea:	eb03 0980 	add.w	r9, r3, r0, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 23f21ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 23f21f2:	fb0a fa07 	mul.w	sl, sl, r7
 23f21f6:	4499      	add	r9, r3
                                          .node_and_registrations[i]
 23f21f8:	9a01      	ldr	r2, [sp, #4]
 23f21fa:	6f73      	ldr	r3, [r6, #116]	; 0x74
          GetRegistrationFromOpCode(opcode, op_resolver_,
 23f21fc:	4648      	mov	r0, r9
                                          .node_and_registrations[i]
 23f21fe:	589a      	ldr	r2, [r3, r2]
          GetRegistrationFromOpCode(opcode, op_resolver_,
 23f2200:	6871      	ldr	r1, [r6, #4]
                                          .node_and_registrations[i]
 23f2202:	4452      	add	r2, sl
          GetRegistrationFromOpCode(opcode, op_resolver_,
 23f2204:	3228      	adds	r2, #40	; 0x28
 23f2206:	f000 f98b 	bl	23f2520 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPPK18TfLiteRegistration>
      if (status != kTfLiteOk) {
 23f220a:	b150      	cbz	r0, 23f2222 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xf2>
 23f220c:	9001      	str	r0, [sp, #4]
        MicroPrintf("Failed to get registration from op code %s\n ",
 23f220e:	4648      	mov	r0, r9
 23f2210:	f000 f995 	bl	23f253e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
        return status;
 23f2214:	9b01      	ldr	r3, [sp, #4]
}
 23f2216:	4618      	mov	r0, r3
 23f2218:	b00b      	add	sp, #44	; 0x2c
 23f221a:	ecbd 8b02 	vpop	{d8}
 23f221e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                     .node_and_registrations[i]
 23f2222:	6f72      	ldr	r2, [r6, #116]	; 0x74
                                     .registration;
 23f2224:	9901      	ldr	r1, [sp, #4]
 23f2226:	5852      	ldr	r2, [r2, r1]
 23f2228:	4452      	add	r2, sl
 23f222a:	6a92      	ldr	r2, [r2, #40]	; 0x28
      if (registration == nullptr) {
 23f222c:	2a00      	cmp	r2, #0
 23f222e:	d060      	beq.n	23f22f2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c2>
      BuiltinOperator op_type =
 23f2230:	f8d2 9014 	ldr.w	r9, [r2, #20]
      unsigned char* builtin_data = nullptr;
 23f2234:	9009      	str	r0, [sp, #36]	; 0x24
      if (op_type == BuiltinOperator_CUSTOM) {
 23f2236:	f1b9 0f20 	cmp.w	r9, #32
    auto field_offset = GetOptionalFieldOffset(field);
 23f223a:	f04f 010e 	mov.w	r1, #14
 23f223e:	4628      	mov	r0, r5
 23f2240:	d144      	bne.n	23f22cc <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x19c>
 23f2242:	f7fd ff67 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f2246:	2800      	cmp	r0, #0
 23f2248:	d139      	bne.n	23f22be <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x18e>
      size_t custom_data_size = 0;
 23f224a:	2300      	movs	r3, #0
      const char* custom_data = nullptr;
 23f224c:	9302      	str	r3, [sp, #8]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 23f224e:	2106      	movs	r1, #6
 23f2250:	4628      	mov	r0, r5
 23f2252:	9307      	str	r3, [sp, #28]
 23f2254:	f7fe fd3e 	bl	23f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
          FlatBufferVectorToTfLiteTypeArray(op->inputs());
 23f2258:	f7fe fb76 	bl	23f0948 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>
 23f225c:	2108      	movs	r1, #8
 23f225e:	9005      	str	r0, [sp, #20]
 23f2260:	4628      	mov	r0, r5
 23f2262:	f7fe fd37 	bl	23f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
          FlatBufferVectorToTfLiteTypeArray(op->outputs());
 23f2266:	f7fe fb6f 	bl	23f0948 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 23f226a:	6f72      	ldr	r2, [r6, #116]	; 0x74
 23f226c:	9b01      	ldr	r3, [sp, #4]
      *node = {};
 23f226e:	2100      	movs	r1, #0
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 23f2270:	58d3      	ldr	r3, [r2, r3]
          FlatBufferVectorToTfLiteTypeArray(op->outputs());
 23f2272:	9006      	str	r0, [sp, #24]
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 23f2274:	eb03 090a 	add.w	r9, r3, sl
      *node = {};
 23f2278:	2228      	movs	r2, #40	; 0x28
 23f227a:	4648      	mov	r0, r9
          graph_.GetAllocations()[subgraph_idx].node_and_registrations[i].node);
 23f227c:	9303      	str	r3, [sp, #12]
      *node = {};
 23f227e:	f006 fd50 	bl	23f8d22 <memset>
      node->inputs = inputs_array;
 23f2282:	9b03      	ldr	r3, [sp, #12]
 23f2284:	2114      	movs	r1, #20
 23f2286:	461a      	mov	r2, r3
 23f2288:	9b05      	ldr	r3, [sp, #20]
 23f228a:	4628      	mov	r0, r5
 23f228c:	f842 300a 	str.w	r3, [r2, sl]
      node->outputs = outputs_array;
 23f2290:	9b06      	ldr	r3, [sp, #24]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 23f2292:	9a09      	ldr	r2, [sp, #36]	; 0x24
      node->outputs = outputs_array;
 23f2294:	f8c9 3004 	str.w	r3, [r9, #4]
      node->custom_initial_data = custom_data;
 23f2298:	9b02      	ldr	r3, [sp, #8]
      node->builtin_data = reinterpret_cast<void*>(builtin_data);
 23f229a:	f8c9 2014 	str.w	r2, [r9, #20]
      node->custom_initial_data = custom_data;
 23f229e:	f8c9 3018 	str.w	r3, [r9, #24]
      node->custom_initial_data_size = custom_data_size;
 23f22a2:	9b07      	ldr	r3, [sp, #28]
 23f22a4:	f8c9 301c 	str.w	r3, [r9, #28]
 23f22a8:	f7fe fd14 	bl	23f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
      if (op->intermediates() && (op->intermediates()->size() > 0)) {
 23f22ac:	b128      	cbz	r0, 23f22ba <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x18a>
 23f22ae:	6803      	ldr	r3, [r0, #0]
 23f22b0:	b11b      	cbz	r3, 23f22ba <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x18a>
            FlatBufferVectorToTfLiteTypeArray(op->intermediates());
 23f22b2:	f7fe fb49 	bl	23f0948 <_ZN6tflite33FlatBufferVectorToTfLiteTypeArrayEPKN11flatbuffers6VectorIlEE>
        node->intermediates =
 23f22b6:	f8c9 0008 	str.w	r0, [r9, #8]
    for (size_t i = 0; i < operators_size; ++i) {
 23f22ba:	3701      	adds	r7, #1
 23f22bc:	e767      	b.n	23f218e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x5e>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f22be:	582b      	ldr	r3, [r5, r0]
    auto p = data_ + field_offset;
 23f22c0:	182a      	adds	r2, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f22c2:	18d1      	adds	r1, r2, r3
 23f22c4:	3104      	adds	r1, #4
  uoffset_t size() const { return EndianScalar(length_); }
 23f22c6:	58d3      	ldr	r3, [r2, r3]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 23f22c8:	9102      	str	r1, [sp, #8]
  uoffset_t size() const { return EndianScalar(length_); }
 23f22ca:	e7c0      	b.n	23f224e <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x11e>
    auto field_offset = GetOptionalFieldOffset(field);
 23f22cc:	f7fd ff22 	bl	23f0114 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 23f22d0:	b978      	cbnz	r0, 23f22f2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c2>
            op_resolver_.GetOpDataParser(op_type);
 23f22d2:	6870      	ldr	r0, [r6, #4]
 23f22d4:	4649      	mov	r1, r9
 23f22d6:	6803      	ldr	r3, [r0, #0]
 23f22d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f22da:	4798      	blx	r3
        if (parser == nullptr) {
 23f22dc:	b148      	cbz	r0, 23f22f2 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x1c2>
        TF_LITE_ENSURE_STATUS(CallBuiltinParseFunction(
 23f22de:	ab09      	add	r3, sp, #36	; 0x24
 23f22e0:	ee18 2a10 	vmov	r2, s16
 23f22e4:	4629      	mov	r1, r5
 23f22e6:	f7fe fae9 	bl	23f08bc <_ZN6tflite24CallBuiltinParseFunctionEPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvES3_S7_S9_>
 23f22ea:	4603      	mov	r3, r0
 23f22ec:	2800      	cmp	r0, #0
 23f22ee:	d0ac      	beq.n	23f224a <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x11a>
 23f22f0:	e791      	b.n	23f2216 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe6>
        return kTfLiteError;
 23f22f2:	2301      	movs	r3, #1
 23f22f4:	e78f      	b.n	23f2216 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe6>
  for (int subgraph_idx = 0; subgraph_idx < graph_.NumSubgraphs();
 23f22f6:	f10b 0b01 	add.w	fp, fp, #1
 23f22fa:	e721      	b.n	23f2140 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0x10>
  return kTfLiteOk;
 23f22fc:	2300      	movs	r3, #0
 23f22fe:	e78a      	b.n	23f2216 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv+0xe6>
 23f2300:	6803      	ldr	r3, [r0, #0]
 23f2302:	deff      	udf	#255	; 0xff
 23f2304:	023fe813 	.word	0x023fe813
 23f2308:	023fec65 	.word	0x023fec65
 23f230c:	023fe918 	.word	0x023fe918

023f2310 <_ZN6tflite16MicroInterpreter5ResetEv>:
}


// Repurposing free subgraphs to reset state for some ops for now
// will reset api is made. See b/220940833#comment25 for more context.
TfLiteStatus MicroInterpreter::Reset() {
 23f2310:	b510      	push	{r4, lr}
  TfLiteStatus status = graph_.FreeSubgraphs();
 23f2312:	f100 0464 	add.w	r4, r0, #100	; 0x64
 23f2316:	4620      	mov	r0, r4
 23f2318:	f7ff fcdc 	bl	23f1cd4 <_ZN6tflite10MicroGraph13FreeSubgraphsEv>
  if (status != kTfLiteOk) {
 23f231c:	b920      	cbnz	r0, 23f2328 <_ZN6tflite16MicroInterpreter5ResetEv+0x18>
    return status;
  }
  return graph_.ResetVariableTensors();
 23f231e:	4620      	mov	r0, r4
}
 23f2320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return graph_.ResetVariableTensors();
 23f2324:	f7ff bd94 	b.w	23f1e50 <_ZN6tflite10MicroGraph20ResetVariableTensorsEv>
}
 23f2328:	bd10      	pop	{r4, pc}
	...

023f232c <_ZN6tflite16MicroInterpreter15AllocateTensorsEb>:
TfLiteStatus MicroInterpreter::AllocateTensors(bool run_all_prep_ops) {
 23f232c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23f2330:	4605      	mov	r5, r0
 23f2332:	460f      	mov	r7, r1
  SubgraphAllocations* allocations = allocator_.StartModelAllocation(model_);
 23f2334:	6801      	ldr	r1, [r0, #0]
 23f2336:	6e00      	ldr	r0, [r0, #96]	; 0x60
 23f2338:	f7ff f850 	bl	23f13dc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelE>
  if (allocations == nullptr) {
 23f233c:	4601      	mov	r1, r0
 23f233e:	b938      	cbnz	r0, 23f2350 <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x24>
    initialization_status_ = kTfLiteError;
 23f2340:	2001      	movs	r0, #1
 23f2342:	f885 0085 	strb.w	r0, [r5, #133]	; 0x85
    return kTfLiteError;
 23f2346:	2401      	movs	r4, #1
}
 23f2348:	4620      	mov	r0, r4
 23f234a:	b002      	add	sp, #8
 23f234c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  graph_.SetSubgraphAllocations(allocations);
 23f2350:	f105 0664 	add.w	r6, r5, #100	; 0x64
 23f2354:	4630      	mov	r0, r6
 23f2356:	f7ff fd79 	bl	23f1e4c <_ZN6tflite10MicroGraph22SetSubgraphAllocationsEPNS_19SubgraphAllocationsE>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer());
 23f235a:	4628      	mov	r0, r5
 23f235c:	f7ff fee8 	bl	23f2130 <_ZN6tflite16MicroInterpreter44PrepareNodeAndRegistrationDataFromFlatbufferEv>
 23f2360:	4604      	mov	r4, r0
 23f2362:	2800      	cmp	r0, #0
 23f2364:	d1f0      	bne.n	23f2348 <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x1c>
  context_.AllocatePersistentBuffer = MicroContextAllocatePersistentBuffer;
 23f2366:	4b55      	ldr	r3, [pc, #340]	; (23f24bc <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x190>)
  context_.GetScratchBuffer = nullptr;
 23f2368:	e9c5 0011 	strd	r0, r0, [r5, #68]	; 0x44
  context_.GetExternalContext = nullptr;
 23f236c:	62e8      	str	r0, [r5, #44]	; 0x2c
  context_.AllocatePersistentBuffer = MicroContextAllocatePersistentBuffer;
 23f236e:	63eb      	str	r3, [r5, #60]	; 0x3c
  TF_LITE_ENSURE_STATUS(graph_.InitSubgraphs());
 23f2370:	4630      	mov	r0, r6
 23f2372:	f7ff fc7d 	bl	23f1c70 <_ZN6tflite10MicroGraph13InitSubgraphsEv>
 23f2376:	4604      	mov	r4, r0
 23f2378:	2800      	cmp	r0, #0
 23f237a:	d1e5      	bne.n	23f2348 <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x1c>
  context_.RequestScratchBufferInArena =
 23f237c:	4b50      	ldr	r3, [pc, #320]	; (23f24c0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x194>)
  TF_LITE_ENSURE_STATUS(graph_.PrepareSubgraphs(run_all_prep_ops));
 23f237e:	4639      	mov	r1, r7
  context_.RequestScratchBufferInArena =
 23f2380:	646b      	str	r3, [r5, #68]	; 0x44
  context_.GetExternalContext = MicroContextGetExternalContext;
 23f2382:	4b50      	ldr	r3, [pc, #320]	; (23f24c4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x198>)
  TF_LITE_ENSURE_STATUS(graph_.PrepareSubgraphs(run_all_prep_ops));
 23f2384:	4630      	mov	r0, r6
  context_.GetExternalContext = MicroContextGetExternalContext;
 23f2386:	62eb      	str	r3, [r5, #44]	; 0x2c
  TF_LITE_ENSURE_STATUS(graph_.PrepareSubgraphs(run_all_prep_ops));
 23f2388:	f7ff fcd0 	bl	23f1d2c <_ZN6tflite10MicroGraph16PrepareSubgraphsEb>
 23f238c:	4604      	mov	r4, r0
 23f238e:	2800      	cmp	r0, #0
 23f2390:	d1da      	bne.n	23f2348 <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x1c>
  context_.GetScratchBuffer = MicroContextGetScratchBuffer;
 23f2392:	4b4d      	ldr	r3, [pc, #308]	; (23f24c8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x19c>)
  context_.AllocatePersistentBuffer = nullptr;
 23f2394:	63e8      	str	r0, [r5, #60]	; 0x3c
  context_.RequestScratchBufferInArena = nullptr;
 23f2396:	6468      	str	r0, [r5, #68]	; 0x44
  context_.GetScratchBuffer = MicroContextGetScratchBuffer;
 23f2398:	64ab      	str	r3, [r5, #72]	; 0x48
  TF_LITE_ENSURE_OK(&context_, allocator_.FinishModelAllocation(
 23f239a:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 23f239c:	6829      	ldr	r1, [r5, #0]
 23f239e:	6e28      	ldr	r0, [r5, #96]	; 0x60
 23f23a0:	f105 0388 	add.w	r3, r5, #136	; 0x88
 23f23a4:	f7fe ffee 	bl	23f1384 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEPNS_19SubgraphAllocationsEPPNS_19ScratchBufferHandleE>
 23f23a8:	4604      	mov	r4, r0
 23f23aa:	2800      	cmp	r0, #0
 23f23ac:	d1cc      	bne.n	23f2348 <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x1c>
  micro_context_.SetScratchBufferHandles(scratch_buffer_handles_);
 23f23ae:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 23f23b2:	f105 0094 	add.w	r0, r5, #148	; 0x94
 23f23b6:	f7ff fc24 	bl	23f1c02 <_ZN6tflite12MicroContext23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>
          sizeof(TfLiteTensor*) * inputs_size()));
 23f23ba:	6828      	ldr	r0, [r5, #0]
 23f23bc:	f7ff fe74 	bl	23f20a8 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 23f23c0:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 23f23c2:	0081      	lsls	r1, r0, #2
          sizeof(TfLiteTensor*) * inputs_size()));
 23f23c4:	6833      	ldr	r3, [r6, #0]
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 23f23c6:	4630      	mov	r0, r6
 23f23c8:	695b      	ldr	r3, [r3, #20]
 23f23ca:	4798      	blx	r3
  input_tensors_ =
 23f23cc:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
  if (input_tensors_ == nullptr) {
 23f23d0:	b918      	cbnz	r0, 23f23da <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0xae>
    MicroPrintf(
 23f23d2:	6828      	ldr	r0, [r5, #0]
 23f23d4:	f7ff fe68 	bl	23f20a8 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
    return kTfLiteError;
 23f23d8:	e7b5      	b.n	23f2346 <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x1a>
    return *model_->subgraphs()->Get(0)->inputs();
 23f23da:	46a1      	mov	r9, r4
  for (size_t i = 0; i < inputs_size(); ++i) {
 23f23dc:	682e      	ldr	r6, [r5, #0]
 23f23de:	4630      	mov	r0, r6
 23f23e0:	f7ff fe62 	bl	23f20a8 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv.isra.0>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 23f23e4:	6e2f      	ldr	r7, [r5, #96]	; 0x60
  for (size_t i = 0; i < inputs_size(); ++i) {
 23f23e6:	42a0      	cmp	r0, r4
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 23f23e8:	f8d7 8000 	ldr.w	r8, [r7]
 23f23ec:	4630      	mov	r0, r6
  for (size_t i = 0; i < inputs_size(); ++i) {
 23f23ee:	d91f      	bls.n	23f2430 <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x104>
 23f23f0:	f7fe fb3e 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f23f4:	2100      	movs	r1, #0
 23f23f6:	f7fe fc1b 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
    return const_cast<Table *>(this)->GetPointer<P>(field);
 23f23fa:	2106      	movs	r1, #6
 23f23fc:	f7fe fc6a 	bl	23f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 23f2400:	4621      	mov	r1, r4
 23f2402:	f7fe fbd1 	bl	23f0ba8 <_ZNK11flatbuffers6VectorIlE3GetEm>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 23f2406:	f8cd 9000 	str.w	r9, [sp]
        model_, graph_.GetAllocations(), inputs().Get(i), 0);
 23f240a:	4603      	mov	r3, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 23f240c:	4631      	mov	r1, r6
 23f240e:	4638      	mov	r0, r7
 23f2410:	f8d8 8000 	ldr.w	r8, [r8]
 23f2414:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 23f2416:	f8d5 a08c 	ldr.w	sl, [r5, #140]	; 0x8c
 23f241a:	47c0      	blx	r8
 23f241c:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
    if (input_tensors_[i] == nullptr) {
 23f2420:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 23f2424:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 23f2428:	2b00      	cmp	r3, #0
 23f242a:	d08c      	beq.n	23f2346 <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x1a>
  for (size_t i = 0; i < inputs_size(); ++i) {
 23f242c:	3401      	adds	r4, #1
 23f242e:	e7d5      	b.n	23f23dc <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0xb0>
          sizeof(TfLiteTensor*) * outputs_size()));
 23f2430:	f7ff fe53 	bl	23f20da <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 23f2434:	f8d8 3014 	ldr.w	r3, [r8, #20]
 23f2438:	0081      	lsls	r1, r0, #2
 23f243a:	4638      	mov	r0, r7
 23f243c:	4798      	blx	r3
  output_tensors_ =
 23f243e:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
  if (output_tensors_ == nullptr) {
 23f2442:	b918      	cbnz	r0, 23f244c <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x120>
    MicroPrintf(
 23f2444:	6828      	ldr	r0, [r5, #0]
 23f2446:	f7ff fe48 	bl	23f20da <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
 23f244a:	e77c      	b.n	23f2346 <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x1a>
  for (size_t i = 0; i < outputs_size(); ++i) {
 23f244c:	2400      	movs	r4, #0
  const flatbuffers::Vector<int32_t>& outputs() const {
    return *model_->subgraphs()->Get(0)->outputs();
 23f244e:	46a0      	mov	r8, r4
 23f2450:	682e      	ldr	r6, [r5, #0]
 23f2452:	4630      	mov	r0, r6
 23f2454:	f7ff fe41 	bl	23f20da <_ZNK6tflite16MicroInterpreter12outputs_sizeEv.isra.0>
 23f2458:	42a0      	cmp	r0, r4
 23f245a:	d923      	bls.n	23f24a4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x178>
 23f245c:	4630      	mov	r0, r6
 23f245e:	f7fe fb07 	bl	23f0a70 <_ZNK6tflite5Model9subgraphsEv>
 23f2462:	2100      	movs	r1, #0
 23f2464:	f7fe fbe4 	bl	23f0c30 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 23f2468:	2108      	movs	r1, #8
 23f246a:	f7fe fc33 	bl	23f0cd4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 23f246e:	4621      	mov	r1, r4
 23f2470:	f7fe fb9a 	bl	23f0ba8 <_ZNK11flatbuffers6VectorIlE3GetEm>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 23f2474:	6e2f      	ldr	r7, [r5, #96]	; 0x60
        model_, graph_.GetAllocations(), outputs().Get(i), 0);
 23f2476:	4603      	mov	r3, r0
 23f2478:	683a      	ldr	r2, [r7, #0]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 23f247a:	f8cd 8000 	str.w	r8, [sp]
 23f247e:	f8d2 a000 	ldr.w	sl, [r2]
 23f2482:	4631      	mov	r1, r6
 23f2484:	4638      	mov	r0, r7
 23f2486:	6f6a      	ldr	r2, [r5, #116]	; 0x74
 23f2488:	f8d5 9090 	ldr.w	r9, [r5, #144]	; 0x90
 23f248c:	47d0      	blx	sl
 23f248e:	f849 0024 	str.w	r0, [r9, r4, lsl #2]
    if (output_tensors_[i] == nullptr) {
 23f2492:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 23f2496:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 23f249a:	2b00      	cmp	r3, #0
 23f249c:	f43f af53 	beq.w	23f2346 <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x1a>
  for (size_t i = 0; i < outputs_size(); ++i) {
 23f24a0:	3401      	adds	r4, #1
 23f24a2:	e7d5      	b.n	23f2450 <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x124>
  TF_LITE_ENSURE_STATUS(Reset());
 23f24a4:	4628      	mov	r0, r5
 23f24a6:	f7ff ff33 	bl	23f2310 <_ZN6tflite16MicroInterpreter5ResetEv>
 23f24aa:	4604      	mov	r4, r0
 23f24ac:	2800      	cmp	r0, #0
 23f24ae:	f47f af4b 	bne.w	23f2348 <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x1c>
  tensors_allocated_ = true;
 23f24b2:	2301      	movs	r3, #1
 23f24b4:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
  return kTfLiteOk;
 23f24b8:	e746      	b.n	23f2348 <_ZN6tflite16MicroInterpreter15AllocateTensorsEb+0x1c>
 23f24ba:	bf00      	nop
 23f24bc:	023f1ff1 	.word	0x023f1ff1
 23f24c0:	023f1ff9 	.word	0x023f1ff9
 23f24c4:	023f2019 	.word	0x023f2019
 23f24c8:	023f2001 	.word	0x023f2001

023f24cc <_ZN6tflite16MicroInterpreter6InvokeEv>:
TfLiteStatus MicroInterpreter::Invoke() {
 23f24cc:	b510      	push	{r4, lr}
  if (initialization_status_ != kTfLiteOk) {
 23f24ce:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
TfLiteStatus MicroInterpreter::Invoke() {
 23f24d2:	4604      	mov	r4, r0
  if (initialization_status_ != kTfLiteOk) {
 23f24d4:	b97b      	cbnz	r3, 23f24f6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x2a>
  if (!tensors_allocated_) {
 23f24d6:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 23f24da:	b133      	cbz	r3, 23f24ea <_ZN6tflite16MicroInterpreter6InvokeEv+0x1e>
  return graph_.InvokeSubgraph(0);
 23f24dc:	f104 0064 	add.w	r0, r4, #100	; 0x64
 23f24e0:	2100      	movs	r1, #0
}
 23f24e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return graph_.InvokeSubgraph(0);
 23f24e6:	f7ff bc5e 	b.w	23f1da6 <_ZN6tflite10MicroGraph14InvokeSubgraphEi>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors(true));
 23f24ea:	2101      	movs	r1, #1
 23f24ec:	f7ff ff1e 	bl	23f232c <_ZN6tflite16MicroInterpreter15AllocateTensorsEb>
 23f24f0:	2800      	cmp	r0, #0
 23f24f2:	d0f3      	beq.n	23f24dc <_ZN6tflite16MicroInterpreter6InvokeEv+0x10>
}
 23f24f4:	bd10      	pop	{r4, pc}
    return kTfLiteError;
 23f24f6:	2001      	movs	r0, #1
 23f24f8:	e7fc      	b.n	23f24f4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x28>

023f24fa <_Z3LogPKcSt9__va_list>:
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
  DebugLog(log_buffer);
  DebugLog("\r\n");
#endif
}
 23f24fa:	4770      	bx	lr

023f24fc <_ZN6tflite22MicroResourceVariables8ResetAllEv>:
  TFLITE_DCHECK(EvalTensorBytes(tensor) == variable.bytes);
  memcpy(variable.resource_buffer, tensor->data.raw, variable.bytes);
  return kTfLiteOk;
}

TfLiteStatus MicroResourceVariables::ResetAll() {
 23f24fc:	b538      	push	{r3, r4, r5, lr}
 23f24fe:	4605      	mov	r5, r0
  for (int i = 0; i < num_resource_variables_; i++) {
 23f2500:	2400      	movs	r4, #0
 23f2502:	68ab      	ldr	r3, [r5, #8]
 23f2504:	42a3      	cmp	r3, r4
 23f2506:	dd09      	ble.n	23f251c <_ZN6tflite22MicroResourceVariables8ResetAllEv+0x20>
    MicroResourceVariable variable = resource_variables_[i];
 23f2508:	682b      	ldr	r3, [r5, #0]
    memset(variable.resource_buffer, 0, variable.bytes);
 23f250a:	2100      	movs	r1, #0
    MicroResourceVariable variable = resource_variables_[i];
 23f250c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    memset(variable.resource_buffer, 0, variable.bytes);
 23f2510:	68da      	ldr	r2, [r3, #12]
 23f2512:	6898      	ldr	r0, [r3, #8]
 23f2514:	f006 fc05 	bl	23f8d22 <memset>
  for (int i = 0; i < num_resource_variables_; i++) {
 23f2518:	3401      	adds	r4, #1
 23f251a:	e7f2      	b.n	23f2502 <_ZN6tflite22MicroResourceVariables8ResetAllEv+0x6>
  }
  return kTfLiteOk;
}
 23f251c:	2000      	movs	r0, #0
 23f251e:	bd38      	pop	{r3, r4, r5, pc}

023f2520 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    const TfLiteRegistration** registration) {
 23f2520:	b513      	push	{r0, r1, r4, lr}
 23f2522:	4604      	mov	r4, r0
 23f2524:	9101      	str	r1, [sp, #4]
 23f2526:	9200      	str	r2, [sp, #0]
  return GetRegistrationFromOpCode(
 23f2528:	f7ff fb8a 	bl	23f1c40 <_ZN6tflite21GetMicroErrorReporterEv>
 23f252c:	e9dd 3100 	ldrd	r3, r1, [sp]
 23f2530:	4602      	mov	r2, r0
 23f2532:	4620      	mov	r0, r4
      opcode, op_resolver, tflite::GetMicroErrorReporter(), registration);
}
 23f2534:	b002      	add	sp, #8
 23f2536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return GetRegistrationFromOpCode(
 23f253a:	f7fd bf1f 	b.w	23f037c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>

023f253e <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 23f253e:	b508      	push	{r3, lr}
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 23f2540:	b908      	cbnz	r0, 23f2546 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x8>
 23f2542:	f002 f933 	bl	23f47ac <abort>
    return data_ - ReadScalar<soffset_t>(data_);
 23f2546:	6803      	ldr	r3, [r0, #0]
 23f2548:	1ac3      	subs	r3, r0, r3
 23f254a:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 23f254c:	2a0a      	cmp	r2, #10
 23f254e:	d909      	bls.n	23f2564 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x26>
 23f2550:	895a      	ldrh	r2, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f2552:	b102      	cbz	r2, 23f2556 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x18>
 23f2554:	5882      	ldr	r2, [r0, r2]
 23f2556:	889b      	ldrh	r3, [r3, #4]
 23f2558:	b153      	cbz	r3, 23f2570 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x32>
 23f255a:	56c0      	ldrsb	r0, [r0, r3]

  return std::max(
      op_code->builtin_code(),
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 23f255c:	4290      	cmp	r0, r2
 23f255e:	bfb8      	it	lt
 23f2560:	4610      	movlt	r0, r2
}
 23f2562:	bd08      	pop	{r3, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 23f2564:	2a04      	cmp	r2, #4
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f2566:	f04f 0200 	mov.w	r2, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 23f256a:	d8f4      	bhi.n	23f2556 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x18>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 23f256c:	4610      	mov	r0, r2
 23f256e:	e7f5      	b.n	23f255c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x1e>
 23f2570:	4618      	mov	r0, r3
 23f2572:	e7f3      	b.n	23f255c <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x1e>

023f2574 <_ZN6tflite26SingleArenaBufferAllocatorD1Ev>:
      sizeof(SingleArenaBufferAllocator), alignof(SingleArenaBufferAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SingleArenaBufferAllocator(tmp);
}

SingleArenaBufferAllocator::~SingleArenaBufferAllocator() {}
 23f2574:	4770      	bx	lr

023f2576 <_ZN6tflite26SingleArenaBufferAllocator25DeallocateResizableBufferEPh>:
  }
  return nullptr;
}

TfLiteStatus SingleArenaBufferAllocator::DeallocateResizableBuffer(
    uint8_t* resizable_buf) {
 23f2576:	b410      	push	{r4}
  return ResizeBuffer(resizable_buf, 0, 1);
 23f2578:	6803      	ldr	r3, [r0, #0]
 23f257a:	2200      	movs	r2, #0
 23f257c:	69dc      	ldr	r4, [r3, #28]
 23f257e:	2301      	movs	r3, #1
 23f2580:	46a4      	mov	ip, r4
}
 23f2582:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ResizeBuffer(resizable_buf, 0, 1);
 23f2586:	4760      	bx	ip

023f2588 <_ZN6tflite26SingleArenaBufferAllocator14DeallocateTempEPh>:
  temp_buffer_count_++;
  return aligned_result;
}

void SingleArenaBufferAllocator::DeallocateTemp(uint8_t* temp_buf) {
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(temp_buf));
 23f2588:	69c3      	ldr	r3, [r0, #28]
 23f258a:	4059      	eors	r1, r3
  temp_buffer_count_--;
 23f258c:	6a03      	ldr	r3, [r0, #32]
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(temp_buf));
 23f258e:	61c1      	str	r1, [r0, #28]
  temp_buffer_count_--;
 23f2590:	3b01      	subs	r3, #1
 23f2592:	6203      	str	r3, [r0, #32]
}
 23f2594:	4770      	bx	lr

023f2596 <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv>:

bool SingleArenaBufferAllocator::IsAllTempDeallocated() {
  if (temp_buffer_count_ != 0 || temp_buffer_ptr_check_sum_ != 0) {
 23f2596:	6a03      	ldr	r3, [r0, #32]
 23f2598:	b923      	cbnz	r3, 23f25a4 <_ZN6tflite26SingleArenaBufferAllocator20IsAllTempDeallocatedEv+0xe>
 23f259a:	69c0      	ldr	r0, [r0, #28]
 23f259c:	fab0 f080 	clz	r0, r0
 23f25a0:	0940      	lsrs	r0, r0, #5
 23f25a2:	4770      	bx	lr
    MicroPrintf(
        "Number of allocated temp buffers: %d. Checksum passing status: %d",
        temp_buffer_count_, !temp_buffer_ptr_check_sum_);
    return false;
 23f25a4:	2000      	movs	r0, #0
  }
  return true;
}
 23f25a6:	4770      	bx	lr

023f25a8 <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv>:

TfLiteStatus SingleArenaBufferAllocator::ResetTempAllocations() {
 23f25a8:	b510      	push	{r4, lr}
  // TODO(b/209453859): enable error check based on IsAllTempDeallocated after
  // all AllocateTemp have been paird with DeallocateTemp
  if (!IsAllTempDeallocated()) {
 23f25aa:	6803      	ldr	r3, [r0, #0]
TfLiteStatus SingleArenaBufferAllocator::ResetTempAllocations() {
 23f25ac:	4604      	mov	r4, r0
  if (!IsAllTempDeallocated()) {
 23f25ae:	691b      	ldr	r3, [r3, #16]
 23f25b0:	4798      	blx	r3
 23f25b2:	b118      	cbz	r0, 23f25bc <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x14>
    MicroPrintf(
        "All temp buffers must be freed before calling ResetTempAllocations()");
    return kTfLiteError;
  }
  temp_ = head_;
  return kTfLiteOk;
 23f25b4:	2000      	movs	r0, #0
  temp_ = head_;
 23f25b6:	6923      	ldr	r3, [r4, #16]
 23f25b8:	61a3      	str	r3, [r4, #24]
}
 23f25ba:	bd10      	pop	{r4, pc}
    return kTfLiteError;
 23f25bc:	2001      	movs	r0, #1
 23f25be:	e7fc      	b.n	23f25ba <_ZN6tflite26SingleArenaBufferAllocator20ResetTempAllocationsEv+0x12>

023f25c0 <_ZNK6tflite26SingleArenaBufferAllocator23GetOverlayMemoryAddressEv>:

uint8_t* SingleArenaBufferAllocator::GetOverlayMemoryAddress() const {
  return buffer_head_;
}
 23f25c0:	6880      	ldr	r0, [r0, #8]
 23f25c2:	4770      	bx	lr

023f25c4 <_ZNK6tflite26SingleArenaBufferAllocator25GetNonPersistentUsedBytesEv>:

size_t SingleArenaBufferAllocator::GetNonPersistentUsedBytes() const {
  return std::max(head_ - buffer_head_, temp_ - buffer_head_);
 23f25c4:	6902      	ldr	r2, [r0, #16]
 23f25c6:	6883      	ldr	r3, [r0, #8]
 23f25c8:	6980      	ldr	r0, [r0, #24]
      if (__a < __b)
 23f25ca:	4282      	cmp	r2, r0
 23f25cc:	bf34      	ite	cc
 23f25ce:	1ac0      	subcc	r0, r0, r3
 23f25d0:	1ad0      	subcs	r0, r2, r3
}
 23f25d2:	4770      	bx	lr

023f25d4 <_ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv>:

size_t SingleArenaBufferAllocator::GetPersistentUsedBytes() const {
  return buffer_tail_ - tail_;
 23f25d4:	68c2      	ldr	r2, [r0, #12]
 23f25d6:	6940      	ldr	r0, [r0, #20]
}
 23f25d8:	1a10      	subs	r0, r2, r0
 23f25da:	4770      	bx	lr

023f25dc <_ZThn4_NK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv>:

  // Returns the size of the head section in bytes.
  size_t GetNonPersistentUsedBytes() const override;

  // Returns the size of all allocations in the tail section in bytes.
  size_t GetPersistentUsedBytes() const override;
 23f25dc:	f1a0 0004 	sub.w	r0, r0, #4
 23f25e0:	f7ff bff8 	b.w	23f25d4 <_ZNK6tflite26SingleArenaBufferAllocator22GetPersistentUsedBytesEv>

023f25e4 <_ZN6tflite26SingleArenaBufferAllocatorD0Ev>:
SingleArenaBufferAllocator::~SingleArenaBufferAllocator() {}
 23f25e4:	b510      	push	{r4, lr}
 23f25e6:	4604      	mov	r4, r0
 23f25e8:	2124      	movs	r1, #36	; 0x24
 23f25ea:	f7f5 ffce 	bl	23e858a <_ZdlPvj>
 23f25ee:	4620      	mov	r0, r4
 23f25f0:	bd10      	pop	{r4, pc}

023f25f2 <_ZThn4_N6tflite26SingleArenaBufferAllocatorD0Ev>:
  virtual ~SingleArenaBufferAllocator();
 23f25f2:	f1a0 0004 	sub.w	r0, r0, #4
 23f25f6:	f7ff bff5 	b.w	23f25e4 <_ZN6tflite26SingleArenaBufferAllocatorD0Ev>

023f25fa <_ZN6tflite26SingleArenaBufferAllocator23AllocateResizableBufferEjj>:
                                                             size_t alignment) {
 23f25fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f25fc:	4604      	mov	r4, r0
 23f25fe:	460e      	mov	r6, r1
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 23f2600:	6880      	ldr	r0, [r0, #8]
 23f2602:	4611      	mov	r1, r2
 23f2604:	9201      	str	r2, [sp, #4]
 23f2606:	f7fe f9a1 	bl	23f094c <_ZN6tflite14AlignPointerUpEPhj>
  if (ResizeBuffer(expect_resizable_buf, size, alignment) == kTfLiteOk) {
 23f260a:	6822      	ldr	r2, [r4, #0]
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 23f260c:	4605      	mov	r5, r0
  if (ResizeBuffer(expect_resizable_buf, size, alignment) == kTfLiteOk) {
 23f260e:	4601      	mov	r1, r0
 23f2610:	69d7      	ldr	r7, [r2, #28]
 23f2612:	4620      	mov	r0, r4
 23f2614:	4632      	mov	r2, r6
 23f2616:	9b01      	ldr	r3, [sp, #4]
 23f2618:	47b8      	blx	r7
  return nullptr;
 23f261a:	2800      	cmp	r0, #0
}
 23f261c:	bf0c      	ite	eq
 23f261e:	4628      	moveq	r0, r5
 23f2620:	2000      	movne	r0, #0
 23f2622:	b003      	add	sp, #12
 23f2624:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f2626 <_ZN6tflite26SingleArenaBufferAllocator33ReserveNonPersistentOverlayMemoryEjj>:
    size_t size, size_t alignment) {
 23f2626:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f2628:	4604      	mov	r4, r0
 23f262a:	460d      	mov	r5, r1
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 23f262c:	6880      	ldr	r0, [r0, #8]
 23f262e:	4611      	mov	r1, r2
 23f2630:	9201      	str	r2, [sp, #4]
 23f2632:	f7fe f98b 	bl	23f094c <_ZN6tflite14AlignPointerUpEPhj>
  return ResizeBuffer(expect_resizable_buf, size, alignment);
 23f2636:	6822      	ldr	r2, [r4, #0]
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 23f2638:	4601      	mov	r1, r0
  return ResizeBuffer(expect_resizable_buf, size, alignment);
 23f263a:	69d6      	ldr	r6, [r2, #28]
 23f263c:	4620      	mov	r0, r4
 23f263e:	462a      	mov	r2, r5
 23f2640:	46b4      	mov	ip, r6
 23f2642:	9b01      	ldr	r3, [sp, #4]
}
 23f2644:	b002      	add	sp, #8
 23f2646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return ResizeBuffer(expect_resizable_buf, size, alignment);
 23f264a:	4760      	bx	ip

023f264c <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj>:
                                                  size_t alignment) {
 23f264c:	b538      	push	{r3, r4, r5, lr}
 23f264e:	4604      	mov	r4, r0
 23f2650:	460d      	mov	r5, r1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 23f2652:	6980      	ldr	r0, [r0, #24]
 23f2654:	4611      	mov	r1, r2
 23f2656:	f7fe f979 	bl	23f094c <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
 23f265a:	6963      	ldr	r3, [r4, #20]
 23f265c:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
 23f265e:	42ab      	cmp	r3, r5
 23f2660:	d308      	bcc.n	23f2674 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj+0x28>
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(aligned_result));
 23f2662:	69e3      	ldr	r3, [r4, #28]
  temp_ = aligned_result + size;
 23f2664:	4405      	add	r5, r0
  temp_buffer_ptr_check_sum_ ^= (reinterpret_cast<intptr_t>(aligned_result));
 23f2666:	4043      	eors	r3, r0
 23f2668:	61e3      	str	r3, [r4, #28]
  temp_buffer_count_++;
 23f266a:	6a23      	ldr	r3, [r4, #32]
  temp_ = aligned_result + size;
 23f266c:	61a5      	str	r5, [r4, #24]
  temp_buffer_count_++;
 23f266e:	3301      	adds	r3, #1
 23f2670:	6223      	str	r3, [r4, #32]
}
 23f2672:	bd38      	pop	{r3, r4, r5, pc}
    return nullptr;
 23f2674:	2000      	movs	r0, #0
 23f2676:	e7fc      	b.n	23f2672 <_ZN6tflite26SingleArenaBufferAllocator12AllocateTempEjj+0x26>

023f2678 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>:
    size_t size, size_t alignment) {
 23f2678:	b510      	push	{r4, lr}
 23f267a:	4604      	mov	r4, r0
 23f267c:	4608      	mov	r0, r1
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 23f267e:	6963      	ldr	r3, [r4, #20]
 23f2680:	4611      	mov	r1, r2
 23f2682:	1a18      	subs	r0, r3, r0
 23f2684:	f7fe f968 	bl	23f0958 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
 23f2688:	6923      	ldr	r3, [r4, #16]
 23f268a:	4283      	cmp	r3, r0
    return nullptr;
 23f268c:	bf8c      	ite	hi
 23f268e:	2000      	movhi	r0, #0
  tail_ = aligned_result;
 23f2690:	6160      	strls	r0, [r4, #20]
}
 23f2692:	bd10      	pop	{r4, pc}

023f2694 <_ZThn4_N6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>:
  virtual uint8_t* AllocatePersistentBuffer(size_t size,
 23f2694:	f1a0 0004 	sub.w	r0, r0, #4
 23f2698:	f7ff bfee 	b.w	23f2678 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>

023f269c <_ZNK6tflite26SingleArenaBufferAllocator18GetAvailableMemoryEj>:

size_t SingleArenaBufferAllocator::GetAvailableMemory(size_t alignment) const {
 23f269c:	b570      	push	{r4, r5, r6, lr}
 23f269e:	4604      	mov	r4, r0
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 23f26a0:	6980      	ldr	r0, [r0, #24]
size_t SingleArenaBufferAllocator::GetAvailableMemory(size_t alignment) const {
 23f26a2:	460e      	mov	r6, r1
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 23f26a4:	f7fe f952 	bl	23f094c <_ZN6tflite14AlignPointerUpEPhj>
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 23f26a8:	4631      	mov	r1, r6
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 23f26aa:	4605      	mov	r5, r0
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 23f26ac:	6960      	ldr	r0, [r4, #20]
 23f26ae:	f7fe f953 	bl	23f0958 <_ZN6tflite16AlignPointerDownEPhj>
  return aligned_tail - aligned_temp;
}
 23f26b2:	1b40      	subs	r0, r0, r5
 23f26b4:	bd70      	pop	{r4, r5, r6, pc}

023f26b6 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj>:
                                                      size_t alignment) {
 23f26b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f26b8:	4604      	mov	r4, r0
 23f26ba:	460e      	mov	r6, r1
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 23f26bc:	6880      	ldr	r0, [r0, #8]
                                                      size_t alignment) {
 23f26be:	4619      	mov	r1, r3
 23f26c0:	4615      	mov	r5, r2
  uint8_t* expect_resizable_buf = AlignPointerUp(buffer_head_, alignment);
 23f26c2:	9301      	str	r3, [sp, #4]
 23f26c4:	f7fe f942 	bl	23f094c <_ZN6tflite14AlignPointerUpEPhj>
  if (head_ != temp_ || resizable_buf != expect_resizable_buf) {
 23f26c8:	6922      	ldr	r2, [r4, #16]
 23f26ca:	69a3      	ldr	r3, [r4, #24]
 23f26cc:	9901      	ldr	r1, [sp, #4]
 23f26ce:	429a      	cmp	r2, r3
 23f26d0:	d002      	beq.n	23f26d8 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x22>
    return kTfLiteError;
 23f26d2:	2001      	movs	r0, #1
}
 23f26d4:	b002      	add	sp, #8
 23f26d6:	bd70      	pop	{r4, r5, r6, pc}
  if (head_ != temp_ || resizable_buf != expect_resizable_buf) {
 23f26d8:	42b0      	cmp	r0, r6
 23f26da:	d1fa      	bne.n	23f26d2 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x1c>
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 23f26dc:	68a0      	ldr	r0, [r4, #8]
 23f26de:	f7fe f935 	bl	23f094c <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
 23f26e2:	6963      	ldr	r3, [r4, #20]
 23f26e4:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
 23f26e6:	429d      	cmp	r5, r3
 23f26e8:	d8f3      	bhi.n	23f26d2 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x1c>
  head_ = aligned_result + size;
 23f26ea:	4428      	add	r0, r5
 23f26ec:	6120      	str	r0, [r4, #16]
  temp_ = head_;
 23f26ee:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
 23f26f0:	2000      	movs	r0, #0
 23f26f2:	e7ef      	b.n	23f26d4 <_ZN6tflite26SingleArenaBufferAllocator12ResizeBufferEPhjj+0x1e>

023f26f4 <_ZThn4_N6tflite26SingleArenaBufferAllocatorD1Ev>:
 23f26f4:	3804      	subs	r0, #4
 23f26f6:	4770      	bx	lr

023f26f8 <_ZN6tflite26SingleArenaBufferAllocatorC1EPhS1_>:
      temp_(buffer_head_) {}
 23f26f8:	e9c0 2103 	strd	r2, r1, [r0, #12]
 23f26fc:	e9c0 2105 	strd	r2, r1, [r0, #20]
 23f2700:	2200      	movs	r2, #0
SingleArenaBufferAllocator::SingleArenaBufferAllocator(uint8_t* buffer_head,
 23f2702:	b530      	push	{r4, r5, lr}
      temp_(buffer_head_) {}
 23f2704:	4c04      	ldr	r4, [pc, #16]	; (23f2718 <_ZN6tflite26SingleArenaBufferAllocatorC1EPhS1_+0x20>)
 23f2706:	e9c0 2207 	strd	r2, r2, [r0, #28]
 23f270a:	f104 0508 	add.w	r5, r4, #8
 23f270e:	344c      	adds	r4, #76	; 0x4c
 23f2710:	e9c0 4101 	strd	r4, r1, [r0, #4]
 23f2714:	6005      	str	r5, [r0, #0]
 23f2716:	bd30      	pop	{r4, r5, pc}
 23f2718:	023ff034 	.word	0x023ff034

023f271c <_ZN6tflite26SingleArenaBufferAllocatorC1EPhj>:
SingleArenaBufferAllocator::SingleArenaBufferAllocator(uint8_t* buffer,
 23f271c:	b508      	push	{r3, lr}
 23f271e:	4603      	mov	r3, r0
    : SingleArenaBufferAllocator(buffer, buffer + buffer_size) {}
 23f2720:	440a      	add	r2, r1
 23f2722:	f7ff ffe9 	bl	23f26f8 <_ZN6tflite26SingleArenaBufferAllocatorC1EPhS1_>
 23f2726:	4618      	mov	r0, r3
 23f2728:	bd08      	pop	{r3, pc}
	...

023f272c <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj>:
    uint8_t* buffer_head, size_t buffer_size) {
 23f272c:	b500      	push	{lr}
 23f272e:	460a      	mov	r2, r1
 23f2730:	b08b      	sub	sp, #44	; 0x2c
  TFLITE_DCHECK(buffer_head != nullptr);
 23f2732:	4601      	mov	r1, r0
 23f2734:	b908      	cbnz	r0, 23f273a <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj+0xe>
 23f2736:	f002 f839 	bl	23f47ac <abort>
      SingleArenaBufferAllocator(buffer_head, buffer_size);
 23f273a:	a801      	add	r0, sp, #4
 23f273c:	f7ff ffee 	bl	23f271c <_ZN6tflite26SingleArenaBufferAllocatorC1EPhj>
  uint8_t* allocator_buffer = tmp.AllocatePersistentBuffer(
 23f2740:	2204      	movs	r2, #4
 23f2742:	2124      	movs	r1, #36	; 0x24
 23f2744:	eb0d 0002 	add.w	r0, sp, r2
 23f2748:	f7ff ff96 	bl	23f2678 <_ZN6tflite26SingleArenaBufferAllocator24AllocatePersistentBufferEjj>
  return new (allocator_buffer) SingleArenaBufferAllocator(tmp);
 23f274c:	b188      	cbz	r0, 23f2772 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj+0x46>
class SingleArenaBufferAllocator : public INonPersistentBufferAllocator,
 23f274e:	4b0a      	ldr	r3, [pc, #40]	; (23f2778 <_ZN6tflite26SingleArenaBufferAllocator6CreateEPhj+0x4c>)
 23f2750:	6003      	str	r3, [r0, #0]
 23f2752:	3344      	adds	r3, #68	; 0x44
 23f2754:	6043      	str	r3, [r0, #4]
 23f2756:	9b03      	ldr	r3, [sp, #12]
 23f2758:	6083      	str	r3, [r0, #8]
 23f275a:	9b04      	ldr	r3, [sp, #16]
 23f275c:	60c3      	str	r3, [r0, #12]
 23f275e:	9b05      	ldr	r3, [sp, #20]
 23f2760:	6103      	str	r3, [r0, #16]
 23f2762:	9b06      	ldr	r3, [sp, #24]
 23f2764:	6143      	str	r3, [r0, #20]
 23f2766:	9b07      	ldr	r3, [sp, #28]
 23f2768:	6183      	str	r3, [r0, #24]
 23f276a:	9b08      	ldr	r3, [sp, #32]
 23f276c:	61c3      	str	r3, [r0, #28]
 23f276e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f2770:	6203      	str	r3, [r0, #32]
}
 23f2772:	b00b      	add	sp, #44	; 0x2c
 23f2774:	f85d fb04 	ldr.w	pc, [sp], #4
 23f2778:	023ff03c 	.word	0x023ff03c

023f277c <_ZNK6tflite12RuntimeShape4DimsEi>:

  ~RuntimeShape() {}

  int32_t DimensionsCount() const { return size_; }
  int32_t Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
 23f277c:	2900      	cmp	r1, #0
  int32_t Dims(int i) const {
 23f277e:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
 23f2780:	da01      	bge.n	23f2786 <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
 23f2782:	f002 f813 	bl	23f47ac <abort>
    TFLITE_DCHECK_LT(i, size_);
 23f2786:	6803      	ldr	r3, [r0, #0]
 23f2788:	428b      	cmp	r3, r1
 23f278a:	ddfa      	ble.n	23f2782 <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return dims_[i];
 23f278c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
  }
 23f2790:	6840      	ldr	r0, [r0, #4]
 23f2792:	bd08      	pop	{r3, pc}

023f2794 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
  return reinterpret_cast<T*>(tensor->data.raw);
}

// Returns const data for a TfLiteEvalTensor struct that are expected to exist.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 23f2794:	b508      	push	{r3, lr}
  TFLITE_DCHECK(tensor != nullptr);
 23f2796:	b908      	cbnz	r0, 23f279c <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x8>
 23f2798:	f002 f808 	bl	23f47ac <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
}
 23f279c:	6800      	ldr	r0, [r0, #0]
 23f279e:	bd08      	pop	{r3, pc}

023f27a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 23f27a0:	b570      	push	{r4, r5, r6, lr}
 23f27a2:	4615      	mov	r5, r2
 23f27a4:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 23f27a6:	f7ff ffe9 	bl	23f277c <_ZNK6tflite12RuntimeShape4DimsEi>
 23f27aa:	4631      	mov	r1, r6
 23f27ac:	4604      	mov	r4, r0
 23f27ae:	4628      	mov	r0, r5
 23f27b0:	f7ff ffe4 	bl	23f277c <_ZNK6tflite12RuntimeShape4DimsEi>
 23f27b4:	4284      	cmp	r4, r0
 23f27b6:	d001      	beq.n	23f27bc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
 23f27b8:	f001 fff8 	bl	23f47ac <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
}
 23f27bc:	bd70      	pop	{r4, r5, r6, pc}

023f27be <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 23f27be:	b510      	push	{r4, lr}
 23f27c0:	4604      	mov	r4, r0
  if (tensor == nullptr) {
 23f27c2:	b911      	cbnz	r1, 23f27ca <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
 23f27c4:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 23f27c6:	4620      	mov	r0, r4
 23f27c8:	bd10      	pop	{r4, pc}
  const int dims_size = dims->size;
 23f27ca:	6889      	ldr	r1, [r1, #8]
 23f27cc:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
 23f27d0:	f840 2b04 	str.w	r2, [r0], #4
  const int32_t* DimsDataUpTo5D() const { return dims_; }

  void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
    size_ = dimensions_count;
    int32_t* dst_dims = DimsData();
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 23f27d4:	0092      	lsls	r2, r2, #2
 23f27d6:	f006 fa7d 	bl	23f8cd4 <memcpy>
  }
 23f27da:	e7f4      	b.n	23f27c6 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>

023f27dc <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  int32_t batches;
  int32_t accum_depth;
  int32_t output_depth;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 23f27dc:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 23f27de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 23f27e0:	b90b      	cbnz	r3, 23f27e6 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
 23f27e2:	f001 ffe3 	bl	23f47ac <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f27e6:	213c      	movs	r1, #60	; 0x3c
}
 23f27e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 23f27ec:	4718      	bx	r3

023f27ee <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 23f27ee:	b538      	push	{r3, r4, r5, lr}
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 23f27f0:	2900      	cmp	r1, #0
  int32_t DimensionsCount() const { return size_; }
 23f27f2:	6805      	ldr	r5, [r0, #0]
 23f27f4:	db01      	blt.n	23f27fa <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0xc>
 23f27f6:	42a9      	cmp	r1, r5
 23f27f8:	db01      	blt.n	23f27fe <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x10>
 23f27fa:	f001 ffd7 	bl	23f47ac <abort>
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
 23f27fe:	2200      	movs	r2, #0
  int flat_size = 1;
 23f2800:	2401      	movs	r4, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 23f2802:	1d03      	adds	r3, r0, #4
 23f2804:	4291      	cmp	r1, r2
 23f2806:	bf0c      	ite	eq
 23f2808:	2001      	moveq	r0, #1
 23f280a:	f853 0022 	ldrne.w	r0, [r3, r2, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 23f280e:	3201      	adds	r2, #1
 23f2810:	4295      	cmp	r5, r2
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 23f2812:	fb00 f404 	mul.w	r4, r0, r4
  for (int i = 0; i < dims_count; ++i) {
 23f2816:	dcf5      	bgt.n	23f2804 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x16>
  }
  return flat_size;
}
 23f2818:	4620      	mov	r0, r4
 23f281a:	bd38      	pop	{r3, r4, r5, pc}

023f281c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f281c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 23f2820:	690e      	ldr	r6, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f2822:	4604      	mov	r4, r0
 23f2824:	4689      	mov	r9, r1
 23f2826:	b0a3      	sub	sp, #140	; 0x8c
  TFLITE_DCHECK(node->user_data != nullptr);
 23f2828:	b90e      	cbnz	r6, 23f282e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12>
 23f282a:	f001 ffbf 	bl	23f47ac <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f282e:	694b      	ldr	r3, [r1, #20]
 23f2830:	9306      	str	r3, [sp, #24]
 23f2832:	2b00      	cmp	r3, #0
 23f2834:	d0f9      	beq.n	23f282a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe>
  return reinterpret_cast<MicroContext*>(context->impl_);
 23f2836:	6885      	ldr	r5, [r0, #8]
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  MicroContext* micro_context = GetMicroContext(context);
  TfLiteTensor* input =
      micro_context->AllocateTempInputTensor(node, kFullyConnectedInputTensor);
 23f2838:	4a96      	ldr	r2, [pc, #600]	; (23f2a94 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x278>)
 23f283a:	682b      	ldr	r3, [r5, #0]
 23f283c:	4628      	mov	r0, r5
 23f283e:	699b      	ldr	r3, [r3, #24]
 23f2840:	6812      	ldr	r2, [r2, #0]
 23f2842:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
 23f2844:	4680      	mov	r8, r0
 23f2846:	b960      	cbnz	r0, 23f2862 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x46>
 23f2848:	4b93      	ldr	r3, [pc, #588]	; (23f2a98 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 23f284a:	6925      	ldr	r5, [r4, #16]
 23f284c:	9300      	str	r3, [sp, #0]
 23f284e:	2347      	movs	r3, #71	; 0x47
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
      node, kFullyConnectedWeightsTensor);
  TF_LITE_ENSURE(context, filter != nullptr);
 23f2850:	4620      	mov	r0, r4
 23f2852:	4a92      	ldr	r2, [pc, #584]	; (23f2a9c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x280>)
 23f2854:	4992      	ldr	r1, [pc, #584]	; (23f2aa0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x284>)
 23f2856:	47a8      	blx	r5
 23f2858:	2701      	movs	r7, #1
  if (bias != nullptr) {
    micro_context->DeallocateTempTfLiteTensor(bias);
  }

  return kTfLiteOk;
}
 23f285a:	4638      	mov	r0, r7
 23f285c:	b023      	add	sp, #140	; 0x8c
 23f285e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      node, kFullyConnectedWeightsTensor);
 23f2862:	682b      	ldr	r3, [r5, #0]
  TfLiteTensor* filter = micro_context->AllocateTempInputTensor(
 23f2864:	4a8f      	ldr	r2, [pc, #572]	; (23f2aa4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x288>)
 23f2866:	4649      	mov	r1, r9
 23f2868:	4628      	mov	r0, r5
 23f286a:	699b      	ldr	r3, [r3, #24]
 23f286c:	6812      	ldr	r2, [r2, #0]
 23f286e:	4798      	blx	r3
  TF_LITE_ENSURE(context, filter != nullptr);
 23f2870:	4682      	mov	sl, r0
 23f2872:	b920      	cbnz	r0, 23f287e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x62>
 23f2874:	4b8c      	ldr	r3, [pc, #560]	; (23f2aa8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
 23f2876:	6925      	ldr	r5, [r4, #16]
 23f2878:	9300      	str	r3, [sp, #0]
 23f287a:	234a      	movs	r3, #74	; 0x4a
 23f287c:	e7e8      	b.n	23f2850 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x34>
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 23f287e:	682b      	ldr	r3, [r5, #0]
 23f2880:	4a8a      	ldr	r2, [pc, #552]	; (23f2aac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x290>)
 23f2882:	4649      	mov	r1, r9
 23f2884:	699b      	ldr	r3, [r3, #24]
 23f2886:	6812      	ldr	r2, [r2, #0]
 23f2888:	4628      	mov	r0, r5
 23f288a:	4798      	blx	r3
      node, kFullyConnectedOutputTensor);
 23f288c:	682b      	ldr	r3, [r5, #0]
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 23f288e:	4a88      	ldr	r2, [pc, #544]	; (23f2ab0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x294>)
 23f2890:	4649      	mov	r1, r9
      micro_context->AllocateTempInputTensor(node, kFullyConnectedBiasTensor);
 23f2892:	9005      	str	r0, [sp, #20]
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(
 23f2894:	69db      	ldr	r3, [r3, #28]
 23f2896:	4628      	mov	r0, r5
 23f2898:	6812      	ldr	r2, [r2, #0]
 23f289a:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
 23f289c:	4681      	mov	r9, r0
 23f289e:	b920      	cbnz	r0, 23f28aa <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8e>
 23f28a0:	4b84      	ldr	r3, [pc, #528]	; (23f2ab4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x298>)
 23f28a2:	6925      	ldr	r5, [r4, #16]
 23f28a4:	9300      	str	r3, [sp, #0]
 23f28a6:	234f      	movs	r3, #79	; 0x4f
 23f28a8:	e7d2      	b.n	23f2850 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x34>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 23f28aa:	f898 0000 	ldrb.w	r0, [r8]
 23f28ae:	f899 3000 	ldrb.w	r3, [r9]
 23f28b2:	4283      	cmp	r3, r0
 23f28b4:	d013      	beq.n	23f28de <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc2>
 23f28b6:	6926      	ldr	r6, [r4, #16]
 23f28b8:	f7fd fbf6 	bl	23f00a8 <TfLiteTypeGetName>
 23f28bc:	4605      	mov	r5, r0
 23f28be:	f899 0000 	ldrb.w	r0, [r9]
 23f28c2:	f7fd fbf1 	bl	23f00a8 <TfLiteTypeGetName>
 23f28c6:	4b7c      	ldr	r3, [pc, #496]	; (23f2ab8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
 23f28c8:	e9cd 5002 	strd	r5, r0, [sp, #8]
 23f28cc:	9301      	str	r3, [sp, #4]
 23f28ce:	4b7b      	ldr	r3, [pc, #492]	; (23f2abc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a0>)
 23f28d0:	4620      	mov	r0, r4
 23f28d2:	9300      	str	r3, [sp, #0]
 23f28d4:	4a71      	ldr	r2, [pc, #452]	; (23f2a9c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x280>)
 23f28d6:	2351      	movs	r3, #81	; 0x51
 23f28d8:	4979      	ldr	r1, [pc, #484]	; (23f2ac0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>)
 23f28da:	47b0      	blx	r6
 23f28dc:	e7bc      	b.n	23f2858 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c>
  const RuntimeShape filter_shape = GetTensorShape(filter);
 23f28de:	4651      	mov	r1, sl
 23f28e0:	a810      	add	r0, sp, #64	; 0x40
 23f28e2:	f7ff ff6c 	bl	23f27be <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 23f28e6:	4649      	mov	r1, r9
 23f28e8:	a816      	add	r0, sp, #88	; 0x58
 23f28ea:	f7ff ff68 	bl	23f27be <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 23f28ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23f28f0:	a810      	add	r0, sp, #64	; 0x40
 23f28f2:	3b01      	subs	r3, #1
 23f28f4:	4619      	mov	r1, r3
 23f28f6:	9307      	str	r3, [sp, #28]
 23f28f8:	f7ff ff40 	bl	23f277c <_ZNK6tflite12RuntimeShape4DimsEi>
  filter_dims.h = 1;
 23f28fc:	2301      	movs	r3, #1
 23f28fe:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
  filter_dims.n = filter_shape.Dims(filter_dim_count - 1);
 23f2902:	9008      	str	r0, [sp, #32]
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 23f2904:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 23f2908:	4639      	mov	r1, r7
 23f290a:	a816      	add	r0, sp, #88	; 0x58
  filter_dims.w = 1;
 23f290c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 23f2910:	f7ff ff34 	bl	23f277c <_ZNK6tflite12RuntimeShape4DimsEi>
  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
 23f2914:	9b07      	ldr	r3, [sp, #28]
  filter_dims.c = output_shape.Dims(output_dim_count - 1);
 23f2916:	900b      	str	r0, [sp, #44]	; 0x2c
  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
 23f2918:	4619      	mov	r1, r3
 23f291a:	a810      	add	r0, sp, #64	; 0x40
 23f291c:	f7ff ff2e 	bl	23f277c <_ZNK6tflite12RuntimeShape4DimsEi>
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 23f2920:	4639      	mov	r1, r7
  data->accum_depth = filter_shape.Dims(filter_dim_count - 1);
 23f2922:	6370      	str	r0, [r6, #52]	; 0x34
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 23f2924:	a816      	add	r0, sp, #88	; 0x58
 23f2926:	f7ff ff62 	bl	23f27ee <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 23f292a:	4639      	mov	r1, r7
  data->batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 23f292c:	6330      	str	r0, [r6, #48]	; 0x30
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 23f292e:	a816      	add	r0, sp, #88	; 0x58
 23f2930:	f7ff ff24 	bl	23f277c <_ZNK6tflite12RuntimeShape4DimsEi>
  data->buffer_idx = -1;
 23f2934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f2938:	62f3      	str	r3, [r6, #44]	; 0x2c
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 23f293a:	9b06      	ldr	r3, [sp, #24]
  data->output_depth = output_shape.Dims(output_dim_count - 1);
 23f293c:	63b0      	str	r0, [r6, #56]	; 0x38
  TF_LITE_ENSURE_STATUS(CalculateOpDataFullyConnected(
 23f293e:	7819      	ldrb	r1, [r3, #0]
 23f2940:	9b05      	ldr	r3, [sp, #20]
 23f2942:	f898 2000 	ldrb.w	r2, [r8]
 23f2946:	4620      	mov	r0, r4
 23f2948:	e9cd a300 	strd	sl, r3, [sp]
 23f294c:	e9cd 9602 	strd	r9, r6, [sp, #8]
 23f2950:	4643      	mov	r3, r8
 23f2952:	f000 fb69 	bl	23f3028 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>
 23f2956:	4607      	mov	r7, r0
 23f2958:	2800      	cmp	r0, #0
 23f295a:	f47f af7e 	bne.w	23f285a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
  if (input->type == kTfLiteInt16) {
 23f295e:	f898 3000 	ldrb.w	r3, [r8]
 23f2962:	2b07      	cmp	r3, #7
 23f2964:	d13c      	bne.n	23f29e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1c4>
    TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
 23f2966:	f8d8 3010 	ldr.w	r3, [r8, #16]
 23f296a:	b163      	cbz	r3, 23f2986 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16a>
 23f296c:	e9cd 3002 	strd	r3, r0, [sp, #8]
 23f2970:	4b54      	ldr	r3, [pc, #336]	; (23f2ac4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
 23f2972:	6925      	ldr	r5, [r4, #16]
 23f2974:	9301      	str	r3, [sp, #4]
 23f2976:	4b54      	ldr	r3, [pc, #336]	; (23f2ac8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ac>)
 23f2978:	9300      	str	r3, [sp, #0]
 23f297a:	236f      	movs	r3, #111	; 0x6f
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 23f297c:	4620      	mov	r0, r4
 23f297e:	4a47      	ldr	r2, [pc, #284]	; (23f2a9c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x280>)
 23f2980:	4952      	ldr	r1, [pc, #328]	; (23f2acc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b0>)
 23f2982:	47a8      	blx	r5
 23f2984:	e768      	b.n	23f2858 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3c>
 23f2986:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23f298a:	b14b      	cbz	r3, 23f29a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>
 23f298c:	2200      	movs	r2, #0
 23f298e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f2992:	4b4c      	ldr	r3, [pc, #304]	; (23f2ac4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>)
 23f2994:	6925      	ldr	r5, [r4, #16]
 23f2996:	9301      	str	r3, [sp, #4]
 23f2998:	4b4d      	ldr	r3, [pc, #308]	; (23f2ad0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b4>)
 23f299a:	9300      	str	r3, [sp, #0]
 23f299c:	2370      	movs	r3, #112	; 0x70
 23f299e:	e7ed      	b.n	23f297c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x160>
    buf_size = arm_fully_connected_s16_get_buffer_size(&filter_dims);
 23f29a0:	a808      	add	r0, sp, #32
 23f29a2:	f7f5 ff05 	bl	23e87b0 <arm_fully_connected_s16_get_buffer_size>
      buf_size = arm_convolve_1x1_s8_fast_get_buffer_size(&input_dims);
 23f29a6:	4683      	mov	fp, r0
  if (filter->type == kTfLiteInt4) {
 23f29a8:	f89a 3000 	ldrb.w	r3, [sl]
 23f29ac:	2b12      	cmp	r3, #18
 23f29ae:	d14a      	bne.n	23f2a46 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22a>
                     reinterpret_cast<const int32_t*>(filter->dims->data))
 23f29b0:	f8da 1008 	ldr.w	r1, [sl, #8]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 23f29b4:	a81d      	add	r0, sp, #116	; 0x74
 23f29b6:	f851 3b04 	ldr.w	r3, [r1], #4
 23f29ba:	009a      	lsls	r2, r3, #2
      : size_(dimensions_count) {
 23f29bc:	931c      	str	r3, [sp, #112]	; 0x70
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 23f29be:	9306      	str	r3, [sp, #24]
 23f29c0:	f006 f988 	bl	23f8cd4 <memcpy>
  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  int FlatSize() const {
    int buffer_size = 1;
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
    for (int i = 0; i < size_; i++) {
 23f29c4:	2200      	movs	r2, #0
    int buffer_size = 1;
 23f29c6:	2101      	movs	r1, #1
 23f29c8:	9b06      	ldr	r3, [sp, #24]
 23f29ca:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
    for (int i = 0; i < size_; i++) {
 23f29ce:	4293      	cmp	r3, r2
 23f29d0:	f10c 0c04 	add.w	ip, ip, #4
 23f29d4:	dd32      	ble.n	23f2a3c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x220>
      buffer_size *= dims_data[i];
 23f29d6:	f8dc 0000 	ldr.w	r0, [ip]
    for (int i = 0; i < size_; i++) {
 23f29da:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
 23f29dc:	4341      	muls	r1, r0
    for (int i = 0; i < size_; i++) {
 23f29de:	e7f6      	b.n	23f29ce <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1b2>
  } else if (input->type == kTfLiteInt8) {
 23f29e0:	2b09      	cmp	r3, #9
 23f29e2:	d129      	bne.n	23f2a38 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>
    const RuntimeShape input_shape = GetTensorShape(input);
 23f29e4:	4641      	mov	r1, r8
 23f29e6:	a81c      	add	r0, sp, #112	; 0x70
 23f29e8:	f7ff fee9 	bl	23f27be <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_GE(output_dim_count, 2);
 23f29ec:	f1ab 0302 	sub.w	r3, fp, #2
 23f29f0:	2b02      	cmp	r3, #2
 23f29f2:	f63f af1a 	bhi.w	23f282a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xe>
    if (output_dim_count > 2 && data->accum_depth % 4 == 0) {
 23f29f6:	f1bb 0f02 	cmp.w	fp, #2
 23f29fa:	d019      	beq.n	23f2a30 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x214>
 23f29fc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 23f29fe:	079b      	lsls	r3, r3, #30
 23f2a00:	d116      	bne.n	23f2a30 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x214>
              context, data->output_depth * sizeof(int32_t)));
 23f2a02:	6bb1      	ldr	r1, [r6, #56]	; 0x38
          static_cast<int32_t*>(context->AllocatePersistentBuffer(
 23f2a04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 23f2a06:	4620      	mov	r0, r4
 23f2a08:	0089      	lsls	r1, r1, #2
 23f2a0a:	4798      	blx	r3
              context, data->output_depth * sizeof(int32_t)));
 23f2a0c:	6bb1      	ldr	r1, [r6, #56]	; 0x38
      data->per_channel_output_multiplier =
 23f2a0e:	6270      	str	r0, [r6, #36]	; 0x24
          static_cast<int32_t*>(context->AllocatePersistentBuffer(
 23f2a10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 23f2a12:	4620      	mov	r0, r4
 23f2a14:	0089      	lsls	r1, r1, #2
 23f2a16:	4798      	blx	r3
      input_dims.n = data->batches;
 23f2a18:	6b33      	ldr	r3, [r6, #48]	; 0x30
      data->per_channel_output_shift =
 23f2a1a:	62b0      	str	r0, [r6, #40]	; 0x28
      input_dims.n = data->batches;
 23f2a1c:	930c      	str	r3, [sp, #48]	; 0x30
      input_dims.h = 1;
 23f2a1e:	2301      	movs	r3, #1
      input_dims.w = 1;
 23f2a20:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
      input_dims.c = data->accum_depth;
 23f2a24:	6b73      	ldr	r3, [r6, #52]	; 0x34
      buf_size = arm_convolve_1x1_s8_fast_get_buffer_size(&input_dims);
 23f2a26:	a80c      	add	r0, sp, #48	; 0x30
      input_dims.c = data->accum_depth;
 23f2a28:	930f      	str	r3, [sp, #60]	; 0x3c
      buf_size = arm_convolve_1x1_s8_fast_get_buffer_size(&input_dims);
 23f2a2a:	f7f5 fe87 	bl	23e873c <arm_convolve_1x1_s8_fast_get_buffer_size>
 23f2a2e:	e7ba      	b.n	23f29a6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18a>
      buf_size = arm_fully_connected_s8_get_buffer_size(&filter_dims);
 23f2a30:	a808      	add	r0, sp, #32
 23f2a32:	f7f5 fef3 	bl	23e881c <arm_fully_connected_s8_get_buffer_size>
 23f2a36:	e7b6      	b.n	23f29a6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18a>
  int32_t buf_size = 0;
 23f2a38:	4683      	mov	fp, r0
 23f2a3a:	e7b5      	b.n	23f29a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18c>
    context->RequestScratchBufferInArena(
 23f2a3c:	4620      	mov	r0, r4
 23f2a3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f2a40:	f106 0220 	add.w	r2, r6, #32
 23f2a44:	4798      	blx	r3
  if (buf_size > 0) {
 23f2a46:	f1bb 0f00 	cmp.w	fp, #0
 23f2a4a:	dc18      	bgt.n	23f2a7e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x262>
  micro_context->DeallocateTempTfLiteTensor(output);
 23f2a4c:	682b      	ldr	r3, [r5, #0]
 23f2a4e:	4649      	mov	r1, r9
 23f2a50:	4628      	mov	r0, r5
 23f2a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f2a54:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(input);
 23f2a56:	682b      	ldr	r3, [r5, #0]
 23f2a58:	4641      	mov	r1, r8
 23f2a5a:	4628      	mov	r0, r5
 23f2a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f2a5e:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(filter);
 23f2a60:	682b      	ldr	r3, [r5, #0]
 23f2a62:	4651      	mov	r1, sl
 23f2a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f2a66:	4628      	mov	r0, r5
 23f2a68:	4798      	blx	r3
  if (bias != nullptr) {
 23f2a6a:	9b05      	ldr	r3, [sp, #20]
 23f2a6c:	2b00      	cmp	r3, #0
 23f2a6e:	f43f aef4 	beq.w	23f285a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
    micro_context->DeallocateTempTfLiteTensor(bias);
 23f2a72:	682b      	ldr	r3, [r5, #0]
 23f2a74:	4628      	mov	r0, r5
 23f2a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f2a78:	9905      	ldr	r1, [sp, #20]
 23f2a7a:	4798      	blx	r3
 23f2a7c:	e6ed      	b.n	23f285a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 23f2a7e:	4659      	mov	r1, fp
 23f2a80:	4620      	mov	r0, r4
 23f2a82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 23f2a84:	f106 022c 	add.w	r2, r6, #44	; 0x2c
 23f2a88:	4798      	blx	r3
 23f2a8a:	2800      	cmp	r0, #0
 23f2a8c:	d0de      	beq.n	23f2a4c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x230>
 23f2a8e:	4607      	mov	r7, r0
  ~RuntimeShape() {}
 23f2a90:	e6e3      	b.n	23f285a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3e>
 23f2a92:	bf00      	nop
 23f2a94:	023ff504 	.word	0x023ff504
 23f2a98:	023ff11d 	.word	0x023ff11d
 23f2a9c:	023ff090 	.word	0x023ff090
 23f2aa0:	023fdcbf 	.word	0x023fdcbf
 23f2aa4:	023ff50c 	.word	0x023ff50c
 23f2aa8:	023ff12e 	.word	0x023ff12e
 23f2aac:	023ff500 	.word	0x023ff500
 23f2ab0:	023ff508 	.word	0x023ff508
 23f2ab4:	023ff140 	.word	0x023ff140
 23f2ab8:	023ff16c 	.word	0x023ff16c
 23f2abc:	023ff179 	.word	0x023ff179
 23f2ac0:	023ff152 	.word	0x023ff152
 23f2ac4:	023fe7e9 	.word	0x023fe7e9
 23f2ac8:	023ff19f 	.word	0x023ff19f
 23f2acc:	023ff185 	.word	0x023ff185
 23f2ad0:	023ff1b8 	.word	0x023ff1b8

023f2ad4 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 23f2ad4:	2300      	movs	r3, #0
TfLiteRegistration Register_FULLY_CONNECTED() {
 23f2ad6:	b513      	push	{r0, r1, r4, lr}
 23f2ad8:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, Eval);
 23f2ada:	9300      	str	r3, [sp, #0]
 23f2adc:	4a03      	ldr	r2, [pc, #12]	; (23f2aec <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x18>)
 23f2ade:	4b04      	ldr	r3, [pc, #16]	; (23f2af0 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x1c>)
 23f2ae0:	4904      	ldr	r1, [pc, #16]	; (23f2af4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x20>)
 23f2ae2:	f000 fadc 	bl	23f309e <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
 23f2ae6:	4620      	mov	r0, r4
 23f2ae8:	b002      	add	sp, #8
 23f2aea:	bd10      	pop	{r4, pc}
 23f2aec:	023f281d 	.word	0x023f281d
 23f2af0:	023f2e0d 	.word	0x023f2e0d
 23f2af4:	023f27dd 	.word	0x023f27dd

023f2af8 <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>:
TfLiteStatus EvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
 23f2af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f2afc:	460e      	mov	r6, r1
 23f2afe:	4699      	mov	r9, r3
  quant_params->multiplier = data.reference_op_data.output_multiplier;
 23f2b00:	680b      	ldr	r3, [r1, #0]
TfLiteStatus EvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
 23f2b02:	b0a3      	sub	sp, #140	; 0x8c
  quant_params->multiplier = data.reference_op_data.output_multiplier;
 23f2b04:	9309      	str	r3, [sp, #36]	; 0x24
  quant_params->shift = data.reference_op_data.output_shift;
 23f2b06:	684b      	ldr	r3, [r1, #4]
TfLiteStatus EvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
 23f2b08:	4615      	mov	r5, r2
 23f2b0a:	e9dd 8a2c 	ldrd	r8, sl, [sp, #176]	; 0xb0
  quant_params->shift = data.reference_op_data.output_shift;
 23f2b0e:	930a      	str	r3, [sp, #40]	; 0x28
  input_dims->h = 1;
 23f2b10:	2301      	movs	r3, #1
  input_dims->c = data.accum_depth;
 23f2b12:	6b72      	ldr	r2, [r6, #52]	; 0x34
  input_dims->w = 1;
 23f2b14:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  filter_dims->n = data.accum_depth;
 23f2b18:	e9cd 2210 	strd	r2, r2, [sp, #64]	; 0x40
  filter_dims->c = data.output_depth;
 23f2b1c:	6bb2      	ldr	r2, [r6, #56]	; 0x38
  filter_dims->w = 1;
 23f2b1e:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  bias_dims->n = 1;
 23f2b22:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  bias_dims->w = 1;
 23f2b26:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  output_dims->w = 1;
 23f2b2a:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
  ctx->buf = nullptr;
 23f2b2e:	2300      	movs	r3, #0
  input_dims->n = data.batches;
 23f2b30:	6b09      	ldr	r1, [r1, #48]	; 0x30
TfLiteStatus EvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,
 23f2b32:	4604      	mov	r4, r0
  output_dims->n = data.batches;
 23f2b34:	e9cd 2118 	strd	r2, r1, [sp, #96]	; 0x60
  input_dims->n = data.batches;
 23f2b38:	910d      	str	r1, [sp, #52]	; 0x34
  if (data.buffer_idx > -1) {
 23f2b3a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
  ctx->size = 0;
 23f2b3c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (data.buffer_idx > -1) {
 23f2b40:	4299      	cmp	r1, r3
  output_dims->c = data.output_depth;
 23f2b42:	921c      	str	r2, [sp, #112]	; 0x70
  if (data.buffer_idx > -1) {
 23f2b44:	db02      	blt.n	23f2b4c <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x54>
    ctx->buf = context->GetScratchBuffer(context, data.buffer_idx);
 23f2b46:	6c03      	ldr	r3, [r0, #64]	; 0x40
 23f2b48:	4798      	blx	r3
 23f2b4a:	900b      	str	r0, [sp, #44]	; 0x2c
}

// Returns const data for a TfLiteEvalTensor struct that could be null.
template <typename T>
const T* GetOptionalTensorData(const TfLiteEvalTensor* tensor) {
  return tensor == nullptr ? nullptr
 23f2b4c:	f1b8 0f00 	cmp.w	r8, #0
 23f2b50:	d001      	beq.n	23f2b56 <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x5e>
 23f2b52:	f8d8 8000 	ldr.w	r8, [r8]
  fc_params.input_offset = -data.reference_op_data.input_zero_point;
 23f2b56:	6973      	ldr	r3, [r6, #20]
 23f2b58:	425b      	negs	r3, r3
 23f2b5a:	931d      	str	r3, [sp, #116]	; 0x74
  fc_params.output_offset = data.reference_op_data.output_zero_point;
 23f2b5c:	69f3      	ldr	r3, [r6, #28]
 23f2b5e:	931f      	str	r3, [sp, #124]	; 0x7c
  fc_params.filter_offset = 0;
 23f2b60:	2300      	movs	r3, #0
 23f2b62:	931e      	str	r3, [sp, #120]	; 0x78
  fc_params.activation.min = data.reference_op_data.output_activation_min;
 23f2b64:	68b3      	ldr	r3, [r6, #8]
 23f2b66:	9320      	str	r3, [sp, #128]	; 0x80
  fc_params.activation.max = data.reference_op_data.output_activation_max;
 23f2b68:	68f3      	ldr	r3, [r6, #12]
 23f2b6a:	9321      	str	r3, [sp, #132]	; 0x84
  TFLITE_DCHECK(tensor != nullptr);
 23f2b6c:	b90d      	cbnz	r5, 23f2b72 <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x7a>
 23f2b6e:	f001 fe1d 	bl	23f47ac <abort>
  TF_LITE_ENSURE_EQ(
 23f2b72:	4648      	mov	r0, r9
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f2b74:	f8d5 b000 	ldr.w	fp, [r5]
 23f2b78:	f7ff fe0c 	bl	23f2794 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 23f2b7c:	f1ba 0f00 	cmp.w	sl, #0
 23f2b80:	d0f5      	beq.n	23f2b6e <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x76>
 23f2b82:	f8da 3000 	ldr.w	r3, [sl]
 23f2b86:	af19      	add	r7, sp, #100	; 0x64
 23f2b88:	9306      	str	r3, [sp, #24]
 23f2b8a:	ae15      	add	r6, sp, #84	; 0x54
 23f2b8c:	ab11      	add	r3, sp, #68	; 0x44
 23f2b8e:	e9cd 0602 	strd	r0, r6, [sp, #8]
 23f2b92:	e9cd b300 	strd	fp, r3, [sp]
 23f2b96:	e9cd 8704 	strd	r8, r7, [sp, #16]
 23f2b9a:	ab0d      	add	r3, sp, #52	; 0x34
 23f2b9c:	aa09      	add	r2, sp, #36	; 0x24
 23f2b9e:	a91d      	add	r1, sp, #116	; 0x74
 23f2ba0:	a80b      	add	r0, sp, #44	; 0x2c
 23f2ba2:	f7f5 fdcd 	bl	23e8740 <arm_fully_connected_s16>
 23f2ba6:	b318      	cbz	r0, 23f2bf0 <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xf8>
 23f2ba8:	4648      	mov	r0, r9
 23f2baa:	f7ff fdf3 	bl	23f2794 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 23f2bae:	f8da 3000 	ldr.w	r3, [sl]
 23f2bb2:	aa09      	add	r2, sp, #36	; 0x24
 23f2bb4:	e9cd 7305 	strd	r7, r3, [sp, #20]
 23f2bb8:	ab11      	add	r3, sp, #68	; 0x44
 23f2bba:	9301      	str	r3, [sp, #4]
 23f2bbc:	682b      	ldr	r3, [r5, #0]
 23f2bbe:	9002      	str	r0, [sp, #8]
 23f2bc0:	9300      	str	r3, [sp, #0]
 23f2bc2:	a91d      	add	r1, sp, #116	; 0x74
 23f2bc4:	ab0d      	add	r3, sp, #52	; 0x34
 23f2bc6:	e9cd 6803 	strd	r6, r8, [sp, #12]
 23f2bca:	a80b      	add	r0, sp, #44	; 0x2c
 23f2bcc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 23f2bd0:	f7f5 fdb6 	bl	23e8740 <arm_fully_connected_s16>
 23f2bd4:	2300      	movs	r3, #0
 23f2bd6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 23f2bda:	4b07      	ldr	r3, [pc, #28]	; (23f2bf8 <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x100>)
 23f2bdc:	4620      	mov	r0, r4
 23f2bde:	9301      	str	r3, [sp, #4]
 23f2be0:	4b06      	ldr	r3, [pc, #24]	; (23f2bfc <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x104>)
 23f2be2:	4a07      	ldr	r2, [pc, #28]	; (23f2c00 <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x108>)
 23f2be4:	9300      	str	r3, [sp, #0]
 23f2be6:	4907      	ldr	r1, [pc, #28]	; (23f2c04 <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x10c>)
 23f2be8:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 23f2bec:	47d8      	blx	fp
 23f2bee:	2001      	movs	r0, #1
}
 23f2bf0:	b023      	add	sp, #140	; 0x8c
 23f2bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f2bf6:	bf00      	nop
 23f2bf8:	023ff1d2 	.word	0x023ff1d2
 23f2bfc:	023ff1e7 	.word	0x023ff1e7
 23f2c00:	023ff090 	.word	0x023ff090
 23f2c04:	023ff185 	.word	0x023ff185

023f2c08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
 23f2c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f2c0c:	b0b7      	sub	sp, #220	; 0xdc
 23f2c0e:	e9dd 8940 	ldrd	r8, r9, [sp, #256]	; 0x100
 23f2c12:	4604      	mov	r4, r0
 23f2c14:	460d      	mov	r5, r1
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f2c16:	a826      	add	r0, sp, #152	; 0x98
 23f2c18:	4649      	mov	r1, r9
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
 23f2c1a:	469a      	mov	sl, r3
 23f2c1c:	4693      	mov	fp, r2
  const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 23f2c1e:	f000 fa76 	bl	23f310e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  int32_t DimensionsCount() const { return size_; }
 23f2c22:	9e26      	ldr	r6, [sp, #152]	; 0x98
  TFLITE_DCHECK_GE(output_dim_count, 2);
 23f2c24:	1eb3      	subs	r3, r6, #2
 23f2c26:	2b02      	cmp	r3, #2
 23f2c28:	d901      	bls.n	23f2c2e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x26>
 23f2c2a:	f001 fdbf 	bl	23f47ac <abort>
  quant_params->multiplier = data.reference_op_data.output_multiplier;
 23f2c2e:	682b      	ldr	r3, [r5, #0]
  input_dims->c = data.accum_depth;
 23f2c30:	6b6a      	ldr	r2, [r5, #52]	; 0x34
  quant_params->multiplier = data.reference_op_data.output_multiplier;
 23f2c32:	930b      	str	r3, [sp, #44]	; 0x2c
  quant_params->shift = data.reference_op_data.output_shift;
 23f2c34:	686b      	ldr	r3, [r5, #4]
  filter_dims->n = data.accum_depth;
 23f2c36:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
  quant_params->shift = data.reference_op_data.output_shift;
 23f2c3a:	930c      	str	r3, [sp, #48]	; 0x30
  input_dims->h = 1;
 23f2c3c:	2301      	movs	r3, #1
  filter_dims->c = data.output_depth;
 23f2c3e:	6baa      	ldr	r2, [r5, #56]	; 0x38
  input_dims->w = 1;
 23f2c40:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  filter_dims->w = 1;
 23f2c44:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  bias_dims->n = 1;
 23f2c48:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  bias_dims->w = 1;
 23f2c4c:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
  output_dims->w = 1;
 23f2c50:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
  ctx->buf = nullptr;
 23f2c54:	2300      	movs	r3, #0
  input_dims->n = data.batches;
 23f2c56:	6b29      	ldr	r1, [r5, #48]	; 0x30
  ctx->size = 0;
 23f2c58:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  output_dims->n = data.batches;
 23f2c5c:	e9cd 211c 	strd	r2, r1, [sp, #112]	; 0x70
  input_dims->n = data.batches;
 23f2c60:	9111      	str	r1, [sp, #68]	; 0x44
  if (data.buffer_idx > -1) {
 23f2c62:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
  output_dims->c = data.output_depth;
 23f2c64:	9220      	str	r2, [sp, #128]	; 0x80
  if (data.buffer_idx > -1) {
 23f2c66:	4299      	cmp	r1, r3
 23f2c68:	db03      	blt.n	23f2c72 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x6a>
    ctx->buf = context->GetScratchBuffer(context, data.buffer_idx);
 23f2c6a:	4620      	mov	r0, r4
 23f2c6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 23f2c6e:	4798      	blx	r3
 23f2c70:	900d      	str	r0, [sp, #52]	; 0x34
  return tensor == nullptr ? nullptr
 23f2c72:	f1b8 0f00 	cmp.w	r8, #0
 23f2c76:	d001      	beq.n	23f2c7c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x74>
 23f2c78:	f8d8 8000 	ldr.w	r8, [r8]
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 23f2c7c:	696a      	ldr	r2, [r5, #20]
  if (output_dim_count > 2 && data.accum_depth % 4 == 0) {
 23f2c7e:	2e02      	cmp	r6, #2
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 23f2c80:	f8d5 c01c 	ldr.w	ip, [r5, #28]
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 23f2c84:	f1c2 0200 	rsb	r2, r2, #0
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 23f2c88:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
  if (output_dim_count > 2 && data.accum_depth % 4 == 0) {
 23f2c8c:	d068      	beq.n	23f2d60 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x158>
 23f2c8e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 23f2c90:	f013 0303 	ands.w	r3, r3, #3
 23f2c94:	d164      	bne.n	23f2d60 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x158>
    conv_params.dilation.h = 1;
 23f2c96:	2101      	movs	r1, #1
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 23f2c98:	e9cd 2c2c 	strd	r2, ip, [sp, #176]	; 0xb0
    per_channel_quant_params.multiplier =
 23f2c9c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    conv_params.dilation.w = 1;
 23f2c9e:	e9cd 1132 	strd	r1, r1, [sp, #200]	; 0xc8
    per_channel_quant_params.multiplier =
 23f2ca2:	920f      	str	r2, [sp, #60]	; 0x3c
    conv_params.stride.w = 1;
 23f2ca4:	e9cd 112e 	strd	r1, r1, [sp, #184]	; 0xb8
    per_channel_quant_params.shift =
 23f2ca8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    conv_params.padding.w = 0;
 23f2caa:	e9cd 3330 	strd	r3, r3, [sp, #192]	; 0xc0
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 23f2cae:	e9cd 7034 	strd	r7, r0, [sp, #208]	; 0xd0
    per_channel_quant_params.shift =
 23f2cb2:	9210      	str	r2, [sp, #64]	; 0x40
    for (int i = 0; i < data.output_depth; i++) {
 23f2cb4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 23f2cb6:	429a      	cmp	r2, r3
 23f2cb8:	dd09      	ble.n	23f2cce <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xc6>
      per_channel_quant_params.multiplier[i] = quant_params.multiplier;
 23f2cba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23f2cbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 23f2cbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      per_channel_quant_params.shift[i] = quant_params.shift;
 23f2cc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 23f2cc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 23f2cc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < data.output_depth; i++) {
 23f2cca:	3301      	adds	r3, #1
 23f2ccc:	e7f2      	b.n	23f2cb4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xac>
    TF_LITE_ENSURE_EQ(
 23f2cce:	4658      	mov	r0, fp
 23f2cd0:	f7ff fd60 	bl	23f2794 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 23f2cd4:	9009      	str	r0, [sp, #36]	; 0x24
 23f2cd6:	4650      	mov	r0, sl
 23f2cd8:	f7ff fd5c 	bl	23f2794 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 23f2cdc:	f1b9 0f00 	cmp.w	r9, #0
 23f2ce0:	d0a3      	beq.n	23f2c2a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x22>
 23f2ce2:	f8d9 2000 	ldr.w	r2, [r9]
 23f2ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f2ce8:	af1d      	add	r7, sp, #116	; 0x74
 23f2cea:	ae19      	add	r6, sp, #100	; 0x64
 23f2cec:	ad15      	add	r5, sp, #84	; 0x54
 23f2cee:	e9cd 0602 	strd	r0, r6, [sp, #8]
 23f2cf2:	9206      	str	r2, [sp, #24]
 23f2cf4:	9300      	str	r3, [sp, #0]
 23f2cf6:	e9cd 8704 	strd	r8, r7, [sp, #16]
 23f2cfa:	9501      	str	r5, [sp, #4]
 23f2cfc:	ab11      	add	r3, sp, #68	; 0x44
 23f2cfe:	aa0f      	add	r2, sp, #60	; 0x3c
 23f2d00:	a92c      	add	r1, sp, #176	; 0xb0
 23f2d02:	a80d      	add	r0, sp, #52	; 0x34
 23f2d04:	f7f5 fcea 	bl	23e86dc <arm_convolve_1x1_s8_fast>
 23f2d08:	b338      	cbz	r0, 23f2d5a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x152>
 23f2d0a:	6923      	ldr	r3, [r4, #16]
 23f2d0c:	4658      	mov	r0, fp
 23f2d0e:	9309      	str	r3, [sp, #36]	; 0x24
 23f2d10:	f7ff fd40 	bl	23f2794 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 23f2d14:	4683      	mov	fp, r0
 23f2d16:	4650      	mov	r0, sl
 23f2d18:	f7ff fd3c 	bl	23f2794 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 23f2d1c:	f8d9 3000 	ldr.w	r3, [r9]
 23f2d20:	aa0f      	add	r2, sp, #60	; 0x3c
 23f2d22:	e9cd 7305 	strd	r7, r3, [sp, #20]
 23f2d26:	e9cd 5001 	strd	r5, r0, [sp, #4]
 23f2d2a:	ab11      	add	r3, sp, #68	; 0x44
 23f2d2c:	a92c      	add	r1, sp, #176	; 0xb0
 23f2d2e:	e9cd 6803 	strd	r6, r8, [sp, #12]
 23f2d32:	f8cd b000 	str.w	fp, [sp]
 23f2d36:	a80d      	add	r0, sp, #52	; 0x34
 23f2d38:	f7f5 fcd0 	bl	23e86dc <arm_convolve_1x1_s8_fast>
 23f2d3c:	2300      	movs	r3, #0
 23f2d3e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 23f2d42:	4b2d      	ldr	r3, [pc, #180]	; (23f2df8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1f0>)
 23f2d44:	4620      	mov	r0, r4
 23f2d46:	9301      	str	r3, [sp, #4]
 23f2d48:	4b2c      	ldr	r3, [pc, #176]	; (23f2dfc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1f4>)
 23f2d4a:	4a2d      	ldr	r2, [pc, #180]	; (23f2e00 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1f8>)
 23f2d4c:	9300      	str	r3, [sp, #0]
 23f2d4e:	492d      	ldr	r1, [pc, #180]	; (23f2e04 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1fc>)
 23f2d50:	f44f 738a 	mov.w	r3, #276	; 0x114
 23f2d54:	9c09      	ldr	r4, [sp, #36]	; 0x24
 23f2d56:	47a0      	blx	r4
    TF_LITE_ENSURE_EQ(
 23f2d58:	2001      	movs	r0, #1
}
 23f2d5a:	b037      	add	sp, #220	; 0xdc
 23f2d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc_params.filter_offset = 0;
 23f2d60:	2300      	movs	r3, #0
    fc_params.activation.max = data.reference_op_data.output_activation_max;
 23f2d62:	e9cd 7024 	strd	r7, r0, [sp, #144]	; 0x90
    TF_LITE_ENSURE_EQ(
 23f2d66:	4658      	mov	r0, fp
    fc_params.input_offset = -data.reference_op_data.input_zero_point;
 23f2d68:	9221      	str	r2, [sp, #132]	; 0x84
    fc_params.output_offset = data.reference_op_data.output_zero_point;
 23f2d6a:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
    fc_params.filter_offset = 0;
 23f2d6e:	9322      	str	r3, [sp, #136]	; 0x88
    TF_LITE_ENSURE_EQ(
 23f2d70:	f7ff fd10 	bl	23f2794 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 23f2d74:	4607      	mov	r7, r0
 23f2d76:	4650      	mov	r0, sl
 23f2d78:	f7ff fd0c 	bl	23f2794 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 23f2d7c:	f1b9 0f00 	cmp.w	r9, #0
 23f2d80:	f43f af53 	beq.w	23f2c2a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x22>
 23f2d84:	f8d9 3000 	ldr.w	r3, [r9]
 23f2d88:	ad1d      	add	r5, sp, #116	; 0x74
 23f2d8a:	9306      	str	r3, [sp, #24]
 23f2d8c:	ae19      	add	r6, sp, #100	; 0x64
 23f2d8e:	ab15      	add	r3, sp, #84	; 0x54
 23f2d90:	e9cd 0602 	strd	r0, r6, [sp, #8]
 23f2d94:	e9cd 7300 	strd	r7, r3, [sp]
 23f2d98:	e9cd 8504 	strd	r8, r5, [sp, #16]
 23f2d9c:	ab11      	add	r3, sp, #68	; 0x44
 23f2d9e:	aa0b      	add	r2, sp, #44	; 0x2c
 23f2da0:	a921      	add	r1, sp, #132	; 0x84
 23f2da2:	a80d      	add	r0, sp, #52	; 0x34
 23f2da4:	f7f5 fd06 	bl	23e87b4 <arm_fully_connected_s8>
 23f2da8:	2800      	cmp	r0, #0
 23f2daa:	d0d6      	beq.n	23f2d5a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x152>
 23f2dac:	4658      	mov	r0, fp
 23f2dae:	f7ff fcf1 	bl	23f2794 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 23f2db2:	4683      	mov	fp, r0
 23f2db4:	4650      	mov	r0, sl
 23f2db6:	f7ff fced 	bl	23f2794 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 23f2dba:	f8d9 3000 	ldr.w	r3, [r9]
 23f2dbe:	6927      	ldr	r7, [r4, #16]
 23f2dc0:	e9cd 5305 	strd	r5, r3, [sp, #20]
 23f2dc4:	ab15      	add	r3, sp, #84	; 0x54
 23f2dc6:	e9cd b300 	strd	fp, r3, [sp]
 23f2dca:	9002      	str	r0, [sp, #8]
 23f2dcc:	ab11      	add	r3, sp, #68	; 0x44
 23f2dce:	aa0b      	add	r2, sp, #44	; 0x2c
 23f2dd0:	a921      	add	r1, sp, #132	; 0x84
 23f2dd2:	e9cd 6803 	strd	r6, r8, [sp, #12]
 23f2dd6:	a80d      	add	r0, sp, #52	; 0x34
 23f2dd8:	f7f5 fcec 	bl	23e87b4 <arm_fully_connected_s8>
 23f2ddc:	2300      	movs	r3, #0
 23f2dde:	e9cd 0302 	strd	r0, r3, [sp, #8]
 23f2de2:	4b05      	ldr	r3, [pc, #20]	; (23f2df8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1f0>)
 23f2de4:	4620      	mov	r0, r4
 23f2de6:	9301      	str	r3, [sp, #4]
 23f2de8:	4b07      	ldr	r3, [pc, #28]	; (23f2e08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x200>)
 23f2dea:	4a05      	ldr	r2, [pc, #20]	; (23f2e00 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1f8>)
 23f2dec:	9300      	str	r3, [sp, #0]
 23f2dee:	4905      	ldr	r1, [pc, #20]	; (23f2e04 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1fc>)
 23f2df0:	f44f 7392 	mov.w	r3, #292	; 0x124
 23f2df4:	47b8      	blx	r7
 23f2df6:	e7af      	b.n	23f2d58 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x150>
 23f2df8:	023ff1d2 	.word	0x023ff1d2
 23f2dfc:	023ff2ec 	.word	0x023ff2ec
 23f2e00:	023ff090 	.word	0x023ff090
 23f2e04:	023ff185 	.word	0x023ff185
 23f2e08:	023ff3fe 	.word	0x023ff3fe

023f2e0c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f2e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f2e10:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f2e14:	f8d1 a014 	ldr.w	sl, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 23f2e18:	4604      	mov	r4, r0
 23f2e1a:	460e      	mov	r6, r1
 23f2e1c:	b0ad      	sub	sp, #180	; 0xb4
  TFLITE_DCHECK(node->builtin_data != nullptr);
 23f2e1e:	f1ba 0f00 	cmp.w	sl, #0
 23f2e22:	d101      	bne.n	23f2e28 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c>
 23f2e24:	f001 fcc2 	bl	23f47ac <abort>
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 23f2e28:	4b6b      	ldr	r3, [pc, #428]	; (23f2fd8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1cc>)
 23f2e2a:	681a      	ldr	r2, [r3, #0]
 23f2e2c:	f000 f95f 	bl	23f30ee <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 23f2e30:	4b6a      	ldr	r3, [pc, #424]	; (23f2fdc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d0>)
 23f2e32:	4631      	mov	r1, r6
 23f2e34:	681a      	ldr	r2, [r3, #0]
      tflite::micro::GetEvalInput(context, node, kFullyConnectedInputTensor);
 23f2e36:	4607      	mov	r7, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 23f2e38:	4620      	mov	r0, r4
 23f2e3a:	f000 f958 	bl	23f30ee <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 23f2e3e:	4b68      	ldr	r3, [pc, #416]	; (23f2fe0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d4>)
 23f2e40:	4631      	mov	r1, r6
 23f2e42:	681a      	ldr	r2, [r3, #0]
      tflite::micro::GetEvalInput(context, node, kFullyConnectedWeightsTensor);
 23f2e44:	4605      	mov	r5, r0
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 23f2e46:	4620      	mov	r0, r4
 23f2e48:	f000 f951 	bl	23f30ee <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 23f2e4c:	4b65      	ldr	r3, [pc, #404]	; (23f2fe4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d8>)
 23f2e4e:	4631      	mov	r1, r6
      tflite::micro::GetEvalInput(context, node, kFullyConnectedBiasTensor);
 23f2e50:	4680      	mov	r8, r0
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 23f2e52:	681a      	ldr	r2, [r3, #0]
 23f2e54:	4620      	mov	r0, r4
 23f2e56:	f000 f94c 	bl	23f30f2 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(node->user_data != nullptr);
 23f2e5a:	6936      	ldr	r6, [r6, #16]
      tflite::micro::GetEvalOutput(context, node, kFullyConnectedOutputTensor);
 23f2e5c:	4681      	mov	r9, r0
  TFLITE_DCHECK(node->user_data != nullptr);
 23f2e5e:	2e00      	cmp	r6, #0
 23f2e60:	d0e0      	beq.n	23f2e24 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
      context, data.reference_op_data.filter_buffer_index, filter);
 23f2e62:	a807      	add	r0, sp, #28
 23f2e64:	462b      	mov	r3, r5
 23f2e66:	4621      	mov	r1, r4
 23f2e68:	6a32      	ldr	r2, [r6, #32]
 23f2e6a:	f000 f961 	bl	23f3130 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>
  switch (input->type) {
 23f2e6e:	7a38      	ldrb	r0, [r7, #8]
 23f2e70:	2807      	cmp	r0, #7
 23f2e72:	f000 80a8 	beq.w	23f2fc6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ba>
 23f2e76:	2809      	cmp	r0, #9
 23f2e78:	f000 8093 	beq.w	23f2fa2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x196>
 23f2e7c:	2801      	cmp	r0, #1
 23f2e7e:	f040 809e 	bne.w	23f2fbe <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b2>
  return tensor == nullptr ? nullptr
 23f2e82:	f1b8 0f00 	cmp.w	r8, #0
 23f2e86:	d063      	beq.n	23f2f50 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x144>
 23f2e88:	f8d8 6000 	ldr.w	r6, [r8]
          FullyConnectedParamsFloat(params->activation),
 23f2e8c:	f89a 1000 	ldrb.w	r1, [sl]
 23f2e90:	a822      	add	r0, sp, #136	; 0x88
 23f2e92:	f000 f8ab 	bl	23f2fec <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>
          tflite::micro::GetTensorShape(input),
 23f2e96:	4639      	mov	r1, r7
 23f2e98:	a80a      	add	r0, sp, #40	; 0x28
 23f2e9a:	f000 f938 	bl	23f310e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f2e9e:	683b      	ldr	r3, [r7, #0]
          tflite::micro::GetTensorShape(filter),
 23f2ea0:	4629      	mov	r1, r5
 23f2ea2:	a810      	add	r0, sp, #64	; 0x40
 23f2ea4:	9305      	str	r3, [sp, #20]
 23f2ea6:	f000 f932 	bl	23f310e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 23f2eaa:	2d00      	cmp	r5, #0
 23f2eac:	d0ba      	beq.n	23f2e24 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f2eae:	682b      	ldr	r3, [r5, #0]
          tflite::micro::GetTensorShape(bias), bias_data,
 23f2eb0:	4641      	mov	r1, r8
 23f2eb2:	a816      	add	r0, sp, #88	; 0x58
 23f2eb4:	9304      	str	r3, [sp, #16]
 23f2eb6:	f000 f92a 	bl	23f310e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
 23f2eba:	4649      	mov	r1, r9
 23f2ebc:	a81c      	add	r0, sp, #112	; 0x70
 23f2ebe:	f000 f926 	bl	23f310e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 23f2ec2:	f1b9 0f00 	cmp.w	r9, #0
 23f2ec6:	d0ad      	beq.n	23f2e24 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 23f2ec8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
  return reinterpret_cast<T*>(tensor->data.raw);
 23f2eca:	f8d9 3000 	ldr.w	r3, [r9]
 23f2ece:	3c01      	subs	r4, #1
 23f2ed0:	4621      	mov	r1, r4
 23f2ed2:	a81c      	add	r0, sp, #112	; 0x70
 23f2ed4:	9303      	str	r3, [sp, #12]
 23f2ed6:	f7ff fc8a 	bl	23f27ee <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 23f2eda:	9d10      	ldr	r5, [sp, #64]	; 0x40
 23f2edc:	9002      	str	r0, [sp, #8]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 23f2ede:	1ea9      	subs	r1, r5, #2
 23f2ee0:	a810      	add	r0, sp, #64	; 0x40
 23f2ee2:	f7ff fc4b 	bl	23f277c <_ZNK6tflite12RuntimeShape4DimsEi>
 23f2ee6:	4621      	mov	r1, r4
 23f2ee8:	4680      	mov	r8, r0
 23f2eea:	a81c      	add	r0, sp, #112	; 0x70
 23f2eec:	f7ff fc46 	bl	23f277c <_ZNK6tflite12RuntimeShape4DimsEi>
 23f2ef0:	4580      	cmp	r8, r0
  const float output_activation_min = params.float_activation_min;
 23f2ef2:	ed9d 8a29 	vldr	s16, [sp, #164]	; 0xa4
  const float output_activation_max = params.float_activation_max;
 23f2ef6:	eddd 8a2a 	vldr	s17, [sp, #168]	; 0xa8
 23f2efa:	4604      	mov	r4, r0
 23f2efc:	d192      	bne.n	23f2e24 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18>
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 23f2efe:	1e69      	subs	r1, r5, #1
 23f2f00:	a810      	add	r0, sp, #64	; 0x40
 23f2f02:	f7ff fc3b 	bl	23f277c <_ZNK6tflite12RuntimeShape4DimsEi>
 23f2f06:	2300      	movs	r3, #0
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
 23f2f08:	eddf 6a37 	vldr	s13, [pc, #220]	; 23f2fe8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 23f2f0c:	461d      	mov	r5, r3
  for (int b = 0; b < batches; ++b) {
 23f2f0e:	469c      	mov	ip, r3
 23f2f10:	9a02      	ldr	r2, [sp, #8]
 23f2f12:	4562      	cmp	r2, ip
 23f2f14:	dd3f      	ble.n	23f2f96 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18a>
 23f2f16:	9a03      	ldr	r2, [sp, #12]
 23f2f18:	eb02 0885 	add.w	r8, r2, r5, lsl #2
 23f2f1c:	9a05      	ldr	r2, [sp, #20]
 23f2f1e:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
 23f2f22:	2200      	movs	r2, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 23f2f24:	4611      	mov	r1, r2
 23f2f26:	42a1      	cmp	r1, r4
 23f2f28:	da30      	bge.n	23f2f8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x180>
 23f2f2a:	46da      	mov	sl, fp
      for (int d = 0; d < accum_depth; ++d) {
 23f2f2c:	f04f 0e00 	mov.w	lr, #0
      float total = 0.f;
 23f2f30:	eddf 7a2d 	vldr	s15, [pc, #180]	; 23f2fe8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1dc>
 23f2f34:	9f04      	ldr	r7, [sp, #16]
 23f2f36:	eb07 0982 	add.w	r9, r7, r2, lsl #2
      for (int d = 0; d < accum_depth; ++d) {
 23f2f3a:	4570      	cmp	r0, lr
 23f2f3c:	dd0a      	ble.n	23f2f54 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x148>
        total += input_data[b * accum_depth + d] *
 23f2f3e:	ecba 6a01 	vldmia	sl!, {s12}
                 weights_data[out_c * accum_depth + d];
 23f2f42:	ecb9 7a01 	vldmia	r9!, {s14}
      for (int d = 0; d < accum_depth; ++d) {
 23f2f46:	f10e 0e01 	add.w	lr, lr, #1
        total += input_data[b * accum_depth + d] *
 23f2f4a:	eee6 7a07 	vfma.f32	s15, s12, s14
      for (int d = 0; d < accum_depth; ++d) {
 23f2f4e:	e7f4      	b.n	23f2f3a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x12e>
  return tensor == nullptr ? nullptr
 23f2f50:	4646      	mov	r6, r8
 23f2f52:	e79b      	b.n	23f2e8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x80>
      if (bias_data) {
 23f2f54:	b1be      	cbz	r6, 23f2f86 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x17a>
        bias_value = bias_data[out_c];
 23f2f56:	eb06 0e81 	add.w	lr, r6, r1, lsl #2
 23f2f5a:	ed9e 7a00 	vldr	s14, [lr]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 23f2f5e:	ee77 7a87 	vadd.f32	s15, s15, s14
	return __b;
 23f2f62:	eeb4 8a67 	vcmp.f32	s16, s15
 23f2f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f2f6a:	fe78 7a27 	vselgt.f32	s15, s16, s15
	return __b;
 23f2f6e:	eef4 8a67 	vcmp.f32	s17, s15
 23f2f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f2f76:	bf48      	it	mi
 23f2f78:	eef0 7a68 	vmovmi.f32	s15, s17
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 23f2f7c:	3101      	adds	r1, #1
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 23f2f7e:	ece8 7a01 	vstmia	r8!, {s15}
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 23f2f82:	4402      	add	r2, r0
 23f2f84:	e7cf      	b.n	23f2f26 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11a>
      float bias_value = 0.0f;
 23f2f86:	eeb0 7a66 	vmov.f32	s14, s13
 23f2f8a:	e7e8      	b.n	23f2f5e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x152>
  for (int b = 0; b < batches; ++b) {
 23f2f8c:	f10c 0c01 	add.w	ip, ip, #1
 23f2f90:	4425      	add	r5, r4
 23f2f92:	4403      	add	r3, r0
 23f2f94:	e7bc      	b.n	23f2f10 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x104>
  return kTfLiteOk;
 23f2f96:	2000      	movs	r0, #0
}
 23f2f98:	b02d      	add	sp, #180	; 0xb4
 23f2f9a:	ecbd 8b02 	vpop	{d8}
 23f2f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (filter_int8.type) {
 23f2fa2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 23f2fa6:	2b09      	cmp	r3, #9
 23f2fa8:	d108      	bne.n	23f2fbc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b0>
          return EvalQuantizedInt8(context, node, data, input, &filter_int8,
 23f2faa:	463a      	mov	r2, r7
 23f2fac:	4631      	mov	r1, r6
 23f2fae:	4620      	mov	r0, r4
 23f2fb0:	e9cd 8900 	strd	r8, r9, [sp]
 23f2fb4:	ab07      	add	r3, sp, #28
 23f2fb6:	f7ff fe27 	bl	23f2c08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>
                                   bias, output);
 23f2fba:	e7ed      	b.n	23f2f98 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18c>
          MicroPrintf("Filter Type %s (%d) not supported.",
 23f2fbc:	7a28      	ldrb	r0, [r5, #8]
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 23f2fbe:	f7fd f873 	bl	23f00a8 <TfLiteTypeGetName>
      return kTfLiteError;
 23f2fc2:	2001      	movs	r0, #1
 23f2fc4:	e7e8      	b.n	23f2f98 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18c>
      return EvalQuantizedInt16(context, node, data, input, filter, bias,
 23f2fc6:	462b      	mov	r3, r5
 23f2fc8:	463a      	mov	r2, r7
 23f2fca:	4631      	mov	r1, r6
 23f2fcc:	4620      	mov	r0, r4
 23f2fce:	e9cd 8900 	strd	r8, r9, [sp]
 23f2fd2:	f7ff fd91 	bl	23f2af8 <_ZN6tflite12_GLOBAL__N_118EvalQuantizedInt16EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>
                                output);
 23f2fd6:	e7df      	b.n	23f2f98 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x18c>
 23f2fd8:	023ff504 	.word	0x023ff504
 23f2fdc:	023ff50c 	.word	0x023ff50c
 23f2fe0:	023ff500 	.word	0x023ff500
 23f2fe4:	023ff508 	.word	0x023ff508
 23f2fe8:	00000000 	.word	0x00000000

023f2fec <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation>:
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 23f2fec:	2901      	cmp	r1, #1
 23f2fee:	d103      	bne.n	23f2ff8 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0xc>
    *activation_min = 0;
 23f2ff0:	2300      	movs	r3, #0
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
 23f2ff2:	61c3      	str	r3, [r0, #28]
    *activation_max = std::numeric_limits<T>::max();
 23f2ff4:	4b09      	ldr	r3, [pc, #36]	; (23f301c <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x30>)
 23f2ff6:	e004      	b.n	23f3002 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x16>
  } else if (activation == kTfLiteActRelu6) {
 23f2ff8:	2903      	cmp	r1, #3
 23f2ffa:	d104      	bne.n	23f3006 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x1a>
    *activation_min = 0;
 23f2ffc:	2300      	movs	r3, #0
 23f2ffe:	61c3      	str	r3, [r0, #28]
    *activation_max = 6;
 23f3000:	4b07      	ldr	r3, [pc, #28]	; (23f3020 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x34>)
    *activation_max = std::numeric_limits<T>::max();
 23f3002:	6203      	str	r3, [r0, #32]
    TfLiteFusedActivation activation) {
  FullyConnectedParams op_params;
  CalculateActivationRange(activation, &op_params.float_activation_min,
                           &op_params.float_activation_max);
  return op_params;
}
 23f3004:	4770      	bx	lr
  } else if (activation == kTfLiteActReluN1To1) {
 23f3006:	2902      	cmp	r1, #2
 23f3008:	d104      	bne.n	23f3014 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x28>
    *activation_min = -1;
 23f300a:	4b06      	ldr	r3, [pc, #24]	; (23f3024 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x38>)
 23f300c:	61c3      	str	r3, [r0, #28]
    *activation_max = 1;
 23f300e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 23f3012:	e7f6      	b.n	23f3002 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x16>
    *activation_min = std::numeric_limits<T>::lowest();
 23f3014:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 23f3018:	e7eb      	b.n	23f2ff2 <_ZN6tflite25FullyConnectedParamsFloatE21TfLiteFusedActivation+0x6>
 23f301a:	bf00      	nop
 23f301c:	7f7fffff 	.word	0x7f7fffff
 23f3020:	40c00000 	.word	0x40c00000
 23f3024:	bf800000 	.word	0xbf800000

023f3028 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE>:

TfLiteStatus CalculateOpDataFullyConnected(
    TfLiteContext* context, TfLiteFusedActivation activation,
    TfLiteType data_type, const TfLiteTensor* input, const TfLiteTensor* filter,
    const TfLiteTensor* bias, TfLiteTensor* output,
    OpDataFullyConnected* data) {
 23f3028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  if (data_type != kTfLiteFloat32) {
 23f302c:	2a01      	cmp	r2, #1
    OpDataFullyConnected* data) {
 23f302e:	4607      	mov	r7, r0
 23f3030:	e9dd 950e 	ldrd	r9, r5, [sp, #56]	; 0x38
 23f3034:	4688      	mov	r8, r1
 23f3036:	461e      	mov	r6, r3
 23f3038:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if (data_type != kTfLiteFloat32) {
 23f303c:	d02d      	beq.n	23f309a <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x72>
    double real_multiplier = 0.0;
 23f303e:	2200      	movs	r2, #0
 23f3040:	2300      	movs	r3, #0
 23f3042:	e9cd 2302 	strd	r2, r3, [sp, #8]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 23f3046:	ab02      	add	r3, sp, #8
 23f3048:	e9cd 9300 	strd	r9, r3, [sp]
 23f304c:	4652      	mov	r2, sl
 23f304e:	4631      	mov	r1, r6
 23f3050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23f3052:	f7fd fa59 	bl	23f0508 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 23f3056:	4604      	mov	r4, r0
 23f3058:	b9d8      	cbnz	r0, 23f3092 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x6a>
        context, input, filter, bias, output, &real_multiplier));
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
 23f305a:	4628      	mov	r0, r5
 23f305c:	ed9d 0b02 	vldr	d0, [sp, #8]
 23f3060:	1d29      	adds	r1, r5, #4
 23f3062:	f7fd fb43 	bl	23f06ec <_ZN6tflite18QuantizeMultiplierEdPlPi>
                       &data->output_shift);

    data->input_zero_point = input->params.zero_point;
 23f3066:	6933      	ldr	r3, [r6, #16]
 23f3068:	616b      	str	r3, [r5, #20]
    // Filter weights will always be symmetric quantized since we only support
    // int8 quantization. See
    // https://github.com/tensorflow/tensorflow/issues/44912 for additional
    // context.
    TFLITE_DCHECK(filter->params.zero_point == 0);
 23f306a:	f8da 3010 	ldr.w	r3, [sl, #16]
 23f306e:	b10b      	cbz	r3, 23f3074 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x4c>
 23f3070:	f001 fb9c 	bl	23f47ac <abort>
    data->filter_zero_point = filter->params.zero_point;
 23f3074:	61ac      	str	r4, [r5, #24]
    data->output_zero_point = output->params.zero_point;
 23f3076:	f8d9 3010 	ldr.w	r3, [r9, #16]

    return CalculateActivationRangeQuantized(context, activation, output,
 23f307a:	464a      	mov	r2, r9
    data->output_zero_point = output->params.zero_point;
 23f307c:	61eb      	str	r3, [r5, #28]
    return CalculateActivationRangeQuantized(context, activation, output,
 23f307e:	f105 030c 	add.w	r3, r5, #12
 23f3082:	9300      	str	r3, [sp, #0]
 23f3084:	4641      	mov	r1, r8
 23f3086:	4638      	mov	r0, r7
 23f3088:	f105 0308 	add.w	r3, r5, #8
 23f308c:	f7fd fa92 	bl	23f05b4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 23f3090:	4604      	mov	r4, r0
                                             &data->output_activation_min,
                                             &data->output_activation_max);
  }
  return kTfLiteOk;
}
 23f3092:	4620      	mov	r0, r4
 23f3094:	b004      	add	sp, #16
 23f3096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return kTfLiteOk;
 23f309a:	2400      	movs	r4, #0
 23f309c:	e7f9      	b.n	23f3092 <_ZN6tflite29CalculateOpDataFullyConnectedEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS6_S6_PS4_PNS_20OpDataFullyConnectedE+0x6a>

023f309e <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>:
          /*invoke=*/invoke,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0,
          /*registration_external=*/nullptr};
 23f309e:	60c3      	str	r3, [r0, #12]
 23f30a0:	2300      	movs	r3, #0
    void (*free)(TfLiteContext* context, void* buffer)) {
 23f30a2:	b510      	push	{r4, lr}
          /*registration_external=*/nullptr};
 23f30a4:	6001      	str	r1, [r0, #0]
 23f30a6:	9902      	ldr	r1, [sp, #8]
 23f30a8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23f30ac:	e9c0 1201 	strd	r1, r2, [r0, #4]
 23f30b0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 23f30b4:	6203      	str	r3, [r0, #32]
}
 23f30b6:	bd10      	pop	{r4, pc}

023f30b8 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                      const TfLiteNode* node, int index) {
 23f30b8:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(context != nullptr);
 23f30ba:	b908      	cbnz	r0, 23f30c0 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x8>
 23f30bc:	f001 fb76 	bl	23f47ac <abort>
  TFLITE_DCHECK(node != nullptr);
 23f30c0:	2900      	cmp	r1, #0
 23f30c2:	d0fb      	beq.n	23f30bc <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 23f30c4:	680b      	ldr	r3, [r1, #0]
  if (index >= 0 && index < max_size) {
 23f30c6:	2a00      	cmp	r2, #0
  const int tensor_index = ValidateTensorIndexing(
 23f30c8:	4619      	mov	r1, r3
 23f30ca:	f851 5b04 	ldr.w	r5, [r1], #4
  if (index >= 0 && index < max_size) {
 23f30ce:	db0c      	blt.n	23f30ea <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
 23f30d0:	4295      	cmp	r5, r2
 23f30d2:	dd0a      	ble.n	23f30ea <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x32>

  if (tensor_index < 0) {
 23f30d4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 23f30d8:	2900      	cmp	r1, #0
 23f30da:	db06      	blt.n	23f30ea <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x32>
    return nullptr;
  }

  return context->GetEvalTensor(context, node->inputs->data[index]);
}
 23f30dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return context->GetEvalTensor(context, node->inputs->data[index]);
 23f30e0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 23f30e4:	6851      	ldr	r1, [r2, #4]
 23f30e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 23f30e8:	4718      	bx	r3
}
 23f30ea:	2000      	movs	r0, #0
 23f30ec:	bd70      	pop	{r4, r5, r6, pc}

023f30ee <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
  return GetMutableEvalInput(context, node, index);
 23f30ee:	f7ff bfe3 	b.w	23f30b8 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>

023f30f2 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:
}

// Returns the TfLiteEvalTensor struct for a given output index in a node.
TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                const TfLiteNode* node, int index) {
 23f30f2:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context != nullptr);
 23f30f4:	b908      	cbnz	r0, 23f30fa <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x8>
 23f30f6:	f001 fb59 	bl	23f47ac <abort>
  TFLITE_DCHECK(node != nullptr);
 23f30fa:	2900      	cmp	r1, #0
 23f30fc:	d0fb      	beq.n	23f30f6 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x4>
  return context->GetEvalTensor(context, node->outputs->data[index]);
}
 23f30fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->GetEvalTensor(context, node->outputs->data[index]);
 23f3102:	6849      	ldr	r1, [r1, #4]
 23f3104:	6d03      	ldr	r3, [r0, #80]	; 0x50
 23f3106:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 23f310a:	6851      	ldr	r1, [r2, #4]
 23f310c:	4718      	bx	r3

023f310e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 23f310e:	b510      	push	{r4, lr}
 23f3110:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
 23f3112:	b109      	cbz	r1, 23f3118 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xa>
 23f3114:	6849      	ldr	r1, [r1, #4]
 23f3116:	b919      	cbnz	r1, 23f3120 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x12>
  RuntimeShape() : size_(0) {}
 23f3118:	2300      	movs	r3, #0
 23f311a:	6023      	str	r3, [r4, #0]
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 23f311c:	4620      	mov	r0, r4
 23f311e:	bd10      	pop	{r4, pc}
  const int dims_size = dims->size;
 23f3120:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
 23f3124:	f840 2b04 	str.w	r2, [r0], #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 23f3128:	0092      	lsls	r2, r2, #2
 23f312a:	f005 fdd3 	bl	23f8cd4 <memcpy>
  }
 23f312e:	e7f5      	b.n	23f311c <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0xe>

023f3130 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor>:
  return kTfLiteOk;
}

TfLiteEvalTensor MakeUnpackedInt4Tensor(TfLiteContext* context,
                                        int scratch_buffer_index,
                                        const TfLiteEvalTensor* tensor) {
 23f3130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f3134:	461d      	mov	r5, r3
  if (tensor->type != kTfLiteInt4) {
 23f3136:	7a1b      	ldrb	r3, [r3, #8]
                                        const TfLiteEvalTensor* tensor) {
 23f3138:	4604      	mov	r4, r0
  if (tensor->type != kTfLiteInt4) {
 23f313a:	2b12      	cmp	r3, #18
                                        const TfLiteEvalTensor* tensor) {
 23f313c:	4608      	mov	r0, r1
 23f313e:	b086      	sub	sp, #24
 23f3140:	4611      	mov	r1, r2
  if (tensor->type != kTfLiteInt4) {
 23f3142:	d007      	beq.n	23f3154 <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x24>
    return *tensor;
 23f3144:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 23f3148:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
      tflite::micro::GetTensorData<int8_t>(tensor),
      tflite::micro::GetTensorShape(tensor).FlatSize(),
      tflite::micro::GetTensorData<int8_t>(&new_tensor));
  return new_tensor;
}
 23f314c:	4620      	mov	r0, r4
 23f314e:	b006      	add	sp, #24
 23f3150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      context->GetScratchBuffer(context, scratch_buffer_index));
 23f3154:	6c03      	ldr	r3, [r0, #64]	; 0x40
 23f3156:	4798      	blx	r3
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f3158:	e9d5 8700 	ldrd	r8, r7, [r5]
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 23f315c:	4629      	mov	r1, r5
      context->GetScratchBuffer(context, scratch_buffer_index));
 23f315e:	4606      	mov	r6, r0
      tflite::micro::GetTensorShape(tensor).FlatSize(),
 23f3160:	4668      	mov	r0, sp
 23f3162:	f7ff ffd4 	bl	23f310e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    for (int i = 0; i < size_; i++) {
 23f3166:	466b      	mov	r3, sp
 23f3168:	2200      	movs	r2, #0
    int buffer_size = 1;
 23f316a:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
 23f316c:	9d00      	ldr	r5, [sp, #0]
 23f316e:	4295      	cmp	r5, r2
 23f3170:	f103 0304 	add.w	r3, r3, #4
 23f3174:	dd03      	ble.n	23f317e <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x4e>
      buffer_size *= dims_data[i];
 23f3176:	6818      	ldr	r0, [r3, #0]
    for (int i = 0; i < size_; i++) {
 23f3178:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
 23f317a:	4341      	muls	r1, r0
    for (int i = 0; i < size_; i++) {
 23f317c:	e7f7      	b.n	23f316e <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x3e>
  tflite::tensor_utils::UnpackDenseInt4IntoInt8(
 23f317e:	4632      	mov	r2, r6
 23f3180:	4640      	mov	r0, r8
 23f3182:	f7fd fa9f 	bl	23f06c4 <_ZN6tflite12tensor_utils23UnpackDenseInt4IntoInt8EPKaiPa>
  return new_tensor;
 23f3186:	2309      	movs	r3, #9
 23f3188:	e9c4 6700 	strd	r6, r7, [r4]
 23f318c:	7223      	strb	r3, [r4, #8]
 23f318e:	e7dd      	b.n	23f314c <_ZN6tflite5micro22MakeUnpackedInt4TensorEP13TfLiteContextiPK16TfLiteEvalTensor+0x1c>

023f3190 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 23f3190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23f3194:	4604      	mov	r4, r0
 23f3196:	460e      	mov	r6, r1
 23f3198:	4690      	mov	r8, r2
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
 23f319a:	2500      	movs	r5, #0
  int32_t DimensionsCount() const { return size_; }
 23f319c:	6807      	ldr	r7, [r0, #0]
 23f319e:	42bd      	cmp	r5, r7
 23f31a0:	da10      	bge.n	23f31c4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x34>
    if (i != skip_dim) {
 23f31a2:	42b5      	cmp	r5, r6
 23f31a4:	d00c      	beq.n	23f31c0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 23f31a6:	4629      	mov	r1, r5
 23f31a8:	4620      	mov	r0, r4
 23f31aa:	f7ff fae7 	bl	23f277c <_ZNK6tflite12RuntimeShape4DimsEi>
 23f31ae:	4629      	mov	r1, r5
 23f31b0:	4681      	mov	r9, r0
 23f31b2:	4640      	mov	r0, r8
 23f31b4:	f7ff fae2 	bl	23f277c <_ZNK6tflite12RuntimeShape4DimsEi>
 23f31b8:	4581      	cmp	r9, r0
 23f31ba:	d001      	beq.n	23f31c0 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
 23f31bc:	f001 faf6 	bl	23f47ac <abort>
  for (int i = 0; i < dims_count; ++i) {
 23f31c0:	3501      	adds	r5, #1
 23f31c2:	e7ec      	b.n	23f319e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0xe>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 23f31c4:	2e00      	cmp	r6, #0
 23f31c6:	dbf9      	blt.n	23f31bc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
 23f31c8:	42be      	cmp	r6, r7
 23f31ca:	daf7      	bge.n	23f31bc <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
  int flat_size = 1;
 23f31cc:	2001      	movs	r0, #1
  for (int i = 0; i < dims_count; ++i) {
 23f31ce:	2300      	movs	r3, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 23f31d0:	3404      	adds	r4, #4
 23f31d2:	429e      	cmp	r6, r3
 23f31d4:	bf0c      	ite	eq
 23f31d6:	2201      	moveq	r2, #1
 23f31d8:	f854 2023 	ldrne.w	r2, [r4, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 23f31dc:	3301      	adds	r3, #1
 23f31de:	429f      	cmp	r7, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 23f31e0:	fb02 f000 	mul.w	r0, r2, r0
  for (int i = 0; i < dims_count; ++i) {
 23f31e4:	dcf5      	bgt.n	23f31d2 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x42>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
}
 23f31e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

023f31ea <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  SoftmaxParams softmax_params;
  int32_t num_rows;
  int32_t row_size;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 23f31ea:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 23f31ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 23f31ee:	b90b      	cbnz	r3, 23f31f4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0xa>
 23f31f0:	f001 fadc 	bl	23f47ac <abort>
  return context->AllocatePersistentBuffer(context,
 23f31f4:	2140      	movs	r1, #64	; 0x40
                                           sizeof(CMSISNNSoftmaxParams));
}
 23f31f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return context->AllocatePersistentBuffer(context,
 23f31fa:	4718      	bx	r3

023f31fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 23f31fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f3200:	680b      	ldr	r3, [r1, #0]
 23f3202:	4605      	mov	r5, r0
 23f3204:	4688      	mov	r8, r1
 23f3206:	b092      	sub	sp, #72	; 0x48
  return node->inputs == nullptr ? 0 : node->inputs->size;
 23f3208:	b113      	cbz	r3, 23f3210 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14>
 23f320a:	681b      	ldr	r3, [r3, #0]
  MicroContext* micro_context = GetMicroContext(context);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 23f320c:	2b01      	cmp	r3, #1
 23f320e:	d010      	beq.n	23f3232 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x36>
 23f3210:	2401      	movs	r4, #1
 23f3212:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23f3216:	4b44      	ldr	r3, [pc, #272]	; (23f3328 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
 23f3218:	4628      	mov	r0, r5
 23f321a:	9301      	str	r3, [sp, #4]
 23f321c:	4b43      	ldr	r3, [pc, #268]	; (23f332c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x130>)
 23f321e:	4a44      	ldr	r2, [pc, #272]	; (23f3330 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
 23f3220:	9300      	str	r3, [sp, #0]
 23f3222:	692e      	ldr	r6, [r5, #16]
 23f3224:	2334      	movs	r3, #52	; 0x34
 23f3226:	4943      	ldr	r1, [pc, #268]	; (23f3334 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
 23f3228:	47b0      	blx	r6
  op_data->row_size = depth;

  micro_context->DeallocateTempTfLiteTensor(input);
  micro_context->DeallocateTempTfLiteTensor(output);
  return ret_val;
}
 23f322a:	4620      	mov	r0, r4
 23f322c:	b012      	add	sp, #72	; 0x48
 23f322e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 23f3232:	684c      	ldr	r4, [r1, #4]
  return node->outputs == nullptr ? 0 : node->outputs->size;
 23f3234:	b114      	cbz	r4, 23f323c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x40>
 23f3236:	6824      	ldr	r4, [r4, #0]
 23f3238:	2c01      	cmp	r4, #1
 23f323a:	d00e      	beq.n	23f325a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x5e>
 23f323c:	2601      	movs	r6, #1
 23f323e:	4b3a      	ldr	r3, [pc, #232]	; (23f3328 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
 23f3240:	e9cd 4602 	strd	r4, r6, [sp, #8]
 23f3244:	9301      	str	r3, [sp, #4]
 23f3246:	4b3c      	ldr	r3, [pc, #240]	; (23f3338 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
 23f3248:	4628      	mov	r0, r5
 23f324a:	9300      	str	r3, [sp, #0]
 23f324c:	692c      	ldr	r4, [r5, #16]
 23f324e:	2335      	movs	r3, #53	; 0x35
 23f3250:	4a37      	ldr	r2, [pc, #220]	; (23f3330 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
 23f3252:	4938      	ldr	r1, [pc, #224]	; (23f3334 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
 23f3254:	47a0      	blx	r4
 23f3256:	4634      	mov	r4, r6
 23f3258:	e7e7      	b.n	23f322a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
 23f325a:	6886      	ldr	r6, [r0, #8]
  TfLiteTensor* input = micro_context->AllocateTempInputTensor(node, 0);
 23f325c:	2200      	movs	r2, #0
 23f325e:	6833      	ldr	r3, [r6, #0]
 23f3260:	4630      	mov	r0, r6
 23f3262:	699b      	ldr	r3, [r3, #24]
 23f3264:	4798      	blx	r3
  TF_LITE_ENSURE(context, input != nullptr);
 23f3266:	4607      	mov	r7, r0
 23f3268:	b940      	cbnz	r0, 23f327c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 23f326a:	4b34      	ldr	r3, [pc, #208]	; (23f333c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x140>)
 23f326c:	9300      	str	r3, [sp, #0]
 23f326e:	2337      	movs	r3, #55	; 0x37
 23f3270:	692e      	ldr	r6, [r5, #16]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 23f3272:	4628      	mov	r0, r5
 23f3274:	4a2e      	ldr	r2, [pc, #184]	; (23f3330 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
 23f3276:	4932      	ldr	r1, [pc, #200]	; (23f3340 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
 23f3278:	47b0      	blx	r6
 23f327a:	e7d6      	b.n	23f322a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 23f327c:	6883      	ldr	r3, [r0, #8]
 23f327e:	681b      	ldr	r3, [r3, #0]
 23f3280:	2b00      	cmp	r3, #0
 23f3282:	dc04      	bgt.n	23f328e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x92>
 23f3284:	4b2f      	ldr	r3, [pc, #188]	; (23f3344 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 23f3286:	9300      	str	r3, [sp, #0]
 23f3288:	692e      	ldr	r6, [r5, #16]
 23f328a:	2338      	movs	r3, #56	; 0x38
 23f328c:	e7f1      	b.n	23f3272 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x76>
  TfLiteTensor* output = micro_context->AllocateTempOutputTensor(node, 0);
 23f328e:	6833      	ldr	r3, [r6, #0]
 23f3290:	2200      	movs	r2, #0
 23f3292:	4641      	mov	r1, r8
 23f3294:	4630      	mov	r0, r6
 23f3296:	69db      	ldr	r3, [r3, #28]
 23f3298:	4798      	blx	r3
  TF_LITE_ENSURE(context, output != nullptr);
 23f329a:	4681      	mov	r9, r0
 23f329c:	b920      	cbnz	r0, 23f32a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xac>
 23f329e:	4b2a      	ldr	r3, [pc, #168]	; (23f3348 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 23f32a0:	9300      	str	r3, [sp, #0]
 23f32a2:	692e      	ldr	r6, [r5, #16]
 23f32a4:	233a      	movs	r3, #58	; 0x3a
 23f32a6:	e7e4      	b.n	23f3272 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x76>
  TF_LITE_ENSURE(context, node->user_data != nullptr);
 23f32a8:	f8d8 a010 	ldr.w	sl, [r8, #16]
 23f32ac:	f1ba 0f00 	cmp.w	sl, #0
 23f32b0:	d104      	bne.n	23f32bc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc0>
 23f32b2:	4b26      	ldr	r3, [pc, #152]	; (23f334c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
 23f32b4:	9300      	str	r3, [sp, #0]
 23f32b6:	692e      	ldr	r6, [r5, #16]
 23f32b8:	233c      	movs	r3, #60	; 0x3c
 23f32ba:	e7da      	b.n	23f3272 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x76>
  auto ret_val = CalculateSoftmaxParams(context, input, output, params,
 23f32bc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 23f32c0:	4602      	mov	r2, r0
 23f32c2:	4639      	mov	r1, r7
 23f32c4:	4628      	mov	r0, r5
 23f32c6:	f8cd a000 	str.w	sl, [sp]
 23f32ca:	f000 f9e9 	bl	23f36a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 23f32ce:	68b9      	ldr	r1, [r7, #8]
 23f32d0:	4604      	mov	r4, r0
 23f32d2:	f851 5b04 	ldr.w	r5, [r1], #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 23f32d6:	a807      	add	r0, sp, #28
 23f32d8:	00aa      	lsls	r2, r5, #2
      : size_(dimensions_count) {
 23f32da:	9506      	str	r5, [sp, #24]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 23f32dc:	f005 fcfa 	bl	23f8cd4 <memcpy>
 23f32e0:	f8d9 1008 	ldr.w	r1, [r9, #8]
 23f32e4:	a80d      	add	r0, sp, #52	; 0x34
 23f32e6:	f851 2b04 	ldr.w	r2, [r1], #4
      : size_(dimensions_count) {
 23f32ea:	920c      	str	r2, [sp, #48]	; 0x30
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 23f32ec:	0092      	lsls	r2, r2, #2
 23f32ee:	f005 fcf1 	bl	23f8cd4 <memcpy>
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 23f32f2:	1e6b      	subs	r3, r5, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 23f32f4:	4619      	mov	r1, r3
 23f32f6:	aa0c      	add	r2, sp, #48	; 0x30
 23f32f8:	a806      	add	r0, sp, #24
 23f32fa:	9305      	str	r3, [sp, #20]
 23f32fc:	f7ff ff48 	bl	23f3190 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 23f3300:	9b05      	ldr	r3, [sp, #20]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 23f3302:	4605      	mov	r5, r0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 23f3304:	4619      	mov	r1, r3
 23f3306:	aa0c      	add	r2, sp, #48	; 0x30
 23f3308:	a806      	add	r0, sp, #24
 23f330a:	f7ff fa49 	bl	23f27a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  op_data->row_size = depth;
 23f330e:	e9ca 500e 	strd	r5, r0, [sl, #56]	; 0x38
  micro_context->DeallocateTempTfLiteTensor(input);
 23f3312:	6833      	ldr	r3, [r6, #0]
 23f3314:	4639      	mov	r1, r7
 23f3316:	4630      	mov	r0, r6
 23f3318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f331a:	4798      	blx	r3
  micro_context->DeallocateTempTfLiteTensor(output);
 23f331c:	6833      	ldr	r3, [r6, #0]
 23f331e:	4649      	mov	r1, r9
 23f3320:	4630      	mov	r0, r6
 23f3322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f3324:	4798      	blx	r3
  ~RuntimeShape() {}
 23f3326:	e780      	b.n	23f322a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
 23f3328:	023ff5ce 	.word	0x023ff5ce
 23f332c:	023ff595 	.word	0x023ff595
 23f3330:	023ff510 	.word	0x023ff510
 23f3334:	023ff185 	.word	0x023ff185
 23f3338:	023ff5a5 	.word	0x023ff5a5
 23f333c:	023ff11d 	.word	0x023ff11d
 23f3340:	023fdcbf 	.word	0x023fdcbf
 23f3344:	023ff5b6 	.word	0x023ff5b6
 23f3348:	023ff140 	.word	0x023ff140
 23f334c:	023ff5d0 	.word	0x023ff5d0

023f3350 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 23f3350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f3354:	ed2d 8b04 	vpush	{d8-d9}
 23f3358:	460c      	mov	r4, r1
 23f335a:	4691      	mov	r9, r2
 23f335c:	461a      	mov	r2, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 23f335e:	680b      	ldr	r3, [r1, #0]
                    const RuntimeShape& output_shape, float* output_data) {
 23f3360:	b087      	sub	sp, #28
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 23f3362:	3b01      	subs	r3, #1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 23f3364:	4619      	mov	r1, r3
                    const RuntimeShape& output_shape, float* output_data) {
 23f3366:	9001      	str	r0, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 23f3368:	4620      	mov	r0, r4
 23f336a:	9203      	str	r2, [sp, #12]
 23f336c:	9302      	str	r3, [sp, #8]
 23f336e:	f7ff ff0f 	bl	23f3190 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 23f3372:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 23f3376:	4607      	mov	r7, r0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 23f3378:	4619      	mov	r1, r3
 23f337a:	4620      	mov	r0, r4
 23f337c:	f7ff fa10 	bl	23f27a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 23f3380:	2600      	movs	r6, #0
 23f3382:	4604      	mov	r4, r0

  for (int i = 0; i < outer_size; ++i) {
 23f3384:	46b0      	mov	r8, r6
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 23f3386:	ed9f 9a2b 	vldr	s18, [pc, #172]	; 23f3434 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe4>
      return __a;
 23f338a:	aa05      	add	r2, sp, #20
  for (int i = 0; i < outer_size; ++i) {
 23f338c:	45b8      	cmp	r8, r7
 23f338e:	da4b      	bge.n	23f3428 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xd8>
    float max = std::numeric_limits<float>::lowest();
 23f3390:	eb09 0b86 	add.w	fp, r9, r6, lsl #2
 23f3394:	ed8d 9a05 	vstr	s18, [sp, #20]
 23f3398:	4658      	mov	r0, fp
    for (int c = 0; c < depth; ++c) {
 23f339a:	2100      	movs	r1, #0
 23f339c:	00b5      	lsls	r5, r6, #2
 23f339e:	42a1      	cmp	r1, r4
 23f33a0:	db23      	blt.n	23f33ea <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
 23f33a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
      max = std::max(max, input_data[i * depth + c]);
    }

    // Compute sum.
    float sum = 0.f;
    for (int c = 0; c < depth; ++c) {
 23f33a4:	f04f 0a00 	mov.w	sl, #0
 23f33a8:	441d      	add	r5, r3
    for (int c = 0; c < depth; ++c) {
 23f33aa:	462b      	mov	r3, r5
    float sum = 0.f;
 23f33ac:	ed9f 8a22 	vldr	s16, [pc, #136]	; 23f3438 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe8>
    for (int c = 0; c < depth; ++c) {
 23f33b0:	45a2      	cmp	sl, r4
 23f33b2:	9302      	str	r3, [sp, #8]
 23f33b4:	da29      	bge.n	23f340a <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xba>
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 23f33b6:	ed9d 0a05 	vldr	s0, [sp, #20]
 23f33ba:	ecfb 8a01 	vldmia	fp!, {s17}
                                   static_cast<float>(params.beta));
 23f33be:	9b01      	ldr	r3, [sp, #4]
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 23f33c0:	ee78 8ac0 	vsub.f32	s17, s17, s0
                                   static_cast<float>(params.beta));
 23f33c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 23f33c8:	f7f4 fe5e 	bl	23e8088 <__aeabi_d2f>
  { return __builtin_expf(__x); }
 23f33cc:	ee07 0a90 	vmov	s15, r0
 23f33d0:	ee28 0aa7 	vmul.f32	s0, s17, s15
 23f33d4:	f003 fe20 	bl	23f7018 <expf>
      output_data[i * depth + c] = exp_c;
 23f33d8:	9b02      	ldr	r3, [sp, #8]
      sum += exp_c;
 23f33da:	ee38 8a00 	vadd.f32	s16, s16, s0
      output_data[i * depth + c] = exp_c;
 23f33de:	eca3 0a01 	vstmia	r3!, {s0}
    for (int c = 0; c < depth; ++c) {
 23f33e2:	f10a 0a01 	add.w	sl, sl, #1
 23f33e6:	aa05      	add	r2, sp, #20
 23f33e8:	e7e2      	b.n	23f33b0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x60>
      max = std::max(max, input_data[i * depth + c]);
 23f33ea:	4603      	mov	r3, r0
      if (__a < __b)
 23f33ec:	eddd 7a05 	vldr	s15, [sp, #20]
 23f33f0:	ed93 7a00 	vldr	s14, [r3]
 23f33f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23f33f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
 23f33fc:	bfd8      	it	le
 23f33fe:	4613      	movle	r3, r2
 23f3400:	681b      	ldr	r3, [r3, #0]
 23f3402:	3004      	adds	r0, #4
 23f3404:	9305      	str	r3, [sp, #20]
    for (int c = 0; c < depth; ++c) {
 23f3406:	3101      	adds	r1, #1
 23f3408:	e7c9      	b.n	23f339e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x4e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 23f340a:	2300      	movs	r3, #0
 23f340c:	42a3      	cmp	r3, r4
 23f340e:	da07      	bge.n	23f3420 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xd0>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 23f3410:	ed95 7a00 	vldr	s14, [r5]
 23f3414:	eec7 7a08 	vdiv.f32	s15, s14, s16
    for (int c = 0; c < depth; ++c) {
 23f3418:	3301      	adds	r3, #1
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 23f341a:	ece5 7a01 	vstmia	r5!, {s15}
    for (int c = 0; c < depth; ++c) {
 23f341e:	e7f5      	b.n	23f340c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xbc>
  for (int i = 0; i < outer_size; ++i) {
 23f3420:	f108 0801 	add.w	r8, r8, #1
 23f3424:	4426      	add	r6, r4
 23f3426:	e7b1      	b.n	23f338c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
    }
  }
}
 23f3428:	b007      	add	sp, #28
 23f342a:	ecbd 8b04 	vpop	{d8-d9}
 23f342e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f3432:	bf00      	nop
 23f3434:	ff7fffff 	.word	0xff7fffff
 23f3438:	00000000 	.word	0x00000000

023f343c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 23f343c:	b5f0      	push	{r4, r5, r6, r7, lr}
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 23f343e:	2200      	movs	r2, #0
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 23f3440:	b0a5      	sub	sp, #148	; 0x94
 23f3442:	460c      	mov	r4, r1
 23f3444:	4605      	mov	r5, r0
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 23f3446:	f7ff fe52 	bl	23f30ee <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 23f344a:	4621      	mov	r1, r4
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
 23f344c:	4607      	mov	r7, r0
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 23f344e:	2200      	movs	r2, #0
 23f3450:	4628      	mov	r0, r5
 23f3452:	f7ff fe4e 	bl	23f30f2 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>

  TFLITE_DCHECK(node->user_data != nullptr);
 23f3456:	6924      	ldr	r4, [r4, #16]
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
 23f3458:	4606      	mov	r6, r0
  TFLITE_DCHECK(node->user_data != nullptr);
 23f345a:	b90c      	cbnz	r4, 23f3460 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x24>
 23f345c:	f001 f9a6 	bl	23f47ac <abort>
  const CMSISNNSoftmaxParams op_data =
 23f3460:	ad14      	add	r5, sp, #80	; 0x50
 23f3462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f3464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f3466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f3468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f346a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 23f346c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 23f346e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 23f3472:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
      *static_cast<const CMSISNNSoftmaxParams*>(node->user_data);

  switch (input->type) {
 23f3476:	7a38      	ldrb	r0, [r7, #8]
 23f3478:	2807      	cmp	r0, #7
 23f347a:	d02e      	beq.n	23f34da <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
 23f347c:	2809      	cmp	r0, #9
 23f347e:	d018      	beq.n	23f34b2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
 23f3480:	2801      	cmp	r0, #1
 23f3482:	d13f      	bne.n	23f3504 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xc8>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
#endif
      tflite::reference_ops::Softmax(
          op_data.softmax_params, tflite::micro::GetTensorShape(input),
 23f3484:	4639      	mov	r1, r7
 23f3486:	a808      	add	r0, sp, #32
 23f3488:	f7ff fe41 	bl	23f310e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 23f348c:	683a      	ldr	r2, [r7, #0]
          tflite::micro::GetTensorData<float>(input),
          tflite::micro::GetTensorShape(output),
 23f348e:	4631      	mov	r1, r6
 23f3490:	a80e      	add	r0, sp, #56	; 0x38
 23f3492:	9205      	str	r2, [sp, #20]
 23f3494:	f7ff fe3b 	bl	23f310e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 23f3498:	2e00      	cmp	r6, #0
 23f349a:	d0df      	beq.n	23f345c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20>
      tflite::reference_ops::Softmax(
 23f349c:	6833      	ldr	r3, [r6, #0]
 23f349e:	9a05      	ldr	r2, [sp, #20]
 23f34a0:	9300      	str	r3, [sp, #0]
 23f34a2:	a908      	add	r1, sp, #32
 23f34a4:	ab0e      	add	r3, sp, #56	; 0x38
 23f34a6:	a814      	add	r0, sp, #80	; 0x50
 23f34a8:	f7ff ff52 	bl	23f3350 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                           op_data.softmax_params.input_multiplier,
                           op_data.softmax_params.input_left_shift,
                           op_data.softmax_params.diff_min,
                           tflite::micro::GetTensorData<int16_t>(output));
      }
      return kTfLiteOk;
 23f34ac:	2000      	movs	r0, #0
    default:
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
                  input->type);
      return kTfLiteError;
  }
}
 23f34ae:	b025      	add	sp, #148	; 0x94
 23f34b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return reinterpret_cast<T*>(tensor->data.raw);
 23f34b2:	f8d6 c000 	ldr.w	ip, [r6]
      if (output->type == kTfLiteInt8) {
 23f34b6:	7a36      	ldrb	r6, [r6, #8]
                       op_data.softmax_params.diff_min,
 23f34b8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
      if (output->type == kTfLiteInt8) {
 23f34ba:	2e09      	cmp	r6, #9
  return reinterpret_cast<const T*>(tensor->data.raw);
 23f34bc:	6838      	ldr	r0, [r7, #0]
                       op_data.softmax_params.input_left_shift,
 23f34be:	e9dd 3416 	ldrd	r3, r4, [sp, #88]	; 0x58
        arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input),
 23f34c2:	e9cd 5c01 	strd	r5, ip, [sp, #4]
                       op_data.num_rows, op_data.row_size,
 23f34c6:	e9dd 1222 	ldrd	r1, r2, [sp, #136]	; 0x88
        arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input),
 23f34ca:	9400      	str	r4, [sp, #0]
      if (output->type == kTfLiteInt8) {
 23f34cc:	d102      	bne.n	23f34d4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x98>
        arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input),
 23f34ce:	f7f6 ff0d 	bl	23ea2ec <arm_softmax_s8>
 23f34d2:	e7eb      	b.n	23f34ac <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x70>
        arm_softmax_s8_s16(tflite::micro::GetTensorData<int8_t>(input),
 23f34d4:	f7f6 ff17 	bl	23ea306 <arm_softmax_s8_s16>
 23f34d8:	e7e8      	b.n	23f34ac <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x70>
          .one_by_one_lut = op_data.softmax_params.one_over_one_plus_x_lut};
 23f34da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
      TFLITE_DCHECK_EQ(
 23f34dc:	e9dd 1222 	ldrd	r1, r2, [sp, #136]	; 0x88
          .one_by_one_lut = op_data.softmax_params.one_over_one_plus_x_lut};
 23f34e0:	9306      	str	r3, [sp, #24]
 23f34e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 23f34e4:	9307      	str	r3, [sp, #28]
 23f34e6:	6838      	ldr	r0, [r7, #0]
      TFLITE_DCHECK_EQ(
 23f34e8:	e9dd 3416 	ldrd	r3, r4, [sp, #88]	; 0x58
  TFLITE_DCHECK(tensor != nullptr);
 23f34ec:	2e00      	cmp	r6, #0
 23f34ee:	d0b5      	beq.n	23f345c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20>
 23f34f0:	6835      	ldr	r5, [r6, #0]
 23f34f2:	9502      	str	r5, [sp, #8]
 23f34f4:	ad06      	add	r5, sp, #24
 23f34f6:	e9cd 4500 	strd	r4, r5, [sp]
 23f34fa:	f7f6 fe35 	bl	23ea168 <arm_softmax_s16>
 23f34fe:	2800      	cmp	r0, #0
 23f3500:	d0d5      	beq.n	23f34ae <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x72>
 23f3502:	e7ab      	b.n	23f345c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20>
      MicroPrintf("Type %s (%d) not supported.", TfLiteTypeGetName(input->type),
 23f3504:	f7fc fdd0 	bl	23f00a8 <TfLiteTypeGetName>
      return kTfLiteError;
 23f3508:	2001      	movs	r0, #1
 23f350a:	e7d0      	b.n	23f34ae <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x72>

023f350c <_ZN6tflite16Register_SOFTMAXEv>:
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
 23f350c:	2300      	movs	r3, #0
TfLiteRegistration Register_SOFTMAX() {
 23f350e:	b513      	push	{r0, r1, r4, lr}
 23f3510:	4604      	mov	r4, r0
  return tflite::micro::RegisterOp(Init, Prepare, SoftmaxEval);
 23f3512:	9300      	str	r3, [sp, #0]
 23f3514:	4a03      	ldr	r2, [pc, #12]	; (23f3524 <_ZN6tflite16Register_SOFTMAXEv+0x18>)
 23f3516:	4b04      	ldr	r3, [pc, #16]	; (23f3528 <_ZN6tflite16Register_SOFTMAXEv+0x1c>)
 23f3518:	4904      	ldr	r1, [pc, #16]	; (23f352c <_ZN6tflite16Register_SOFTMAXEv+0x20>)
 23f351a:	f7ff fdc0 	bl	23f309e <_ZN6tflite5micro10RegisterOpEPFPvP13TfLiteContextPKcjEPF12TfLiteStatusS3_P10TfLiteNodeESC_PFvS3_S1_E>
}
 23f351e:	4620      	mov	r0, r4
 23f3520:	b002      	add	sp, #8
 23f3522:	bd10      	pop	{r4, pc}
 23f3524:	023f31fd 	.word	0x023f31fd
 23f3528:	023f343d 	.word	0x023f343d
 23f352c:	023f31eb 	.word	0x023f31eb

023f3530 <_ZZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsEENUlfE0_4_FUNEf>:
        10.0f / range, std::numeric_limits<int16_t>::max(), 2.0f / range, 0,
        [](float value) { return std::exp(value); }, op_data->exp_lut);

    LUTPopulate<int16_t>(
        1.0f / range, std::numeric_limits<int16_t>::min(), 2.0f / range, 0,
        [](float value) { return 1.0f / (1.0f + value); },
 23f3530:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 23f3534:	ee30 0a27 	vadd.f32	s0, s0, s15
 23f3538:	ee87 0a80 	vdiv.f32	s0, s15, s0
 23f353c:	4770      	bx	lr

023f353e <_ZZN6tflite12_GLOBAL__N_121InitializeLutForInt16EP13TfLiteContextPK12TfLiteTensorPS3_PNS_13SoftmaxParamsEENUlfE_4_FUNEf>:
 23f353e:	f003 bd6b 	b.w	23f7018 <expf>
	...

023f3544 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs.isra.0>:
}

// Keep floating-point type configurable for backward compatibility. float
// should be used for FloatT by default.
template <typename FloatT, typename Func>
inline void LUTPopulateInt16(FloatT input_scale, int32_t input_zero_point,
 23f3544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  static_assert(std::is_floating_point<FloatT>::value,
                "FloatT must be a floating-point type.");
  const FloatT input_min =
      input_scale * (std::numeric_limits<int16_t>::min() - input_zero_point);
  const FloatT input_max =
      input_scale * (std::numeric_limits<int16_t>::max() - input_zero_point);
 23f3546:	f647 74ff 	movw	r4, #32767	; 0x7fff
inline void LUTPopulateInt16(FloatT input_scale, int32_t input_zero_point,
 23f354a:	461e      	mov	r6, r3
      input_scale * (std::numeric_limits<int16_t>::min() - input_zero_point);
 23f354c:	4b4f      	ldr	r3, [pc, #316]	; (23f368c <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs.isra.0+0x148>)
inline void LUTPopulateInt16(FloatT input_scale, int32_t input_zero_point,
 23f354e:	4615      	mov	r5, r2
      input_scale * (std::numeric_limits<int16_t>::min() - input_zero_point);
 23f3550:	1a1a      	subs	r2, r3, r0
      input_scale * (std::numeric_limits<int16_t>::max() - input_zero_point);
 23f3552:	1a20      	subs	r0, r4, r0
inline void LUTPopulateInt16(FloatT input_scale, int32_t input_zero_point,
 23f3554:	ed2d 8b0a 	vpush	{d8-d12}
      input_scale * (std::numeric_limits<int16_t>::max() - input_zero_point);
 23f3558:	ee07 0a90 	vmov	s15, r0
      input_scale * (std::numeric_limits<int16_t>::min() - input_zero_point);
 23f355c:	ee0a 2a90 	vmov	s21, r2
      input_scale * (std::numeric_limits<int16_t>::max() - input_zero_point);
 23f3560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      input_scale * (std::numeric_limits<int16_t>::min() - input_zero_point);
 23f3564:	eef8 aaea 	vcvt.f32.s32	s21, s21
  const FloatT input_max =
 23f3568:	ee27 aa80 	vmul.f32	s20, s15, s0
  const FloatT input_min =
 23f356c:	ee6a aa80 	vmul.f32	s21, s21, s0
      output_scale * (std::numeric_limits<int16_t>::min() - output_zero_point);
  const FloatT output_max =
      output_scale * (std::numeric_limits<int16_t>::max() - output_zero_point);

  const int nb_steps = 512;
  const FloatT step = (input_max - input_min) / nb_steps;
 23f3570:	eddf 7a47 	vldr	s15, [pc, #284]	; 23f3690 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs.isra.0+0x14c>
 23f3574:	ee7a ba6a 	vsub.f32	s23, s20, s21
      output_scale * (std::numeric_limits<int16_t>::min() - output_zero_point);
 23f3578:	1a5b      	subs	r3, r3, r1
  const FloatT step = (input_max - input_min) / nb_steps;
 23f357a:	ee6b baa7 	vmul.f32	s23, s23, s15
      output_scale * (std::numeric_limits<int16_t>::min() - output_zero_point);
 23f357e:	ee07 3a90 	vmov	s15, r3
      output_scale * (std::numeric_limits<int16_t>::max() - output_zero_point);
 23f3582:	1a63      	subs	r3, r4, r1
      output_scale * (std::numeric_limits<int16_t>::min() - output_zero_point);
 23f3584:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      output_scale * (std::numeric_limits<int16_t>::max() - output_zero_point);
 23f3588:	ee07 3a90 	vmov	s15, r3
 23f358c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  const FloatT output_max =
 23f3590:	ee67 7aa0 	vmul.f32	s15, s15, s1
  const FloatT half_step = step / 2;
 23f3594:	eeb6 ca00 	vmov.f32	s24, #96	; 0x3f000000  0.5
  const FloatT output_scaling_inv =
      static_cast<FloatT>(std::numeric_limits<int16_t>::max() -
                          std::numeric_limits<int16_t>::min() + 1) /
      (output_max - output_min);
 23f3598:	eee7 7a60 	vfms.f32	s15, s14, s1
  const FloatT output_scaling_inv =
 23f359c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 23f3694 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs.isra.0+0x150>
  const FloatT half_step = step / 2;
 23f35a0:	ee6b 9a8c 	vmul.f32	s19, s23, s24
  const FloatT output_scaling_inv =
 23f35a4:	eec7 8a27 	vdiv.f32	s17, s14, s15
  const FloatT table_min =
      static_cast<FloatT>(std::numeric_limits<int16_t>::min());
  const FloatT table_max =
      static_cast<FloatT>(std::numeric_limits<int16_t>::max());

  for (int i = 0; i < nb_steps; i++) {
 23f35a8:	2400      	movs	r4, #0
      if (__a < __b)
 23f35aa:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 23f3698 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs.isra.0+0x154>
      if (__b < __a)
 23f35ae:	eddf ca3b 	vldr	s25, [pc, #236]	; 23f369c <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs.isra.0+0x158>
 23f35b2:	1eb7      	subs	r7, r6, #2
    const FloatT val =
        LUTTransform<FloatT>(transform, transform_params, input_min + i * step);
 23f35b4:	ee07 4a90 	vmov	s15, r4
 23f35b8:	eeb0 ba6a 	vmov.f32	s22, s21
 23f35bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f35c0:	eeab baa7 	vfma.f32	s22, s23, s15
  return transform(value);
 23f35c4:	eeb0 0a4b 	vmov.f32	s0, s22
 23f35c8:	47a8      	blx	r5
    const FloatT val_midpoint = LUTTransform<FloatT>(
        transform, transform_params, input_min + i * step + half_step);
    const FloatT val_next = LUTTransform<FloatT>(transform, transform_params,
                                                 input_min + (i + 1) * step);
 23f35ca:	3401      	adds	r4, #1
  return transform(value);
 23f35cc:	eeb0 8a40 	vmov.f32	s16, s0
 23f35d0:	ee39 0a8b 	vadd.f32	s0, s19, s22
 23f35d4:	47a8      	blx	r5
                                                 input_min + (i + 1) * step);
 23f35d6:	ee07 4a90 	vmov	s15, r4
  return transform(value);
 23f35da:	eeb0 ba40 	vmov.f32	s22, s0
                                                 input_min + (i + 1) * step);
 23f35de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return transform(value);
 23f35e2:	eeb0 0a6a 	vmov.f32	s0, s21
 23f35e6:	eeab 0aa7 	vfma.f32	s0, s23, s15
 23f35ea:	47a8      	blx	r5

    const FloatT sample_val = TfLiteRound(val * output_scaling_inv);
 23f35ec:	ee68 7a88 	vmul.f32	s15, s17, s16
  { return __builtin_roundf(__x); }
 23f35f0:	fef8 7a67 	vrinta.f32	s15, s15
    const FloatT midpoint_interp_val =
        TfLiteRound((val_next * output_scaling_inv +
 23f35f4:	eeb0 7a67 	vmov.f32	s14, s15
 23f35f8:	eea8 7a80 	vfma.f32	s14, s17, s0
                     TfLiteRound(val * output_scaling_inv)) /
                    2);
    const FloatT midpoint_val = TfLiteRound(val_midpoint * output_scaling_inv);
 23f35fc:	ee28 ba8b 	vmul.f32	s22, s17, s22
        TfLiteRound((val_next * output_scaling_inv +
 23f3600:	ee27 7a0c 	vmul.f32	s14, s14, s24
 23f3604:	feb8 ba4b 	vrinta.f32	s22, s22
 23f3608:	feb8 7a47 	vrinta.f32	s14, s14
    const FloatT midpoint_err = midpoint_interp_val - midpoint_val;
 23f360c:	ee37 7a4b 	vsub.f32	s14, s14, s22
    const FloatT bias = TfLiteRound(midpoint_err / 2);
 23f3610:	ee27 7a0c 	vmul.f32	s14, s14, s24
 23f3614:	feb8 7a47 	vrinta.f32	s14, s14

    lut[i] = static_cast<int16_t>(std::min<FloatT>(
        std::max<FloatT>(sample_val - bias, table_min), table_max));
 23f3618:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (__a < __b)
 23f361c:	eef4 7ac9 	vcmpe.f32	s15, s18
 23f3620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f3624:	d42b      	bmi.n	23f367e <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs.isra.0+0x13a>
	return __b;
 23f3626:	eef4 7a6c 	vcmp.f32	s15, s25
 23f362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f362e:	fe7c 7aa7 	vselgt.f32	s15, s25, s15
    lut[i] = static_cast<int16_t>(std::min<FloatT>(
 23f3632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f3636:	ee17 3a90 	vmov	r3, s15
  for (int i = 0; i < nb_steps; i++) {
 23f363a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    lut[i] = static_cast<int16_t>(std::min<FloatT>(
 23f363e:	f827 3f02 	strh.w	r3, [r7, #2]!
  for (int i = 0; i < nb_steps; i++) {
 23f3642:	d1b7      	bne.n	23f35b4 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs.isra.0+0x70>
  return transform(value);
 23f3644:	eeb0 0a4a 	vmov.f32	s0, s20
 23f3648:	47a8      	blx	r5
  }

  lut[nb_steps] = static_cast<int16_t>(std::min<FloatT>(
      std::max<FloatT>(TfLiteRound(LUTTransform<FloatT>(
 23f364a:	ee28 0a80 	vmul.f32	s0, s17, s0
 23f364e:	feb8 0a40 	vrinta.f32	s0, s0
      if (__a < __b)
 23f3652:	eeb4 0ac9 	vcmpe.f32	s0, s18
 23f3656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f365a:	d413      	bmi.n	23f3684 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs.isra.0+0x140>
      if (__b < __a)
 23f365c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 23f369c <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs.isra.0+0x158>
	return __b;
 23f3660:	eeb4 0a67 	vcmp.f32	s0, s15
 23f3664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f3668:	fe37 0a80 	vselgt.f32	s0, s15, s0
  lut[nb_steps] = static_cast<int16_t>(std::min<FloatT>(
 23f366c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
                                       transform, transform_params, input_max) *
                                   output_scaling_inv),
                       table_min),
      table_max));
}
 23f3670:	ecbd 8b0a 	vpop	{d8-d12}
  lut[nb_steps] = static_cast<int16_t>(std::min<FloatT>(
 23f3674:	ee10 3a10 	vmov	r3, s0
 23f3678:	f8a6 3400 	strh.w	r3, [r6, #1024]	; 0x400
}
 23f367c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __b;
 23f367e:	eddf 7a06 	vldr	s15, [pc, #24]	; 23f3698 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs.isra.0+0x154>
 23f3682:	e7d6      	b.n	23f3632 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs.isra.0+0xee>
 23f3684:	ed9f 0a04 	vldr	s0, [pc, #16]	; 23f3698 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs.isra.0+0x154>
 23f3688:	e7f0      	b.n	23f366c <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs.isra.0+0x128>
 23f368a:	bf00      	nop
 23f368c:	ffff8000 	.word	0xffff8000
 23f3690:	3b000000 	.word	0x3b000000
 23f3694:	47800000 	.word	0x47800000
 23f3698:	c7000000 	.word	0xc7000000
 23f369c:	46fffe00 	.word	0x46fffe00

023f36a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 23f36a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f36a4:	ed2d 8b02 	vpush	{d8}
 23f36a8:	4699      	mov	r9, r3
  if (input->type == kTfLiteInt16) {
 23f36aa:	780b      	ldrb	r3, [r1, #0]
                                    SoftmaxParams* op_data) {
 23f36ac:	b089      	sub	sp, #36	; 0x24
  if (input->type == kTfLiteInt16) {
 23f36ae:	2b07      	cmp	r3, #7
                                    SoftmaxParams* op_data) {
 23f36b0:	4604      	mov	r4, r0
 23f36b2:	4688      	mov	r8, r1
 23f36b4:	4616      	mov	r6, r2
 23f36b6:	9f12      	ldr	r7, [sp, #72]	; 0x48
  if (input->type == kTfLiteInt16) {
 23f36b8:	d120      	bne.n	23f36fc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x5c>
    void* raw_exp_lut = context->AllocatePersistentBuffer(
 23f36ba:	f240 4102 	movw	r1, #1026	; 0x402
 23f36be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 23f36c0:	4798      	blx	r3
    TF_LITE_ENSURE(context, raw_exp_lut != nullptr);
 23f36c2:	b970      	cbnz	r0, 23f36e2 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x42>
 23f36c4:	4bac      	ldr	r3, [pc, #688]	; (23f3978 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>)
 23f36c6:	9300      	str	r3, [sp, #0]
 23f36c8:	2327      	movs	r3, #39	; 0x27
 23f36ca:	6925      	ldr	r5, [r4, #16]
    TF_LITE_ENSURE(context,
 23f36cc:	4620      	mov	r0, r4
 23f36ce:	4aab      	ldr	r2, [pc, #684]	; (23f397c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>)
 23f36d0:	49ab      	ldr	r1, [pc, #684]	; (23f3980 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e0>)
 23f36d2:	47a8      	blx	r5
#if EI_TFLITE_DISABLE_SOFTMAX_IN_I16
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                      TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
#endif
      TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
 23f36d4:	2501      	movs	r5, #1
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
    op_data->beta = static_cast<double>(params->beta);
  }
  return kTfLiteOk;
}
 23f36d6:	4628      	mov	r0, r5
 23f36d8:	b009      	add	sp, #36	; 0x24
 23f36da:	ecbd 8b02 	vpop	{d8}
 23f36de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    op_data->exp_lut = reinterpret_cast<int16_t*>(raw_exp_lut);
 23f36e2:	62b8      	str	r0, [r7, #40]	; 0x28
    void* one_over_one_plus_x_lut = context->AllocatePersistentBuffer(
 23f36e4:	f240 4102 	movw	r1, #1026	; 0x402
 23f36e8:	4620      	mov	r0, r4
 23f36ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 23f36ec:	4798      	blx	r3
    TF_LITE_ENSURE(context, one_over_one_plus_x_lut != nullptr);
 23f36ee:	b920      	cbnz	r0, 23f36fa <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x5a>
 23f36f0:	4ba4      	ldr	r3, [pc, #656]	; (23f3984 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e4>)
 23f36f2:	9300      	str	r3, [sp, #0]
 23f36f4:	6925      	ldr	r5, [r4, #16]
 23f36f6:	232b      	movs	r3, #43	; 0x2b
 23f36f8:	e7e8      	b.n	23f36cc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c>
    op_data->one_over_one_plus_x_lut =
 23f36fa:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (output->type == kTfLiteInt16) {
 23f36fc:	7832      	ldrb	r2, [r6, #0]
    TF_LITE_ENSURE(context,
 23f36fe:	f898 3000 	ldrb.w	r3, [r8]
  if (output->type == kTfLiteInt16) {
 23f3702:	2a07      	cmp	r2, #7
 23f3704:	d108      	bne.n	23f3718 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x78>
    TF_LITE_ENSURE(context,
 23f3706:	2b09      	cmp	r3, #9
 23f3708:	d03a      	beq.n	23f3780 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xe0>
 23f370a:	2b07      	cmp	r3, #7
 23f370c:	d013      	beq.n	23f3736 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x96>
 23f370e:	4b9e      	ldr	r3, [pc, #632]	; (23f3988 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2e8>)
 23f3710:	9300      	str	r3, [sp, #0]
 23f3712:	6925      	ldr	r5, [r4, #16]
 23f3714:	2331      	movs	r3, #49	; 0x31
 23f3716:	e7d9      	b.n	23f36cc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c>
    TF_LITE_ENSURE_EQ(context, input->type, output->type);
 23f3718:	429a      	cmp	r2, r3
 23f371a:	d031      	beq.n	23f3780 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xe0>
 23f371c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f3720:	4b9a      	ldr	r3, [pc, #616]	; (23f398c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 23f3722:	9301      	str	r3, [sp, #4]
 23f3724:	4b9a      	ldr	r3, [pc, #616]	; (23f3990 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f0>)
 23f3726:	9300      	str	r3, [sp, #0]
 23f3728:	2334      	movs	r3, #52	; 0x34
 23f372a:	6925      	ldr	r5, [r4, #16]
      TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
 23f372c:	4620      	mov	r0, r4
 23f372e:	4a93      	ldr	r2, [pc, #588]	; (23f397c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>)
 23f3730:	4998      	ldr	r1, [pc, #608]	; (23f3994 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f4>)
 23f3732:	47a8      	blx	r5
 23f3734:	e7ce      	b.n	23f36d4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x34>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 23f3736:	6935      	ldr	r5, [r6, #16]
 23f3738:	b14d      	cbz	r5, 23f374e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xae>
 23f373a:	2300      	movs	r3, #0
 23f373c:	e9cd 5302 	strd	r5, r3, [sp, #8]
 23f3740:	4b95      	ldr	r3, [pc, #596]	; (23f3998 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 23f3742:	9301      	str	r3, [sp, #4]
 23f3744:	4b95      	ldr	r3, [pc, #596]	; (23f399c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 23f3746:	9300      	str	r3, [sp, #0]
 23f3748:	6925      	ldr	r5, [r4, #16]
 23f374a:	2339      	movs	r3, #57	; 0x39
 23f374c:	e7ee      	b.n	23f372c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x8c>

template <typename T>
inline typename std::enable_if<std::is_same<T, int16_t>::value, void>::type
LUTPopulate(float input_scale, int32_t input_zero_point, float output_scale,
            int32_t output_zero_point, float (*transform)(float), T* lut) {
  detail::LUTPopulateInt16<float>(input_scale, input_zero_point, output_scale,
 23f374e:	4629      	mov	r1, r5
 23f3750:	eddf 0a93 	vldr	s1, [pc, #588]	; 23f39a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 23f3754:	f647 70ff 	movw	r0, #32767	; 0x7fff
 23f3758:	ed9f 0a92 	vldr	s0, [pc, #584]	; 23f39a4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x304>
 23f375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 23f375e:	4a92      	ldr	r2, [pc, #584]	; (23f39a8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x308>)
 23f3760:	f7ff fef0 	bl	23f3544 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs.isra.0>
 23f3764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 23f3766:	4629      	mov	r1, r5
 23f3768:	eddf 0a8d 	vldr	s1, [pc, #564]	; 23f39a0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x300>
 23f376c:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 23f39ac <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x30c>
 23f3770:	4a8f      	ldr	r2, [pc, #572]	; (23f39b0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x310>)
 23f3772:	4890      	ldr	r0, [pc, #576]	; (23f39b4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 23f3774:	f7ff fee6 	bl	23f3544 <_ZN6tflite6detail16LUTPopulateInt16IfPFffEEEvT_lS4_lT0_PKvPs.isra.0>
    op_data->zero_point = output->params.zero_point;
 23f3778:	6933      	ldr	r3, [r6, #16]
 23f377a:	61fb      	str	r3, [r7, #28]
    op_data->scale = output->params.scale;
 23f377c:	68f3      	ldr	r3, [r6, #12]
 23f377e:	623b      	str	r3, [r7, #32]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteInt16) {
 23f3780:	f898 5000 	ldrb.w	r5, [r8]
 23f3784:	2d09      	cmp	r5, #9
 23f3786:	d044      	beq.n	23f3812 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x172>
 23f3788:	2d07      	cmp	r5, #7
 23f378a:	f040 8135 	bne.w	23f39f8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x358>
      TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);
 23f378e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 23f3792:	b14b      	cbz	r3, 23f37a8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x108>
 23f3794:	2200      	movs	r2, #0
 23f3796:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f379a:	4b7f      	ldr	r3, [pc, #508]	; (23f3998 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 23f379c:	9301      	str	r3, [sp, #4]
 23f379e:	4b86      	ldr	r3, [pc, #536]	; (23f39b8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x318>)
 23f37a0:	9300      	str	r3, [sp, #0]
 23f37a2:	6925      	ldr	r5, [r4, #16]
 23f37a4:	2362      	movs	r3, #98	; 0x62
 23f37a6:	e7c1      	b.n	23f372c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x8c>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 23f37a8:	6932      	ldr	r2, [r6, #16]
 23f37aa:	b142      	cbz	r2, 23f37be <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x11e>
 23f37ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 23f37b0:	4b79      	ldr	r3, [pc, #484]	; (23f3998 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2f8>)
 23f37b2:	9301      	str	r3, [sp, #4]
 23f37b4:	4b79      	ldr	r3, [pc, #484]	; (23f399c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 23f37b6:	9300      	str	r3, [sp, #0]
 23f37b8:	6925      	ldr	r5, [r4, #16]
 23f37ba:	2363      	movs	r3, #99	; 0x63
 23f37bc:	e7b6      	b.n	23f372c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x8c>
      TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 32768,
 23f37be:	eddf 7a7f 	vldr	s15, [pc, #508]	; 23f39bc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x31c>
 23f37c2:	ed96 7a03 	vldr	s14, [r6, #12]
 23f37c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23f37ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f37ce:	eddf 6a7c 	vldr	s13, [pc, #496]	; 23f39c0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x320>
 23f37d2:	bfcc      	ite	gt
 23f37d4:	ee77 7a67 	vsubgt.f32	s15, s14, s15
 23f37d8:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 23f37dc:	eef4 7ae6 	vcmpe.f32	s15, s13
 23f37e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f37e4:	dd7d      	ble.n	23f38e2 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x242>
 23f37e6:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 23f37ea:	2200      	movs	r2, #0
 23f37ec:	ee17 0a10 	vmov	r0, s14
 23f37f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23f37f4:	f7f4 f8f8 	bl	23e79e8 <__aeabi_f2d>
 23f37f8:	4b72      	ldr	r3, [pc, #456]	; (23f39c4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x324>)
 23f37fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 23f37fe:	9301      	str	r3, [sp, #4]
 23f3800:	4b71      	ldr	r3, [pc, #452]	; (23f39c8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x328>)
 23f3802:	9300      	str	r3, [sp, #0]
 23f3804:	2364      	movs	r3, #100	; 0x64
 23f3806:	6925      	ldr	r5, [r4, #16]
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 23f3808:	4620      	mov	r0, r4
 23f380a:	4a5c      	ldr	r2, [pc, #368]	; (23f397c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>)
 23f380c:	496f      	ldr	r1, [pc, #444]	; (23f39cc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x32c>)
 23f380e:	47a8      	blx	r5
 23f3810:	e760      	b.n	23f36d4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x34>
      if (output->type == kTfLiteInt16) {
 23f3812:	7830      	ldrb	r0, [r6, #0]
 23f3814:	2807      	cmp	r0, #7
 23f3816:	d132      	bne.n	23f387e <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x1de>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 23f3818:	6933      	ldr	r3, [r6, #16]
 23f381a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 23f381e:	d009      	beq.n	23f3834 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x194>
 23f3820:	4a64      	ldr	r2, [pc, #400]	; (23f39b4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x314>)
 23f3822:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f3826:	4b6a      	ldr	r3, [pc, #424]	; (23f39d0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x330>)
 23f3828:	9301      	str	r3, [sp, #4]
 23f382a:	4b5c      	ldr	r3, [pc, #368]	; (23f399c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 23f382c:	9300      	str	r3, [sp, #0]
 23f382e:	6925      	ldr	r5, [r4, #16]
 23f3830:	236e      	movs	r3, #110	; 0x6e
 23f3832:	e77b      	b.n	23f372c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x8c>
        TF_LITE_ENSURE_NEAR(context, output->params.scale, 1.f / 65536,
 23f3834:	eddf 7a67 	vldr	s15, [pc, #412]	; 23f39d4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x334>
 23f3838:	ed96 7a03 	vldr	s14, [r6, #12]
 23f383c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23f3840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f3844:	eddf 6a64 	vldr	s13, [pc, #400]	; 23f39d8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x338>
 23f3848:	bfcc      	ite	gt
 23f384a:	ee77 7a67 	vsubgt.f32	s15, s14, s15
 23f384e:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 23f3852:	eef4 7ae6 	vcmpe.f32	s15, s13
 23f3856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f385a:	dd63      	ble.n	23f3924 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x284>
 23f385c:	2200      	movs	r2, #0
 23f385e:	4b5f      	ldr	r3, [pc, #380]	; (23f39dc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x33c>)
 23f3860:	ee17 0a10 	vmov	r0, s14
 23f3864:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23f3868:	f7f4 f8be 	bl	23e79e8 <__aeabi_f2d>
 23f386c:	4b5c      	ldr	r3, [pc, #368]	; (23f39e0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x340>)
 23f386e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 23f3872:	9301      	str	r3, [sp, #4]
 23f3874:	4b54      	ldr	r3, [pc, #336]	; (23f39c8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x328>)
 23f3876:	9300      	str	r3, [sp, #0]
 23f3878:	6925      	ldr	r5, [r4, #16]
 23f387a:	236f      	movs	r3, #111	; 0x6f
 23f387c:	e7c4      	b.n	23f3808 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x168>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 23f387e:	2809      	cmp	r0, #9
 23f3880:	d012      	beq.n	23f38a8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x208>
 23f3882:	6927      	ldr	r7, [r4, #16]
 23f3884:	f7fc fc10 	bl	23f00a8 <TfLiteTypeGetName>
 23f3888:	4606      	mov	r6, r0
 23f388a:	4628      	mov	r0, r5
 23f388c:	f7fc fc0c 	bl	23f00a8 <TfLiteTypeGetName>
 23f3890:	4b54      	ldr	r3, [pc, #336]	; (23f39e4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x344>)
 23f3892:	e9cd 6002 	strd	r6, r0, [sp, #8]
 23f3896:	9301      	str	r3, [sp, #4]
 23f3898:	4b3c      	ldr	r3, [pc, #240]	; (23f398c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ec>)
 23f389a:	4620      	mov	r0, r4
 23f389c:	9300      	str	r3, [sp, #0]
 23f389e:	4a37      	ldr	r2, [pc, #220]	; (23f397c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>)
 23f38a0:	2372      	movs	r3, #114	; 0x72
 23f38a2:	4951      	ldr	r1, [pc, #324]	; (23f39e8 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x348>)
 23f38a4:	47b8      	blx	r7
 23f38a6:	e715      	b.n	23f36d4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x34>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 23f38a8:	6933      	ldr	r3, [r6, #16]
 23f38aa:	f113 0f80 	cmn.w	r3, #128	; 0x80
 23f38ae:	d00a      	beq.n	23f38c6 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x226>
 23f38b0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 23f38b4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 23f38b8:	4b4c      	ldr	r3, [pc, #304]	; (23f39ec <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x34c>)
 23f38ba:	9301      	str	r3, [sp, #4]
 23f38bc:	4b37      	ldr	r3, [pc, #220]	; (23f399c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2fc>)
 23f38be:	9300      	str	r3, [sp, #0]
 23f38c0:	6925      	ldr	r5, [r4, #16]
 23f38c2:	2373      	movs	r3, #115	; 0x73
 23f38c4:	e732      	b.n	23f372c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x8c>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 23f38c6:	ed96 7a03 	vldr	s14, [r6, #12]
 23f38ca:	eddf 7a49 	vldr	s15, [pc, #292]	; 23f39f0 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x350>
 23f38ce:	eeb4 7a67 	vcmp.f32	s14, s15
 23f38d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f38d6:	d025      	beq.n	23f3924 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x284>
 23f38d8:	4b46      	ldr	r3, [pc, #280]	; (23f39f4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x354>)
 23f38da:	9300      	str	r3, [sp, #0]
 23f38dc:	6925      	ldr	r5, [r4, #16]
 23f38de:	2374      	movs	r3, #116	; 0x74
 23f38e0:	e6f4      	b.n	23f36cc <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c>
          static_cast<double>(input->params.scale) *
 23f38e2:	f8d8 000c 	ldr.w	r0, [r8, #12]
 23f38e6:	f7f4 f87f 	bl	23e79e8 <__aeabi_f2d>
 23f38ea:	4604      	mov	r4, r0
          static_cast<double>(params->beta) /
 23f38ec:	f8d9 0000 	ldr.w	r0, [r9]
          static_cast<double>(input->params.scale) *
 23f38f0:	460d      	mov	r5, r1
          static_cast<double>(params->beta) /
 23f38f2:	f7f4 f879 	bl	23e79e8 <__aeabi_f2d>
 23f38f6:	4602      	mov	r2, r0
 23f38f8:	460b      	mov	r3, r1
          static_cast<double>(input->params.scale) *
 23f38fa:	4620      	mov	r0, r4
 23f38fc:	4629      	mov	r1, r5
 23f38fe:	f7f4 f8cb 	bl	23e7a98 <__aeabi_dmul>
      double input_scale_beta_rescale =
 23f3902:	a31b      	add	r3, pc, #108	; (adr r3, 23f3970 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 23f3904:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f3908:	f7f4 f9f0 	bl	23e7cec <__aeabi_ddiv>
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 23f390c:	f107 0608 	add.w	r6, r7, #8
      double input_scale_beta_rescale =
 23f3910:	ec41 0b10 	vmov	d0, r0, r1
      QuantizeMultiplier(input_scale_beta_rescale, &op_data->input_multiplier,
 23f3914:	4630      	mov	r0, r6
 23f3916:	a907      	add	r1, sp, #28
 23f3918:	f7fc fee8 	bl	23f06ec <_ZN6tflite18QuantizeMultiplierEdPlPi>
      op_data->input_left_shift = input_left_shift;
 23f391c:	9b07      	ldr	r3, [sp, #28]
 23f391e:	60fb      	str	r3, [r7, #12]
  return kTfLiteOk;
 23f3920:	2500      	movs	r5, #0
 23f3922:	e6d8      	b.n	23f36d6 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x36>
      tflite::PreprocessSoftmaxScaling(
 23f3924:	f8d8 000c 	ldr.w	r0, [r8, #12]
 23f3928:	f7f4 f85e 	bl	23e79e8 <__aeabi_f2d>
 23f392c:	ec41 0b18 	vmov	d8, r0, r1
 23f3930:	f8d9 0000 	ldr.w	r0, [r9]
 23f3934:	f7f4 f858 	bl	23e79e8 <__aeabi_f2d>
 23f3938:	f107 0408 	add.w	r4, r7, #8
 23f393c:	ec41 0b10 	vmov	d0, r0, r1
 23f3940:	eeb0 1a48 	vmov.f32	s2, s16
 23f3944:	eef0 1a68 	vmov.f32	s3, s17
 23f3948:	4621      	mov	r1, r4
 23f394a:	2005      	movs	r0, #5
 23f394c:	aa07      	add	r2, sp, #28
 23f394e:	f7fc ff2b 	bl	23f07a8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
      op_data->input_left_shift = input_left_shift;
 23f3952:	9907      	ldr	r1, [sp, #28]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 23f3954:	221f      	movs	r2, #31
      op_data->input_left_shift = input_left_shift;
 23f3956:	60f9      	str	r1, [r7, #12]
          -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 23f3958:	2005      	movs	r0, #5
 23f395a:	f7fc ff61 	bl	23f0820 <_ZN6tflite20CalculateInputRadiusEiii>
 23f395e:	f7f4 f831 	bl	23e79c4 <__aeabi_i2d>
 23f3962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
      op_data->diff_min =
 23f3966:	4619      	mov	r1, r3
 23f3968:	f7f4 fb46 	bl	23e7ff8 <__aeabi_d2iz>
 23f396c:	61b8      	str	r0, [r7, #24]
 23f396e:	e7d7      	b.n	23f3920 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x280>
 23f3970:	00140014 	.word	0x00140014
 23f3974:	3f240014 	.word	0x3f240014
 23f3978:	023ff677 	.word	0x023ff677
 23f397c:	023ff5eb 	.word	0x023ff5eb
 23f3980:	023fdcbf 	.word	0x023fdcbf
 23f3984:	023ff68e 	.word	0x023ff68e
 23f3988:	023ff6b1 	.word	0x023ff6b1
 23f398c:	023ff16c 	.word	0x023ff16c
 23f3990:	023ff179 	.word	0x023ff179
 23f3994:	023ff185 	.word	0x023ff185
 23f3998:	023fe7e9 	.word	0x023fe7e9
 23f399c:	023ff1b8 	.word	0x023ff1b8
 23f39a0:	38000080 	.word	0x38000080
 23f39a4:	392000a0 	.word	0x392000a0
 23f39a8:	023f353f 	.word	0x023f353f
 23f39ac:	37800080 	.word	0x37800080
 23f39b0:	023f3531 	.word	0x023f3531
 23f39b4:	ffff8000 	.word	0xffff8000
 23f39b8:	023ff19f 	.word	0x023ff19f
 23f39bc:	38000000 	.word	0x38000000
 23f39c0:	3303126f 	.word	0x3303126f
 23f39c4:	023ff70b 	.word	0x023ff70b
 23f39c8:	023ff717 	.word	0x023ff717
 23f39cc:	023ff6eb 	.word	0x023ff6eb
 23f39d0:	023ff72c 	.word	0x023ff72c
 23f39d4:	37800000 	.word	0x37800000
 23f39d8:	3283126f 	.word	0x3283126f
 23f39dc:	3ef00000 	.word	0x3ef00000
 23f39e0:	023ff733 	.word	0x023ff733
 23f39e4:	023ff73f 	.word	0x023ff73f
 23f39e8:	023ff152 	.word	0x023ff152
 23f39ec:	023ff74b 	.word	0x023ff74b
 23f39f0:	3b800000 	.word	0x3b800000
 23f39f4:	023ff750 	.word	0x023ff750
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 23f39f8:	2d01      	cmp	r5, #1
 23f39fa:	d013      	beq.n	23f3a24 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x384>
 23f39fc:	4628      	mov	r0, r5
 23f39fe:	6926      	ldr	r6, [r4, #16]
 23f3a00:	f7fc fb52 	bl	23f00a8 <TfLiteTypeGetName>
 23f3a04:	4605      	mov	r5, r0
 23f3a06:	2001      	movs	r0, #1
 23f3a08:	f7fc fb4e 	bl	23f00a8 <TfLiteTypeGetName>
 23f3a0c:	4b14      	ldr	r3, [pc, #80]	; (23f3a60 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c0>)
 23f3a0e:	e9cd 5002 	strd	r5, r0, [sp, #8]
 23f3a12:	9301      	str	r3, [sp, #4]
 23f3a14:	4b13      	ldr	r3, [pc, #76]	; (23f3a64 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c4>)
 23f3a16:	4620      	mov	r0, r4
 23f3a18:	9300      	str	r3, [sp, #0]
 23f3a1a:	4a13      	ldr	r2, [pc, #76]	; (23f3a68 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>)
 23f3a1c:	23a0      	movs	r3, #160	; 0xa0
 23f3a1e:	4913      	ldr	r1, [pc, #76]	; (23f3a6c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3cc>)
 23f3a20:	47b0      	blx	r6
 23f3a22:	e657      	b.n	23f36d4 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x34>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 23f3a24:	7830      	ldrb	r0, [r6, #0]
 23f3a26:	2801      	cmp	r0, #1
 23f3a28:	d012      	beq.n	23f3a50 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3b0>
 23f3a2a:	6927      	ldr	r7, [r4, #16]
 23f3a2c:	f7fc fb3c 	bl	23f00a8 <TfLiteTypeGetName>
 23f3a30:	4606      	mov	r6, r0
 23f3a32:	4628      	mov	r0, r5
 23f3a34:	f7fc fb38 	bl	23f00a8 <TfLiteTypeGetName>
 23f3a38:	4b09      	ldr	r3, [pc, #36]	; (23f3a60 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c0>)
 23f3a3a:	e9cd 6002 	strd	r6, r0, [sp, #8]
 23f3a3e:	9301      	str	r3, [sp, #4]
 23f3a40:	4b0b      	ldr	r3, [pc, #44]	; (23f3a70 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3d0>)
 23f3a42:	4620      	mov	r0, r4
 23f3a44:	9300      	str	r3, [sp, #0]
 23f3a46:	4a08      	ldr	r2, [pc, #32]	; (23f3a68 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3c8>)
 23f3a48:	23a1      	movs	r3, #161	; 0xa1
 23f3a4a:	4908      	ldr	r1, [pc, #32]	; (23f3a6c <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x3cc>)
 23f3a4c:	47b8      	blx	r7
 23f3a4e:	e642      	b.n	23f36d6 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x36>
    op_data->beta = static_cast<double>(params->beta);
 23f3a50:	f8d9 0000 	ldr.w	r0, [r9]
 23f3a54:	f7f3 ffc8 	bl	23e79e8 <__aeabi_f2d>
 23f3a58:	e9c7 0100 	strd	r0, r1, [r7]
 23f3a5c:	e760      	b.n	23f3920 <_ZN6tflite22CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS2_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x280>
 23f3a5e:	bf00      	nop
 23f3a60:	023ff772 	.word	0x023ff772
 23f3a64:	023ff179 	.word	0x023ff179
 23f3a68:	023ff5eb 	.word	0x023ff5eb
 23f3a6c:	023ff152 	.word	0x023ff152
 23f3a70:	023ff16c 	.word	0x023ff16c

023f3a74 <_ZN6tflite19GreedyMemoryPlanner4InitEPhi>:
}

GreedyMemoryPlanner::GreedyMemoryPlanner() {}

TfLiteStatus GreedyMemoryPlanner::Init(unsigned char* scratch_buffer,
                                       int scratch_buffer_size) {
 23f3a74:	b510      	push	{r4, lr}
  // Reset internal states
  buffer_count_ = 0;
  need_to_calculate_offsets_ = true;
 23f3a76:	2401      	movs	r4, #1
 23f3a78:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28

  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 23f3a7c:	2428      	movs	r4, #40	; 0x28
 23f3a7e:	fbb2 f2f4 	udiv	r2, r2, r4

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
  next_free += sizeof(int) * max_buffer_count_;

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
  next_free += sizeof(ListEntry) * max_buffer_count_;
 23f3a82:	240c      	movs	r4, #12
  buffer_count_ = 0;
 23f3a84:	2300      	movs	r3, #0
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 23f3a86:	60c1      	str	r1, [r0, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 23f3a88:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 23f3a8c:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
 23f3a8e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 23f3a92:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
 23f3a94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 23f3a98:	6181      	str	r1, [r0, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 23f3a9a:	fb04 1102 	mla	r1, r4, r2, r1
  buffer_count_ = 0;
 23f3a9e:	6083      	str	r3, [r0, #8]
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 23f3aa0:	6042      	str	r2, [r0, #4]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 23f3aa2:	6241      	str	r1, [r0, #36]	; 0x24
  return kTfLiteOk;
}
 23f3aa4:	4618      	mov	r0, r3
 23f3aa6:	bd10      	pop	{r4, pc}

023f3aa8 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
  // We don't own the scratch buffer, so don't deallocate anything.
}
 23f3aa8:	4770      	bx	lr

023f3aaa <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(int size, int first_time_used,
                                            int last_time_used) {
 23f3aaa:	b570      	push	{r4, r5, r6, lr}
  if (buffer_count_ >= max_buffer_count_) {
 23f3aac:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
 23f3ab0:	42ac      	cmp	r4, r5
 23f3ab2:	da11      	bge.n	23f3ad8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii+0x2e>
    MicroPrintf("Too many buffers (max is %d)", max_buffer_count_);
    return kTfLiteError;
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 23f3ab4:	68c5      	ldr	r5, [r0, #12]
 23f3ab6:	0126      	lsls	r6, r4, #4
 23f3ab8:	eb05 1404 	add.w	r4, r5, r4, lsl #4
  current->size = size;
 23f3abc:	51a9      	str	r1, [r5, r6]
  current->first_time_used = first_time_used;
  current->last_time_used = last_time_used;
 23f3abe:	e9c4 2302 	strd	r2, r3, [r4, #8]
  current->offline_offset = kOnlinePlannedBuffer;
 23f3ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f3ac6:	6063      	str	r3, [r4, #4]
  ++buffer_count_;
 23f3ac8:	6883      	ldr	r3, [r0, #8]
 23f3aca:	3301      	adds	r3, #1
 23f3acc:	6083      	str	r3, [r0, #8]
  need_to_calculate_offsets_ = true;
 23f3ace:	2301      	movs	r3, #1
 23f3ad0:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  return kTfLiteOk;
 23f3ad4:	2000      	movs	r0, #0
}
 23f3ad6:	bd70      	pop	{r4, r5, r6, pc}
    return kTfLiteError;
 23f3ad8:	2001      	movs	r0, #1
 23f3ada:	e7fc      	b.n	23f3ad6 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiii+0x2c>

023f3adc <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(int size, int first_time_used,
                                            int last_time_used,
                                            int offline_offset) {
 23f3adc:	b570      	push	{r4, r5, r6, lr}
  BufferRequirements* current = &requirements_[buffer_count_];
  if (AddBuffer(size, first_time_used, last_time_used) != kTfLiteOk) {
 23f3ade:	6804      	ldr	r4, [r0, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 23f3ae0:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
  if (AddBuffer(size, first_time_used, last_time_used) != kTfLiteOk) {
 23f3ae4:	68a4      	ldr	r4, [r4, #8]
 23f3ae6:	47a0      	blx	r4
 23f3ae8:	b920      	cbnz	r0, 23f3af4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii+0x18>
    return kTfLiteError;
  }
  current->offline_offset = offline_offset;
 23f3aea:	9b04      	ldr	r3, [sp, #16]
 23f3aec:	eb05 1506 	add.w	r5, r5, r6, lsl #4
 23f3af0:	606b      	str	r3, [r5, #4]
  return kTfLiteOk;
}
 23f3af2:	bd70      	pop	{r4, r5, r6, pc}
    return kTfLiteError;
 23f3af4:	2001      	movs	r0, #1
 23f3af6:	e7fc      	b.n	23f3af2 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEiiii+0x16>

023f3af8 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    MicroPrintf("%s%d: %s (%dk)", t < 10 ? " " : "", t, (const char*)line,
                (memory_use + 1023) / 1024);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 23f3af8:	6880      	ldr	r0, [r0, #8]
 23f3afa:	4770      	bx	lr

023f3afc <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 23f3afc:	b510      	push	{r4, lr}
 23f3afe:	4604      	mov	r4, r0
}
 23f3b00:	212c      	movs	r1, #44	; 0x2c
 23f3b02:	f7f4 fd42 	bl	23e858a <_ZdlPvj>
 23f3b06:	4620      	mov	r0, r4
 23f3b08:	bd10      	pop	{r4, pc}

023f3b0a <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
 23f3b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (int i = 1; i < size; ++i) {
 23f3b0c:	4604      	mov	r4, r0
 23f3b0e:	460b      	mov	r3, r1
 23f3b10:	2501      	movs	r5, #1
    any_swapped = false;
 23f3b12:	2600      	movs	r6, #0
    for (int i = 1; i < size; ++i) {
 23f3b14:	4295      	cmp	r5, r2
 23f3b16:	da12      	bge.n	23f3b3e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x34>
      if (values[i - 1] < values[i]) {
 23f3b18:	e9d4 7c00 	ldrd	r7, ip, [r4]
 23f3b1c:	4567      	cmp	r7, ip
        values[i] = value_temp;
 23f3b1e:	bfb8      	it	lt
 23f3b20:	e9c4 c700 	strdlt	ip, r7, [r4]
    for (int i = 1; i < size; ++i) {
 23f3b24:	f105 0501 	add.w	r5, r5, #1
        ids[i - 1] = ids[i];
 23f3b28:	bfb8      	it	lt
 23f3b2a:	e9d3 6700 	ldrdlt	r6, r7, [r3]
 23f3b2e:	f104 0404 	add.w	r4, r4, #4
        ids[i] = id_temp;
 23f3b32:	bfbc      	itt	lt
 23f3b34:	e9c3 7600 	strdlt	r7, r6, [r3]
        any_swapped = true;
 23f3b38:	2601      	movlt	r6, #1
    for (int i = 1; i < size; ++i) {
 23f3b3a:	3304      	adds	r3, #4
 23f3b3c:	e7ea      	b.n	23f3b14 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
  do {
 23f3b3e:	2e00      	cmp	r6, #0
 23f3b40:	d1e4      	bne.n	23f3b0c <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
 23f3b42:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f3b44 <_ZN6tflite19GreedyMemoryPlannerC1Ev>:
GreedyMemoryPlanner::GreedyMemoryPlanner() {}
 23f3b44:	4b01      	ldr	r3, [pc, #4]	; (23f3b4c <_ZN6tflite19GreedyMemoryPlannerC1Ev+0x8>)
 23f3b46:	6003      	str	r3, [r0, #0]
 23f3b48:	4770      	bx	lr
 23f3b4a:	bf00      	nop
 23f3b4c:	023ff78c 	.word	0x023ff78c

023f3b50 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
    const int last_time_used) const {
 23f3b50:	b510      	push	{r4, lr}
      &requirements_[entry->requirements_index];
 23f3b52:	684c      	ldr	r4, [r1, #4]
  const BufferRequirements* entry_requirements =
 23f3b54:	68c1      	ldr	r1, [r0, #12]
 23f3b56:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
 23f3b5a:	6888      	ldr	r0, [r1, #8]
 23f3b5c:	4298      	cmp	r0, r3
 23f3b5e:	dc05      	bgt.n	23f3b6c <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>
  if (first_time_used > entry_requirements->last_time_used) {
 23f3b60:	68c8      	ldr	r0, [r1, #12]
 23f3b62:	4290      	cmp	r0, r2
 23f3b64:	bfb4      	ite	lt
 23f3b66:	2000      	movlt	r0, #0
 23f3b68:	2001      	movge	r0, #1
}
 23f3b6a:	bd10      	pop	{r4, pc}
    return false;
 23f3b6c:	2000      	movs	r0, #0
 23f3b6e:	e7fc      	b.n	23f3b6a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1a>

023f3b70 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
 23f3b70:	b570      	push	{r4, r5, r6, lr}
 23f3b72:	4605      	mov	r5, r0
  if (start == nullptr) {
 23f3b74:	b989      	cbnz	r1, 23f3b9a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x2a>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 23f3b76:	6a01      	ldr	r1, [r0, #32]
 23f3b78:	200c      	movs	r0, #12
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 23f3b7a:	260c      	movs	r6, #12
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 23f3b7c:	69ac      	ldr	r4, [r5, #24]
 23f3b7e:	fb00 4401 	mla	r4, r0, r1, r4
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 23f3b82:	4621      	mov	r1, r4
 23f3b84:	4628      	mov	r0, r5
 23f3b86:	f7ff ffe3 	bl	23f3b50 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 23f3b8a:	b950      	cbnz	r0, 23f3ba2 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>
    if (candidate_next_entry->next_entry_index == -1) {
 23f3b8c:	68a1      	ldr	r1, [r4, #8]
 23f3b8e:	1c4c      	adds	r4, r1, #1
 23f3b90:	d009      	beq.n	23f3ba6 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x36>
    candidate_next_entry =
 23f3b92:	69ac      	ldr	r4, [r5, #24]
 23f3b94:	fb06 4401 	mla	r4, r6, r1, r4
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 23f3b98:	e7f3      	b.n	23f3b82 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x12>
    if (start->next_entry_index == -1) {
 23f3b9a:	6889      	ldr	r1, [r1, #8]
 23f3b9c:	1c4e      	adds	r6, r1, #1
 23f3b9e:	d1eb      	bne.n	23f3b78 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8>
      return nullptr;
 23f3ba0:	2400      	movs	r4, #0
}
 23f3ba2:	4620      	mov	r0, r4
 23f3ba4:	bd70      	pop	{r4, r5, r6, pc}
      return nullptr;
 23f3ba6:	4604      	mov	r4, r0
 23f3ba8:	e7fb      	b.n	23f3ba2 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>

023f3baa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 23f3baa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 23f3bae:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 23f3bb2:	4604      	mov	r4, r0
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 23f3bb4:	2b00      	cmp	r3, #0
 23f3bb6:	f000 80b8 	beq.w	23f3d2a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x180>
 23f3bba:	f8d0 c008 	ldr.w	ip, [r0, #8]
 23f3bbe:	f1bc 0f00 	cmp.w	ip, #0
 23f3bc2:	f000 80b2 	beq.w	23f3d2a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x180>
  need_to_calculate_offsets_ = false;
 23f3bc6:	2300      	movs	r3, #0
  int idx_from_head = 0;
 23f3bc8:	469e      	mov	lr, r3
  need_to_calculate_offsets_ = false;
 23f3bca:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  for (int i = 0; i < buffer_count_; ++i) {
 23f3bce:	68a2      	ldr	r2, [r4, #8]
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 23f3bd0:	6925      	ldr	r5, [r4, #16]
  for (int i = 0; i < buffer_count_; ++i) {
 23f3bd2:	429a      	cmp	r2, r3
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 23f3bd4:	ea4f 008e 	mov.w	r0, lr, lsl #2
  for (int i = 0; i < buffer_count_; ++i) {
 23f3bd8:	dd1f      	ble.n	23f3c1a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x70>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 23f3bda:	68e1      	ldr	r1, [r4, #12]
 23f3bdc:	011e      	lsls	r6, r3, #4
 23f3bde:	eb01 1203 	add.w	r2, r1, r3, lsl #4
 23f3be2:	6857      	ldr	r7, [r2, #4]
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 23f3be4:	5989      	ldr	r1, [r1, r6]
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 23f3be6:	1c7a      	adds	r2, r7, #1
 23f3be8:	d10b      	bne.n	23f3c02 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x58>
      idx_from_tail--;
 23f3bea:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 23f3bee:	f845 102c 	str.w	r1, [r5, ip, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
 23f3bf2:	6962      	ldr	r2, [r4, #20]
 23f3bf4:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
      buffer_offsets_[i] = -1;
 23f3bf8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 23f3bfa:	f842 7023 	str.w	r7, [r2, r3, lsl #2]
  for (int i = 0; i < buffer_count_; ++i) {
 23f3bfe:	3301      	adds	r3, #1
 23f3c00:	e7e5      	b.n	23f3bce <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x24>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 23f3c02:	5029      	str	r1, [r5, r0]
      buffer_ids_sorted_[idx_from_head] = i;
 23f3c04:	6962      	ldr	r2, [r4, #20]
      idx_from_head++;
 23f3c06:	f10e 0e01 	add.w	lr, lr, #1
      buffer_ids_sorted_[idx_from_head] = i;
 23f3c0a:	5013      	str	r3, [r2, r0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 23f3c0c:	68e1      	ldr	r1, [r4, #12]
 23f3c0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 23f3c10:	4431      	add	r1, r6
 23f3c12:	6849      	ldr	r1, [r1, #4]
 23f3c14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      idx_from_head++;
 23f3c18:	e7f1      	b.n	23f3bfe <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x54>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 23f3c1a:	6961      	ldr	r1, [r4, #20]
 23f3c1c:	eba2 020e 	sub.w	r2, r2, lr
 23f3c20:	4401      	add	r1, r0
 23f3c22:	4428      	add	r0, r5
 23f3c24:	f7ff ff71 	bl	23f3b0a <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  next_free_entry_ = 1;
 23f3c28:	2301      	movs	r3, #1
 23f3c2a:	2100      	movs	r1, #0
 23f3c2c:	e9c4 3107 	strd	r3, r1, [r4, #28]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 23f3c30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  for (int i = 1; i < buffer_count_; ++i) {
 23f3c34:	2701      	movs	r7, #1
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 23f3c36:	f04f 0b0c 	mov.w	fp, #12
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 23f3c3a:	69a6      	ldr	r6, [r4, #24]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 23f3c3c:	60b3      	str	r3, [r6, #8]
  int buffer_id = buffer_ids_sorted_[0];
 23f3c3e:	6963      	ldr	r3, [r4, #20]
 23f3c40:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
 23f3c42:	6073      	str	r3, [r6, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 23f3c44:	68e2      	ldr	r2, [r4, #12]
 23f3c46:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 23f3c4a:	6852      	ldr	r2, [r2, #4]
 23f3c4c:	3201      	adds	r2, #1
    buffer_offsets_[buffer_id] = 0;
 23f3c4e:	bf04      	itt	eq
 23f3c50:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 23f3c52:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
  first_entry->offset = buffer_offsets_[buffer_id];
 23f3c56:	6a62      	ldr	r2, [r4, #36]	; 0x24
 23f3c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23f3c5c:	6033      	str	r3, [r6, #0]
  for (int i = 1; i < buffer_count_; ++i) {
 23f3c5e:	68a3      	ldr	r3, [r4, #8]
 23f3c60:	42bb      	cmp	r3, r7
 23f3c62:	dd62      	ble.n	23f3d2a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x180>
    buffer_id = buffer_ids_sorted_[i];
 23f3c64:	6963      	ldr	r3, [r4, #20]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 23f3c66:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    buffer_id = buffer_ids_sorted_[i];
 23f3c6a:	f853 8027 	ldr.w	r8, [r3, r7, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 23f3c6e:	eb0a 1308 	add.w	r3, sl, r8, lsl #4
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 23f3c72:	685d      	ldr	r5, [r3, #4]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 23f3c74:	ea4f 1208 	mov.w	r2, r8, lsl #4
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 23f3c78:	1c68      	adds	r0, r5, #1
 23f3c7a:	d122      	bne.n	23f3cc2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x118>
      ListEntry* prior_entry = nullptr;
 23f3c7c:	2000      	movs	r0, #0
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 23f3c7e:	edd3 7a03 	vldr	s15, [r3, #12]
    int candidate_offset = 0;
 23f3c82:	4605      	mov	r5, r0
    const int wanted_size = wanted_requirements->size;
 23f3c84:	f85a 2002 	ldr.w	r2, [sl, r2]
 23f3c88:	9201      	str	r2, [sp, #4]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 23f3c8a:	689a      	ldr	r2, [r3, #8]
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 23f3c8c:	4681      	mov	r9, r0
 23f3c8e:	4601      	mov	r1, r0
 23f3c90:	ee17 3a90 	vmov	r3, s15
 23f3c94:	4620      	mov	r0, r4
 23f3c96:	f7ff ff6b 	bl	23f3b70 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
        if (prior_entry) {
 23f3c9a:	f1b9 0f00 	cmp.w	r9, #0
 23f3c9e:	d00a      	beq.n	23f3cb6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x10c>
              &requirements_[prior_entry->requirements_index];
 23f3ca0:	f8d9 1004 	ldr.w	r1, [r9, #4]
          const int prior_entry_offset =
 23f3ca4:	f8d9 c000 	ldr.w	ip, [r9]
              prior_entry->offset + candidate_requirements->size;
 23f3ca8:	0109      	lsls	r1, r1, #4
          const int prior_entry_offset =
 23f3caa:	f85a 1001 	ldr.w	r1, [sl, r1]
 23f3cae:	4461      	add	r1, ip
 23f3cb0:	428d      	cmp	r5, r1
 23f3cb2:	bfb8      	it	lt
 23f3cb4:	460d      	movlt	r5, r1
        if (next_entry == nullptr) {
 23f3cb6:	b120      	cbz	r0, 23f3cc2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x118>
        const int gap = next_entry->offset - candidate_offset;
 23f3cb8:	6801      	ldr	r1, [r0, #0]
        if (gap >= wanted_size) {
 23f3cba:	9b01      	ldr	r3, [sp, #4]
        const int gap = next_entry->offset - candidate_offset;
 23f3cbc:	1b49      	subs	r1, r1, r5
        if (gap >= wanted_size) {
 23f3cbe:	428b      	cmp	r3, r1
 23f3cc0:	dce4      	bgt.n	23f3c8c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe2>
    buffer_offsets_[buffer_id] = candidate_offset;
 23f3cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23f3cc4:	f843 5028 	str.w	r5, [r3, r8, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 23f3cc8:	69e3      	ldr	r3, [r4, #28]
 23f3cca:	69a2      	ldr	r2, [r4, #24]
 23f3ccc:	fb0b f303 	mul.w	r3, fp, r3
 23f3cd0:	eb02 0c03 	add.w	ip, r2, r3
    new_entry->offset = candidate_offset;
 23f3cd4:	50d5      	str	r5, [r2, r3]
    new_entry->requirements_index = buffer_id;
 23f3cd6:	f8cc 8004 	str.w	r8, [ip, #4]
    const int new_entry_index = next_free_entry_;
 23f3cda:	f8d4 e01c 	ldr.w	lr, [r4, #28]
    ++next_free_entry_;
 23f3cde:	f10e 0301 	add.w	r3, lr, #1
 23f3ce2:	61e3      	str	r3, [r4, #28]
    if (first_entry->offset > candidate_offset) {
 23f3ce4:	6833      	ldr	r3, [r6, #0]
 23f3ce6:	42ab      	cmp	r3, r5
 23f3ce8:	dd07      	ble.n	23f3cfa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x150>
      first_entry->next_entry_index = first_entry_index_;
 23f3cea:	4666      	mov	r6, ip
 23f3cec:	6a23      	ldr	r3, [r4, #32]
 23f3cee:	f8cc 3008 	str.w	r3, [ip, #8]
      first_entry_index_ = new_entry_index;
 23f3cf2:	f8c4 e020 	str.w	lr, [r4, #32]
  for (int i = 1; i < buffer_count_; ++i) {
 23f3cf6:	3701      	adds	r7, #1
 23f3cf8:	e7b1      	b.n	23f3c5e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb4>
 23f3cfa:	4633      	mov	r3, r6
        const int next_entry_index = current_entry->next_entry_index;
 23f3cfc:	689a      	ldr	r2, [r3, #8]
        if (next_entry_index == -1) {
 23f3cfe:	1c51      	adds	r1, r2, #1
 23f3d00:	d106      	bne.n	23f3d10 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x166>
          current_entry->next_entry_index = new_entry_index;
 23f3d02:	f8c3 e008 	str.w	lr, [r3, #8]
          new_entry->next_entry_index = -1;
 23f3d06:	f8cc 2008 	str.w	r2, [ip, #8]
          break;
 23f3d0a:	e7f4      	b.n	23f3cf6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x14c>
 23f3d0c:	4643      	mov	r3, r8
 23f3d0e:	e7f5      	b.n	23f3cfc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x152>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 23f3d10:	fb0b f102 	mul.w	r1, fp, r2
 23f3d14:	69a0      	ldr	r0, [r4, #24]
 23f3d16:	eb00 0801 	add.w	r8, r0, r1
        if (next_entry->offset > candidate_offset) {
 23f3d1a:	5841      	ldr	r1, [r0, r1]
 23f3d1c:	42a9      	cmp	r1, r5
 23f3d1e:	ddf5      	ble.n	23f3d0c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x162>
          new_entry->next_entry_index = current_entry->next_entry_index;
 23f3d20:	f8cc 2008 	str.w	r2, [ip, #8]
          current_entry->next_entry_index = new_entry_index;
 23f3d24:	f8c3 e008 	str.w	lr, [r3, #8]
          break;
 23f3d28:	e7e5      	b.n	23f3cf6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x14c>
}
 23f3d2a:	b003      	add	sp, #12
 23f3d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023f3d30 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 23f3d30:	b570      	push	{r4, r5, r6, lr}
 23f3d32:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
 23f3d34:	f7ff ff39 	bl	23f3baa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 23f3d38:	68a0      	ldr	r0, [r4, #8]
 23f3d3a:	b1a8      	cbz	r0, 23f3d68 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 23f3d3c:	250c      	movs	r5, #12
  size_t max_size = 0;
 23f3d3e:	2000      	movs	r0, #0
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 23f3d40:	69a1      	ldr	r1, [r4, #24]
 23f3d42:	6a23      	ldr	r3, [r4, #32]
 23f3d44:	fb05 1303 	mla	r3, r5, r3, r1
  while (entry) {
 23f3d48:	b173      	cbz	r3, 23f3d68 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
        &requirements_[entry->requirements_index];
 23f3d4a:	685a      	ldr	r2, [r3, #4]
    const size_t current_size = entry->offset + requirements->size;
 23f3d4c:	68e6      	ldr	r6, [r4, #12]
 23f3d4e:	0112      	lsls	r2, r2, #4
 23f3d50:	58b2      	ldr	r2, [r6, r2]
 23f3d52:	681e      	ldr	r6, [r3, #0]
    if (entry->next_entry_index == -1) {
 23f3d54:	689b      	ldr	r3, [r3, #8]
    const size_t current_size = entry->offset + requirements->size;
 23f3d56:	4432      	add	r2, r6
 23f3d58:	4290      	cmp	r0, r2
 23f3d5a:	bf38      	it	cc
 23f3d5c:	4610      	movcc	r0, r2
    if (entry->next_entry_index == -1) {
 23f3d5e:	1c5a      	adds	r2, r3, #1
 23f3d60:	d002      	beq.n	23f3d68 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 23f3d62:	fb05 1303 	mla	r3, r5, r3, r1
  while (entry) {
 23f3d66:	e7ef      	b.n	23f3d48 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x18>
}
 23f3d68:	bd70      	pop	{r4, r5, r6, pc}

023f3d6a <_ZN6tflite19GreedyMemoryPlanner15PrintMemoryPlanEv>:
  CalculateOffsetsIfNeeded();
 23f3d6a:	f7ff bf1e 	b.w	23f3baa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>

023f3d6e <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(int buffer_index,
                                                     int* offset) {
 23f3d6e:	b570      	push	{r4, r5, r6, lr}
 23f3d70:	460c      	mov	r4, r1
 23f3d72:	4605      	mov	r5, r0
 23f3d74:	4616      	mov	r6, r2
  CalculateOffsetsIfNeeded();
 23f3d76:	f7ff ff18 	bl	23f3baa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 23f3d7a:	2c00      	cmp	r4, #0
 23f3d7c:	db08      	blt.n	23f3d90 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x22>
 23f3d7e:	68ab      	ldr	r3, [r5, #8]
 23f3d80:	42a3      	cmp	r3, r4
 23f3d82:	dd05      	ble.n	23f3d90 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x22>
    MicroPrintf("buffer index %d is outside range 0 to %d", buffer_index,
                buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
  return kTfLiteOk;
 23f3d84:	2000      	movs	r0, #0
  *offset = buffer_offsets_[buffer_index];
 23f3d86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 23f3d88:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 23f3d8c:	6033      	str	r3, [r6, #0]
}
 23f3d8e:	bd70      	pop	{r4, r5, r6, pc}
    return kTfLiteError;
 23f3d90:	2001      	movs	r0, #1
 23f3d92:	e7fc      	b.n	23f3d8e <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEiPi+0x20>

023f3d94 <_ZN10ADXL362DMAD1Ev>:

ADXL362DMA::ADXL362DMA(SPIClass &spi, int cs, SPISettings settings) : spi(spi), cs(cs), settings(settings) {
}

ADXL362DMA::~ADXL362DMA() {
}
 23f3d94:	4770      	bx	lr

023f3d96 <_ZN10ADXL362DMAD0Ev>:
ADXL362DMA::~ADXL362DMA() {
 23f3d96:	b510      	push	{r4, lr}
 23f3d98:	4604      	mov	r4, r0
}
 23f3d9a:	2130      	movs	r1, #48	; 0x30
 23f3d9c:	f7f4 fbf5 	bl	23e858a <_ZdlPvj>
 23f3da0:	4620      	mov	r0, r4
 23f3da2:	bd10      	pop	{r4, pc}

023f3da4 <_ZN10ADXL362DMAC1ER8SPIClassiN8particle11SPISettingsE>:
ADXL362DMA::ADXL362DMA(SPIClass &spi, int cs, SPISettings settings) : spi(spi), cs(cs), settings(settings) {
 23f3da4:	b530      	push	{r4, r5, lr}
 23f3da6:	6082      	str	r2, [r0, #8]
class SPISettings : public Printable {
 23f3da8:	4a09      	ldr	r2, [pc, #36]	; (23f3dd0 <_ZN10ADXL362DMAC1ER8SPIClassiN8particle11SPISettingsE+0x2c>)
 23f3daa:	4d0a      	ldr	r5, [pc, #40]	; (23f3dd4 <_ZN10ADXL362DMAC1ER8SPIClassiN8particle11SPISettingsE+0x30>)
 23f3dac:	60c2      	str	r2, [r0, #12]
 23f3dae:	791a      	ldrb	r2, [r3, #4]
 23f3db0:	e9c0 5100 	strd	r5, r1, [r0]
 23f3db4:	7402      	strb	r2, [r0, #16]
 23f3db6:	689a      	ldr	r2, [r3, #8]
 23f3db8:	899b      	ldrh	r3, [r3, #12]
 23f3dba:	6142      	str	r2, [r0, #20]
 23f3dbc:	8303      	strh	r3, [r0, #24]
 23f3dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 23f3dc2:	8383      	strh	r3, [r0, #28]
 23f3dc4:	2300      	movs	r3, #0
 23f3dc6:	6283      	str	r3, [r0, #40]	; 0x28
 23f3dc8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
}
 23f3dcc:	bd30      	pop	{r4, r5, pc}
 23f3dce:	bf00      	nop
 23f3dd0:	023fbadc 	.word	0x023fbadc
 23f3dd4:	023ff7b8 	.word	0x023ff7b8

023f3dd8 <_ZN10ADXL362DMA16beginTransactionEv>:

	syncTransaction(req, resp, sizeof(req));
}


void ADXL362DMA::beginTransaction() {
 23f3dd8:	b510      	push	{r4, lr}
	if (!initialized) {
 23f3dda:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
void ADXL362DMA::beginTransaction() {
 23f3dde:	4604      	mov	r4, r0
	if (!initialized) {
 23f3de0:	b933      	cbnz	r3, 23f3df0 <_ZN10ADXL362DMA16beginTransactionEv+0x18>
		initialized = true;
 23f3de2:	2301      	movs	r3, #1
		spi.begin(cs);
 23f3de4:	8901      	ldrh	r1, [r0, #8]
		initialized = true;
 23f3de6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
		spi.begin(cs);
 23f3dea:	6840      	ldr	r0, [r0, #4]
 23f3dec:	f002 fa2a 	bl	23f6244 <_ZN8SPIClass5beginEt>
	}
	spi.beginTransaction(settings);
 23f3df0:	f104 010c 	add.w	r1, r4, #12
 23f3df4:	6860      	ldr	r0, [r4, #4]
 23f3df6:	f002 fa53 	bl	23f62a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	digitalWrite(cs, LOW);
 23f3dfa:	8920      	ldrh	r0, [r4, #8]
 23f3dfc:	2100      	movs	r1, #0
}
 23f3dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(cs, LOW);
 23f3e02:	f002 bd85 	b.w	23f6910 <digitalWrite>

023f3e06 <_ZN10ADXL362DMA14endTransactionEv>:

void ADXL362DMA::endTransaction() {
 23f3e06:	b510      	push	{r4, lr}
 23f3e08:	4604      	mov	r4, r0
	digitalWrite(cs, HIGH);
 23f3e0a:	2101      	movs	r1, #1
 23f3e0c:	8900      	ldrh	r0, [r0, #8]
 23f3e0e:	f002 fd7f 	bl	23f6910 <digitalWrite>
	spi.endTransaction();
 23f3e12:	6860      	ldr	r0, [r4, #4]
}
 23f3e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi.endTransaction();
 23f3e18:	f002 ba28 	b.w	23f626c <_ZN8SPIClass14endTransactionEv>

023f3e1c <_ZN10ADXL362DMA15syncTransactionEPvS0_j>:

void ADXL362DMA::syncTransaction(void *req, void *resp, size_t len) {
 23f3e1c:	b510      	push	{r4, lr}
 23f3e1e:	b086      	sub	sp, #24
 23f3e20:	4604      	mov	r4, r0
 23f3e22:	e9cd 2104 	strd	r2, r1, [sp, #16]
 23f3e26:	9303      	str	r3, [sp, #12]
	beginTransaction();
 23f3e28:	f7ff ffd6 	bl	23f3dd8 <_ZN10ADXL362DMA16beginTransactionEv>

	spi.transfer(req, resp, len, nullptr);
 23f3e2c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 23f3e30:	2000      	movs	r0, #0
 23f3e32:	9905      	ldr	r1, [sp, #20]
 23f3e34:	9000      	str	r0, [sp, #0]
 23f3e36:	6860      	ldr	r0, [r4, #4]
 23f3e38:	f002 faa0 	bl	23f637c <_ZN8SPIClass8transferEPKvPvjPFvvE>

	endTransaction();
 23f3e3c:	4620      	mov	r0, r4
}
 23f3e3e:	b006      	add	sp, #24
 23f3e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	endTransaction();
 23f3e44:	f7ff bfdf 	b.w	23f3e06 <_ZN10ADXL362DMA14endTransactionEv>

023f3e48 <_ZN10ADXL362DMA7readXYZERsS0_S0_>:
void ADXL362DMA::readXYZ(int16_t &x, int16_t &y, int16_t &z) {
 23f3e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f3e4a:	461d      	mov	r5, r3
	req[0] = CMD_READ_REGISTER;
 23f3e4c:	230b      	movs	r3, #11
void ADXL362DMA::readXYZ(int16_t &x, int16_t &y, int16_t &z) {
 23f3e4e:	b085      	sub	sp, #20
	req[0] = CMD_READ_REGISTER;
 23f3e50:	f88d 3000 	strb.w	r3, [sp]
	req[1] = REG_XDATA_L;
 23f3e54:	230e      	movs	r3, #14
 23f3e56:	f88d 3001 	strb.w	r3, [sp, #1]
	syncTransaction(req, resp, sizeof(req));
 23f3e5a:	2308      	movs	r3, #8
		req[ii] = 0;
 23f3e5c:	2400      	movs	r4, #0
void ADXL362DMA::readXYZ(int16_t &x, int16_t &y, int16_t &z) {
 23f3e5e:	460f      	mov	r7, r1
 23f3e60:	4616      	mov	r6, r2
	syncTransaction(req, resp, sizeof(req));
 23f3e62:	4669      	mov	r1, sp
 23f3e64:	eb0d 0203 	add.w	r2, sp, r3
		req[ii] = 0;
 23f3e68:	f88d 4002 	strb.w	r4, [sp, #2]
 23f3e6c:	f88d 4003 	strb.w	r4, [sp, #3]
 23f3e70:	f88d 4004 	strb.w	r4, [sp, #4]
 23f3e74:	f88d 4005 	strb.w	r4, [sp, #5]
 23f3e78:	f88d 4006 	strb.w	r4, [sp, #6]
 23f3e7c:	f88d 4007 	strb.w	r4, [sp, #7]
	syncTransaction(req, resp, sizeof(req));
 23f3e80:	f7ff ffcc 	bl	23f3e1c <_ZN10ADXL362DMA15syncTransactionEPvS0_j>
	x = resp[2] | (((int16_t)resp[3]) << 8);
 23f3e84:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 23f3e88:	803b      	strh	r3, [r7, #0]
	y = resp[4] | (((int16_t)resp[5]) << 8);
 23f3e8a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23f3e8e:	8033      	strh	r3, [r6, #0]
	z = resp[6] | (((int16_t)resp[7]) << 8);
 23f3e90:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 23f3e94:	802b      	strh	r3, [r5, #0]
}
 23f3e96:	b005      	add	sp, #20
 23f3e98:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f3e9a <_ZN10ADXL362DMA13readRegister8Eh>:
	req[0] = CMD_READ_REGISTER;
 23f3e9a:	230b      	movs	r3, #11
uint8_t ADXL362DMA::readRegister8(uint8_t addr) {
 23f3e9c:	b507      	push	{r0, r1, r2, lr}
	req[0] = CMD_READ_REGISTER;
 23f3e9e:	f88d 3000 	strb.w	r3, [sp]
	req[2] = 0;
 23f3ea2:	2300      	movs	r3, #0
	req[1] = addr;
 23f3ea4:	f88d 1001 	strb.w	r1, [sp, #1]
	req[2] = 0;
 23f3ea8:	f88d 3002 	strb.w	r3, [sp, #2]
	syncTransaction(req, resp, sizeof(req));
 23f3eac:	4669      	mov	r1, sp
 23f3eae:	2303      	movs	r3, #3
 23f3eb0:	aa01      	add	r2, sp, #4
 23f3eb2:	f7ff ffb3 	bl	23f3e1c <_ZN10ADXL362DMA15syncTransactionEPvS0_j>
}
 23f3eb6:	f89d 0006 	ldrb.w	r0, [sp, #6]
 23f3eba:	b003      	add	sp, #12
 23f3ebc:	f85d fb04 	ldr.w	pc, [sp], #4

023f3ec0 <_ZN10ADXL362DMA10readStatusEv>:
	return readRegister8(REG_STATUS);
 23f3ec0:	210b      	movs	r1, #11
 23f3ec2:	f7ff bfea 	b.w	23f3e9a <_ZN10ADXL362DMA13readRegister8Eh>

023f3ec6 <_ZN10ADXL362DMA14writeRegister8Ehh>:
	req[0] = CMD_WRITE_REGISTER;
 23f3ec6:	230a      	movs	r3, #10
void ADXL362DMA::writeRegister8(uint8_t addr, uint8_t value) {
 23f3ec8:	b507      	push	{r0, r1, r2, lr}
	req[0] = CMD_WRITE_REGISTER;
 23f3eca:	f88d 3000 	strb.w	r3, [sp]
	req[1] = addr;
 23f3ece:	f88d 1001 	strb.w	r1, [sp, #1]
	req[2] = value;
 23f3ed2:	f88d 2002 	strb.w	r2, [sp, #2]
	syncTransaction(req, resp, sizeof(req));
 23f3ed6:	2303      	movs	r3, #3
 23f3ed8:	4669      	mov	r1, sp
 23f3eda:	aa01      	add	r2, sp, #4
 23f3edc:	f7ff ff9e 	bl	23f3e1c <_ZN10ADXL362DMA15syncTransactionEPvS0_j>
}
 23f3ee0:	b003      	add	sp, #12
 23f3ee2:	f85d fb04 	ldr.w	pc, [sp], #4

023f3ee6 <_ZN10ADXL362DMA9softResetEv>:
	writeRegister8(REG_SOFT_RESET, 'R');
 23f3ee6:	2252      	movs	r2, #82	; 0x52
 23f3ee8:	211f      	movs	r1, #31
 23f3eea:	f7ff bfec 	b.w	23f3ec6 <_ZN10ADXL362DMA14writeRegister8Ehh>

023f3eee <_ZN10ADXL362DMA14setMeasureModeEb>:
void ADXL362DMA::setMeasureMode(bool enabled) {
 23f3eee:	b538      	push	{r3, r4, r5, lr}
 23f3ef0:	460d      	mov	r5, r1
	uint8_t value = readRegister8(REG_POWER_CTL);
 23f3ef2:	212d      	movs	r1, #45	; 0x2d
void ADXL362DMA::setMeasureMode(bool enabled) {
 23f3ef4:	4604      	mov	r4, r0
	uint8_t value = readRegister8(REG_POWER_CTL);
 23f3ef6:	f7ff ffd0 	bl	23f3e9a <_ZN10ADXL362DMA13readRegister8Eh>
	value &= 0xfc; // remove low 2 bits
 23f3efa:	f000 02fc 	and.w	r2, r0, #252	; 0xfc
	if (enabled) {
 23f3efe:	b10d      	cbz	r5, 23f3f04 <_ZN10ADXL362DMA14setMeasureModeEb+0x16>
		value |= 0x02;
 23f3f00:	f042 0202 	orr.w	r2, r2, #2
	writeRegister8(REG_POWER_CTL, value);
 23f3f04:	4620      	mov	r0, r4
}
 23f3f06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	writeRegister8(REG_POWER_CTL, value);
 23f3f0a:	212d      	movs	r1, #45	; 0x2d
 23f3f0c:	f7ff bfdb 	b.w	23f3ec6 <_ZN10ADXL362DMA14writeRegister8Ehh>

023f3f10 <_ZN10ADXL362DMA18writeFilterControlEhbbh>:
void ADXL362DMA::writeFilterControl(uint8_t range, bool halfBW, bool extSample, uint8_t odr) {
 23f3f10:	b430      	push	{r4, r5}
	switch(range) {
 23f3f12:	2901      	cmp	r1, #1
	value |= (range & 0x3) << 6;
 23f3f14:	ea4f 1481 	mov.w	r4, r1, lsl #6
void ADXL362DMA::writeFilterControl(uint8_t range, bool halfBW, bool extSample, uint8_t odr) {
 23f3f18:	f89d 5008 	ldrb.w	r5, [sp, #8]
	value |= (range & 0x3) << 6;
 23f3f1c:	b2e4      	uxtb	r4, r4
	switch(range) {
 23f3f1e:	d003      	beq.n	23f3f28 <_ZN10ADXL362DMA18writeFilterControlEhbbh+0x18>
 23f3f20:	2902      	cmp	r1, #2
 23f3f22:	d010      	beq.n	23f3f46 <_ZN10ADXL362DMA18writeFilterControlEhbbh+0x36>
			rangeG = 2;
 23f3f24:	2102      	movs	r1, #2
 23f3f26:	e000      	b.n	23f3f2a <_ZN10ADXL362DMA18writeFilterControlEhbbh+0x1a>
			rangeG = 4;
 23f3f28:	2104      	movs	r1, #4
			rangeG = 2;
 23f3f2a:	7741      	strb	r1, [r0, #29]
	if (halfBW) {
 23f3f2c:	b10a      	cbz	r2, 23f3f32 <_ZN10ADXL362DMA18writeFilterControlEhbbh+0x22>
		value |= 0x10;
 23f3f2e:	f044 0410 	orr.w	r4, r4, #16
	if (extSample) {
 23f3f32:	b10b      	cbz	r3, 23f3f38 <_ZN10ADXL362DMA18writeFilterControlEhbbh+0x28>
		value |= 0x08;
 23f3f34:	f044 0408 	orr.w	r4, r4, #8
	value |= (odr & 0x7);
 23f3f38:	f005 0207 	and.w	r2, r5, #7
	writeRegister8(REG_FILTER_CTL, value);
 23f3f3c:	4322      	orrs	r2, r4
 23f3f3e:	212c      	movs	r1, #44	; 0x2c
}
 23f3f40:	bc30      	pop	{r4, r5}
	writeRegister8(REG_FILTER_CTL, value);
 23f3f42:	f7ff bfc0 	b.w	23f3ec6 <_ZN10ADXL362DMA14writeRegister8Ehh>
			rangeG = 8;
 23f3f46:	2108      	movs	r1, #8
 23f3f48:	e7ef      	b.n	23f3f2a <_ZN10ADXL362DMA18writeFilterControlEhbbh+0x1a>
	...

023f3f4c <_GLOBAL__sub_I__ZN10ADXL362DMAC2ER8SPIClassiN8particle11SPISettingsE>:
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 23f3f4c:	2300      	movs	r3, #0
 23f3f4e:	4802      	ldr	r0, [pc, #8]	; (23f3f58 <_GLOBAL__sub_I__ZN10ADXL362DMAC2ER8SPIClassiN8particle11SPISettingsE+0xc>)
 23f3f50:	6003      	str	r3, [r0, #0]
    {
        os_mutex_create(&handle_);
 23f3f52:	f000 b803 	b.w	23f3f5c <os_mutex_create>
 23f3f56:	bf00      	nop
 23f3f58:	1007ae54 	.word	0x1007ae54

023f3f5c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 23f3f5c:	b509      	push	{r0, r3, lr}
 23f3f5e:	4804      	ldr	r0, [pc, #16]	; (23f3f70 <os_mutex_create+0x14>)
 23f3f60:	6800      	ldr	r0, [r0, #0]
 23f3f62:	4b04      	ldr	r3, [pc, #16]	; (23f3f74 <os_mutex_create+0x18>)
 23f3f64:	4403      	add	r3, r0
 23f3f66:	681b      	ldr	r3, [r3, #0]
 23f3f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f3f6a:	9302      	str	r3, [sp, #8]
 23f3f6c:	bd09      	pop	{r0, r3, pc}
 23f3f6e:	0000      	.short	0x0000
 23f3f70:	1007a324 	.word	0x1007a324
 23f3f74:	00000030 	.word	0x00000030

023f3f78 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23f3f78:	b509      	push	{r0, r3, lr}
 23f3f7a:	4804      	ldr	r0, [pc, #16]	; (23f3f8c <os_mutex_recursive_create+0x14>)
 23f3f7c:	6800      	ldr	r0, [r0, #0]
 23f3f7e:	4b04      	ldr	r3, [pc, #16]	; (23f3f90 <os_mutex_recursive_create+0x18>)
 23f3f80:	4403      	add	r3, r0
 23f3f82:	681b      	ldr	r3, [r3, #0]
 23f3f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f3f86:	9302      	str	r3, [sp, #8]
 23f3f88:	bd09      	pop	{r0, r3, pc}
 23f3f8a:	0000      	.short	0x0000
 23f3f8c:	1007a324 	.word	0x1007a324
 23f3f90:	00000030 	.word	0x00000030

023f3f94 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23f3f94:	b509      	push	{r0, r3, lr}
 23f3f96:	4804      	ldr	r0, [pc, #16]	; (23f3fa8 <os_mutex_recursive_destroy+0x14>)
 23f3f98:	6800      	ldr	r0, [r0, #0]
 23f3f9a:	4b04      	ldr	r3, [pc, #16]	; (23f3fac <os_mutex_recursive_destroy+0x18>)
 23f3f9c:	4403      	add	r3, r0
 23f3f9e:	681b      	ldr	r3, [r3, #0]
 23f3fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23f3fa2:	9302      	str	r3, [sp, #8]
 23f3fa4:	bd09      	pop	{r0, r3, pc}
 23f3fa6:	0000      	.short	0x0000
 23f3fa8:	1007a324 	.word	0x1007a324
 23f3fac:	00000030 	.word	0x00000030

023f3fb0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23f3fb0:	b509      	push	{r0, r3, lr}
 23f3fb2:	4804      	ldr	r0, [pc, #16]	; (23f3fc4 <os_mutex_recursive_lock+0x14>)
 23f3fb4:	6800      	ldr	r0, [r0, #0]
 23f3fb6:	4b04      	ldr	r3, [pc, #16]	; (23f3fc8 <os_mutex_recursive_lock+0x18>)
 23f3fb8:	4403      	add	r3, r0
 23f3fba:	681b      	ldr	r3, [r3, #0]
 23f3fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23f3fbe:	9302      	str	r3, [sp, #8]
 23f3fc0:	bd09      	pop	{r0, r3, pc}
 23f3fc2:	0000      	.short	0x0000
 23f3fc4:	1007a324 	.word	0x1007a324
 23f3fc8:	00000030 	.word	0x00000030

023f3fcc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23f3fcc:	b509      	push	{r0, r3, lr}
 23f3fce:	4804      	ldr	r0, [pc, #16]	; (23f3fe0 <os_mutex_recursive_unlock+0x14>)
 23f3fd0:	6800      	ldr	r0, [r0, #0]
 23f3fd2:	4b04      	ldr	r3, [pc, #16]	; (23f3fe4 <os_mutex_recursive_unlock+0x18>)
 23f3fd4:	4403      	add	r3, r0
 23f3fd6:	681b      	ldr	r3, [r3, #0]
 23f3fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23f3fda:	9302      	str	r3, [sp, #8]
 23f3fdc:	bd09      	pop	{r0, r3, pc}
 23f3fde:	0000      	.short	0x0000
 23f3fe0:	1007a324 	.word	0x1007a324
 23f3fe4:	00000030 	.word	0x00000030

023f3fe8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23f3fe8:	b509      	push	{r0, r3, lr}
 23f3fea:	4804      	ldr	r0, [pc, #16]	; (23f3ffc <HAL_RNG_GetRandomNumber+0x14>)
 23f3fec:	6800      	ldr	r0, [r0, #0]
 23f3fee:	4b04      	ldr	r3, [pc, #16]	; (23f4000 <HAL_RNG_GetRandomNumber+0x18>)
 23f3ff0:	4403      	add	r3, r0
 23f3ff2:	681b      	ldr	r3, [r3, #0]
 23f3ff4:	685b      	ldr	r3, [r3, #4]
 23f3ff6:	9302      	str	r3, [sp, #8]
 23f3ff8:	bd09      	pop	{r0, r3, pc}
 23f3ffa:	0000      	.short	0x0000
 23f3ffc:	1007a324 	.word	0x1007a324
 23f4000:	00000000 	.word	0x00000000

023f4004 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23f4004:	b509      	push	{r0, r3, lr}
 23f4006:	4804      	ldr	r0, [pc, #16]	; (23f4018 <HAL_Delay_Microseconds+0x14>)
 23f4008:	6800      	ldr	r0, [r0, #0]
 23f400a:	4b04      	ldr	r3, [pc, #16]	; (23f401c <HAL_Delay_Microseconds+0x18>)
 23f400c:	4403      	add	r3, r0
 23f400e:	681b      	ldr	r3, [r3, #0]
 23f4010:	68db      	ldr	r3, [r3, #12]
 23f4012:	9302      	str	r3, [sp, #8]
 23f4014:	bd09      	pop	{r0, r3, pc}
 23f4016:	0000      	.short	0x0000
 23f4018:	1007a324 	.word	0x1007a324
 23f401c:	00000000 	.word	0x00000000

023f4020 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 23f4020:	b509      	push	{r0, r3, lr}
 23f4022:	4804      	ldr	r0, [pc, #16]	; (23f4034 <HAL_Timer_Get_Micro_Seconds+0x14>)
 23f4024:	6800      	ldr	r0, [r0, #0]
 23f4026:	4b04      	ldr	r3, [pc, #16]	; (23f4038 <HAL_Timer_Get_Micro_Seconds+0x18>)
 23f4028:	4403      	add	r3, r0
 23f402a:	681b      	ldr	r3, [r3, #0]
 23f402c:	691b      	ldr	r3, [r3, #16]
 23f402e:	9302      	str	r3, [sp, #8]
 23f4030:	bd09      	pop	{r0, r3, pc}
 23f4032:	0000      	.short	0x0000
 23f4034:	1007a324 	.word	0x1007a324
 23f4038:	00000000 	.word	0x00000000

023f403c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23f403c:	b509      	push	{r0, r3, lr}
 23f403e:	4804      	ldr	r0, [pc, #16]	; (23f4050 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23f4040:	6800      	ldr	r0, [r0, #0]
 23f4042:	4b04      	ldr	r3, [pc, #16]	; (23f4054 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23f4044:	4403      	add	r3, r0
 23f4046:	681b      	ldr	r3, [r3, #0]
 23f4048:	695b      	ldr	r3, [r3, #20]
 23f404a:	9302      	str	r3, [sp, #8]
 23f404c:	bd09      	pop	{r0, r3, pc}
 23f404e:	0000      	.short	0x0000
 23f4050:	1007a324 	.word	0x1007a324
 23f4054:	00000000 	.word	0x00000000

023f4058 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23f4058:	b509      	push	{r0, r3, lr}
 23f405a:	4804      	ldr	r0, [pc, #16]	; (23f406c <hal_timer_millis+0x14>)
 23f405c:	6800      	ldr	r0, [r0, #0]
 23f405e:	4b04      	ldr	r3, [pc, #16]	; (23f4070 <hal_timer_millis+0x18>)
 23f4060:	4403      	add	r3, r0
 23f4062:	681b      	ldr	r3, [r3, #0]
 23f4064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23f4066:	9302      	str	r3, [sp, #8]
 23f4068:	bd09      	pop	{r0, r3, pc}
 23f406a:	0000      	.short	0x0000
 23f406c:	1007a324 	.word	0x1007a324
 23f4070:	00000000 	.word	0x00000000

023f4074 <hal_gpio_get_mode>:
DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23f4074:	b509      	push	{r0, r3, lr}
 23f4076:	4804      	ldr	r0, [pc, #16]	; (23f4088 <hal_gpio_get_mode+0x14>)
 23f4078:	6800      	ldr	r0, [r0, #0]
 23f407a:	4b04      	ldr	r3, [pc, #16]	; (23f408c <hal_gpio_get_mode+0x18>)
 23f407c:	4403      	add	r3, r0
 23f407e:	681b      	ldr	r3, [r3, #0]
 23f4080:	68db      	ldr	r3, [r3, #12]
 23f4082:	9302      	str	r3, [sp, #8]
 23f4084:	bd09      	pop	{r0, r3, pc}
 23f4086:	0000      	.short	0x0000
 23f4088:	1007a324 	.word	0x1007a324
 23f408c:	00000014 	.word	0x00000014

023f4090 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23f4090:	b509      	push	{r0, r3, lr}
 23f4092:	4804      	ldr	r0, [pc, #16]	; (23f40a4 <hal_gpio_write+0x14>)
 23f4094:	6800      	ldr	r0, [r0, #0]
 23f4096:	4b04      	ldr	r3, [pc, #16]	; (23f40a8 <hal_gpio_write+0x18>)
 23f4098:	4403      	add	r3, r0
 23f409a:	681b      	ldr	r3, [r3, #0]
 23f409c:	691b      	ldr	r3, [r3, #16]
 23f409e:	9302      	str	r3, [sp, #8]
 23f40a0:	bd09      	pop	{r0, r3, pc}
 23f40a2:	0000      	.short	0x0000
 23f40a4:	1007a324 	.word	0x1007a324
 23f40a8:	00000014 	.word	0x00000014

023f40ac <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23f40ac:	b509      	push	{r0, r3, lr}
 23f40ae:	4804      	ldr	r0, [pc, #16]	; (23f40c0 <hal_i2c_write+0x14>)
 23f40b0:	6800      	ldr	r0, [r0, #0]
 23f40b2:	4b04      	ldr	r3, [pc, #16]	; (23f40c4 <hal_i2c_write+0x18>)
 23f40b4:	4403      	add	r3, r0
 23f40b6:	681b      	ldr	r3, [r3, #0]
 23f40b8:	6a1b      	ldr	r3, [r3, #32]
 23f40ba:	9302      	str	r3, [sp, #8]
 23f40bc:	bd09      	pop	{r0, r3, pc}
 23f40be:	0000      	.short	0x0000
 23f40c0:	1007a324 	.word	0x1007a324
 23f40c4:	00000010 	.word	0x00000010

023f40c8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23f40c8:	b509      	push	{r0, r3, lr}
 23f40ca:	4804      	ldr	r0, [pc, #16]	; (23f40dc <hal_i2c_available+0x14>)
 23f40cc:	6800      	ldr	r0, [r0, #0]
 23f40ce:	4b04      	ldr	r3, [pc, #16]	; (23f40e0 <hal_i2c_available+0x18>)
 23f40d0:	4403      	add	r3, r0
 23f40d2:	681b      	ldr	r3, [r3, #0]
 23f40d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f40d6:	9302      	str	r3, [sp, #8]
 23f40d8:	bd09      	pop	{r0, r3, pc}
 23f40da:	0000      	.short	0x0000
 23f40dc:	1007a324 	.word	0x1007a324
 23f40e0:	00000010 	.word	0x00000010

023f40e4 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23f40e4:	b509      	push	{r0, r3, lr}
 23f40e6:	4804      	ldr	r0, [pc, #16]	; (23f40f8 <hal_i2c_read+0x14>)
 23f40e8:	6800      	ldr	r0, [r0, #0]
 23f40ea:	4b04      	ldr	r3, [pc, #16]	; (23f40fc <hal_i2c_read+0x18>)
 23f40ec:	4403      	add	r3, r0
 23f40ee:	681b      	ldr	r3, [r3, #0]
 23f40f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f40f2:	9302      	str	r3, [sp, #8]
 23f40f4:	bd09      	pop	{r0, r3, pc}
 23f40f6:	0000      	.short	0x0000
 23f40f8:	1007a324 	.word	0x1007a324
 23f40fc:	00000010 	.word	0x00000010

023f4100 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23f4100:	b509      	push	{r0, r3, lr}
 23f4102:	4804      	ldr	r0, [pc, #16]	; (23f4114 <hal_i2c_peek+0x14>)
 23f4104:	6800      	ldr	r0, [r0, #0]
 23f4106:	4b04      	ldr	r3, [pc, #16]	; (23f4118 <hal_i2c_peek+0x18>)
 23f4108:	4403      	add	r3, r0
 23f410a:	681b      	ldr	r3, [r3, #0]
 23f410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f410e:	9302      	str	r3, [sp, #8]
 23f4110:	bd09      	pop	{r0, r3, pc}
 23f4112:	0000      	.short	0x0000
 23f4114:	1007a324 	.word	0x1007a324
 23f4118:	00000010 	.word	0x00000010

023f411c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23f411c:	b509      	push	{r0, r3, lr}
 23f411e:	4804      	ldr	r0, [pc, #16]	; (23f4130 <hal_i2c_flush+0x14>)
 23f4120:	6800      	ldr	r0, [r0, #0]
 23f4122:	4b04      	ldr	r3, [pc, #16]	; (23f4134 <hal_i2c_flush+0x18>)
 23f4124:	4403      	add	r3, r0
 23f4126:	681b      	ldr	r3, [r3, #0]
 23f4128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f412a:	9302      	str	r3, [sp, #8]
 23f412c:	bd09      	pop	{r0, r3, pc}
 23f412e:	0000      	.short	0x0000
 23f4130:	1007a324 	.word	0x1007a324
 23f4134:	00000010 	.word	0x00000010

023f4138 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23f4138:	b509      	push	{r0, r3, lr}
 23f413a:	4804      	ldr	r0, [pc, #16]	; (23f414c <hal_i2c_is_enabled+0x14>)
 23f413c:	6800      	ldr	r0, [r0, #0]
 23f413e:	4b04      	ldr	r3, [pc, #16]	; (23f4150 <hal_i2c_is_enabled+0x18>)
 23f4140:	4403      	add	r3, r0
 23f4142:	681b      	ldr	r3, [r3, #0]
 23f4144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f4146:	9302      	str	r3, [sp, #8]
 23f4148:	bd09      	pop	{r0, r3, pc}
 23f414a:	0000      	.short	0x0000
 23f414c:	1007a324 	.word	0x1007a324
 23f4150:	00000010 	.word	0x00000010

023f4154 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23f4154:	b509      	push	{r0, r3, lr}
 23f4156:	4804      	ldr	r0, [pc, #16]	; (23f4168 <hal_i2c_init+0x14>)
 23f4158:	6800      	ldr	r0, [r0, #0]
 23f415a:	4b04      	ldr	r3, [pc, #16]	; (23f416c <hal_i2c_init+0x18>)
 23f415c:	4403      	add	r3, r0
 23f415e:	681b      	ldr	r3, [r3, #0]
 23f4160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f4162:	9302      	str	r3, [sp, #8]
 23f4164:	bd09      	pop	{r0, r3, pc}
 23f4166:	0000      	.short	0x0000
 23f4168:	1007a324 	.word	0x1007a324
 23f416c:	00000010 	.word	0x00000010

023f4170 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23f4170:	b509      	push	{r0, r3, lr}
 23f4172:	4804      	ldr	r0, [pc, #16]	; (23f4184 <inet_inet_ntop+0x14>)
 23f4174:	6800      	ldr	r0, [r0, #0]
 23f4176:	4b04      	ldr	r3, [pc, #16]	; (23f4188 <inet_inet_ntop+0x18>)
 23f4178:	4403      	add	r3, r0
 23f417a:	681b      	ldr	r3, [r3, #0]
 23f417c:	695b      	ldr	r3, [r3, #20]
 23f417e:	9302      	str	r3, [sp, #8]
 23f4180:	bd09      	pop	{r0, r3, pc}
 23f4182:	0000      	.short	0x0000
 23f4184:	1007a324 	.word	0x1007a324
 23f4188:	0000004c 	.word	0x0000004c

023f418c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23f418c:	b509      	push	{r0, r3, lr}
 23f418e:	4804      	ldr	r0, [pc, #16]	; (23f41a0 <netdb_freeaddrinfo+0x14>)
 23f4190:	6800      	ldr	r0, [r0, #0]
 23f4192:	4b04      	ldr	r3, [pc, #16]	; (23f41a4 <netdb_freeaddrinfo+0x18>)
 23f4194:	4403      	add	r3, r0
 23f4196:	681b      	ldr	r3, [r3, #0]
 23f4198:	689b      	ldr	r3, [r3, #8]
 23f419a:	9302      	str	r3, [sp, #8]
 23f419c:	bd09      	pop	{r0, r3, pc}
 23f419e:	0000      	.short	0x0000
 23f41a0:	1007a324 	.word	0x1007a324
 23f41a4:	00000050 	.word	0x00000050

023f41a8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23f41a8:	b509      	push	{r0, r3, lr}
 23f41aa:	4804      	ldr	r0, [pc, #16]	; (23f41bc <netdb_getaddrinfo+0x14>)
 23f41ac:	6800      	ldr	r0, [r0, #0]
 23f41ae:	4b04      	ldr	r3, [pc, #16]	; (23f41c0 <netdb_getaddrinfo+0x18>)
 23f41b0:	4403      	add	r3, r0
 23f41b2:	681b      	ldr	r3, [r3, #0]
 23f41b4:	68db      	ldr	r3, [r3, #12]
 23f41b6:	9302      	str	r3, [sp, #8]
 23f41b8:	bd09      	pop	{r0, r3, pc}
 23f41ba:	0000      	.short	0x0000
 23f41bc:	1007a324 	.word	0x1007a324
 23f41c0:	00000050 	.word	0x00000050

023f41c4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23f41c4:	b509      	push	{r0, r3, lr}
 23f41c6:	4804      	ldr	r0, [pc, #16]	; (23f41d8 <hal_spi_begin+0x14>)
 23f41c8:	6800      	ldr	r0, [r0, #0]
 23f41ca:	4b04      	ldr	r3, [pc, #16]	; (23f41dc <hal_spi_begin+0x18>)
 23f41cc:	4403      	add	r3, r0
 23f41ce:	681b      	ldr	r3, [r3, #0]
 23f41d0:	681b      	ldr	r3, [r3, #0]
 23f41d2:	9302      	str	r3, [sp, #8]
 23f41d4:	bd09      	pop	{r0, r3, pc}
 23f41d6:	0000      	.short	0x0000
 23f41d8:	1007a324 	.word	0x1007a324
 23f41dc:	00000018 	.word	0x00000018

023f41e0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23f41e0:	b509      	push	{r0, r3, lr}
 23f41e2:	4804      	ldr	r0, [pc, #16]	; (23f41f4 <hal_spi_init+0x14>)
 23f41e4:	6800      	ldr	r0, [r0, #0]
 23f41e6:	4b04      	ldr	r3, [pc, #16]	; (23f41f8 <hal_spi_init+0x18>)
 23f41e8:	4403      	add	r3, r0
 23f41ea:	681b      	ldr	r3, [r3, #0]
 23f41ec:	69db      	ldr	r3, [r3, #28]
 23f41ee:	9302      	str	r3, [sp, #8]
 23f41f0:	bd09      	pop	{r0, r3, pc}
 23f41f2:	0000      	.short	0x0000
 23f41f4:	1007a324 	.word	0x1007a324
 23f41f8:	00000018 	.word	0x00000018

023f41fc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23f41fc:	b509      	push	{r0, r3, lr}
 23f41fe:	4804      	ldr	r0, [pc, #16]	; (23f4210 <hal_spi_is_enabled+0x14>)
 23f4200:	6800      	ldr	r0, [r0, #0]
 23f4202:	4b04      	ldr	r3, [pc, #16]	; (23f4214 <hal_spi_is_enabled+0x18>)
 23f4204:	4403      	add	r3, r0
 23f4206:	681b      	ldr	r3, [r3, #0]
 23f4208:	6a1b      	ldr	r3, [r3, #32]
 23f420a:	9302      	str	r3, [sp, #8]
 23f420c:	bd09      	pop	{r0, r3, pc}
 23f420e:	0000      	.short	0x0000
 23f4210:	1007a324 	.word	0x1007a324
 23f4214:	00000018 	.word	0x00000018

023f4218 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23f4218:	b509      	push	{r0, r3, lr}
 23f421a:	4804      	ldr	r0, [pc, #16]	; (23f422c <hal_spi_info+0x14>)
 23f421c:	6800      	ldr	r0, [r0, #0]
 23f421e:	4b04      	ldr	r3, [pc, #16]	; (23f4230 <hal_spi_info+0x18>)
 23f4220:	4403      	add	r3, r0
 23f4222:	681b      	ldr	r3, [r3, #0]
 23f4224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f4226:	9302      	str	r3, [sp, #8]
 23f4228:	bd09      	pop	{r0, r3, pc}
 23f422a:	0000      	.short	0x0000
 23f422c:	1007a324 	.word	0x1007a324
 23f4230:	00000018 	.word	0x00000018

023f4234 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 23f4234:	b509      	push	{r0, r3, lr}
 23f4236:	4804      	ldr	r0, [pc, #16]	; (23f4248 <hal_spi_transfer_dma+0x14>)
 23f4238:	6800      	ldr	r0, [r0, #0]
 23f423a:	4b04      	ldr	r3, [pc, #16]	; (23f424c <hal_spi_transfer_dma+0x18>)
 23f423c:	4403      	add	r3, r0
 23f423e:	681b      	ldr	r3, [r3, #0]
 23f4240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f4242:	9302      	str	r3, [sp, #8]
 23f4244:	bd09      	pop	{r0, r3, pc}
 23f4246:	0000      	.short	0x0000
 23f4248:	1007a324 	.word	0x1007a324
 23f424c:	00000018 	.word	0x00000018

023f4250 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 23f4250:	b509      	push	{r0, r3, lr}
 23f4252:	4804      	ldr	r0, [pc, #16]	; (23f4264 <hal_spi_transfer_dma_status+0x14>)
 23f4254:	6800      	ldr	r0, [r0, #0]
 23f4256:	4b04      	ldr	r3, [pc, #16]	; (23f4268 <hal_spi_transfer_dma_status+0x18>)
 23f4258:	4403      	add	r3, r0
 23f425a:	681b      	ldr	r3, [r3, #0]
 23f425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23f425e:	9302      	str	r3, [sp, #8]
 23f4260:	bd09      	pop	{r0, r3, pc}
 23f4262:	0000      	.short	0x0000
 23f4264:	1007a324 	.word	0x1007a324
 23f4268:	00000018 	.word	0x00000018

023f426c <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23f426c:	b509      	push	{r0, r3, lr}
 23f426e:	4804      	ldr	r0, [pc, #16]	; (23f4280 <hal_spi_set_settings+0x14>)
 23f4270:	6800      	ldr	r0, [r0, #0]
 23f4272:	4b04      	ldr	r3, [pc, #16]	; (23f4284 <hal_spi_set_settings+0x18>)
 23f4274:	4403      	add	r3, r0
 23f4276:	681b      	ldr	r3, [r3, #0]
 23f4278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f427a:	9302      	str	r3, [sp, #8]
 23f427c:	bd09      	pop	{r0, r3, pc}
 23f427e:	0000      	.short	0x0000
 23f4280:	1007a324 	.word	0x1007a324
 23f4284:	00000018 	.word	0x00000018

023f4288 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23f4288:	b509      	push	{r0, r3, lr}
 23f428a:	4804      	ldr	r0, [pc, #16]	; (23f429c <hal_spi_acquire+0x14>)
 23f428c:	6800      	ldr	r0, [r0, #0]
 23f428e:	4b04      	ldr	r3, [pc, #16]	; (23f42a0 <hal_spi_acquire+0x18>)
 23f4290:	4403      	add	r3, r0
 23f4292:	681b      	ldr	r3, [r3, #0]
 23f4294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f4296:	9302      	str	r3, [sp, #8]
 23f4298:	bd09      	pop	{r0, r3, pc}
 23f429a:	0000      	.short	0x0000
 23f429c:	1007a324 	.word	0x1007a324
 23f42a0:	00000018 	.word	0x00000018

023f42a4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23f42a4:	b509      	push	{r0, r3, lr}
 23f42a6:	4804      	ldr	r0, [pc, #16]	; (23f42b8 <hal_spi_release+0x14>)
 23f42a8:	6800      	ldr	r0, [r0, #0]
 23f42aa:	4b04      	ldr	r3, [pc, #16]	; (23f42bc <hal_spi_release+0x18>)
 23f42ac:	4403      	add	r3, r0
 23f42ae:	681b      	ldr	r3, [r3, #0]
 23f42b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f42b2:	9302      	str	r3, [sp, #8]
 23f42b4:	bd09      	pop	{r0, r3, pc}
 23f42b6:	0000      	.short	0x0000
 23f42b8:	1007a324 	.word	0x1007a324
 23f42bc:	00000018 	.word	0x00000018

023f42c0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23f42c0:	b509      	push	{r0, r3, lr}
 23f42c2:	4804      	ldr	r0, [pc, #16]	; (23f42d4 <hal_usart_end+0x14>)
 23f42c4:	6800      	ldr	r0, [r0, #0]
 23f42c6:	4b04      	ldr	r3, [pc, #16]	; (23f42d8 <hal_usart_end+0x18>)
 23f42c8:	4403      	add	r3, r0
 23f42ca:	681b      	ldr	r3, [r3, #0]
 23f42cc:	689b      	ldr	r3, [r3, #8]
 23f42ce:	9302      	str	r3, [sp, #8]
 23f42d0:	bd09      	pop	{r0, r3, pc}
 23f42d2:	0000      	.short	0x0000
 23f42d4:	1007a324 	.word	0x1007a324
 23f42d8:	00000024 	.word	0x00000024

023f42dc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23f42dc:	b509      	push	{r0, r3, lr}
 23f42de:	4804      	ldr	r0, [pc, #16]	; (23f42f0 <hal_usart_write+0x14>)
 23f42e0:	6800      	ldr	r0, [r0, #0]
 23f42e2:	4b04      	ldr	r3, [pc, #16]	; (23f42f4 <hal_usart_write+0x18>)
 23f42e4:	4403      	add	r3, r0
 23f42e6:	681b      	ldr	r3, [r3, #0]
 23f42e8:	68db      	ldr	r3, [r3, #12]
 23f42ea:	9302      	str	r3, [sp, #8]
 23f42ec:	bd09      	pop	{r0, r3, pc}
 23f42ee:	0000      	.short	0x0000
 23f42f0:	1007a324 	.word	0x1007a324
 23f42f4:	00000024 	.word	0x00000024

023f42f8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23f42f8:	b509      	push	{r0, r3, lr}
 23f42fa:	4804      	ldr	r0, [pc, #16]	; (23f430c <hal_usart_available+0x14>)
 23f42fc:	6800      	ldr	r0, [r0, #0]
 23f42fe:	4b04      	ldr	r3, [pc, #16]	; (23f4310 <hal_usart_available+0x18>)
 23f4300:	4403      	add	r3, r0
 23f4302:	681b      	ldr	r3, [r3, #0]
 23f4304:	691b      	ldr	r3, [r3, #16]
 23f4306:	9302      	str	r3, [sp, #8]
 23f4308:	bd09      	pop	{r0, r3, pc}
 23f430a:	0000      	.short	0x0000
 23f430c:	1007a324 	.word	0x1007a324
 23f4310:	00000024 	.word	0x00000024

023f4314 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23f4314:	b509      	push	{r0, r3, lr}
 23f4316:	4804      	ldr	r0, [pc, #16]	; (23f4328 <hal_usart_read+0x14>)
 23f4318:	6800      	ldr	r0, [r0, #0]
 23f431a:	4b04      	ldr	r3, [pc, #16]	; (23f432c <hal_usart_read+0x18>)
 23f431c:	4403      	add	r3, r0
 23f431e:	681b      	ldr	r3, [r3, #0]
 23f4320:	695b      	ldr	r3, [r3, #20]
 23f4322:	9302      	str	r3, [sp, #8]
 23f4324:	bd09      	pop	{r0, r3, pc}
 23f4326:	0000      	.short	0x0000
 23f4328:	1007a324 	.word	0x1007a324
 23f432c:	00000024 	.word	0x00000024

023f4330 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23f4330:	b509      	push	{r0, r3, lr}
 23f4332:	4804      	ldr	r0, [pc, #16]	; (23f4344 <hal_usart_peek+0x14>)
 23f4334:	6800      	ldr	r0, [r0, #0]
 23f4336:	4b04      	ldr	r3, [pc, #16]	; (23f4348 <hal_usart_peek+0x18>)
 23f4338:	4403      	add	r3, r0
 23f433a:	681b      	ldr	r3, [r3, #0]
 23f433c:	699b      	ldr	r3, [r3, #24]
 23f433e:	9302      	str	r3, [sp, #8]
 23f4340:	bd09      	pop	{r0, r3, pc}
 23f4342:	0000      	.short	0x0000
 23f4344:	1007a324 	.word	0x1007a324
 23f4348:	00000024 	.word	0x00000024

023f434c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23f434c:	b509      	push	{r0, r3, lr}
 23f434e:	4804      	ldr	r0, [pc, #16]	; (23f4360 <hal_usart_flush+0x14>)
 23f4350:	6800      	ldr	r0, [r0, #0]
 23f4352:	4b04      	ldr	r3, [pc, #16]	; (23f4364 <hal_usart_flush+0x18>)
 23f4354:	4403      	add	r3, r0
 23f4356:	681b      	ldr	r3, [r3, #0]
 23f4358:	69db      	ldr	r3, [r3, #28]
 23f435a:	9302      	str	r3, [sp, #8]
 23f435c:	bd09      	pop	{r0, r3, pc}
 23f435e:	0000      	.short	0x0000
 23f4360:	1007a324 	.word	0x1007a324
 23f4364:	00000024 	.word	0x00000024

023f4368 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23f4368:	b509      	push	{r0, r3, lr}
 23f436a:	4804      	ldr	r0, [pc, #16]	; (23f437c <hal_usart_is_enabled+0x14>)
 23f436c:	6800      	ldr	r0, [r0, #0]
 23f436e:	4b04      	ldr	r3, [pc, #16]	; (23f4380 <hal_usart_is_enabled+0x18>)
 23f4370:	4403      	add	r3, r0
 23f4372:	681b      	ldr	r3, [r3, #0]
 23f4374:	6a1b      	ldr	r3, [r3, #32]
 23f4376:	9302      	str	r3, [sp, #8]
 23f4378:	bd09      	pop	{r0, r3, pc}
 23f437a:	0000      	.short	0x0000
 23f437c:	1007a324 	.word	0x1007a324
 23f4380:	00000024 	.word	0x00000024

023f4384 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23f4384:	b509      	push	{r0, r3, lr}
 23f4386:	4804      	ldr	r0, [pc, #16]	; (23f4398 <hal_usart_available_data_for_write+0x14>)
 23f4388:	6800      	ldr	r0, [r0, #0]
 23f438a:	4b04      	ldr	r3, [pc, #16]	; (23f439c <hal_usart_available_data_for_write+0x18>)
 23f438c:	4403      	add	r3, r0
 23f438e:	681b      	ldr	r3, [r3, #0]
 23f4390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f4392:	9302      	str	r3, [sp, #8]
 23f4394:	bd09      	pop	{r0, r3, pc}
 23f4396:	0000      	.short	0x0000
 23f4398:	1007a324 	.word	0x1007a324
 23f439c:	00000024 	.word	0x00000024

023f43a0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23f43a0:	b509      	push	{r0, r3, lr}
 23f43a2:	4804      	ldr	r0, [pc, #16]	; (23f43b4 <hal_usart_begin_config+0x14>)
 23f43a4:	6800      	ldr	r0, [r0, #0]
 23f43a6:	4b04      	ldr	r3, [pc, #16]	; (23f43b8 <hal_usart_begin_config+0x18>)
 23f43a8:	4403      	add	r3, r0
 23f43aa:	681b      	ldr	r3, [r3, #0]
 23f43ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f43ae:	9302      	str	r3, [sp, #8]
 23f43b0:	bd09      	pop	{r0, r3, pc}
 23f43b2:	0000      	.short	0x0000
 23f43b4:	1007a324 	.word	0x1007a324
 23f43b8:	00000024 	.word	0x00000024

023f43bc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23f43bc:	b509      	push	{r0, r3, lr}
 23f43be:	4804      	ldr	r0, [pc, #16]	; (23f43d0 <hal_usart_init_ex+0x14>)
 23f43c0:	6800      	ldr	r0, [r0, #0]
 23f43c2:	4b04      	ldr	r3, [pc, #16]	; (23f43d4 <hal_usart_init_ex+0x18>)
 23f43c4:	4403      	add	r3, r0
 23f43c6:	681b      	ldr	r3, [r3, #0]
 23f43c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f43ca:	9302      	str	r3, [sp, #8]
 23f43cc:	bd09      	pop	{r0, r3, pc}
 23f43ce:	0000      	.short	0x0000
 23f43d0:	1007a324 	.word	0x1007a324
 23f43d4:	00000024 	.word	0x00000024

023f43d8 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23f43d8:	b509      	push	{r0, r3, lr}
 23f43da:	4804      	ldr	r0, [pc, #16]	; (23f43ec <HAL_USB_USART_Init+0x14>)
 23f43dc:	6800      	ldr	r0, [r0, #0]
 23f43de:	4b04      	ldr	r3, [pc, #16]	; (23f43f0 <HAL_USB_USART_Init+0x18>)
 23f43e0:	4403      	add	r3, r0
 23f43e2:	681b      	ldr	r3, [r3, #0]
 23f43e4:	681b      	ldr	r3, [r3, #0]
 23f43e6:	9302      	str	r3, [sp, #8]
 23f43e8:	bd09      	pop	{r0, r3, pc}
 23f43ea:	0000      	.short	0x0000
 23f43ec:	1007a324 	.word	0x1007a324
 23f43f0:	00000034 	.word	0x00000034

023f43f4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23f43f4:	b509      	push	{r0, r3, lr}
 23f43f6:	4804      	ldr	r0, [pc, #16]	; (23f4408 <HAL_USB_USART_Begin+0x14>)
 23f43f8:	6800      	ldr	r0, [r0, #0]
 23f43fa:	4b04      	ldr	r3, [pc, #16]	; (23f440c <HAL_USB_USART_Begin+0x18>)
 23f43fc:	4403      	add	r3, r0
 23f43fe:	681b      	ldr	r3, [r3, #0]
 23f4400:	685b      	ldr	r3, [r3, #4]
 23f4402:	9302      	str	r3, [sp, #8]
 23f4404:	bd09      	pop	{r0, r3, pc}
 23f4406:	0000      	.short	0x0000
 23f4408:	1007a324 	.word	0x1007a324
 23f440c:	00000034 	.word	0x00000034

023f4410 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23f4410:	b509      	push	{r0, r3, lr}
 23f4412:	4804      	ldr	r0, [pc, #16]	; (23f4424 <HAL_USB_USART_End+0x14>)
 23f4414:	6800      	ldr	r0, [r0, #0]
 23f4416:	4b04      	ldr	r3, [pc, #16]	; (23f4428 <HAL_USB_USART_End+0x18>)
 23f4418:	4403      	add	r3, r0
 23f441a:	681b      	ldr	r3, [r3, #0]
 23f441c:	689b      	ldr	r3, [r3, #8]
 23f441e:	9302      	str	r3, [sp, #8]
 23f4420:	bd09      	pop	{r0, r3, pc}
 23f4422:	0000      	.short	0x0000
 23f4424:	1007a324 	.word	0x1007a324
 23f4428:	00000034 	.word	0x00000034

023f442c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23f442c:	b509      	push	{r0, r3, lr}
 23f442e:	4804      	ldr	r0, [pc, #16]	; (23f4440 <HAL_USB_USART_Available_Data+0x14>)
 23f4430:	6800      	ldr	r0, [r0, #0]
 23f4432:	4b04      	ldr	r3, [pc, #16]	; (23f4444 <HAL_USB_USART_Available_Data+0x18>)
 23f4434:	4403      	add	r3, r0
 23f4436:	681b      	ldr	r3, [r3, #0]
 23f4438:	691b      	ldr	r3, [r3, #16]
 23f443a:	9302      	str	r3, [sp, #8]
 23f443c:	bd09      	pop	{r0, r3, pc}
 23f443e:	0000      	.short	0x0000
 23f4440:	1007a324 	.word	0x1007a324
 23f4444:	00000034 	.word	0x00000034

023f4448 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23f4448:	b509      	push	{r0, r3, lr}
 23f444a:	4804      	ldr	r0, [pc, #16]	; (23f445c <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23f444c:	6800      	ldr	r0, [r0, #0]
 23f444e:	4b04      	ldr	r3, [pc, #16]	; (23f4460 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23f4450:	4403      	add	r3, r0
 23f4452:	681b      	ldr	r3, [r3, #0]
 23f4454:	695b      	ldr	r3, [r3, #20]
 23f4456:	9302      	str	r3, [sp, #8]
 23f4458:	bd09      	pop	{r0, r3, pc}
 23f445a:	0000      	.short	0x0000
 23f445c:	1007a324 	.word	0x1007a324
 23f4460:	00000034 	.word	0x00000034

023f4464 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f4464:	b509      	push	{r0, r3, lr}
 23f4466:	4804      	ldr	r0, [pc, #16]	; (23f4478 <HAL_USB_USART_Receive_Data+0x14>)
 23f4468:	6800      	ldr	r0, [r0, #0]
 23f446a:	4b04      	ldr	r3, [pc, #16]	; (23f447c <HAL_USB_USART_Receive_Data+0x18>)
 23f446c:	4403      	add	r3, r0
 23f446e:	681b      	ldr	r3, [r3, #0]
 23f4470:	699b      	ldr	r3, [r3, #24]
 23f4472:	9302      	str	r3, [sp, #8]
 23f4474:	bd09      	pop	{r0, r3, pc}
 23f4476:	0000      	.short	0x0000
 23f4478:	1007a324 	.word	0x1007a324
 23f447c:	00000034 	.word	0x00000034

023f4480 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23f4480:	b509      	push	{r0, r3, lr}
 23f4482:	4804      	ldr	r0, [pc, #16]	; (23f4494 <HAL_USB_USART_Send_Data+0x14>)
 23f4484:	6800      	ldr	r0, [r0, #0]
 23f4486:	4b04      	ldr	r3, [pc, #16]	; (23f4498 <HAL_USB_USART_Send_Data+0x18>)
 23f4488:	4403      	add	r3, r0
 23f448a:	681b      	ldr	r3, [r3, #0]
 23f448c:	69db      	ldr	r3, [r3, #28]
 23f448e:	9302      	str	r3, [sp, #8]
 23f4490:	bd09      	pop	{r0, r3, pc}
 23f4492:	0000      	.short	0x0000
 23f4494:	1007a324 	.word	0x1007a324
 23f4498:	00000034 	.word	0x00000034

023f449c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23f449c:	b509      	push	{r0, r3, lr}
 23f449e:	4804      	ldr	r0, [pc, #16]	; (23f44b0 <HAL_USB_USART_Flush_Data+0x14>)
 23f44a0:	6800      	ldr	r0, [r0, #0]
 23f44a2:	4b04      	ldr	r3, [pc, #16]	; (23f44b4 <HAL_USB_USART_Flush_Data+0x18>)
 23f44a4:	4403      	add	r3, r0
 23f44a6:	681b      	ldr	r3, [r3, #0]
 23f44a8:	6a1b      	ldr	r3, [r3, #32]
 23f44aa:	9302      	str	r3, [sp, #8]
 23f44ac:	bd09      	pop	{r0, r3, pc}
 23f44ae:	0000      	.short	0x0000
 23f44b0:	1007a324 	.word	0x1007a324
 23f44b4:	00000034 	.word	0x00000034

023f44b8 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 23f44b8:	b509      	push	{r0, r3, lr}
 23f44ba:	4804      	ldr	r0, [pc, #16]	; (23f44cc <HAL_USB_USART_Is_Connected+0x14>)
 23f44bc:	6800      	ldr	r0, [r0, #0]
 23f44be:	4b04      	ldr	r3, [pc, #16]	; (23f44d0 <HAL_USB_USART_Is_Connected+0x18>)
 23f44c0:	4403      	add	r3, r0
 23f44c2:	681b      	ldr	r3, [r3, #0]
 23f44c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23f44c6:	9302      	str	r3, [sp, #8]
 23f44c8:	bd09      	pop	{r0, r3, pc}
 23f44ca:	0000      	.short	0x0000
 23f44cc:	1007a324 	.word	0x1007a324
 23f44d0:	00000034 	.word	0x00000034

023f44d4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23f44d4:	b509      	push	{r0, r3, lr}
 23f44d6:	4804      	ldr	r0, [pc, #16]	; (23f44e8 <panic_+0x14>)
 23f44d8:	6800      	ldr	r0, [r0, #0]
 23f44da:	4b04      	ldr	r3, [pc, #16]	; (23f44ec <panic_+0x18>)
 23f44dc:	4403      	add	r3, r0
 23f44de:	681b      	ldr	r3, [r3, #0]
 23f44e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f44e2:	9302      	str	r3, [sp, #8]
 23f44e4:	bd09      	pop	{r0, r3, pc}
 23f44e6:	0000      	.short	0x0000
 23f44e8:	1007a324 	.word	0x1007a324
 23f44ec:	00000048 	.word	0x00000048

023f44f0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23f44f0:	b509      	push	{r0, r3, lr}
 23f44f2:	4804      	ldr	r0, [pc, #16]	; (23f4504 <log_level_name+0x14>)
 23f44f4:	6800      	ldr	r0, [r0, #0]
 23f44f6:	4b04      	ldr	r3, [pc, #16]	; (23f4508 <log_level_name+0x18>)
 23f44f8:	4403      	add	r3, r0
 23f44fa:	681b      	ldr	r3, [r3, #0]
 23f44fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23f44fe:	9302      	str	r3, [sp, #8]
 23f4500:	bd09      	pop	{r0, r3, pc}
 23f4502:	0000      	.short	0x0000
 23f4504:	1007a324 	.word	0x1007a324
 23f4508:	00000048 	.word	0x00000048

023f450c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23f450c:	b509      	push	{r0, r3, lr}
 23f450e:	4804      	ldr	r0, [pc, #16]	; (23f4520 <log_set_callbacks+0x14>)
 23f4510:	6800      	ldr	r0, [r0, #0]
 23f4512:	4b04      	ldr	r3, [pc, #16]	; (23f4524 <log_set_callbacks+0x18>)
 23f4514:	4403      	add	r3, r0
 23f4516:	681b      	ldr	r3, [r3, #0]
 23f4518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23f451a:	9302      	str	r3, [sp, #8]
 23f451c:	bd09      	pop	{r0, r3, pc}
 23f451e:	0000      	.short	0x0000
 23f4520:	1007a324 	.word	0x1007a324
 23f4524:	00000048 	.word	0x00000048

023f4528 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23f4528:	b509      	push	{r0, r3, lr}
 23f452a:	4804      	ldr	r0, [pc, #16]	; (23f453c <set_system_mode+0x14>)
 23f452c:	6800      	ldr	r0, [r0, #0]
 23f452e:	4b04      	ldr	r3, [pc, #16]	; (23f4540 <set_system_mode+0x18>)
 23f4530:	4403      	add	r3, r0
 23f4532:	681b      	ldr	r3, [r3, #0]
 23f4534:	685b      	ldr	r3, [r3, #4]
 23f4536:	9302      	str	r3, [sp, #8]
 23f4538:	bd09      	pop	{r0, r3, pc}
 23f453a:	0000      	.short	0x0000
 23f453c:	1007a324 	.word	0x1007a324
 23f4540:	00000008 	.word	0x00000008

023f4544 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23f4544:	b509      	push	{r0, r3, lr}
 23f4546:	4804      	ldr	r0, [pc, #16]	; (23f4558 <system_delay_ms+0x14>)
 23f4548:	6800      	ldr	r0, [r0, #0]
 23f454a:	4b04      	ldr	r3, [pc, #16]	; (23f455c <system_delay_ms+0x18>)
 23f454c:	4403      	add	r3, r0
 23f454e:	681b      	ldr	r3, [r3, #0]
 23f4550:	695b      	ldr	r3, [r3, #20]
 23f4552:	9302      	str	r3, [sp, #8]
 23f4554:	bd09      	pop	{r0, r3, pc}
 23f4556:	0000      	.short	0x0000
 23f4558:	1007a324 	.word	0x1007a324
 23f455c:	00000008 	.word	0x00000008

023f4560 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23f4560:	b509      	push	{r0, r3, lr}
 23f4562:	4804      	ldr	r0, [pc, #16]	; (23f4574 <system_thread_set_state+0x14>)
 23f4564:	6800      	ldr	r0, [r0, #0]
 23f4566:	4b04      	ldr	r3, [pc, #16]	; (23f4578 <system_thread_set_state+0x18>)
 23f4568:	4403      	add	r3, r0
 23f456a:	681b      	ldr	r3, [r3, #0]
 23f456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f456e:	9302      	str	r3, [sp, #8]
 23f4570:	bd09      	pop	{r0, r3, pc}
 23f4572:	0000      	.short	0x0000
 23f4574:	1007a324 	.word	0x1007a324
 23f4578:	00000008 	.word	0x00000008

023f457c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23f457c:	b509      	push	{r0, r3, lr}
 23f457e:	4804      	ldr	r0, [pc, #16]	; (23f4590 <system_ctrl_set_app_request_handler+0x14>)
 23f4580:	6800      	ldr	r0, [r0, #0]
 23f4582:	4b04      	ldr	r3, [pc, #16]	; (23f4594 <system_ctrl_set_app_request_handler+0x18>)
 23f4584:	4403      	add	r3, r0
 23f4586:	681b      	ldr	r3, [r3, #0]
 23f4588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23f458c:	9302      	str	r3, [sp, #8]
 23f458e:	bd09      	pop	{r0, r3, pc}
 23f4590:	1007a324 	.word	0x1007a324
 23f4594:	00000008 	.word	0x00000008

023f4598 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23f4598:	b509      	push	{r0, r3, lr}
 23f459a:	4804      	ldr	r0, [pc, #16]	; (23f45ac <system_ctrl_set_result+0x14>)
 23f459c:	6800      	ldr	r0, [r0, #0]
 23f459e:	4b04      	ldr	r3, [pc, #16]	; (23f45b0 <system_ctrl_set_result+0x18>)
 23f45a0:	4403      	add	r3, r0
 23f45a2:	681b      	ldr	r3, [r3, #0]
 23f45a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23f45a8:	9302      	str	r3, [sp, #8]
 23f45aa:	bd09      	pop	{r0, r3, pc}
 23f45ac:	1007a324 	.word	0x1007a324
 23f45b0:	00000008 	.word	0x00000008

023f45b4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23f45b4:	b509      	push	{r0, r3, lr}
 23f45b6:	4804      	ldr	r0, [pc, #16]	; (23f45c8 <spark_process+0x14>)
 23f45b8:	6800      	ldr	r0, [r0, #0]
 23f45ba:	4b04      	ldr	r3, [pc, #16]	; (23f45cc <spark_process+0x18>)
 23f45bc:	4403      	add	r3, r0
 23f45be:	681b      	ldr	r3, [r3, #0]
 23f45c0:	689b      	ldr	r3, [r3, #8]
 23f45c2:	9302      	str	r3, [sp, #8]
 23f45c4:	bd09      	pop	{r0, r3, pc}
 23f45c6:	0000      	.short	0x0000
 23f45c8:	1007a324 	.word	0x1007a324
 23f45cc:	0000002c 	.word	0x0000002c

023f45d0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23f45d0:	b509      	push	{r0, r3, lr}
 23f45d2:	4804      	ldr	r0, [pc, #16]	; (23f45e4 <spark_set_random_seed_from_cloud_handler+0x14>)
 23f45d4:	6800      	ldr	r0, [r0, #0]
 23f45d6:	4b04      	ldr	r3, [pc, #16]	; (23f45e8 <spark_set_random_seed_from_cloud_handler+0x18>)
 23f45d8:	4403      	add	r3, r0
 23f45da:	681b      	ldr	r3, [r3, #0]
 23f45dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f45de:	9302      	str	r3, [sp, #8]
 23f45e0:	bd09      	pop	{r0, r3, pc}
 23f45e2:	0000      	.short	0x0000
 23f45e4:	1007a324 	.word	0x1007a324
 23f45e8:	0000002c 	.word	0x0000002c

023f45ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23f45ec:	b509      	push	{r0, r3, lr}
 23f45ee:	4804      	ldr	r0, [pc, #16]	; (23f4600 <network_connect+0x14>)
 23f45f0:	6800      	ldr	r0, [r0, #0]
 23f45f2:	4b04      	ldr	r3, [pc, #16]	; (23f4604 <network_connect+0x18>)
 23f45f4:	4403      	add	r3, r0
 23f45f6:	681b      	ldr	r3, [r3, #0]
 23f45f8:	685b      	ldr	r3, [r3, #4]
 23f45fa:	9302      	str	r3, [sp, #8]
 23f45fc:	bd09      	pop	{r0, r3, pc}
 23f45fe:	0000      	.short	0x0000
 23f4600:	1007a324 	.word	0x1007a324
 23f4604:	00000028 	.word	0x00000028

023f4608 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23f4608:	b509      	push	{r0, r3, lr}
 23f460a:	4804      	ldr	r0, [pc, #16]	; (23f461c <network_connecting+0x14>)
 23f460c:	6800      	ldr	r0, [r0, #0]
 23f460e:	4b04      	ldr	r3, [pc, #16]	; (23f4620 <network_connecting+0x18>)
 23f4610:	4403      	add	r3, r0
 23f4612:	681b      	ldr	r3, [r3, #0]
 23f4614:	689b      	ldr	r3, [r3, #8]
 23f4616:	9302      	str	r3, [sp, #8]
 23f4618:	bd09      	pop	{r0, r3, pc}
 23f461a:	0000      	.short	0x0000
 23f461c:	1007a324 	.word	0x1007a324
 23f4620:	00000028 	.word	0x00000028

023f4624 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23f4624:	b509      	push	{r0, r3, lr}
 23f4626:	4804      	ldr	r0, [pc, #16]	; (23f4638 <network_disconnect+0x14>)
 23f4628:	6800      	ldr	r0, [r0, #0]
 23f462a:	4b04      	ldr	r3, [pc, #16]	; (23f463c <network_disconnect+0x18>)
 23f462c:	4403      	add	r3, r0
 23f462e:	681b      	ldr	r3, [r3, #0]
 23f4630:	68db      	ldr	r3, [r3, #12]
 23f4632:	9302      	str	r3, [sp, #8]
 23f4634:	bd09      	pop	{r0, r3, pc}
 23f4636:	0000      	.short	0x0000
 23f4638:	1007a324 	.word	0x1007a324
 23f463c:	00000028 	.word	0x00000028

023f4640 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23f4640:	b509      	push	{r0, r3, lr}
 23f4642:	4804      	ldr	r0, [pc, #16]	; (23f4654 <network_ready+0x14>)
 23f4644:	6800      	ldr	r0, [r0, #0]
 23f4646:	4b04      	ldr	r3, [pc, #16]	; (23f4658 <network_ready+0x18>)
 23f4648:	4403      	add	r3, r0
 23f464a:	681b      	ldr	r3, [r3, #0]
 23f464c:	691b      	ldr	r3, [r3, #16]
 23f464e:	9302      	str	r3, [sp, #8]
 23f4650:	bd09      	pop	{r0, r3, pc}
 23f4652:	0000      	.short	0x0000
 23f4654:	1007a324 	.word	0x1007a324
 23f4658:	00000028 	.word	0x00000028

023f465c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23f465c:	b509      	push	{r0, r3, lr}
 23f465e:	4804      	ldr	r0, [pc, #16]	; (23f4670 <network_on+0x14>)
 23f4660:	6800      	ldr	r0, [r0, #0]
 23f4662:	4b04      	ldr	r3, [pc, #16]	; (23f4674 <network_on+0x18>)
 23f4664:	4403      	add	r3, r0
 23f4666:	681b      	ldr	r3, [r3, #0]
 23f4668:	695b      	ldr	r3, [r3, #20]
 23f466a:	9302      	str	r3, [sp, #8]
 23f466c:	bd09      	pop	{r0, r3, pc}
 23f466e:	0000      	.short	0x0000
 23f4670:	1007a324 	.word	0x1007a324
 23f4674:	00000028 	.word	0x00000028

023f4678 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23f4678:	b509      	push	{r0, r3, lr}
 23f467a:	4804      	ldr	r0, [pc, #16]	; (23f468c <network_off+0x14>)
 23f467c:	6800      	ldr	r0, [r0, #0]
 23f467e:	4b04      	ldr	r3, [pc, #16]	; (23f4690 <network_off+0x18>)
 23f4680:	4403      	add	r3, r0
 23f4682:	681b      	ldr	r3, [r3, #0]
 23f4684:	699b      	ldr	r3, [r3, #24]
 23f4686:	9302      	str	r3, [sp, #8]
 23f4688:	bd09      	pop	{r0, r3, pc}
 23f468a:	0000      	.short	0x0000
 23f468c:	1007a324 	.word	0x1007a324
 23f4690:	00000028 	.word	0x00000028

023f4694 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23f4694:	b509      	push	{r0, r3, lr}
 23f4696:	4804      	ldr	r0, [pc, #16]	; (23f46a8 <network_listen+0x14>)
 23f4698:	6800      	ldr	r0, [r0, #0]
 23f469a:	4b04      	ldr	r3, [pc, #16]	; (23f46ac <network_listen+0x18>)
 23f469c:	4403      	add	r3, r0
 23f469e:	681b      	ldr	r3, [r3, #0]
 23f46a0:	69db      	ldr	r3, [r3, #28]
 23f46a2:	9302      	str	r3, [sp, #8]
 23f46a4:	bd09      	pop	{r0, r3, pc}
 23f46a6:	0000      	.short	0x0000
 23f46a8:	1007a324 	.word	0x1007a324
 23f46ac:	00000028 	.word	0x00000028

023f46b0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23f46b0:	b509      	push	{r0, r3, lr}
 23f46b2:	4804      	ldr	r0, [pc, #16]	; (23f46c4 <network_listening+0x14>)
 23f46b4:	6800      	ldr	r0, [r0, #0]
 23f46b6:	4b04      	ldr	r3, [pc, #16]	; (23f46c8 <network_listening+0x18>)
 23f46b8:	4403      	add	r3, r0
 23f46ba:	681b      	ldr	r3, [r3, #0]
 23f46bc:	6a1b      	ldr	r3, [r3, #32]
 23f46be:	9302      	str	r3, [sp, #8]
 23f46c0:	bd09      	pop	{r0, r3, pc}
 23f46c2:	0000      	.short	0x0000
 23f46c4:	1007a324 	.word	0x1007a324
 23f46c8:	00000028 	.word	0x00000028

023f46cc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23f46cc:	b509      	push	{r0, r3, lr}
 23f46ce:	4804      	ldr	r0, [pc, #16]	; (23f46e0 <network_set_listen_timeout+0x14>)
 23f46d0:	6800      	ldr	r0, [r0, #0]
 23f46d2:	4b04      	ldr	r3, [pc, #16]	; (23f46e4 <network_set_listen_timeout+0x18>)
 23f46d4:	4403      	add	r3, r0
 23f46d6:	681b      	ldr	r3, [r3, #0]
 23f46d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f46da:	9302      	str	r3, [sp, #8]
 23f46dc:	bd09      	pop	{r0, r3, pc}
 23f46de:	0000      	.short	0x0000
 23f46e0:	1007a324 	.word	0x1007a324
 23f46e4:	00000028 	.word	0x00000028

023f46e8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23f46e8:	b509      	push	{r0, r3, lr}
 23f46ea:	4804      	ldr	r0, [pc, #16]	; (23f46fc <network_get_listen_timeout+0x14>)
 23f46ec:	6800      	ldr	r0, [r0, #0]
 23f46ee:	4b04      	ldr	r3, [pc, #16]	; (23f4700 <network_get_listen_timeout+0x18>)
 23f46f0:	4403      	add	r3, r0
 23f46f2:	681b      	ldr	r3, [r3, #0]
 23f46f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23f46f6:	9302      	str	r3, [sp, #8]
 23f46f8:	bd09      	pop	{r0, r3, pc}
 23f46fa:	0000      	.short	0x0000
 23f46fc:	1007a324 	.word	0x1007a324
 23f4700:	00000028 	.word	0x00000028

023f4704 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23f4704:	b509      	push	{r0, r3, lr}
 23f4706:	4804      	ldr	r0, [pc, #16]	; (23f4718 <network_is_on+0x14>)
 23f4708:	6800      	ldr	r0, [r0, #0]
 23f470a:	4b04      	ldr	r3, [pc, #16]	; (23f471c <network_is_on+0x18>)
 23f470c:	4403      	add	r3, r0
 23f470e:	681b      	ldr	r3, [r3, #0]
 23f4710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f4712:	9302      	str	r3, [sp, #8]
 23f4714:	bd09      	pop	{r0, r3, pc}
 23f4716:	0000      	.short	0x0000
 23f4718:	1007a324 	.word	0x1007a324
 23f471c:	00000028 	.word	0x00000028

023f4720 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23f4720:	b509      	push	{r0, r3, lr}
 23f4722:	4804      	ldr	r0, [pc, #16]	; (23f4734 <network_is_off+0x14>)
 23f4724:	6800      	ldr	r0, [r0, #0]
 23f4726:	4b04      	ldr	r3, [pc, #16]	; (23f4738 <network_is_off+0x18>)
 23f4728:	4403      	add	r3, r0
 23f472a:	681b      	ldr	r3, [r3, #0]
 23f472c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f472e:	9302      	str	r3, [sp, #8]
 23f4730:	bd09      	pop	{r0, r3, pc}
 23f4732:	0000      	.short	0x0000
 23f4734:	1007a324 	.word	0x1007a324
 23f4738:	00000028 	.word	0x00000028

023f473c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23f473c:	b509      	push	{r0, r3, lr}
 23f473e:	4804      	ldr	r0, [pc, #16]	; (23f4750 <malloc+0x14>)
 23f4740:	6800      	ldr	r0, [r0, #0]
 23f4742:	4b04      	ldr	r3, [pc, #16]	; (23f4754 <malloc+0x18>)
 23f4744:	4403      	add	r3, r0
 23f4746:	681b      	ldr	r3, [r3, #0]
 23f4748:	681b      	ldr	r3, [r3, #0]
 23f474a:	9302      	str	r3, [sp, #8]
 23f474c:	bd09      	pop	{r0, r3, pc}
 23f474e:	0000      	.short	0x0000
 23f4750:	1007a324 	.word	0x1007a324
 23f4754:	00000004 	.word	0x00000004

023f4758 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23f4758:	b509      	push	{r0, r3, lr}
 23f475a:	4804      	ldr	r0, [pc, #16]	; (23f476c <free+0x14>)
 23f475c:	6800      	ldr	r0, [r0, #0]
 23f475e:	4b04      	ldr	r3, [pc, #16]	; (23f4770 <free+0x18>)
 23f4760:	4403      	add	r3, r0
 23f4762:	681b      	ldr	r3, [r3, #0]
 23f4764:	685b      	ldr	r3, [r3, #4]
 23f4766:	9302      	str	r3, [sp, #8]
 23f4768:	bd09      	pop	{r0, r3, pc}
 23f476a:	0000      	.short	0x0000
 23f476c:	1007a324 	.word	0x1007a324
 23f4770:	00000004 	.word	0x00000004

023f4774 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23f4774:	b509      	push	{r0, r3, lr}
 23f4776:	4804      	ldr	r0, [pc, #16]	; (23f4788 <realloc+0x14>)
 23f4778:	6800      	ldr	r0, [r0, #0]
 23f477a:	4b04      	ldr	r3, [pc, #16]	; (23f478c <realloc+0x18>)
 23f477c:	4403      	add	r3, r0
 23f477e:	681b      	ldr	r3, [r3, #0]
 23f4780:	689b      	ldr	r3, [r3, #8]
 23f4782:	9302      	str	r3, [sp, #8]
 23f4784:	bd09      	pop	{r0, r3, pc}
 23f4786:	0000      	.short	0x0000
 23f4788:	1007a324 	.word	0x1007a324
 23f478c:	00000004 	.word	0x00000004

023f4790 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23f4790:	b509      	push	{r0, r3, lr}
 23f4792:	4804      	ldr	r0, [pc, #16]	; (23f47a4 <vsnprintf+0x14>)
 23f4794:	6800      	ldr	r0, [r0, #0]
 23f4796:	4b04      	ldr	r3, [pc, #16]	; (23f47a8 <vsnprintf+0x18>)
 23f4798:	4403      	add	r3, r0
 23f479a:	681b      	ldr	r3, [r3, #0]
 23f479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23f479e:	9302      	str	r3, [sp, #8]
 23f47a0:	bd09      	pop	{r0, r3, pc}
 23f47a2:	0000      	.short	0x0000
 23f47a4:	1007a324 	.word	0x1007a324
 23f47a8:	00000004 	.word	0x00000004

023f47ac <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23f47ac:	b509      	push	{r0, r3, lr}
 23f47ae:	4804      	ldr	r0, [pc, #16]	; (23f47c0 <abort+0x14>)
 23f47b0:	6800      	ldr	r0, [r0, #0]
 23f47b2:	4b04      	ldr	r3, [pc, #16]	; (23f47c4 <abort+0x18>)
 23f47b4:	4403      	add	r3, r0
 23f47b6:	681b      	ldr	r3, [r3, #0]
 23f47b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23f47ba:	9302      	str	r3, [sp, #8]
 23f47bc:	bd09      	pop	{r0, r3, pc}
 23f47be:	0000      	.short	0x0000
 23f47c0:	1007a324 	.word	0x1007a324
 23f47c4:	00000004 	.word	0x00000004

023f47c8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23f47c8:	b509      	push	{r0, r3, lr}
 23f47ca:	4804      	ldr	r0, [pc, #16]	; (23f47dc <_malloc_r+0x14>)
 23f47cc:	6800      	ldr	r0, [r0, #0]
 23f47ce:	4b04      	ldr	r3, [pc, #16]	; (23f47e0 <_malloc_r+0x18>)
 23f47d0:	4403      	add	r3, r0
 23f47d2:	681b      	ldr	r3, [r3, #0]
 23f47d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23f47d6:	9302      	str	r3, [sp, #8]
 23f47d8:	bd09      	pop	{r0, r3, pc}
 23f47da:	0000      	.short	0x0000
 23f47dc:	1007a324 	.word	0x1007a324
 23f47e0:	00000004 	.word	0x00000004

023f47e4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23f47e4:	b509      	push	{r0, r3, lr}
 23f47e6:	4804      	ldr	r0, [pc, #16]	; (23f47f8 <__errno+0x14>)
 23f47e8:	6800      	ldr	r0, [r0, #0]
 23f47ea:	4b04      	ldr	r3, [pc, #16]	; (23f47fc <__errno+0x18>)
 23f47ec:	4403      	add	r3, r0
 23f47ee:	681b      	ldr	r3, [r3, #0]
 23f47f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23f47f2:	9302      	str	r3, [sp, #8]
 23f47f4:	bd09      	pop	{r0, r3, pc}
 23f47f6:	0000      	.short	0x0000
 23f47f8:	1007a324 	.word	0x1007a324
 23f47fc:	00000004 	.word	0x00000004

023f4800 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23f4800:	b509      	push	{r0, r3, lr}
 23f4802:	4804      	ldr	r0, [pc, #16]	; (23f4814 <__assert_func+0x14>)
 23f4804:	6800      	ldr	r0, [r0, #0]
 23f4806:	4b04      	ldr	r3, [pc, #16]	; (23f4818 <__assert_func+0x18>)
 23f4808:	4403      	add	r3, r0
 23f480a:	681b      	ldr	r3, [r3, #0]
 23f480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23f480e:	9302      	str	r3, [sp, #8]
 23f4810:	bd09      	pop	{r0, r3, pc}
 23f4812:	0000      	.short	0x0000
 23f4814:	1007a324 	.word	0x1007a324
 23f4818:	00000004 	.word	0x00000004

023f481c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23f481c:	b509      	push	{r0, r3, lr}
 23f481e:	4804      	ldr	r0, [pc, #16]	; (23f4830 <newlib_impure_ptr_callback+0x14>)
 23f4820:	6800      	ldr	r0, [r0, #0]
 23f4822:	4b04      	ldr	r3, [pc, #16]	; (23f4834 <newlib_impure_ptr_callback+0x18>)
 23f4824:	4403      	add	r3, r0
 23f4826:	681b      	ldr	r3, [r3, #0]
 23f4828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23f482a:	9302      	str	r3, [sp, #8]
 23f482c:	bd09      	pop	{r0, r3, pc}
 23f482e:	0000      	.short	0x0000
 23f4830:	1007a324 	.word	0x1007a324
 23f4834:	00000004 	.word	0x00000004

023f4838 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23f4838:	2100      	movs	r1, #0
 23f483a:	f7ff be83 	b.w	23f4544 <system_delay_ms>

023f483e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23f483e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23f4840:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23f4842:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23f4844:	b17c      	cbz	r4, 23f4866 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23f4846:	6863      	ldr	r3, [r4, #4]
 23f4848:	3b01      	subs	r3, #1
 23f484a:	6063      	str	r3, [r4, #4]
 23f484c:	b95b      	cbnz	r3, 23f4866 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23f484e:	6823      	ldr	r3, [r4, #0]
 23f4850:	4620      	mov	r0, r4
 23f4852:	689b      	ldr	r3, [r3, #8]
 23f4854:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f4856:	68a3      	ldr	r3, [r4, #8]
 23f4858:	3b01      	subs	r3, #1
 23f485a:	60a3      	str	r3, [r4, #8]
 23f485c:	b91b      	cbnz	r3, 23f4866 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23f485e:	6823      	ldr	r3, [r4, #0]
 23f4860:	4620      	mov	r0, r4
 23f4862:	68db      	ldr	r3, [r3, #12]
 23f4864:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23f4866:	4628      	mov	r0, r5
 23f4868:	bd38      	pop	{r3, r4, r5, pc}

023f486a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23f486a:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23f486c:	6843      	ldr	r3, [r0, #4]
    {
 23f486e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23f4870:	3b01      	subs	r3, #1
 23f4872:	6043      	str	r3, [r0, #4]
 23f4874:	b963      	cbnz	r3, 23f4890 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23f4876:	6803      	ldr	r3, [r0, #0]
 23f4878:	689b      	ldr	r3, [r3, #8]
 23f487a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23f487c:	68a3      	ldr	r3, [r4, #8]
 23f487e:	3b01      	subs	r3, #1
 23f4880:	60a3      	str	r3, [r4, #8]
 23f4882:	b92b      	cbnz	r3, 23f4890 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23f4884:	6823      	ldr	r3, [r4, #0]
 23f4886:	4620      	mov	r0, r4
    }
 23f4888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23f488c:	68db      	ldr	r3, [r3, #12]
 23f488e:	4718      	bx	r3
    }
 23f4890:	bd10      	pop	{r4, pc}

023f4892 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f4892:	b570      	push	{r4, r5, r6, lr}
 23f4894:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f4896:	e9d0 5300 	ldrd	r5, r3, [r0]
 23f489a:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23f489e:	42ae      	cmp	r6, r5
 23f48a0:	d004      	beq.n	23f48ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23f48a2:	4628      	mov	r0, r5
 23f48a4:	f001 fd7d 	bl	23f63a2 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23f48a8:	3510      	adds	r5, #16
 23f48aa:	e7f8      	b.n	23f489e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23f48ac:	6820      	ldr	r0, [r4, #0]
 23f48ae:	f7ff ff53 	bl	23f4758 <free>
    AllocatorT::free(data_);
}
 23f48b2:	4620      	mov	r0, r4
 23f48b4:	bd70      	pop	{r4, r5, r6, pc}
	...

023f48b8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23f48b8:	2300      	movs	r3, #0
 23f48ba:	4802      	ldr	r0, [pc, #8]	; (23f48c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23f48bc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23f48be:	f7ff bb5b 	b.w	23f3f78 <os_mutex_recursive_create>
 23f48c2:	bf00      	nop
 23f48c4:	1007ae58 	.word	0x1007ae58

023f48c8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f48c8:	2200      	movs	r2, #0
 23f48ca:	6840      	ldr	r0, [r0, #4]
 23f48cc:	4611      	mov	r1, r2
 23f48ce:	f7ff beef 	b.w	23f46b0 <network_listening>

023f48d2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f48d2:	2200      	movs	r2, #0
 23f48d4:	6840      	ldr	r0, [r0, #4]
 23f48d6:	4611      	mov	r1, r2
 23f48d8:	f7ff bf06 	b.w	23f46e8 <network_get_listen_timeout>

023f48dc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f48dc:	2200      	movs	r2, #0
 23f48de:	6840      	ldr	r0, [r0, #4]
 23f48e0:	f7ff bef4 	b.w	23f46cc <network_set_listen_timeout>

023f48e4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f48e4:	2200      	movs	r2, #0
 23f48e6:	6840      	ldr	r0, [r0, #4]
 23f48e8:	f081 0101 	eor.w	r1, r1, #1
 23f48ec:	f7ff bed2 	b.w	23f4694 <network_listen>

023f48f0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f48f0:	2300      	movs	r3, #0
 23f48f2:	6840      	ldr	r0, [r0, #4]
 23f48f4:	461a      	mov	r2, r3
 23f48f6:	4619      	mov	r1, r3
 23f48f8:	f7ff bebe 	b.w	23f4678 <network_off>

023f48fc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f48fc:	2300      	movs	r3, #0
 23f48fe:	6840      	ldr	r0, [r0, #4]
 23f4900:	461a      	mov	r2, r3
 23f4902:	4619      	mov	r1, r3
 23f4904:	f7ff beaa 	b.w	23f465c <network_on>

023f4908 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23f4908:	2200      	movs	r2, #0
 23f490a:	6840      	ldr	r0, [r0, #4]
 23f490c:	4611      	mov	r1, r2
 23f490e:	f7ff be97 	b.w	23f4640 <network_ready>

023f4912 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f4912:	2200      	movs	r2, #0
 23f4914:	6840      	ldr	r0, [r0, #4]
 23f4916:	4611      	mov	r1, r2
 23f4918:	f7ff be76 	b.w	23f4608 <network_connecting>

023f491c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f491c:	2200      	movs	r2, #0
 23f491e:	2102      	movs	r1, #2
 23f4920:	6840      	ldr	r0, [r0, #4]
 23f4922:	f7ff be7f 	b.w	23f4624 <network_disconnect>

023f4926 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f4926:	2300      	movs	r3, #0
 23f4928:	6840      	ldr	r0, [r0, #4]
 23f492a:	461a      	mov	r2, r3
 23f492c:	f7ff be5e 	b.w	23f45ec <network_connect>

023f4930 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23f4930:	2203      	movs	r2, #3
 23f4932:	4b02      	ldr	r3, [pc, #8]	; (23f493c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23f4934:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23f4936:	4a02      	ldr	r2, [pc, #8]	; (23f4940 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23f4938:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23f493a:	4770      	bx	lr
 23f493c:	1007ae5c 	.word	0x1007ae5c
 23f4940:	023ff7c8 	.word	0x023ff7c8

023f4944 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23f4944:	4770      	bx	lr

023f4946 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23f4946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f4948:	4606      	mov	r6, r0
 23f494a:	4615      	mov	r5, r2
 23f494c:	460c      	mov	r4, r1
 23f494e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23f4950:	42bc      	cmp	r4, r7
 23f4952:	d006      	beq.n	23f4962 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23f4954:	6833      	ldr	r3, [r6, #0]
 23f4956:	4630      	mov	r0, r6
 23f4958:	689b      	ldr	r3, [r3, #8]
 23f495a:	f814 1b01 	ldrb.w	r1, [r4], #1
 23f495e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23f4960:	e7f6      	b.n	23f4950 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23f4962:	4628      	mov	r0, r5
 23f4964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f4966 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23f4966:	2200      	movs	r2, #0
 23f4968:	7c00      	ldrb	r0, [r0, #16]
 23f496a:	f7ff bb9f 	b.w	23f40ac <hal_i2c_write>

023f496e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23f496e:	2100      	movs	r1, #0
 23f4970:	7c00      	ldrb	r0, [r0, #16]
 23f4972:	f7ff bba9 	b.w	23f40c8 <hal_i2c_available>

023f4976 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23f4976:	2100      	movs	r1, #0
 23f4978:	7c00      	ldrb	r0, [r0, #16]
 23f497a:	f7ff bbb3 	b.w	23f40e4 <hal_i2c_read>

023f497e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23f497e:	2100      	movs	r1, #0
 23f4980:	7c00      	ldrb	r0, [r0, #16]
 23f4982:	f7ff bbbd 	b.w	23f4100 <hal_i2c_peek>

023f4986 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23f4986:	2100      	movs	r1, #0
 23f4988:	7c00      	ldrb	r0, [r0, #16]
 23f498a:	f7ff bbc7 	b.w	23f411c <hal_i2c_flush>

023f498e <_ZN7TwoWireD0Ev>:
 23f498e:	b510      	push	{r4, lr}
 23f4990:	4604      	mov	r4, r0
 23f4992:	2114      	movs	r1, #20
 23f4994:	f7f3 fdf9 	bl	23e858a <_ZdlPvj>
 23f4998:	4620      	mov	r0, r4
 23f499a:	bd10      	pop	{r4, pc}

023f499c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23f499c:	b538      	push	{r3, r4, r5, lr}
 23f499e:	4604      	mov	r4, r0
 23f49a0:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23f49a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f49a6:	2200      	movs	r2, #0
 23f49a8:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f49ac:	4b09      	ldr	r3, [pc, #36]	; (23f49d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23f49ae:	4608      	mov	r0, r1
  _i2c = i2c;
 23f49b0:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23f49b2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23f49b4:	4629      	mov	r1, r5
 23f49b6:	f7ff fbcd 	bl	23f4154 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23f49ba:	30bf      	adds	r0, #191	; 0xbf
 23f49bc:	d108      	bne.n	23f49d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23f49be:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23f49c0:	07db      	lsls	r3, r3, #31
 23f49c2:	d505      	bpl.n	23f49d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23f49c4:	6868      	ldr	r0, [r5, #4]
 23f49c6:	f7ff fec7 	bl	23f4758 <free>
    free(conf.tx_buffer);
 23f49ca:	68e8      	ldr	r0, [r5, #12]
 23f49cc:	f7ff fec4 	bl	23f4758 <free>
}
 23f49d0:	4620      	mov	r0, r4
 23f49d2:	bd38      	pop	{r3, r4, r5, pc}
 23f49d4:	023ff804 	.word	0x023ff804

023f49d8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23f49d8:	4770      	bx	lr

023f49da <_ZN9IPAddressD0Ev>:
 23f49da:	b510      	push	{r4, lr}
 23f49dc:	4604      	mov	r4, r0
 23f49de:	2118      	movs	r1, #24
 23f49e0:	f7f3 fdd3 	bl	23e858a <_ZdlPvj>
 23f49e4:	4620      	mov	r0, r4
 23f49e6:	bd10      	pop	{r4, pc}

023f49e8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23f49e8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23f49ea:	7d03      	ldrb	r3, [r0, #20]
{
 23f49ec:	460e      	mov	r6, r1
	if (address.v==6) {
 23f49ee:	2b06      	cmp	r3, #6
 23f49f0:	f04f 0400 	mov.w	r4, #0
{
 23f49f4:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f49f6:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23f49fa:	d012      	beq.n	23f4a22 <_ZNK9IPAddress7printToER5Print+0x3a>
 23f49fc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23f4a00:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23f4a04:	220a      	movs	r2, #10
 23f4a06:	4630      	mov	r0, r6
 23f4a08:	f001 fadf 	bl	23f5fca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23f4a0c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23f4a0e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23f4a10:	d019      	beq.n	23f4a46 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23f4a12:	2c00      	cmp	r4, #0
 23f4a14:	d0f4      	beq.n	23f4a00 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23f4a16:	212e      	movs	r1, #46	; 0x2e
 23f4a18:	4630      	mov	r0, r6
 23f4a1a:	f001 fac7 	bl	23f5fac <_ZN5Print5printEc>
 23f4a1e:	4404      	add	r4, r0
 23f4a20:	e7ee      	b.n	23f4a00 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f4a22:	232f      	movs	r3, #47	; 0x2f
 23f4a24:	466a      	mov	r2, sp
 23f4a26:	4639      	mov	r1, r7
 23f4a28:	200a      	movs	r0, #10
		buf[0] = 0;
 23f4a2a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23f4a2e:	f7ff fb9f 	bl	23f4170 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23f4a32:	4668      	mov	r0, sp
 23f4a34:	f7f3 fd80 	bl	23e8538 <strlen>
 23f4a38:	6833      	ldr	r3, [r6, #0]
 23f4a3a:	4602      	mov	r2, r0
 23f4a3c:	4669      	mov	r1, sp
 23f4a3e:	4630      	mov	r0, r6
 23f4a40:	68db      	ldr	r3, [r3, #12]
 23f4a42:	4798      	blx	r3
 23f4a44:	4604      	mov	r4, r0
    }
    return n;
}
 23f4a46:	4620      	mov	r0, r4
 23f4a48:	b00d      	add	sp, #52	; 0x34
 23f4a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

023f4a4c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23f4a4c:	b510      	push	{r4, lr}
 23f4a4e:	4604      	mov	r4, r0
 23f4a50:	4b04      	ldr	r3, [pc, #16]	; (23f4a64 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23f4a52:	2211      	movs	r2, #17
 23f4a54:	2100      	movs	r1, #0
 23f4a56:	f840 3b04 	str.w	r3, [r0], #4
 23f4a5a:	f004 f962 	bl	23f8d22 <memset>
}
 23f4a5e:	4620      	mov	r0, r4
 23f4a60:	bd10      	pop	{r4, pc}
 23f4a62:	bf00      	nop
 23f4a64:	023ff82c 	.word	0x023ff82c

023f4a68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23f4a68:	4603      	mov	r3, r0
 23f4a6a:	4a07      	ldr	r2, [pc, #28]	; (23f4a88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23f4a6c:	b510      	push	{r4, lr}
 23f4a6e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23f4a72:	f101 0210 	add.w	r2, r1, #16
 23f4a76:	f851 4b04 	ldr.w	r4, [r1], #4
 23f4a7a:	4291      	cmp	r1, r2
 23f4a7c:	f843 4b04 	str.w	r4, [r3], #4
 23f4a80:	d1f9      	bne.n	23f4a76 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23f4a82:	780a      	ldrb	r2, [r1, #0]
 23f4a84:	701a      	strb	r2, [r3, #0]
}
 23f4a86:	bd10      	pop	{r4, pc}
 23f4a88:	023ff82c 	.word	0x023ff82c

023f4a8c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23f4a8c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23f4a8e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23f4a92:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23f4a96:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23f4a9a:	2304      	movs	r3, #4
 23f4a9c:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23f4aa0:	6041      	str	r1, [r0, #4]
 23f4aa2:	7503      	strb	r3, [r0, #20]
}
 23f4aa4:	bd10      	pop	{r4, pc}
	...

023f4aa8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23f4aa8:	b507      	push	{r0, r1, r2, lr}
 23f4aaa:	4b06      	ldr	r3, [pc, #24]	; (23f4ac4 <_ZN9IPAddressC1EPKh+0x1c>)
 23f4aac:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23f4aae:	78cb      	ldrb	r3, [r1, #3]
 23f4ab0:	9300      	str	r3, [sp, #0]
 23f4ab2:	788b      	ldrb	r3, [r1, #2]
 23f4ab4:	784a      	ldrb	r2, [r1, #1]
 23f4ab6:	7809      	ldrb	r1, [r1, #0]
 23f4ab8:	f7ff ffe8 	bl	23f4a8c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23f4abc:	b003      	add	sp, #12
 23f4abe:	f85d fb04 	ldr.w	pc, [sp], #4
 23f4ac2:	bf00      	nop
 23f4ac4:	023ff82c 	.word	0x023ff82c

023f4ac8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23f4ac8:	2201      	movs	r2, #1
 23f4aca:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23f4ace:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23f4ad2:	4618      	mov	r0, r3
 23f4ad4:	2901      	cmp	r1, #1
 23f4ad6:	d108      	bne.n	23f4aea <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23f4ad8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23f4adc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23f4ae0:	3a01      	subs	r2, #1
 23f4ae2:	f103 0310 	add.w	r3, r3, #16
 23f4ae6:	d1f2      	bne.n	23f4ace <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23f4ae8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23f4aea:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23f4aec:	bf04      	itt	eq
 23f4aee:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23f4af2:	1852      	addeq	r2, r2, r1
 23f4af4:	e7f4      	b.n	23f4ae0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023f4af6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23f4af6:	b40e      	push	{r1, r2, r3}
 23f4af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f4afa:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f4afc:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23f4afe:	af00      	add	r7, sp, #0
 23f4b00:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23f4b04:	f855 2b04 	ldr.w	r2, [r5], #4
 23f4b08:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f4b0a:	462b      	mov	r3, r5
 23f4b0c:	1878      	adds	r0, r7, r1
 23f4b0e:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23f4b10:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f4b12:	f7ff fe3d 	bl	23f4790 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23f4b16:	280f      	cmp	r0, #15
 23f4b18:	687a      	ldr	r2, [r7, #4]
 23f4b1a:	d91a      	bls.n	23f4b52 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23f4b1c:	f100 0308 	add.w	r3, r0, #8
 23f4b20:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23f4b24:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23f4b26:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f4b2a:	1c41      	adds	r1, r0, #1
 23f4b2c:	462b      	mov	r3, r5
 23f4b2e:	4668      	mov	r0, sp
        va_start(args, fmt);
 23f4b30:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f4b32:	f7ff fe2d 	bl	23f4790 <vsnprintf>
        if (n > 0) {
 23f4b36:	1e02      	subs	r2, r0, #0
 23f4b38:	dd04      	ble.n	23f4b44 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23f4b3a:	6823      	ldr	r3, [r4, #0]
 23f4b3c:	4669      	mov	r1, sp
 23f4b3e:	4620      	mov	r0, r4
 23f4b40:	689b      	ldr	r3, [r3, #8]
 23f4b42:	4798      	blx	r3
 23f4b44:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23f4b46:	3720      	adds	r7, #32
 23f4b48:	46bd      	mov	sp, r7
 23f4b4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23f4b4e:	b003      	add	sp, #12
 23f4b50:	4770      	bx	lr
    } else if (n > 0) {
 23f4b52:	2800      	cmp	r0, #0
 23f4b54:	d0f7      	beq.n	23f4b46 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23f4b56:	6823      	ldr	r3, [r4, #0]
 23f4b58:	4602      	mov	r2, r0
 23f4b5a:	689b      	ldr	r3, [r3, #8]
 23f4b5c:	4620      	mov	r0, r4
 23f4b5e:	f107 0110 	add.w	r1, r7, #16
 23f4b62:	4798      	blx	r3
}
 23f4b64:	e7ef      	b.n	23f4b46 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023f4b66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f4b66:	b538      	push	{r3, r4, r5, lr}
 23f4b68:	680b      	ldr	r3, [r1, #0]
 23f4b6a:	4604      	mov	r4, r0
 23f4b6c:	6003      	str	r3, [r0, #0]
 23f4b6e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23f4b70:	6843      	ldr	r3, [r0, #4]
 23f4b72:	429d      	cmp	r5, r3
 23f4b74:	d008      	beq.n	23f4b88 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23f4b76:	b115      	cbz	r5, 23f4b7e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23f4b78:	686b      	ldr	r3, [r5, #4]
 23f4b7a:	3301      	adds	r3, #1
 23f4b7c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23f4b7e:	6860      	ldr	r0, [r4, #4]
 23f4b80:	b108      	cbz	r0, 23f4b86 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23f4b82:	f7ff fe72 	bl	23f486a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23f4b86:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23f4b88:	bd38      	pop	{r3, r4, r5, pc}

023f4b8a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23f4b8a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f4b8c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23f4b8e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f4b92:	2201      	movs	r2, #1
 23f4b94:	689b      	ldr	r3, [r3, #8]
 23f4b96:	f10d 0107 	add.w	r1, sp, #7
 23f4b9a:	4798      	blx	r3
}
 23f4b9c:	b003      	add	sp, #12
 23f4b9e:	f85d fb04 	ldr.w	pc, [sp], #4

023f4ba2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f4ba2:	460b      	mov	r3, r1
 23f4ba4:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23f4ba6:	2200      	movs	r2, #0
 23f4ba8:	b510      	push	{r4, lr}
 23f4baa:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23f4bac:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23f4bb0:	6083      	str	r3, [r0, #8]
    if (t) {
 23f4bb2:	b90b      	cbnz	r3, 23f4bb8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23f4bb4:	4620      	mov	r0, r4
 23f4bb6:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23f4bb8:	f7ff ffd5 	bl	23f4b66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23f4bbc:	e7fa      	b.n	23f4bb4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023f4bbe <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23f4bbe:	6883      	ldr	r3, [r0, #8]
 23f4bc0:	b1eb      	cbz	r3, 23f4bfe <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23f4bc2:	781a      	ldrb	r2, [r3, #0]
 23f4bc4:	2a03      	cmp	r2, #3
 23f4bc6:	d81a      	bhi.n	23f4bfe <_ZNK5spark9JSONValue4typeEv+0x40>
 23f4bc8:	e8df f002 	tbb	[pc, r2]
 23f4bcc:	1b021704 	.word	0x1b021704
 23f4bd0:	2005      	movs	r0, #5
 23f4bd2:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23f4bd4:	6802      	ldr	r2, [r0, #0]
 23f4bd6:	685b      	ldr	r3, [r3, #4]
 23f4bd8:	6852      	ldr	r2, [r2, #4]
 23f4bda:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23f4bdc:	282d      	cmp	r0, #45	; 0x2d
 23f4bde:	d012      	beq.n	23f4c06 <_ZNK5spark9JSONValue4typeEv+0x48>
 23f4be0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23f4be4:	2b09      	cmp	r3, #9
 23f4be6:	d90e      	bls.n	23f4c06 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23f4be8:	2874      	cmp	r0, #116	; 0x74
 23f4bea:	d00e      	beq.n	23f4c0a <_ZNK5spark9JSONValue4typeEv+0x4c>
 23f4bec:	2866      	cmp	r0, #102	; 0x66
 23f4bee:	d00c      	beq.n	23f4c0a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23f4bf0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23f4bf4:	4258      	negs	r0, r3
 23f4bf6:	4158      	adcs	r0, r3
 23f4bf8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23f4bfa:	2006      	movs	r0, #6
 23f4bfc:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23f4bfe:	2000      	movs	r0, #0
 23f4c00:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23f4c02:	2004      	movs	r0, #4
 23f4c04:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23f4c06:	2003      	movs	r0, #3
 23f4c08:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23f4c0a:	2002      	movs	r0, #2
}
 23f4c0c:	4770      	bx	lr

023f4c0e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23f4c0e:	b510      	push	{r4, lr}
 23f4c10:	4604      	mov	r4, r0
    switch (type()) {
 23f4c12:	f7ff ffd4 	bl	23f4bbe <_ZNK5spark9JSONValue4typeEv>
 23f4c16:	2802      	cmp	r0, #2
 23f4c18:	d00e      	beq.n	23f4c38 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23f4c1a:	1ec3      	subs	r3, r0, #3
 23f4c1c:	b2db      	uxtb	r3, r3
 23f4c1e:	2b01      	cmp	r3, #1
 23f4c20:	d814      	bhi.n	23f4c4c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23f4c22:	6822      	ldr	r2, [r4, #0]
 23f4c24:	68a3      	ldr	r3, [r4, #8]
 23f4c26:	6850      	ldr	r0, [r2, #4]
 23f4c28:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23f4c2a:	220a      	movs	r2, #10
}
 23f4c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23f4c30:	2100      	movs	r1, #0
 23f4c32:	4418      	add	r0, r3
 23f4c34:	f004 bfb0 	b.w	23f9b98 <strtol>
        const char* const s = d_->json + t_->start;
 23f4c38:	6822      	ldr	r2, [r4, #0]
 23f4c3a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23f4c3c:	6852      	ldr	r2, [r2, #4]
 23f4c3e:	685b      	ldr	r3, [r3, #4]
 23f4c40:	5cd0      	ldrb	r0, [r2, r3]
 23f4c42:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23f4c46:	4258      	negs	r0, r3
 23f4c48:	4158      	adcs	r0, r3
}
 23f4c4a:	bd10      	pop	{r4, pc}
    switch (type()) {
 23f4c4c:	2000      	movs	r0, #0
 23f4c4e:	e7fc      	b.n	23f4c4a <_ZNK5spark9JSONValue5toIntEv+0x3c>

023f4c50 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f4c50:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23f4c52:	2300      	movs	r3, #0
 23f4c54:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23f4c56:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23f4c5a:	480e      	ldr	r0, [pc, #56]	; (23f4c94 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23f4c5c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23f4c60:	b1a9      	cbz	r1, 23f4c8e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23f4c62:	780b      	ldrb	r3, [r1, #0]
 23f4c64:	2b03      	cmp	r3, #3
 23f4c66:	d006      	beq.n	23f4c76 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23f4c68:	b98b      	cbnz	r3, 23f4c8e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23f4c6a:	6813      	ldr	r3, [r2, #0]
 23f4c6c:	6858      	ldr	r0, [r3, #4]
 23f4c6e:	684b      	ldr	r3, [r1, #4]
 23f4c70:	5cc3      	ldrb	r3, [r0, r3]
 23f4c72:	2b6e      	cmp	r3, #110	; 0x6e
 23f4c74:	d007      	beq.n	23f4c86 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23f4c76:	6813      	ldr	r3, [r2, #0]
 23f4c78:	684d      	ldr	r5, [r1, #4]
 23f4c7a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23f4c7c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23f4c7e:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23f4c80:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23f4c82:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23f4c84:	60e3      	str	r3, [r4, #12]
 23f4c86:	4611      	mov	r1, r2
 23f4c88:	4620      	mov	r0, r4
 23f4c8a:	f7ff ff6c 	bl	23f4b66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23f4c8e:	4620      	mov	r0, r4
 23f4c90:	bd38      	pop	{r3, r4, r5, pc}
 23f4c92:	bf00      	nop
 23f4c94:	023fb03b 	.word	0x023fb03b

023f4c98 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23f4c98:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23f4c9a:	2500      	movs	r5, #0
 23f4c9c:	460b      	mov	r3, r1
 23f4c9e:	4604      	mov	r4, r0
 23f4ca0:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23f4ca2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23f4ca6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23f4caa:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23f4cae:	b14b      	cbz	r3, 23f4cc4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23f4cb0:	781a      	ldrb	r2, [r3, #0]
 23f4cb2:	2a01      	cmp	r2, #1
 23f4cb4:	d106      	bne.n	23f4cc4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23f4cb6:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23f4cba:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23f4cbc:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23f4cbe:	6143      	str	r3, [r0, #20]
 23f4cc0:	f7ff ff51 	bl	23f4b66 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23f4cc4:	4620      	mov	r0, r4
 23f4cc6:	bd38      	pop	{r3, r4, r5, pc}

023f4cc8 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23f4cc8:	b510      	push	{r4, lr}
    if (!n_) {
 23f4cca:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23f4ccc:	4604      	mov	r4, r0
    if (!n_) {
 23f4cce:	b163      	cbz	r3, 23f4cea <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23f4cd0:	6880      	ldr	r0, [r0, #8]
    --n_;
 23f4cd2:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23f4cd4:	60e0      	str	r0, [r4, #12]
    ++t_;
 23f4cd6:	3010      	adds	r0, #16
 23f4cd8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23f4cda:	6120      	str	r0, [r4, #16]
    --n_;
 23f4cdc:	6163      	str	r3, [r4, #20]
    if (n_) {
 23f4cde:	b113      	cbz	r3, 23f4ce6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23f4ce0:	f7ff fef2 	bl	23f4ac8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23f4ce4:	60a0      	str	r0, [r4, #8]
    return true;
 23f4ce6:	2001      	movs	r0, #1
 23f4ce8:	e000      	b.n	23f4cec <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23f4cea:	4618      	mov	r0, r3
}
 23f4cec:	bd10      	pop	{r4, pc}

023f4cee <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f4cee:	b510      	push	{r4, lr}
    write('}');
 23f4cf0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23f4cf2:	4604      	mov	r4, r0
    write('}');
 23f4cf4:	f7ff ff49 	bl	23f4b8a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23f4cf8:	2301      	movs	r3, #1
}
 23f4cfa:	4620      	mov	r0, r4
    state_ = NEXT;
 23f4cfc:	7123      	strb	r3, [r4, #4]
}
 23f4cfe:	bd10      	pop	{r4, pc}

023f4d00 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23f4d00:	b508      	push	{r3, lr}
    switch (state_) {
 23f4d02:	7903      	ldrb	r3, [r0, #4]
 23f4d04:	2b01      	cmp	r3, #1
 23f4d06:	d002      	beq.n	23f4d0e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23f4d08:	2b02      	cmp	r3, #2
 23f4d0a:	d004      	beq.n	23f4d16 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23f4d0c:	bd08      	pop	{r3, pc}
        write(',');
 23f4d0e:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23f4d10:	f7ff ff3b 	bl	23f4b8a <_ZN5spark10JSONWriter5writeEc>
}
 23f4d14:	e7fa      	b.n	23f4d0c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23f4d16:	213a      	movs	r1, #58	; 0x3a
 23f4d18:	e7fa      	b.n	23f4d10 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023f4d1a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23f4d1a:	b510      	push	{r4, lr}
 23f4d1c:	4604      	mov	r4, r0
    writeSeparator();
 23f4d1e:	f7ff ffef 	bl	23f4d00 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23f4d22:	4620      	mov	r0, r4
 23f4d24:	217b      	movs	r1, #123	; 0x7b
 23f4d26:	f7ff ff30 	bl	23f4b8a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23f4d2a:	2300      	movs	r3, #0
}
 23f4d2c:	4620      	mov	r0, r4
    state_ = BEGIN;
 23f4d2e:	7123      	strb	r3, [r4, #4]
}
 23f4d30:	bd10      	pop	{r4, pc}
	...

023f4d34 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23f4d34:	b513      	push	{r0, r1, r4, lr}
 23f4d36:	4604      	mov	r4, r0
 23f4d38:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f4d3a:	f7ff ffe1 	bl	23f4d00 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23f4d3e:	6823      	ldr	r3, [r4, #0]
 23f4d40:	4620      	mov	r0, r4
 23f4d42:	68db      	ldr	r3, [r3, #12]
 23f4d44:	9a01      	ldr	r2, [sp, #4]
 23f4d46:	4903      	ldr	r1, [pc, #12]	; (23f4d54 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23f4d48:	4798      	blx	r3
    state_ = NEXT;
 23f4d4a:	2301      	movs	r3, #1
}
 23f4d4c:	4620      	mov	r0, r4
    state_ = NEXT;
 23f4d4e:	7123      	strb	r3, [r4, #4]
}
 23f4d50:	b002      	add	sp, #8
 23f4d52:	bd10      	pop	{r4, pc}
 23f4d54:	023ff838 	.word	0x023ff838

023f4d58 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23f4d58:	b513      	push	{r0, r1, r4, lr}
 23f4d5a:	4604      	mov	r4, r0
 23f4d5c:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23f4d5e:	f7ff ffcf 	bl	23f4d00 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23f4d62:	6823      	ldr	r3, [r4, #0]
 23f4d64:	4620      	mov	r0, r4
 23f4d66:	68db      	ldr	r3, [r3, #12]
 23f4d68:	9a01      	ldr	r2, [sp, #4]
 23f4d6a:	4903      	ldr	r1, [pc, #12]	; (23f4d78 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23f4d6c:	4798      	blx	r3
    state_ = NEXT;
 23f4d6e:	2301      	movs	r3, #1
}
 23f4d70:	4620      	mov	r0, r4
    state_ = NEXT;
 23f4d72:	7123      	strb	r3, [r4, #4]
}
 23f4d74:	b002      	add	sp, #8
 23f4d76:	bd10      	pop	{r4, pc}
 23f4d78:	023ff83b 	.word	0x023ff83b

023f4d7c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f4d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f4d80:	460d      	mov	r5, r1
 23f4d82:	4690      	mov	r8, r2
    write('"');
 23f4d84:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23f4d86:	4604      	mov	r4, r0
 23f4d88:	462f      	mov	r7, r5
    write('"');
 23f4d8a:	f7ff fefe 	bl	23f4b8a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23f4d8e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23f4e34 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23f4d92:	44a8      	add	r8, r5
    while (s != end) {
 23f4d94:	4547      	cmp	r7, r8
 23f4d96:	46ba      	mov	sl, r7
 23f4d98:	d03d      	beq.n	23f4e16 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23f4d9a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23f4d9e:	2e22      	cmp	r6, #34	; 0x22
 23f4da0:	d006      	beq.n	23f4db0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f4da2:	2e5c      	cmp	r6, #92	; 0x5c
 23f4da4:	d004      	beq.n	23f4db0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23f4da6:	4630      	mov	r0, r6
 23f4da8:	f003 ff8c 	bl	23f8cc4 <isprint>
 23f4dac:	2800      	cmp	r0, #0
 23f4dae:	d1f1      	bne.n	23f4d94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23f4db0:	6823      	ldr	r3, [r4, #0]
 23f4db2:	4629      	mov	r1, r5
 23f4db4:	4620      	mov	r0, r4
 23f4db6:	689b      	ldr	r3, [r3, #8]
 23f4db8:	ebaa 0205 	sub.w	r2, sl, r5
 23f4dbc:	4798      	blx	r3
            write('\\');
 23f4dbe:	215c      	movs	r1, #92	; 0x5c
 23f4dc0:	4620      	mov	r0, r4
 23f4dc2:	f7ff fee2 	bl	23f4b8a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23f4dc6:	2e0d      	cmp	r6, #13
 23f4dc8:	d80a      	bhi.n	23f4de0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23f4dca:	2e07      	cmp	r6, #7
 23f4dcc:	d91c      	bls.n	23f4e08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f4dce:	f1a6 0308 	sub.w	r3, r6, #8
 23f4dd2:	2b05      	cmp	r3, #5
 23f4dd4:	d818      	bhi.n	23f4e08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23f4dd6:	e8df f003 	tbb	[pc, r3]
 23f4dda:	0f0d      	.short	0x0f0d
 23f4ddc:	15131711 	.word	0x15131711
 23f4de0:	2e22      	cmp	r6, #34	; 0x22
 23f4de2:	d001      	beq.n	23f4de8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23f4de4:	2e5c      	cmp	r6, #92	; 0x5c
 23f4de6:	d10f      	bne.n	23f4e08 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23f4de8:	4631      	mov	r1, r6
                write('b');
 23f4dea:	4620      	mov	r0, r4
 23f4dec:	f7ff fecd 	bl	23f4b8a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23f4df0:	463d      	mov	r5, r7
    while (s != end) {
 23f4df2:	e7cf      	b.n	23f4d94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23f4df4:	2162      	movs	r1, #98	; 0x62
 23f4df6:	e7f8      	b.n	23f4dea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23f4df8:	2174      	movs	r1, #116	; 0x74
 23f4dfa:	e7f6      	b.n	23f4dea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23f4dfc:	216e      	movs	r1, #110	; 0x6e
 23f4dfe:	e7f4      	b.n	23f4dea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23f4e00:	2166      	movs	r1, #102	; 0x66
 23f4e02:	e7f2      	b.n	23f4dea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23f4e04:	2172      	movs	r1, #114	; 0x72
 23f4e06:	e7f0      	b.n	23f4dea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23f4e08:	6823      	ldr	r3, [r4, #0]
 23f4e0a:	4632      	mov	r2, r6
 23f4e0c:	4649      	mov	r1, r9
 23f4e0e:	4620      	mov	r0, r4
 23f4e10:	68db      	ldr	r3, [r3, #12]
 23f4e12:	4798      	blx	r3
                break;
 23f4e14:	e7ec      	b.n	23f4df0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23f4e16:	42bd      	cmp	r5, r7
 23f4e18:	d005      	beq.n	23f4e26 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23f4e1a:	6823      	ldr	r3, [r4, #0]
 23f4e1c:	4629      	mov	r1, r5
 23f4e1e:	4620      	mov	r0, r4
 23f4e20:	689b      	ldr	r3, [r3, #8]
 23f4e22:	1b7a      	subs	r2, r7, r5
 23f4e24:	4798      	blx	r3
    }
    write('"');
 23f4e26:	2122      	movs	r1, #34	; 0x22
 23f4e28:	4620      	mov	r0, r4
 23f4e2a:	f7ff feae 	bl	23f4b8a <_ZN5spark10JSONWriter5writeEc>
}
 23f4e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f4e32:	bf00      	nop
 23f4e34:	023ff83e 	.word	0x023ff83e

023f4e38 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23f4e38:	b513      	push	{r0, r1, r4, lr}
 23f4e3a:	4604      	mov	r4, r0
 23f4e3c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f4e40:	f7ff ff5e 	bl	23f4d00 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23f4e44:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f4e48:	4620      	mov	r0, r4
 23f4e4a:	f7ff ff97 	bl	23f4d7c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23f4e4e:	2302      	movs	r3, #2
}
 23f4e50:	4620      	mov	r0, r4
    state_ = VALUE;
 23f4e52:	7123      	strb	r3, [r4, #4]
}
 23f4e54:	b002      	add	sp, #8
 23f4e56:	bd10      	pop	{r4, pc}

023f4e58 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23f4e58:	b513      	push	{r0, r1, r4, lr}
 23f4e5a:	4604      	mov	r4, r0
 23f4e5c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23f4e60:	f7ff ff4e 	bl	23f4d00 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23f4e64:	e9dd 2100 	ldrd	r2, r1, [sp]
 23f4e68:	4620      	mov	r0, r4
 23f4e6a:	f7ff ff87 	bl	23f4d7c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23f4e6e:	2301      	movs	r3, #1
}
 23f4e70:	4620      	mov	r0, r4
    state_ = NEXT;
 23f4e72:	7123      	strb	r3, [r4, #4]
}
 23f4e74:	b002      	add	sp, #8
 23f4e76:	bd10      	pop	{r4, pc}

023f4e78 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 23f4e78:	6880      	ldr	r0, [r0, #8]
 23f4e7a:	6803      	ldr	r3, [r0, #0]
 23f4e7c:	68db      	ldr	r3, [r3, #12]
 23f4e7e:	4718      	bx	r3

023f4e80 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23f4e80:	4770      	bx	lr

023f4e82 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23f4e82:	4608      	mov	r0, r1
 23f4e84:	b111      	cbz	r1, 23f4e8c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23f4e86:	680b      	ldr	r3, [r1, #0]
 23f4e88:	685b      	ldr	r3, [r3, #4]
 23f4e8a:	4718      	bx	r3
}
 23f4e8c:	4770      	bx	lr

023f4e8e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23f4e8e:	4770      	bx	lr

023f4e90 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23f4e90:	4770      	bx	lr

023f4e92 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23f4e92:	4770      	bx	lr

023f4e94 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23f4e94:	4770      	bx	lr

023f4e96 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23f4e96:	b538      	push	{r3, r4, r5, lr}
 23f4e98:	4604      	mov	r4, r0
 23f4e9a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23f4e9c:	6800      	ldr	r0, [r0, #0]
 23f4e9e:	212e      	movs	r1, #46	; 0x2e
 23f4ea0:	f003 ff91 	bl	23f8dc6 <strchrnul>
    size = s - category;
 23f4ea4:	6823      	ldr	r3, [r4, #0]
 23f4ea6:	1ac3      	subs	r3, r0, r3
 23f4ea8:	602b      	str	r3, [r5, #0]
    if (size) {
 23f4eaa:	b123      	cbz	r3, 23f4eb6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23f4eac:	7803      	ldrb	r3, [r0, #0]
 23f4eae:	b103      	cbz	r3, 23f4eb2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23f4eb0:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23f4eb2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f4eb4:	6020      	str	r0, [r4, #0]
}
 23f4eb6:	4618      	mov	r0, r3
 23f4eb8:	bd38      	pop	{r3, r4, r5, pc}

023f4eba <_ZN5spark16JSONStreamWriterD0Ev>:
 23f4eba:	b510      	push	{r4, lr}
 23f4ebc:	4604      	mov	r4, r0
 23f4ebe:	210c      	movs	r1, #12
 23f4ec0:	f7f3 fb63 	bl	23e858a <_ZdlPvj>
 23f4ec4:	4620      	mov	r0, r4
 23f4ec6:	bd10      	pop	{r4, pc}

023f4ec8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23f4ec8:	b510      	push	{r4, lr}
 23f4eca:	4604      	mov	r4, r0
 23f4ecc:	2104      	movs	r1, #4
 23f4ece:	f7f3 fb5c 	bl	23e858a <_ZdlPvj>
 23f4ed2:	4620      	mov	r0, r4
 23f4ed4:	bd10      	pop	{r4, pc}

023f4ed6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23f4ed6:	b510      	push	{r4, lr}
 23f4ed8:	4604      	mov	r4, r0
 23f4eda:	2104      	movs	r1, #4
 23f4edc:	f7f3 fb55 	bl	23e858a <_ZdlPvj>
 23f4ee0:	4620      	mov	r0, r4
 23f4ee2:	bd10      	pop	{r4, pc}

023f4ee4 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23f4ee4:	f7ff b864 	b.w	23f3fb0 <os_mutex_recursive_lock>

023f4ee8 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23f4ee8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23f4eea:	f7f3 fb1b 	bl	23e8524 <strcmp>
}
 23f4eee:	fab0 f080 	clz	r0, r0
 23f4ef2:	0940      	lsrs	r0, r0, #5
 23f4ef4:	bd08      	pop	{r3, pc}

023f4ef6 <__tcf_1>:
 23f4ef6:	4770      	bx	lr

023f4ef8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23f4ef8:	b510      	push	{r4, lr}
 23f4efa:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23f4efc:	f001 fbc0 	bl	23f6680 <_Z16_fetch_usbserialv>
 23f4f00:	4284      	cmp	r4, r0
 23f4f02:	d105      	bne.n	23f4f10 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23f4f04:	f001 fbbc 	bl	23f6680 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23f4f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23f4f0c:	f001 bbaa 	b.w	23f6664 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23f4f10:	f001 fd86 	bl	23f6a20 <_Z22__fetch_global_Serial1v>
 23f4f14:	4284      	cmp	r4, r0
 23f4f16:	d105      	bne.n	23f4f24 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23f4f18:	f001 fd82 	bl	23f6a20 <_Z22__fetch_global_Serial1v>
}
 23f4f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23f4f20:	f001 bb43 	b.w	23f65aa <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23f4f24:	b12c      	cbz	r4, 23f4f32 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23f4f26:	6823      	ldr	r3, [r4, #0]
 23f4f28:	4620      	mov	r0, r4
}
 23f4f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f4f2e:	685b      	ldr	r3, [r3, #4]
 23f4f30:	4718      	bx	r3
 23f4f32:	bd10      	pop	{r4, pc}

023f4f34 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f4f34:	680b      	ldr	r3, [r1, #0]
 23f4f36:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23f4f38:	684b      	ldr	r3, [r1, #4]
 23f4f3a:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23f4f3c:	b113      	cbz	r3, 23f4f44 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23f4f3e:	685a      	ldr	r2, [r3, #4]
 23f4f40:	3201      	adds	r2, #1
 23f4f42:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23f4f44:	4770      	bx	lr

023f4f46 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23f4f46:	b513      	push	{r0, r1, r4, lr}
 23f4f48:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23f4f4a:	4608      	mov	r0, r1
 23f4f4c:	9101      	str	r1, [sp, #4]
 23f4f4e:	f7f3 faf3 	bl	23e8538 <strlen>
 23f4f52:	4602      	mov	r2, r0
 23f4f54:	4620      	mov	r0, r4
 23f4f56:	9901      	ldr	r1, [sp, #4]
}
 23f4f58:	b002      	add	sp, #8
 23f4f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23f4f5e:	f7ff bf7b 	b.w	23f4e58 <_ZN5spark10JSONWriter5valueEPKcj>

023f4f62 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23f4f62:	b513      	push	{r0, r1, r4, lr}
 23f4f64:	4604      	mov	r4, r0
    write(str, strlen(str));
 23f4f66:	4608      	mov	r0, r1
 23f4f68:	9101      	str	r1, [sp, #4]
 23f4f6a:	f7f3 fae5 	bl	23e8538 <strlen>
 23f4f6e:	4602      	mov	r2, r0
 23f4f70:	4620      	mov	r0, r4
 23f4f72:	6823      	ldr	r3, [r4, #0]
 23f4f74:	9901      	ldr	r1, [sp, #4]
 23f4f76:	68db      	ldr	r3, [r3, #12]
}
 23f4f78:	b002      	add	sp, #8
 23f4f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23f4f7e:	4718      	bx	r3

023f4f80 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23f4f80:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23f4f82:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23f4f84:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23f4f88:	2201      	movs	r2, #1
 23f4f8a:	68db      	ldr	r3, [r3, #12]
 23f4f8c:	f10d 0107 	add.w	r1, sp, #7
 23f4f90:	4798      	blx	r3
}
 23f4f92:	b003      	add	sp, #12
 23f4f94:	f85d fb04 	ldr.w	pc, [sp], #4

023f4f98 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23f4f98:	680a      	ldr	r2, [r1, #0]
 23f4f9a:	b510      	push	{r4, lr}
 23f4f9c:	6002      	str	r2, [r0, #0]
 23f4f9e:	684a      	ldr	r2, [r1, #4]
 23f4fa0:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23f4fa2:	2200      	movs	r2, #0
 23f4fa4:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23f4fa8:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f4faa:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f4fac:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f4fae:	6084      	str	r4, [r0, #8]
 23f4fb0:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f4fb2:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f4fb4:	60c4      	str	r4, [r0, #12]
 23f4fb6:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23f4fb8:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f4fba:	6104      	str	r4, [r0, #16]
 23f4fbc:	bd10      	pop	{r4, pc}
	...

023f4fc0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23f4fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23f4fc4:	f04f 0a14 	mov.w	sl, #20
 23f4fc8:	e9d0 8400 	ldrd	r8, r4, [r0]
 23f4fcc:	4617      	mov	r7, r2
 23f4fce:	4645      	mov	r5, r8
 23f4fd0:	fb0a f404 	mul.w	r4, sl, r4
 23f4fd4:	9300      	str	r3, [sp, #0]
 23f4fd6:	4b17      	ldr	r3, [pc, #92]	; (23f5034 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23f4fd8:	10a4      	asrs	r4, r4, #2
 23f4fda:	435c      	muls	r4, r3
      while (__len > 0)
 23f4fdc:	2c00      	cmp	r4, #0
 23f4fde:	dd21      	ble.n	23f5024 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	  _DistanceType __half = __len >> 1;
 23f4fe0:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23f4fe2:	fb0a f006 	mul.w	r0, sl, r6
 23f4fe6:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23f4fea:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23f4fee:	463a      	mov	r2, r7
 23f4ff0:	455f      	cmp	r7, fp
 23f4ff2:	bf28      	it	cs
 23f4ff4:	465a      	movcs	r2, fp
 23f4ff6:	5828      	ldr	r0, [r5, r0]
 23f4ff8:	9101      	str	r1, [sp, #4]
 23f4ffa:	f003 fef6 	bl	23f8dea <strncmp>
                if (cmp == 0) {
 23f4ffe:	2800      	cmp	r0, #0
 23f5000:	f04f 0301 	mov.w	r3, #1
 23f5004:	9901      	ldr	r1, [sp, #4]
 23f5006:	d10b      	bne.n	23f5020 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23f5008:	455f      	cmp	r7, fp
 23f500a:	d103      	bne.n	23f5014 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23f500c:	9a00      	ldr	r2, [sp, #0]
 23f500e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23f5010:	4634      	mov	r4, r6
 23f5012:	e7e3      	b.n	23f4fdc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  if (__comp(__middle, __val))
 23f5014:	d9fc      	bls.n	23f5010 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	      __len = __len - __half - 1;
 23f5016:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23f5018:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23f501c:	3e01      	subs	r6, #1
 23f501e:	e7f7      	b.n	23f5010 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23f5020:	dbf9      	blt.n	23f5016 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23f5022:	e7f5      	b.n	23f5010 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23f5024:	eba5 0508 	sub.w	r5, r5, r8
}
 23f5028:	4802      	ldr	r0, [pc, #8]	; (23f5034 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23f502a:	10ad      	asrs	r5, r5, #2
 23f502c:	4368      	muls	r0, r5
 23f502e:	b003      	add	sp, #12
 23f5030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f5034:	cccccccd 	.word	0xcccccccd

023f5038 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23f5038:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23f503a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23f503c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23f503e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23f5040:	b303      	cbz	r3, 23f5084 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23f5042:	b1f9      	cbz	r1, 23f5084 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23f5044:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23f5046:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23f504a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23f504c:	a903      	add	r1, sp, #12
 23f504e:	a801      	add	r0, sp, #4
 23f5050:	f7ff ff21 	bl	23f4e96 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23f5054:	4601      	mov	r1, r0
 23f5056:	b1a8      	cbz	r0, 23f5084 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23f5058:	f10d 030b 	add.w	r3, sp, #11
 23f505c:	4620      	mov	r0, r4
 23f505e:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23f5060:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23f5064:	f7ff ffac 	bl	23f4fc0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23f5068:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23f506c:	b153      	cbz	r3, 23f5084 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23f506e:	6823      	ldr	r3, [r4, #0]
 23f5070:	2414      	movs	r4, #20
 23f5072:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23f5076:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23f507a:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23f507c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23f507e:	bfa8      	it	ge
 23f5080:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23f5082:	e7e3      	b.n	23f504c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23f5084:	4628      	mov	r0, r5
 23f5086:	b004      	add	sp, #16
 23f5088:	bd70      	pop	{r4, r5, r6, pc}

023f508a <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23f508a:	b40e      	push	{r1, r2, r3}
 23f508c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f508e:	b08c      	sub	sp, #48	; 0x30
 23f5090:	af00      	add	r7, sp, #0
 23f5092:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23f5096:	f855 2b04 	ldr.w	r2, [r5], #4
 23f509a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f509c:	462b      	mov	r3, r5
 23f509e:	2120      	movs	r1, #32
 23f50a0:	f107 0010 	add.w	r0, r7, #16
 23f50a4:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23f50a6:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f50a8:	f7ff fb72 	bl	23f4790 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23f50ac:	281f      	cmp	r0, #31
 23f50ae:	687a      	ldr	r2, [r7, #4]
 23f50b0:	d91a      	bls.n	23f50e8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23f50b2:	f100 0308 	add.w	r3, r0, #8
 23f50b6:	f023 0307 	bic.w	r3, r3, #7
        }
 23f50ba:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23f50bc:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f50c0:	1c41      	adds	r1, r0, #1
 23f50c2:	462b      	mov	r3, r5
 23f50c4:	4668      	mov	r0, sp
        va_start(args, fmt);
 23f50c6:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23f50c8:	f7ff fb62 	bl	23f4790 <vsnprintf>
        if (n > 0) {
 23f50cc:	1e02      	subs	r2, r0, #0
 23f50ce:	dd04      	ble.n	23f50da <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23f50d0:	6823      	ldr	r3, [r4, #0]
 23f50d2:	4669      	mov	r1, sp
 23f50d4:	4620      	mov	r0, r4
 23f50d6:	68db      	ldr	r3, [r3, #12]
 23f50d8:	4798      	blx	r3
 23f50da:	46b5      	mov	sp, r6
}
 23f50dc:	3730      	adds	r7, #48	; 0x30
 23f50de:	46bd      	mov	sp, r7
 23f50e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23f50e4:	b003      	add	sp, #12
 23f50e6:	4770      	bx	lr
    } else if (n > 0) {
 23f50e8:	2800      	cmp	r0, #0
 23f50ea:	d0f7      	beq.n	23f50dc <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23f50ec:	6823      	ldr	r3, [r4, #0]
 23f50ee:	4602      	mov	r2, r0
 23f50f0:	68db      	ldr	r3, [r3, #12]
 23f50f2:	4620      	mov	r0, r4
 23f50f4:	f107 0110 	add.w	r1, r7, #16
 23f50f8:	4798      	blx	r3
}
 23f50fa:	e7ef      	b.n	23f50dc <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023f50fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23f50fc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23f50fe:	4c08      	ldr	r4, [pc, #32]	; (23f5120 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23f5100:	e8d4 3f8f 	ldab	r3, [r4]
 23f5104:	07db      	lsls	r3, r3, #31
 23f5106:	d409      	bmi.n	23f511c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23f5108:	4620      	mov	r0, r4
 23f510a:	f7f3 fa4d 	bl	23e85a8 <__cxa_guard_acquire>
 23f510e:	b128      	cbz	r0, 23f511c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23f5110:	4620      	mov	r0, r4
 23f5112:	f7f3 fa4e 	bl	23e85b2 <__cxa_guard_release>
 23f5116:	4803      	ldr	r0, [pc, #12]	; (23f5124 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23f5118:	f003 fdc2 	bl	23f8ca0 <atexit>
}
 23f511c:	4802      	ldr	r0, [pc, #8]	; (23f5128 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23f511e:	bd10      	pop	{r4, pc}
 23f5120:	1007ae68 	.word	0x1007ae68
 23f5124:	023f4e8f 	.word	0x023f4e8f
 23f5128:	1007a4ac 	.word	0x1007a4ac

023f512c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23f512c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23f512e:	4c08      	ldr	r4, [pc, #32]	; (23f5150 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23f5130:	e8d4 3f8f 	ldab	r3, [r4]
 23f5134:	07db      	lsls	r3, r3, #31
 23f5136:	d409      	bmi.n	23f514c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23f5138:	4620      	mov	r0, r4
 23f513a:	f7f3 fa35 	bl	23e85a8 <__cxa_guard_acquire>
 23f513e:	b128      	cbz	r0, 23f514c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23f5140:	4620      	mov	r0, r4
 23f5142:	f7f3 fa36 	bl	23e85b2 <__cxa_guard_release>
 23f5146:	4803      	ldr	r0, [pc, #12]	; (23f5154 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23f5148:	f003 fdaa 	bl	23f8ca0 <atexit>
    return &factory;
}
 23f514c:	4802      	ldr	r0, [pc, #8]	; (23f5158 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23f514e:	bd10      	pop	{r4, pc}
 23f5150:	1007ae6c 	.word	0x1007ae6c
 23f5154:	023f4ef7 	.word	0x023f4ef7
 23f5158:	1007a4b0 	.word	0x1007a4b0

023f515c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23f515c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23f515e:	2500      	movs	r5, #0
 23f5160:	4604      	mov	r4, r0
 23f5162:	e9c0 5500 	strd	r5, r5, [r0]
 23f5166:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23f516a:	6085      	str	r5, [r0, #8]
 23f516c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23f516e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23f5172:	f7fe ff01 	bl	23f3f78 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23f5176:	f7ff ffc1 	bl	23f50fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23f517a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23f517c:	f7ff ffd6 	bl	23f512c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23f5180:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23f5182:	6220      	str	r0, [r4, #32]
}
 23f5184:	4620      	mov	r0, r4
 23f5186:	bd38      	pop	{r3, r4, r5, pc}

023f5188 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23f5188:	b510      	push	{r4, lr}
    static LogManager mgr;
 23f518a:	4c0a      	ldr	r4, [pc, #40]	; (23f51b4 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23f518c:	e8d4 3f8f 	ldab	r3, [r4]
 23f5190:	07db      	lsls	r3, r3, #31
 23f5192:	d40c      	bmi.n	23f51ae <_ZN5spark10LogManager8instanceEv+0x26>
 23f5194:	4620      	mov	r0, r4
 23f5196:	f7f3 fa07 	bl	23e85a8 <__cxa_guard_acquire>
 23f519a:	b140      	cbz	r0, 23f51ae <_ZN5spark10LogManager8instanceEv+0x26>
 23f519c:	4806      	ldr	r0, [pc, #24]	; (23f51b8 <_ZN5spark10LogManager8instanceEv+0x30>)
 23f519e:	f7ff ffdd 	bl	23f515c <_ZN5spark10LogManagerC1Ev>
 23f51a2:	4620      	mov	r0, r4
 23f51a4:	f7f3 fa05 	bl	23e85b2 <__cxa_guard_release>
 23f51a8:	4804      	ldr	r0, [pc, #16]	; (23f51bc <_ZN5spark10LogManager8instanceEv+0x34>)
 23f51aa:	f003 fd79 	bl	23f8ca0 <atexit>
    return &mgr;
}
 23f51ae:	4802      	ldr	r0, [pc, #8]	; (23f51b8 <_ZN5spark10LogManager8instanceEv+0x30>)
 23f51b0:	bd10      	pop	{r4, pc}
 23f51b2:	bf00      	nop
 23f51b4:	1007ae64 	.word	0x1007ae64
 23f51b8:	1007ae74 	.word	0x1007ae74
 23f51bc:	023f56d9 	.word	0x023f56d9

023f51c0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23f51c0:	2300      	movs	r3, #0
 23f51c2:	4a02      	ldr	r2, [pc, #8]	; (23f51cc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23f51c4:	4902      	ldr	r1, [pc, #8]	; (23f51d0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23f51c6:	4803      	ldr	r0, [pc, #12]	; (23f51d4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23f51c8:	f7ff b9a0 	b.w	23f450c <log_set_callbacks>
 23f51cc:	023f54c1 	.word	0x023f54c1
 23f51d0:	023f544d 	.word	0x023f544d
 23f51d4:	023f53cd 	.word	0x023f53cd

023f51d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23f51d8:	2300      	movs	r3, #0
 23f51da:	461a      	mov	r2, r3
 23f51dc:	4619      	mov	r1, r3
 23f51de:	4618      	mov	r0, r3
 23f51e0:	f7ff b994 	b.w	23f450c <log_set_callbacks>

023f51e4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23f51e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f51e6:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23f51e8:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23f51ea:	4668      	mov	r0, sp
 23f51ec:	f7ff fea2 	bl	23f4f34 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23f51f0:	466a      	mov	r2, sp
 23f51f2:	4629      	mov	r1, r5
 23f51f4:	4620      	mov	r0, r4
 23f51f6:	f7ff fd4f 	bl	23f4c98 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23f51fa:	a801      	add	r0, sp, #4
 23f51fc:	f7ff fb1f 	bl	23f483e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f5200:	4620      	mov	r0, r4
 23f5202:	b003      	add	sp, #12
 23f5204:	bd30      	pop	{r4, r5, pc}

023f5206 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23f5206:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f5208:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23f520a:	68cd      	ldr	r5, [r1, #12]
 23f520c:	4668      	mov	r0, sp
 23f520e:	f7ff fe91 	bl	23f4f34 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23f5212:	466a      	mov	r2, sp
 23f5214:	4629      	mov	r1, r5
 23f5216:	4620      	mov	r0, r4
 23f5218:	f7ff fd1a 	bl	23f4c50 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23f521c:	a801      	add	r0, sp, #4
 23f521e:	f7ff fb0e 	bl	23f483e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f5222:	4620      	mov	r0, r4
 23f5224:	b003      	add	sp, #12
 23f5226:	bd30      	pop	{r4, r5, pc}

023f5228 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23f5228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f522a:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23f522c:	690d      	ldr	r5, [r1, #16]
 23f522e:	4668      	mov	r0, sp
 23f5230:	f7ff fe80 	bl	23f4f34 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23f5234:	466a      	mov	r2, sp
 23f5236:	4629      	mov	r1, r5
 23f5238:	4620      	mov	r0, r4
 23f523a:	f7ff fcb2 	bl	23f4ba2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23f523e:	a801      	add	r0, sp, #4
 23f5240:	f7ff fafd 	bl	23f483e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f5244:	4620      	mov	r0, r4
 23f5246:	b003      	add	sp, #12
 23f5248:	bd30      	pop	{r4, r5, pc}
	...

023f524c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23f524c:	b570      	push	{r4, r5, r6, lr}
 23f524e:	b08a      	sub	sp, #40	; 0x28
 23f5250:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23f5252:	4601      	mov	r1, r0
 23f5254:	a804      	add	r0, sp, #16
 23f5256:	f7ff ffc5 	bl	23f51e4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23f525a:	4e14      	ldr	r6, [pc, #80]	; (23f52ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23f525c:	a804      	add	r0, sp, #16
 23f525e:	f7ff fd33 	bl	23f4cc8 <_ZN5spark18JSONObjectIterator4nextEv>
 23f5262:	b1e8      	cbz	r0, 23f52a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23f5264:	4668      	mov	r0, sp
 23f5266:	a904      	add	r1, sp, #16
 23f5268:	f7ff ffcd 	bl	23f5206 <_ZNK5spark18JSONObjectIterator4nameEv>
 23f526c:	4631      	mov	r1, r6
 23f526e:	9802      	ldr	r0, [sp, #8]
 23f5270:	f7ff fe3a 	bl	23f4ee8 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23f5274:	4604      	mov	r4, r0
 23f5276:	b110      	cbz	r0, 23f527e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23f5278:	1e2c      	subs	r4, r5, #0
 23f527a:	bf18      	it	ne
 23f527c:	2401      	movne	r4, #1
 23f527e:	a801      	add	r0, sp, #4
 23f5280:	f7ff fadd 	bl	23f483e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f5284:	2c00      	cmp	r4, #0
 23f5286:	d0e9      	beq.n	23f525c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23f5288:	4668      	mov	r0, sp
 23f528a:	a904      	add	r1, sp, #16
 23f528c:	f7ff ffcc 	bl	23f5228 <_ZNK5spark18JSONObjectIterator5valueEv>
 23f5290:	4668      	mov	r0, sp
 23f5292:	f7ff fcbc 	bl	23f4c0e <_ZNK5spark9JSONValue5toIntEv>
 23f5296:	6028      	str	r0, [r5, #0]
 23f5298:	a801      	add	r0, sp, #4
 23f529a:	f7ff fad0 	bl	23f483e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23f529e:	e7dd      	b.n	23f525c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23f52a0:	a805      	add	r0, sp, #20
 23f52a2:	f7ff facc 	bl	23f483e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23f52a6:	b00a      	add	sp, #40	; 0x28
 23f52a8:	bd70      	pop	{r4, r5, r6, pc}
 23f52aa:	bf00      	nop
 23f52ac:	023ff844 	.word	0x023ff844

023f52b0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23f52b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f52b2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23f52b4:	4913      	ldr	r1, [pc, #76]	; (23f5304 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23f52b6:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23f52b8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23f52ba:	f7f3 f933 	bl	23e8524 <strcmp>
 23f52be:	b950      	cbnz	r0, 23f52d6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23f52c0:	f001 f9de 	bl	23f6680 <_Z16_fetch_usbserialv>
 23f52c4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23f52c8:	f001 f9c8 	bl	23f665c <_ZN9USBSerial5beginEl>
}
 23f52cc:	b003      	add	sp, #12
 23f52ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23f52d2:	f001 b9d5 	b.w	23f6680 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23f52d6:	4620      	mov	r0, r4
 23f52d8:	490b      	ldr	r1, [pc, #44]	; (23f5308 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23f52da:	f7f3 f923 	bl	23e8524 <strcmp>
 23f52de:	b978      	cbnz	r0, 23f5300 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23f52e0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23f52e4:	a901      	add	r1, sp, #4
 23f52e6:	4628      	mov	r0, r5
        int baud = 9600;
 23f52e8:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23f52ea:	f7ff ffaf 	bl	23f524c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23f52ee:	f001 fb97 	bl	23f6a20 <_Z22__fetch_global_Serial1v>
 23f52f2:	9901      	ldr	r1, [sp, #4]
 23f52f4:	f001 f956 	bl	23f65a4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23f52f8:	f001 fb92 	bl	23f6a20 <_Z22__fetch_global_Serial1v>
}
 23f52fc:	b003      	add	sp, #12
 23f52fe:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23f5300:	2000      	movs	r0, #0
 23f5302:	e7fb      	b.n	23f52fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23f5304:	023ff849 	.word	0x023ff849
 23f5308:	023ff850 	.word	0x023ff850

023f530c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f530c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23f530e:	2614      	movs	r6, #20
 23f5310:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23f5314:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23f5316:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f531a:	42ae      	cmp	r6, r5
 23f531c:	d005      	beq.n	23f532a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23f531e:	f105 0008 	add.w	r0, r5, #8
 23f5322:	f7ff fff3 	bl	23f530c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23f5326:	3514      	adds	r5, #20
 23f5328:	e7f7      	b.n	23f531a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23f532a:	6820      	ldr	r0, [r4, #0]
 23f532c:	f7ff fa14 	bl	23f4758 <free>
}
 23f5330:	4620      	mov	r0, r4
 23f5332:	bd70      	pop	{r4, r5, r6, pc}

023f5334 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23f5334:	b510      	push	{r4, lr}
 23f5336:	4604      	mov	r4, r0
 23f5338:	300c      	adds	r0, #12
 23f533a:	f7ff ffe7 	bl	23f530c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23f533e:	4620      	mov	r0, r4
 23f5340:	f7ff faa7 	bl	23f4892 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23f5344:	4620      	mov	r0, r4
 23f5346:	bd10      	pop	{r4, pc}

023f5348 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23f5348:	b510      	push	{r4, lr}
 23f534a:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23f534c:	4b03      	ldr	r3, [pc, #12]	; (23f535c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23f534e:	f840 3b04 	str.w	r3, [r0], #4
 23f5352:	f7ff ffef 	bl	23f5334 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23f5356:	4620      	mov	r0, r4
 23f5358:	bd10      	pop	{r4, pc}
 23f535a:	bf00      	nop
 23f535c:	023fbaf0 	.word	0x023fbaf0

023f5360 <_ZN5spark16StreamLogHandlerD0Ev>:
 23f5360:	b510      	push	{r4, lr}
 23f5362:	4604      	mov	r4, r0
 23f5364:	f7ff fff0 	bl	23f5348 <_ZN5spark16StreamLogHandlerD1Ev>
 23f5368:	4620      	mov	r0, r4
 23f536a:	2124      	movs	r1, #36	; 0x24
 23f536c:	f7f3 f90d 	bl	23e858a <_ZdlPvj>
 23f5370:	4620      	mov	r0, r4
 23f5372:	bd10      	pop	{r4, pc}

023f5374 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23f5374:	b510      	push	{r4, lr}
 23f5376:	4604      	mov	r4, r0
 23f5378:	4b02      	ldr	r3, [pc, #8]	; (23f5384 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23f537a:	6003      	str	r3, [r0, #0]
 23f537c:	f7ff ffe4 	bl	23f5348 <_ZN5spark16StreamLogHandlerD1Ev>
 23f5380:	4620      	mov	r0, r4
 23f5382:	bd10      	pop	{r4, pc}
 23f5384:	023ff8e8 	.word	0x023ff8e8

023f5388 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23f5388:	b510      	push	{r4, lr}
 23f538a:	4604      	mov	r4, r0
 23f538c:	f7ff fff2 	bl	23f5374 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23f5390:	4620      	mov	r0, r4
 23f5392:	2124      	movs	r1, #36	; 0x24
 23f5394:	f7f3 f8f9 	bl	23e858a <_ZdlPvj>
 23f5398:	4620      	mov	r0, r4
 23f539a:	bd10      	pop	{r4, pc}

023f539c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
 23f539c:	2200      	movs	r2, #0
 23f539e:	e9c0 2200 	strd	r2, r2, [r0]
 23f53a2:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23f53a4:	b510      	push	{r4, lr}
 23f53a6:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23f53a8:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f53aa:	6004      	str	r4, [r0, #0]
 23f53ac:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23f53ae:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f53b0:	6044      	str	r4, [r0, #4]
 23f53b2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f53b4:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23f53b6:	6084      	str	r4, [r0, #8]
}
 23f53b8:	bd10      	pop	{r4, pc}

023f53ba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23f53ba:	b510      	push	{r4, lr}
 23f53bc:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23f53be:	6803      	ldr	r3, [r0, #0]
 23f53c0:	6818      	ldr	r0, [r3, #0]
 23f53c2:	f7fe fe03 	bl	23f3fcc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23f53c6:	4620      	mov	r0, r4
 23f53c8:	bd10      	pop	{r4, pc}
	...

023f53cc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23f53cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f53d0:	b087      	sub	sp, #28
 23f53d2:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23f53d4:	4b1c      	ldr	r3, [pc, #112]	; (23f5448 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23f53d6:	4680      	mov	r8, r0
 23f53d8:	685b      	ldr	r3, [r3, #4]
 23f53da:	4689      	mov	r9, r1
 23f53dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23f53e0:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23f53e2:	b96b      	cbnz	r3, 23f5400 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23f53e4:	f7ff fed0 	bl	23f5188 <_ZN5spark10LogManager8instanceEv>
 23f53e8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23f53ea:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23f53ee:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f53f0:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23f53f2:	f7ff fd77 	bl	23f4ee4 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23f53f6:	7b23      	ldrb	r3, [r4, #12]
 23f53f8:	b12b      	cbz	r3, 23f5406 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23f53fa:	a805      	add	r0, sp, #20
 23f53fc:	f7ff ffdd 	bl	23f53ba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23f5400:	b007      	add	sp, #28
 23f5402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23f5406:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23f5408:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23f540c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23f540e:	e9d4 5300 	ldrd	r5, r3, [r4]
 23f5412:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23f5416:	45aa      	cmp	sl, r5
 23f5418:	d012      	beq.n	23f5440 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23f541a:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23f541e:	4631      	mov	r1, r6
 23f5420:	1d38      	adds	r0, r7, #4
 23f5422:	f7ff fe09 	bl	23f5038 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23f5426:	4581      	cmp	r9, r0
 23f5428:	d3f5      	bcc.n	23f5416 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23f542a:	9a03      	ldr	r2, [sp, #12]
 23f542c:	683b      	ldr	r3, [r7, #0]
 23f542e:	9200      	str	r2, [sp, #0]
 23f5430:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23f5434:	464a      	mov	r2, r9
 23f5436:	4633      	mov	r3, r6
 23f5438:	4641      	mov	r1, r8
 23f543a:	4638      	mov	r0, r7
 23f543c:	47d8      	blx	fp
 23f543e:	e7ea      	b.n	23f5416 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23f5440:	2300      	movs	r3, #0
 23f5442:	7323      	strb	r3, [r4, #12]
 23f5444:	e7d9      	b.n	23f53fa <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23f5446:	bf00      	nop
 23f5448:	e000ed00 	.word	0xe000ed00

023f544c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23f544c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f5450:	469b      	mov	fp, r3
 23f5452:	4b1a      	ldr	r3, [pc, #104]	; (23f54bc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23f5454:	4680      	mov	r8, r0
 23f5456:	685b      	ldr	r3, [r3, #4]
 23f5458:	4689      	mov	r9, r1
 23f545a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23f545e:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23f5460:	b96b      	cbnz	r3, 23f547e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23f5462:	f7ff fe91 	bl	23f5188 <_ZN5spark10LogManager8instanceEv>
 23f5466:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23f5468:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f546c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f546e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23f5470:	f7ff fd38 	bl	23f4ee4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23f5474:	7b23      	ldrb	r3, [r4, #12]
 23f5476:	b12b      	cbz	r3, 23f5484 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23f5478:	a801      	add	r0, sp, #4
 23f547a:	f7ff ff9e 	bl	23f53ba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23f547e:	b003      	add	sp, #12
 23f5480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23f5484:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23f5486:	b2f6      	uxtb	r6, r6
 23f5488:	7323      	strb	r3, [r4, #12]
 23f548a:	e9d4 5300 	ldrd	r5, r3, [r4]
 23f548e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23f5492:	4555      	cmp	r5, sl
 23f5494:	d00e      	beq.n	23f54b4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23f5496:	f855 7b04 	ldr.w	r7, [r5], #4
 23f549a:	4659      	mov	r1, fp
 23f549c:	1d38      	adds	r0, r7, #4
 23f549e:	f7ff fdcb 	bl	23f5038 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23f54a2:	4286      	cmp	r6, r0
 23f54a4:	d3f5      	bcc.n	23f5492 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23f54a6:	683b      	ldr	r3, [r7, #0]
 23f54a8:	464a      	mov	r2, r9
 23f54aa:	4641      	mov	r1, r8
 23f54ac:	4638      	mov	r0, r7
 23f54ae:	68db      	ldr	r3, [r3, #12]
 23f54b0:	4798      	blx	r3
 23f54b2:	e7ee      	b.n	23f5492 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23f54b4:	2300      	movs	r3, #0
 23f54b6:	7323      	strb	r3, [r4, #12]
 23f54b8:	e7de      	b.n	23f5478 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23f54ba:	bf00      	nop
 23f54bc:	e000ed00 	.word	0xe000ed00

023f54c0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23f54c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23f54c4:	4b16      	ldr	r3, [pc, #88]	; (23f5520 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23f54c6:	4605      	mov	r5, r0
 23f54c8:	685b      	ldr	r3, [r3, #4]
 23f54ca:	460f      	mov	r7, r1
 23f54cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23f54d0:	bb1b      	cbnz	r3, 23f551a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23f54d2:	f7ff fe59 	bl	23f5188 <_ZN5spark10LogManager8instanceEv>
 23f54d6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23f54d8:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f54dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f54de:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23f54e0:	f7ff fd00 	bl	23f4ee4 <_ZN14RecursiveMutex4lockEv.isra.0>
 23f54e4:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23f54e8:	2446      	movs	r4, #70	; 0x46
 23f54ea:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23f54ee:	45b0      	cmp	r8, r6
 23f54f0:	d109      	bne.n	23f5506 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23f54f2:	a801      	add	r0, sp, #4
 23f54f4:	f7ff ff61 	bl	23f53ba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23f54f8:	42a5      	cmp	r5, r4
 23f54fa:	bfb4      	ite	lt
 23f54fc:	2000      	movlt	r0, #0
 23f54fe:	2001      	movge	r0, #1
}
 23f5500:	b002      	add	sp, #8
 23f5502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23f5506:	f856 0b04 	ldr.w	r0, [r6], #4
 23f550a:	4639      	mov	r1, r7
 23f550c:	3004      	adds	r0, #4
 23f550e:	f7ff fd93 	bl	23f5038 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23f5512:	4284      	cmp	r4, r0
 23f5514:	bfa8      	it	ge
 23f5516:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23f5518:	e7e9      	b.n	23f54ee <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23f551a:	2000      	movs	r0, #0
 23f551c:	e7f0      	b.n	23f5500 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23f551e:	bf00      	nop
 23f5520:	e000ed00 	.word	0xe000ed00

023f5524 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23f5524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f5526:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23f552a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23f552c:	4604      	mov	r4, r0
 23f552e:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f5530:	db0d      	blt.n	23f554e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23f5532:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23f5534:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23f5536:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23f5538:	dd04      	ble.n	23f5544 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23f553a:	00b9      	lsls	r1, r7, #2
 23f553c:	f7ff f91a 	bl	23f4774 <realloc>
            if (!d) {
 23f5540:	b918      	cbnz	r0, 23f554a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23f5542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23f5544:	f7ff f908 	bl	23f4758 <free>
        T* d = nullptr;
 23f5548:	2000      	movs	r0, #0
        data_ = d;
 23f554a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23f554c:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23f554e:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23f5550:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23f5552:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23f5556:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f5558:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23f555c:	1d08      	adds	r0, r1, #4
 23f555e:	f003 fbc6 	bl	23f8cee <memmove>
    new(p) T(std::move(value));
 23f5562:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23f5566:	6863      	ldr	r3, [r4, #4]
    return true;
 23f5568:	2001      	movs	r0, #1
    ++size_;
 23f556a:	3301      	adds	r3, #1
 23f556c:	6063      	str	r3, [r4, #4]
    return true;
 23f556e:	e7e8      	b.n	23f5542 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023f5570 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23f5570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f5572:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23f5574:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f5578:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f557a:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23f557c:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23f557e:	f7ff fcb1 	bl	23f4ee4 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23f5582:	e9d4 3200 	ldrd	r3, r2, [r4]
 23f5586:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23f558a:	4293      	cmp	r3, r2
 23f558c:	4619      	mov	r1, r3
 23f558e:	d00a      	beq.n	23f55a6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23f5590:	6809      	ldr	r1, [r1, #0]
 23f5592:	3304      	adds	r3, #4
 23f5594:	42a9      	cmp	r1, r5
 23f5596:	d1f8      	bne.n	23f558a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23f5598:	a801      	add	r0, sp, #4
 23f559a:	f7ff ff0e 	bl	23f53ba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23f559e:	2500      	movs	r5, #0
}
 23f55a0:	4628      	mov	r0, r5
 23f55a2:	b003      	add	sp, #12
 23f55a4:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23f55a6:	4629      	mov	r1, r5
 23f55a8:	4620      	mov	r0, r4
 23f55aa:	f7ff ffbb 	bl	23f5524 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23f55ae:	4605      	mov	r5, r0
 23f55b0:	2800      	cmp	r0, #0
 23f55b2:	d0f1      	beq.n	23f5598 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23f55b4:	6863      	ldr	r3, [r4, #4]
 23f55b6:	2b01      	cmp	r3, #1
 23f55b8:	d101      	bne.n	23f55be <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23f55ba:	f7ff fe01 	bl	23f51c0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23f55be:	a801      	add	r0, sp, #4
 23f55c0:	f7ff fefb 	bl	23f53ba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23f55c4:	e7ec      	b.n	23f55a0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023f55c6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23f55c6:	460b      	mov	r3, r1
 23f55c8:	b570      	push	{r4, r5, r6, lr}
 23f55ca:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23f55cc:	e9d0 0200 	ldrd	r0, r2, [r0]
 23f55d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23f55d4:	4282      	cmp	r2, r0
 23f55d6:	d00f      	beq.n	23f55f8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23f55d8:	4601      	mov	r1, r0
            if (*p == value) {
 23f55da:	681d      	ldr	r5, [r3, #0]
 23f55dc:	f851 6b04 	ldr.w	r6, [r1], #4
 23f55e0:	42ae      	cmp	r6, r5
 23f55e2:	d107      	bne.n	23f55f4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23f55e4:	1a52      	subs	r2, r2, r1
 23f55e6:	f003 fb82 	bl	23f8cee <memmove>
    return true;
 23f55ea:	2001      	movs	r0, #1
    --size_;
 23f55ec:	6863      	ldr	r3, [r4, #4]
 23f55ee:	3b01      	subs	r3, #1
 23f55f0:	6063      	str	r3, [r4, #4]
}
 23f55f2:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23f55f4:	4608      	mov	r0, r1
 23f55f6:	e7ed      	b.n	23f55d4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23f55f8:	2000      	movs	r0, #0
 23f55fa:	e7fa      	b.n	23f55f2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023f55fc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23f55fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f55fe:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23f5600:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23f5604:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23f5606:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f5608:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23f560a:	f7ff fc6b 	bl	23f4ee4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23f560e:	4620      	mov	r0, r4
 23f5610:	a901      	add	r1, sp, #4
 23f5612:	f7ff ffd8 	bl	23f55c6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23f5616:	b118      	cbz	r0, 23f5620 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23f5618:	6863      	ldr	r3, [r4, #4]
 23f561a:	b90b      	cbnz	r3, 23f5620 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23f561c:	f7ff fddc 	bl	23f51d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23f5620:	a803      	add	r0, sp, #12
 23f5622:	f7ff feca 	bl	23f53ba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23f5626:	b004      	add	sp, #16
 23f5628:	bd10      	pop	{r4, pc}

023f562a <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23f562a:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23f562c:	b570      	push	{r4, r5, r6, lr}
 23f562e:	4604      	mov	r4, r0
 23f5630:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23f5634:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23f5638:	42ae      	cmp	r6, r5
 23f563a:	d015      	beq.n	23f5668 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23f563c:	4620      	mov	r0, r4
 23f563e:	f105 0110 	add.w	r1, r5, #16
 23f5642:	f7ff ffc0 	bl	23f55c6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23f5646:	6863      	ldr	r3, [r4, #4]
 23f5648:	b90b      	cbnz	r3, 23f564e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23f564a:	f7ff fdc5 	bl	23f51d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23f564e:	69e0      	ldr	r0, [r4, #28]
 23f5650:	6929      	ldr	r1, [r5, #16]
 23f5652:	6803      	ldr	r3, [r0, #0]
 23f5654:	68db      	ldr	r3, [r3, #12]
 23f5656:	4798      	blx	r3
        if (h.stream) {
 23f5658:	6969      	ldr	r1, [r5, #20]
 23f565a:	b119      	cbz	r1, 23f5664 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23f565c:	6a20      	ldr	r0, [r4, #32]
 23f565e:	6803      	ldr	r3, [r0, #0]
 23f5660:	68db      	ldr	r3, [r3, #12]
 23f5662:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23f5664:	3518      	adds	r5, #24
 23f5666:	e7e7      	b.n	23f5638 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23f5668:	2618      	movs	r6, #24
 23f566a:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23f566e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f5672:	42ae      	cmp	r6, r5
 23f5674:	d004      	beq.n	23f5680 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23f5676:	4628      	mov	r0, r5
 23f5678:	f000 fe93 	bl	23f63a2 <_ZN6StringD1Ev>
 23f567c:	3518      	adds	r5, #24
 23f567e:	e7f8      	b.n	23f5672 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23f5680:	2300      	movs	r3, #0
 23f5682:	6163      	str	r3, [r4, #20]
}
 23f5684:	bd70      	pop	{r4, r5, r6, pc}

023f5686 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23f5686:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23f5688:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23f568a:	f7ff fda5 	bl	23f51d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23f568e:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23f5692:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23f5694:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23f5696:	f7ff fc25 	bl	23f4ee4 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23f569a:	4620      	mov	r0, r4
 23f569c:	f7ff ffc5 	bl	23f562a <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23f56a0:	a801      	add	r0, sp, #4
 23f56a2:	f7ff fe8a 	bl	23f53ba <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23f56a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23f56a8:	b108      	cbz	r0, 23f56ae <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23f56aa:	f7fe fc73 	bl	23f3f94 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23f56ae:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23f56b2:	2618      	movs	r6, #24
 23f56b4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23f56b8:	42ae      	cmp	r6, r5
 23f56ba:	d004      	beq.n	23f56c6 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23f56bc:	4628      	mov	r0, r5
 23f56be:	f000 fe70 	bl	23f63a2 <_ZN6StringD1Ev>
 23f56c2:	3518      	adds	r5, #24
 23f56c4:	e7f8      	b.n	23f56b8 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23f56c6:	6920      	ldr	r0, [r4, #16]
 23f56c8:	f7ff f846 	bl	23f4758 <free>
 23f56cc:	6820      	ldr	r0, [r4, #0]
 23f56ce:	f7ff f843 	bl	23f4758 <free>
}
 23f56d2:	4620      	mov	r0, r4
 23f56d4:	b002      	add	sp, #8
 23f56d6:	bd70      	pop	{r4, r5, r6, pc}

023f56d8 <__tcf_2>:
    static LogManager mgr;
 23f56d8:	4801      	ldr	r0, [pc, #4]	; (23f56e0 <__tcf_2+0x8>)
 23f56da:	f7ff bfd4 	b.w	23f5686 <_ZN5spark10LogManagerD1Ev>
 23f56de:	bf00      	nop
 23f56e0:	1007ae74 	.word	0x1007ae74

023f56e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23f56e4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f56e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f56e8:	4604      	mov	r4, r0
 23f56ea:	460d      	mov	r5, r1
 23f56ec:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f56ee:	d915      	bls.n	23f571c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23f56f0:	4290      	cmp	r0, r2
 23f56f2:	d214      	bcs.n	23f571e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23f56f4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23f56f8:	1a75      	subs	r5, r6, r1
 23f56fa:	f1a1 0714 	sub.w	r7, r1, #20
 23f56fe:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f5700:	42b7      	cmp	r7, r6
 23f5702:	d01a      	beq.n	23f573a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23f5704:	b11c      	cbz	r4, 23f570e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23f5706:	4631      	mov	r1, r6
 23f5708:	4620      	mov	r0, r4
 23f570a:	f7ff fc45 	bl	23f4f98 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23f570e:	f106 0008 	add.w	r0, r6, #8
 23f5712:	f7ff fdfb 	bl	23f530c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23f5716:	3e14      	subs	r6, #20
 23f5718:	3c14      	subs	r4, #20
 23f571a:	e7f1      	b.n	23f5700 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23f571c:	d00d      	beq.n	23f573a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23f571e:	42b5      	cmp	r5, r6
 23f5720:	d00b      	beq.n	23f573a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23f5722:	b11c      	cbz	r4, 23f572c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23f5724:	4629      	mov	r1, r5
 23f5726:	4620      	mov	r0, r4
 23f5728:	f7ff fc36 	bl	23f4f98 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23f572c:	f105 0008 	add.w	r0, r5, #8
 23f5730:	f7ff fdec 	bl	23f530c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23f5734:	3514      	adds	r5, #20
 23f5736:	3414      	adds	r4, #20
 23f5738:	e7f1      	b.n	23f571e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23f573a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f573c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23f573c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23f573e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f5740:	4604      	mov	r4, r0
 23f5742:	460d      	mov	r5, r1
 23f5744:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23f5746:	d914      	bls.n	23f5772 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23f5748:	4290      	cmp	r0, r2
 23f574a:	d213      	bcs.n	23f5774 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23f574c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23f5750:	1a75      	subs	r5, r6, r1
 23f5752:	f1a1 0710 	sub.w	r7, r1, #16
 23f5756:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23f5758:	42b7      	cmp	r7, r6
 23f575a:	d018      	beq.n	23f578e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23f575c:	b11c      	cbz	r4, 23f5766 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23f575e:	4631      	mov	r1, r6
 23f5760:	4620      	mov	r0, r4
 23f5762:	f000 fe87 	bl	23f6474 <_ZN6StringC1EOS_>
                end->~T();
 23f5766:	4630      	mov	r0, r6
 23f5768:	f000 fe1b 	bl	23f63a2 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23f576c:	3e10      	subs	r6, #16
 23f576e:	3c10      	subs	r4, #16
 23f5770:	e7f2      	b.n	23f5758 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23f5772:	d00c      	beq.n	23f578e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23f5774:	42b5      	cmp	r5, r6
 23f5776:	d00a      	beq.n	23f578e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23f5778:	b11c      	cbz	r4, 23f5782 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23f577a:	4629      	mov	r1, r5
 23f577c:	4620      	mov	r0, r4
 23f577e:	f000 fe79 	bl	23f6474 <_ZN6StringC1EOS_>
                p->~T();
 23f5782:	4628      	mov	r0, r5
 23f5784:	f000 fe0d 	bl	23f63a2 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23f5788:	3510      	adds	r5, #16
 23f578a:	3410      	adds	r4, #16
 23f578c:	e7f2      	b.n	23f5774 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23f578e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f5790 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23f5790:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23f5792:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23f5794:	4605      	mov	r5, r0
        if (n > 0) {
 23f5796:	dd11      	ble.n	23f57bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23f5798:	0130      	lsls	r0, r6, #4
 23f579a:	f7fe ffcf 	bl	23f473c <malloc>
            if (!d) {
 23f579e:	4604      	mov	r4, r0
 23f57a0:	b158      	cbz	r0, 23f57ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23f57a2:	e9d5 1200 	ldrd	r1, r2, [r5]
 23f57a6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23f57aa:	f7ff ffc7 	bl	23f573c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23f57ae:	6828      	ldr	r0, [r5, #0]
 23f57b0:	f7fe ffd2 	bl	23f4758 <free>
        return true;
 23f57b4:	2001      	movs	r0, #1
        data_ = d;
 23f57b6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23f57b8:	60ae      	str	r6, [r5, #8]
    }
 23f57ba:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23f57bc:	2400      	movs	r4, #0
 23f57be:	e7f6      	b.n	23f57ae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023f57c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23f57c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f57c4:	4690      	mov	r8, r2
        capacity_(0) {
 23f57c6:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23f57c8:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23f57ca:	b095      	sub	sp, #84	; 0x54
 23f57cc:	9103      	str	r1, [sp, #12]
    return size_;
 23f57ce:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23f57d2:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23f57d4:	4299      	cmp	r1, r3
        capacity_(0) {
 23f57d6:	e9c0 3300 	strd	r3, r3, [r0]
 23f57da:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23f57de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23f57e2:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23f57e6:	7602      	strb	r2, [r0, #24]
 23f57e8:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23f57ea:	dc23      	bgt.n	23f5834 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23f57ec:	e9d8 5700 	ldrd	r5, r7, [r8]
 23f57f0:	2314      	movs	r3, #20
 23f57f2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23f57f6:	42af      	cmp	r7, r5
 23f57f8:	d03b      	beq.n	23f5872 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23f57fa:	4629      	mov	r1, r5
 23f57fc:	a80b      	add	r0, sp, #44	; 0x2c
 23f57fe:	f000 fe39 	bl	23f6474 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23f5802:	a90b      	add	r1, sp, #44	; 0x2c
 23f5804:	a80f      	add	r0, sp, #60	; 0x3c
 23f5806:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23f5808:	f000 fe34 	bl	23f6474 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f580c:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23f5810:	4299      	cmp	r1, r3
 23f5812:	da1b      	bge.n	23f584c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23f5814:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23f5816:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23f5818:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23f581c:	4631      	mov	r1, r6
 23f581e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23f5822:	f106 0010 	add.w	r0, r6, #16
 23f5826:	f7ff ff89 	bl	23f573c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23f582a:	b9ee      	cbnz	r6, 23f5868 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23f582c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f582e:	3301      	adds	r3, #1
 23f5830:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23f5832:	e011      	b.n	23f5858 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23f5834:	a808      	add	r0, sp, #32
 23f5836:	f7ff ffab 	bl	23f5790 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23f583a:	2800      	cmp	r0, #0
 23f583c:	d1d6      	bne.n	23f57ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23f583e:	a808      	add	r0, sp, #32
 23f5840:	f7ff f827 	bl	23f4892 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23f5844:	4620      	mov	r0, r4
 23f5846:	b015      	add	sp, #84	; 0x54
 23f5848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f584c:	3101      	adds	r1, #1
 23f584e:	a808      	add	r0, sp, #32
 23f5850:	f7ff ff9e 	bl	23f5790 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23f5854:	2800      	cmp	r0, #0
 23f5856:	d1dd      	bne.n	23f5814 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23f5858:	a80f      	add	r0, sp, #60	; 0x3c
 23f585a:	f000 fda2 	bl	23f63a2 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23f585e:	a80b      	add	r0, sp, #44	; 0x2c
 23f5860:	f000 fd9f 	bl	23f63a2 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23f5864:	3514      	adds	r5, #20
 23f5866:	e7c6      	b.n	23f57f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23f5868:	4630      	mov	r0, r6
 23f586a:	a90f      	add	r1, sp, #60	; 0x3c
 23f586c:	f000 fe02 	bl	23f6474 <_ZN6StringC1EOS_>
 23f5870:	e7dc      	b.n	23f582c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23f5872:	2600      	movs	r6, #0
 23f5874:	f04f 0914 	mov.w	r9, #20
 23f5878:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23f587c:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23f587e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23f5882:	429e      	cmp	r6, r3
 23f5884:	da7c      	bge.n	23f5980 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
 23f5886:	0133      	lsls	r3, r6, #4
 23f5888:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23f588a:	9306      	str	r3, [sp, #24]
        if (!category) {
 23f588c:	b90b      	cbnz	r3, 23f5892 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23f588e:	3601      	adds	r6, #1
 23f5890:	e7f5      	b.n	23f587e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23f5892:	2300      	movs	r3, #0
 23f5894:	9307      	str	r3, [sp, #28]
 23f5896:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23f589a:	ad0b      	add	r5, sp, #44	; 0x2c
 23f589c:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23f589e:	a907      	add	r1, sp, #28
 23f58a0:	a806      	add	r0, sp, #24
 23f58a2:	f7ff faf8 	bl	23f4e96 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23f58a6:	4682      	mov	sl, r0
 23f58a8:	2800      	cmp	r0, #0
 23f58aa:	d0f0      	beq.n	23f588e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23f58ac:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23f58b0:	4601      	mov	r1, r0
            bool found = false;
 23f58b2:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23f58b6:	4628      	mov	r0, r5
 23f58b8:	9a07      	ldr	r2, [sp, #28]
 23f58ba:	f10d 0317 	add.w	r3, sp, #23
 23f58be:	f7ff fb7f 	bl	23f4fc0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f58c2:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23f58c6:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f58c8:	2f00      	cmp	r7, #0
 23f58ca:	d14a      	bne.n	23f5962 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23f58cc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23f58d0:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23f58d4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23f58d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23f58dc:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23f58e0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23f58e4:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23f58e6:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23f58ea:	4293      	cmp	r3, r2
 23f58ec:	db17      	blt.n	23f591e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23f58ee:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23f58f2:	f1ba 0f00 	cmp.w	sl, #0
 23f58f6:	dd30      	ble.n	23f595a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23f58f8:	fb09 f00a 	mul.w	r0, r9, sl
 23f58fc:	f7fe ff1e 	bl	23f473c <malloc>
            if (!d) {
 23f5900:	4683      	mov	fp, r0
 23f5902:	b360      	cbz	r0, 23f595e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23f5904:	e9d5 1200 	ldrd	r1, r2, [r5]
 23f5908:	fb09 1202 	mla	r2, r9, r2, r1
 23f590c:	f7ff feea 	bl	23f56e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23f5910:	6828      	ldr	r0, [r5, #0]
 23f5912:	f7fe ff21 	bl	23f4758 <free>
        data_ = d;
 23f5916:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23f591a:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23f591e:	682b      	ldr	r3, [r5, #0]
 23f5920:	9a01      	ldr	r2, [sp, #4]
 23f5922:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23f5926:	686a      	ldr	r2, [r5, #4]
 23f5928:	4651      	mov	r1, sl
 23f592a:	fb09 3202 	mla	r2, r9, r2, r3
 23f592e:	f10a 0014 	add.w	r0, sl, #20
 23f5932:	f7ff fed7 	bl	23f56e4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23f5936:	f1ba 0f00 	cmp.w	sl, #0
 23f593a:	d003      	beq.n	23f5944 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23f593c:	4650      	mov	r0, sl
 23f593e:	a90f      	add	r1, sp, #60	; 0x3c
 23f5940:	f7ff fb2a 	bl	23f4f98 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23f5944:	686b      	ldr	r3, [r5, #4]
 23f5946:	3301      	adds	r3, #1
 23f5948:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23f594a:	a811      	add	r0, sp, #68	; 0x44
 23f594c:	f7ff fcde 	bl	23f530c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f5950:	b13f      	cbz	r7, 23f5962 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23f5952:	a80b      	add	r0, sp, #44	; 0x2c
 23f5954:	f7ff fcda 	bl	23f530c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23f5958:	e771      	b.n	23f583e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23f595a:	46bb      	mov	fp, r7
 23f595c:	e7d8      	b.n	23f5910 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23f595e:	2701      	movs	r7, #1
 23f5960:	e7f3      	b.n	23f594a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23f5962:	9b01      	ldr	r3, [sp, #4]
 23f5964:	682d      	ldr	r5, [r5, #0]
 23f5966:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23f596a:	9b06      	ldr	r3, [sp, #24]
 23f596c:	781b      	ldrb	r3, [r3, #0]
 23f596e:	b92b      	cbnz	r3, 23f597c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23f5970:	f8d8 3000 	ldr.w	r3, [r8]
 23f5974:	9a02      	ldr	r2, [sp, #8]
 23f5976:	4413      	add	r3, r2
 23f5978:	7c1b      	ldrb	r3, [r3, #16]
 23f597a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23f597c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23f597e:	e78e      	b.n	23f589e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f5980:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23f5982:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f5984:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23f5986:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f5988:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23f598a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23f598c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23f598e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f5990:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23f5992:	60a2      	str	r2, [r4, #8]
 23f5994:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23f5996:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f5998:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23f599a:	60e2      	str	r2, [r4, #12]
 23f599c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23f599e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f59a0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23f59a2:	6122      	str	r2, [r4, #16]
 23f59a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23f59a6:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23f59a8:	9b03      	ldr	r3, [sp, #12]
 23f59aa:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23f59ac:	6162      	str	r2, [r4, #20]
 23f59ae:	7623      	strb	r3, [r4, #24]
 23f59b0:	e7cf      	b.n	23f5952 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023f59b4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23f59b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f59b6:	4604      	mov	r4, r0
        filter_(level, filters) {
 23f59b8:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23f59ba:	4617      	mov	r7, r2
 23f59bc:	b087      	sub	sp, #28
 23f59be:	460d      	mov	r5, r1
        stream_(&stream) {
 23f59c0:	4668      	mov	r0, sp
 23f59c2:	4619      	mov	r1, r3
 23f59c4:	f7f7 ffae 	bl	23ed924 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23f59c8:	4b0b      	ldr	r3, [pc, #44]	; (23f59f8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23f59ca:	4669      	mov	r1, sp
 23f59cc:	f846 3b04 	str.w	r3, [r6], #4
 23f59d0:	a803      	add	r0, sp, #12
 23f59d2:	f7f7 ffa7 	bl	23ed924 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23f59d6:	4639      	mov	r1, r7
 23f59d8:	aa03      	add	r2, sp, #12
 23f59da:	4630      	mov	r0, r6
 23f59dc:	f7ff fef0 	bl	23f57c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f59e0:	a803      	add	r0, sp, #12
 23f59e2:	f7f6 fc55 	bl	23ec290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23f59e6:	4668      	mov	r0, sp
 23f59e8:	f7f6 fc52 	bl	23ec290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23f59ec:	4620      	mov	r0, r4
        stream_(&stream) {
 23f59ee:	4b03      	ldr	r3, [pc, #12]	; (23f59fc <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23f59f0:	6225      	str	r5, [r4, #32]
 23f59f2:	6023      	str	r3, [r4, #0]
}
 23f59f4:	b007      	add	sp, #28
 23f59f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23f59f8:	023fbaf0 	.word	0x023fbaf0
 23f59fc:	023ff8d0 	.word	0x023ff8d0

023f5a00 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23f5a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f5a02:	460f      	mov	r7, r1
 23f5a04:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23f5a06:	4638      	mov	r0, r7
 23f5a08:	491c      	ldr	r1, [pc, #112]	; (23f5a7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23f5a0a:	4616      	mov	r6, r2
 23f5a0c:	461d      	mov	r5, r3
 23f5a0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23f5a10:	f7f2 fd88 	bl	23e8524 <strcmp>
 23f5a14:	b9c0      	cbnz	r0, 23f5a48 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23f5a16:	b1a4      	cbz	r4, 23f5a42 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23f5a18:	4629      	mov	r1, r5
 23f5a1a:	a801      	add	r0, sp, #4
 23f5a1c:	f7ff fcbe 	bl	23f539c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23f5a20:	2024      	movs	r0, #36	; 0x24
 23f5a22:	4917      	ldr	r1, [pc, #92]	; (23f5a80 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23f5a24:	f001 f88c 	bl	23f6b40 <_ZnwjRKSt9nothrow_t>
 23f5a28:	4605      	mov	r5, r0
 23f5a2a:	b130      	cbz	r0, 23f5a3a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23f5a2c:	ab01      	add	r3, sp, #4
 23f5a2e:	4632      	mov	r2, r6
 23f5a30:	4621      	mov	r1, r4
 23f5a32:	f7ff ffbf 	bl	23f59b4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f5a36:	4b13      	ldr	r3, [pc, #76]	; (23f5a84 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23f5a38:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23f5a3a:	a801      	add	r0, sp, #4
 23f5a3c:	f7f6 fc28 	bl	23ec290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23f5a40:	462c      	mov	r4, r5
}
 23f5a42:	4620      	mov	r0, r4
 23f5a44:	b005      	add	sp, #20
 23f5a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23f5a48:	4638      	mov	r0, r7
 23f5a4a:	490f      	ldr	r1, [pc, #60]	; (23f5a88 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23f5a4c:	f7f2 fd6a 	bl	23e8524 <strcmp>
 23f5a50:	b990      	cbnz	r0, 23f5a78 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23f5a52:	2c00      	cmp	r4, #0
 23f5a54:	d0f5      	beq.n	23f5a42 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23f5a56:	4629      	mov	r1, r5
 23f5a58:	a801      	add	r0, sp, #4
 23f5a5a:	f7ff fc9f 	bl	23f539c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23f5a5e:	2024      	movs	r0, #36	; 0x24
 23f5a60:	4907      	ldr	r1, [pc, #28]	; (23f5a80 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23f5a62:	f001 f86d 	bl	23f6b40 <_ZnwjRKSt9nothrow_t>
 23f5a66:	4605      	mov	r5, r0
 23f5a68:	2800      	cmp	r0, #0
 23f5a6a:	d0e6      	beq.n	23f5a3a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23f5a6c:	4632      	mov	r2, r6
 23f5a6e:	4621      	mov	r1, r4
 23f5a70:	ab01      	add	r3, sp, #4
 23f5a72:	f7ff ff9f 	bl	23f59b4 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23f5a76:	e7e0      	b.n	23f5a3a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23f5a78:	2400      	movs	r4, #0
 23f5a7a:	e7e2      	b.n	23f5a42 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23f5a7c:	023ff858 	.word	0x023ff858
 23f5a80:	023ffa30 	.word	0x023ffa30
 23f5a84:	023ff8e8 	.word	0x023ff8e8
 23f5a88:	023ff85c 	.word	0x023ff85c

023f5a8c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23f5a8c:	4b01      	ldr	r3, [pc, #4]	; (23f5a94 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23f5a8e:	4a02      	ldr	r2, [pc, #8]	; (23f5a98 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23f5a90:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23f5a92:	4770      	bx	lr
 23f5a94:	1007ae70 	.word	0x1007ae70
 23f5a98:	023ff86d 	.word	0x023ff86d

023f5a9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f5a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f5aa0:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23f5aa2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f5aa6:	4604      	mov	r4, r0
 23f5aa8:	460e      	mov	r6, r1
 23f5aaa:	4617      	mov	r7, r2
 23f5aac:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23f5aae:	f000 fde7 	bl	23f6680 <_Z16_fetch_usbserialv>
 23f5ab2:	4581      	cmp	r9, r0
 23f5ab4:	d04d      	beq.n	23f5b52 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23f5ab6:	792b      	ldrb	r3, [r5, #4]
 23f5ab8:	0719      	lsls	r1, r3, #28
 23f5aba:	d504      	bpl.n	23f5ac6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23f5abc:	4620      	mov	r0, r4
 23f5abe:	696a      	ldr	r2, [r5, #20]
 23f5ac0:	4954      	ldr	r1, [pc, #336]	; (23f5c14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23f5ac2:	f7ff fae2 	bl	23f508a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23f5ac6:	f1b8 0f00 	cmp.w	r8, #0
 23f5aca:	d00d      	beq.n	23f5ae8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23f5acc:	215b      	movs	r1, #91	; 0x5b
 23f5ace:	4620      	mov	r0, r4
 23f5ad0:	f7ff fa56 	bl	23f4f80 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23f5ad4:	4641      	mov	r1, r8
 23f5ad6:	4620      	mov	r0, r4
 23f5ad8:	f7ff fa43 	bl	23f4f62 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23f5adc:	6823      	ldr	r3, [r4, #0]
 23f5ade:	2202      	movs	r2, #2
 23f5ae0:	4620      	mov	r0, r4
 23f5ae2:	68db      	ldr	r3, [r3, #12]
 23f5ae4:	494c      	ldr	r1, [pc, #304]	; (23f5c18 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23f5ae6:	4798      	blx	r3
    if (attr.has_file) {
 23f5ae8:	792b      	ldrb	r3, [r5, #4]
 23f5aea:	07da      	lsls	r2, r3, #31
 23f5aec:	d524      	bpl.n	23f5b38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23f5aee:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23f5af2:	212f      	movs	r1, #47	; 0x2f
 23f5af4:	4640      	mov	r0, r8
 23f5af6:	f003 f98c 	bl	23f8e12 <strrchr>
    if (s1) {
 23f5afa:	b108      	cbz	r0, 23f5b00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23f5afc:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23f5b00:	4641      	mov	r1, r8
 23f5b02:	4620      	mov	r0, r4
 23f5b04:	f7ff fa2d 	bl	23f4f62 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23f5b08:	792b      	ldrb	r3, [r5, #4]
 23f5b0a:	079b      	lsls	r3, r3, #30
 23f5b0c:	d508      	bpl.n	23f5b20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23f5b0e:	213a      	movs	r1, #58	; 0x3a
 23f5b10:	4620      	mov	r0, r4
 23f5b12:	f7ff fa35 	bl	23f4f80 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23f5b16:	4620      	mov	r0, r4
 23f5b18:	68ea      	ldr	r2, [r5, #12]
 23f5b1a:	4940      	ldr	r1, [pc, #256]	; (23f5c1c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23f5b1c:	f7ff fab5 	bl	23f508a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23f5b20:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23f5b22:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23f5b24:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23f5b28:	4620      	mov	r0, r4
            write(", ", 2);
 23f5b2a:	f04f 0202 	mov.w	r2, #2
 23f5b2e:	68db      	ldr	r3, [r3, #12]
 23f5b30:	bf14      	ite	ne
 23f5b32:	493b      	ldrne	r1, [pc, #236]	; (23f5c20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23f5b34:	493b      	ldreq	r1, [pc, #236]	; (23f5c24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23f5b36:	4798      	blx	r3
    if (attr.has_function) {
 23f5b38:	792b      	ldrb	r3, [r5, #4]
 23f5b3a:	0758      	lsls	r0, r3, #29
 23f5b3c:	d51d      	bpl.n	23f5b7a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23f5b3e:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23f5b40:	460b      	mov	r3, r1
 23f5b42:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23f5b44:	f813 0b01 	ldrb.w	r0, [r3], #1
 23f5b48:	b160      	cbz	r0, 23f5b64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23f5b4a:	2820      	cmp	r0, #32
 23f5b4c:	d108      	bne.n	23f5b60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23f5b4e:	4619      	mov	r1, r3
 23f5b50:	e7f7      	b.n	23f5b42 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23f5b52:	4835      	ldr	r0, [pc, #212]	; (23f5c28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23f5b54:	f000 f983 	bl	23f5e5e <_ZN5spark12NetworkClass9listeningEv>
 23f5b58:	2800      	cmp	r0, #0
 23f5b5a:	d0ac      	beq.n	23f5ab6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23f5b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23f5b60:	2828      	cmp	r0, #40	; 0x28
 23f5b62:	d1ee      	bne.n	23f5b42 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23f5b64:	6823      	ldr	r3, [r4, #0]
 23f5b66:	1a52      	subs	r2, r2, r1
 23f5b68:	4620      	mov	r0, r4
 23f5b6a:	68db      	ldr	r3, [r3, #12]
 23f5b6c:	4798      	blx	r3
        write("(): ", 4);
 23f5b6e:	6823      	ldr	r3, [r4, #0]
 23f5b70:	2204      	movs	r2, #4
 23f5b72:	4620      	mov	r0, r4
 23f5b74:	68db      	ldr	r3, [r3, #12]
 23f5b76:	492d      	ldr	r1, [pc, #180]	; (23f5c2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23f5b78:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23f5b7a:	2100      	movs	r1, #0
 23f5b7c:	4638      	mov	r0, r7
 23f5b7e:	f7fe fcb7 	bl	23f44f0 <log_level_name>
 23f5b82:	4601      	mov	r1, r0
    write(s);
 23f5b84:	4620      	mov	r0, r4
 23f5b86:	f7ff f9ec 	bl	23f4f62 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23f5b8a:	6823      	ldr	r3, [r4, #0]
 23f5b8c:	2202      	movs	r2, #2
 23f5b8e:	4620      	mov	r0, r4
 23f5b90:	68db      	ldr	r3, [r3, #12]
 23f5b92:	4924      	ldr	r1, [pc, #144]	; (23f5c24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23f5b94:	4798      	blx	r3
    if (msg) {
 23f5b96:	b11e      	cbz	r6, 23f5ba0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23f5b98:	4631      	mov	r1, r6
 23f5b9a:	4620      	mov	r0, r4
 23f5b9c:	f7ff f9e1 	bl	23f4f62 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23f5ba0:	792b      	ldrb	r3, [r5, #4]
 23f5ba2:	f013 0f30 	tst.w	r3, #48	; 0x30
 23f5ba6:	d02c      	beq.n	23f5c02 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23f5ba8:	6823      	ldr	r3, [r4, #0]
 23f5baa:	4921      	ldr	r1, [pc, #132]	; (23f5c30 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23f5bac:	68db      	ldr	r3, [r3, #12]
 23f5bae:	2202      	movs	r2, #2
 23f5bb0:	4620      	mov	r0, r4
 23f5bb2:	4798      	blx	r3
        if (attr.has_code) {
 23f5bb4:	792b      	ldrb	r3, [r5, #4]
 23f5bb6:	06d9      	lsls	r1, r3, #27
 23f5bb8:	d50a      	bpl.n	23f5bd0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23f5bba:	6823      	ldr	r3, [r4, #0]
 23f5bbc:	2207      	movs	r2, #7
 23f5bbe:	4620      	mov	r0, r4
 23f5bc0:	491c      	ldr	r1, [pc, #112]	; (23f5c34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23f5bc2:	68db      	ldr	r3, [r3, #12]
 23f5bc4:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23f5bc6:	4620      	mov	r0, r4
 23f5bc8:	69aa      	ldr	r2, [r5, #24]
 23f5bca:	491b      	ldr	r1, [pc, #108]	; (23f5c38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23f5bcc:	f7ff fa5d 	bl	23f508a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23f5bd0:	792b      	ldrb	r3, [r5, #4]
 23f5bd2:	069a      	lsls	r2, r3, #26
 23f5bd4:	d511      	bpl.n	23f5bfa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23f5bd6:	06db      	lsls	r3, r3, #27
 23f5bd8:	d505      	bpl.n	23f5be6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23f5bda:	6823      	ldr	r3, [r4, #0]
 23f5bdc:	2202      	movs	r2, #2
 23f5bde:	4620      	mov	r0, r4
 23f5be0:	68db      	ldr	r3, [r3, #12]
 23f5be2:	490f      	ldr	r1, [pc, #60]	; (23f5c20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23f5be4:	4798      	blx	r3
            write("details = ", 10);
 23f5be6:	6823      	ldr	r3, [r4, #0]
 23f5be8:	4620      	mov	r0, r4
 23f5bea:	4914      	ldr	r1, [pc, #80]	; (23f5c3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23f5bec:	220a      	movs	r2, #10
 23f5bee:	68db      	ldr	r3, [r3, #12]
 23f5bf0:	4798      	blx	r3
            write(attr.details);
 23f5bf2:	4620      	mov	r0, r4
 23f5bf4:	69e9      	ldr	r1, [r5, #28]
 23f5bf6:	f7ff f9b4 	bl	23f4f62 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23f5bfa:	215d      	movs	r1, #93	; 0x5d
 23f5bfc:	4620      	mov	r0, r4
 23f5bfe:	f7ff f9bf 	bl	23f4f80 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23f5c02:	6823      	ldr	r3, [r4, #0]
 23f5c04:	4620      	mov	r0, r4
}
 23f5c06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23f5c0a:	2202      	movs	r2, #2
 23f5c0c:	68db      	ldr	r3, [r3, #12]
 23f5c0e:	490c      	ldr	r1, [pc, #48]	; (23f5c40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23f5c10:	4718      	bx	r3
 23f5c12:	bf00      	nop
 23f5c14:	023ff871 	.word	0x023ff871
 23f5c18:	023ff878 	.word	0x023ff878
 23f5c1c:	023ff838 	.word	0x023ff838
 23f5c20:	023ff87b 	.word	0x023ff87b
 23f5c24:	023ff880 	.word	0x023ff880
 23f5c28:	1007ae9c 	.word	0x1007ae9c
 23f5c2c:	023ff87e 	.word	0x023ff87e
 23f5c30:	023ff883 	.word	0x023ff883
 23f5c34:	023ff886 	.word	0x023ff886
 23f5c38:	023ff88e 	.word	0x023ff88e
 23f5c3c:	023ff891 	.word	0x023ff891
 23f5c40:	023fb323 	.word	0x023fb323

023f5c44 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23f5c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f5c48:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23f5c4a:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23f5c4c:	460d      	mov	r5, r1
 23f5c4e:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23f5c50:	f000 fd16 	bl	23f6680 <_Z16_fetch_usbserialv>
 23f5c54:	4287      	cmp	r7, r0
 23f5c56:	d007      	beq.n	23f5c68 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23f5c58:	6a20      	ldr	r0, [r4, #32]
 23f5c5a:	4632      	mov	r2, r6
 23f5c5c:	6803      	ldr	r3, [r0, #0]
 23f5c5e:	4629      	mov	r1, r5
}
 23f5c60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23f5c64:	68db      	ldr	r3, [r3, #12]
 23f5c66:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23f5c68:	4803      	ldr	r0, [pc, #12]	; (23f5c78 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23f5c6a:	f000 f8f8 	bl	23f5e5e <_ZN5spark12NetworkClass9listeningEv>
 23f5c6e:	2800      	cmp	r0, #0
 23f5c70:	d0f2      	beq.n	23f5c58 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23f5c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f5c76:	bf00      	nop
 23f5c78:	1007ae9c 	.word	0x1007ae9c

023f5c7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23f5c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f5c80:	b085      	sub	sp, #20
    return stream_;
 23f5c82:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23f5c86:	4605      	mov	r5, r0
 23f5c88:	460f      	mov	r7, r1
 23f5c8a:	4690      	mov	r8, r2
 23f5c8c:	461e      	mov	r6, r3
 23f5c8e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23f5c90:	f000 fcf6 	bl	23f6680 <_Z16_fetch_usbserialv>
 23f5c94:	4581      	cmp	r9, r0
 23f5c96:	d105      	bne.n	23f5ca4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23f5c98:	4849      	ldr	r0, [pc, #292]	; (23f5dc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23f5c9a:	f000 f8e0 	bl	23f5e5e <_ZN5spark12NetworkClass9listeningEv>
 23f5c9e:	2800      	cmp	r0, #0
 23f5ca0:	f040 808a 	bne.w	23f5db8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23f5ca4:	f04f 0900 	mov.w	r9, #0
 23f5ca8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
 23f5caa:	4a46      	ldr	r2, [pc, #280]	; (23f5dc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23f5cac:	a801      	add	r0, sp, #4
 23f5cae:	9201      	str	r2, [sp, #4]
 23f5cb0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
 23f5cb2:	f88d 9008 	strb.w	r9, [sp, #8]
 23f5cb6:	f7ff f830 	bl	23f4d1a <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23f5cba:	4649      	mov	r1, r9
 23f5cbc:	4640      	mov	r0, r8
 23f5cbe:	f7fe fc17 	bl	23f44f0 <log_level_name>
 23f5cc2:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23f5cc4:	4940      	ldr	r1, [pc, #256]	; (23f5dc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23f5cc6:	2201      	movs	r2, #1
 23f5cc8:	a801      	add	r0, sp, #4
 23f5cca:	f7ff f8b5 	bl	23f4e38 <_ZN5spark10JSONWriter4nameEPKcj>
 23f5cce:	4641      	mov	r1, r8
 23f5cd0:	f7ff f939 	bl	23f4f46 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23f5cd4:	b13f      	cbz	r7, 23f5ce6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 23f5cd6:	493d      	ldr	r1, [pc, #244]	; (23f5dcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23f5cd8:	2201      	movs	r2, #1
 23f5cda:	a801      	add	r0, sp, #4
 23f5cdc:	f7ff f8ac 	bl	23f4e38 <_ZN5spark10JSONWriter4nameEPKcj>
 23f5ce0:	4639      	mov	r1, r7
 23f5ce2:	f7ff f930 	bl	23f4f46 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23f5ce6:	b13e      	cbz	r6, 23f5cf8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 23f5ce8:	4939      	ldr	r1, [pc, #228]	; (23f5dd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23f5cea:	2201      	movs	r2, #1
 23f5cec:	a801      	add	r0, sp, #4
 23f5cee:	f7ff f8a3 	bl	23f4e38 <_ZN5spark10JSONWriter4nameEPKcj>
 23f5cf2:	4631      	mov	r1, r6
 23f5cf4:	f7ff f927 	bl	23f4f46 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23f5cf8:	7923      	ldrb	r3, [r4, #4]
 23f5cfa:	07df      	lsls	r7, r3, #31
 23f5cfc:	d50e      	bpl.n	23f5d1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 23f5cfe:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23f5d00:	212f      	movs	r1, #47	; 0x2f
 23f5d02:	4630      	mov	r0, r6
 23f5d04:	f003 f885 	bl	23f8e12 <strrchr>
    if (s1) {
 23f5d08:	b100      	cbz	r0, 23f5d0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 23f5d0a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23f5d0c:	4931      	ldr	r1, [pc, #196]	; (23f5dd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23f5d0e:	2201      	movs	r2, #1
 23f5d10:	a801      	add	r0, sp, #4
 23f5d12:	f7ff f891 	bl	23f4e38 <_ZN5spark10JSONWriter4nameEPKcj>
 23f5d16:	4631      	mov	r1, r6
 23f5d18:	f7ff f915 	bl	23f4f46 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23f5d1c:	7923      	ldrb	r3, [r4, #4]
 23f5d1e:	079e      	lsls	r6, r3, #30
 23f5d20:	d507      	bpl.n	23f5d32 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 23f5d22:	492d      	ldr	r1, [pc, #180]	; (23f5dd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23f5d24:	2202      	movs	r2, #2
 23f5d26:	a801      	add	r0, sp, #4
 23f5d28:	f7ff f886 	bl	23f4e38 <_ZN5spark10JSONWriter4nameEPKcj>
 23f5d2c:	68e1      	ldr	r1, [r4, #12]
 23f5d2e:	f7ff f801 	bl	23f4d34 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23f5d32:	7923      	ldrb	r3, [r4, #4]
 23f5d34:	0758      	lsls	r0, r3, #29
 23f5d36:	d514      	bpl.n	23f5d62 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23f5d38:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23f5d3a:	4633      	mov	r3, r6
 23f5d3c:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23f5d3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f5d42:	b12a      	cbz	r2, 23f5d50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
 23f5d44:	2a20      	cmp	r2, #32
 23f5d46:	d101      	bne.n	23f5d4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 23f5d48:	461e      	mov	r6, r3
 23f5d4a:	e7f7      	b.n	23f5d3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
 23f5d4c:	2a28      	cmp	r2, #40	; 0x28
 23f5d4e:	d1f5      	bne.n	23f5d3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
 23f5d50:	2202      	movs	r2, #2
 23f5d52:	4922      	ldr	r1, [pc, #136]	; (23f5ddc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23f5d54:	a801      	add	r0, sp, #4
 23f5d56:	f7ff f86f 	bl	23f4e38 <_ZN5spark10JSONWriter4nameEPKcj>
 23f5d5a:	4631      	mov	r1, r6
 23f5d5c:	1bba      	subs	r2, r7, r6
 23f5d5e:	f7ff f87b 	bl	23f4e58 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23f5d62:	7923      	ldrb	r3, [r4, #4]
 23f5d64:	0719      	lsls	r1, r3, #28
 23f5d66:	d507      	bpl.n	23f5d78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
 23f5d68:	491d      	ldr	r1, [pc, #116]	; (23f5de0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23f5d6a:	2201      	movs	r2, #1
 23f5d6c:	a801      	add	r0, sp, #4
 23f5d6e:	f7ff f863 	bl	23f4e38 <_ZN5spark10JSONWriter4nameEPKcj>
 23f5d72:	6961      	ldr	r1, [r4, #20]
 23f5d74:	f7fe fff0 	bl	23f4d58 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23f5d78:	7923      	ldrb	r3, [r4, #4]
 23f5d7a:	06da      	lsls	r2, r3, #27
 23f5d7c:	d508      	bpl.n	23f5d90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23f5d7e:	2204      	movs	r2, #4
 23f5d80:	4918      	ldr	r1, [pc, #96]	; (23f5de4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23f5d82:	eb0d 0002 	add.w	r0, sp, r2
 23f5d86:	f7ff f857 	bl	23f4e38 <_ZN5spark10JSONWriter4nameEPKcj>
 23f5d8a:	69a1      	ldr	r1, [r4, #24]
 23f5d8c:	f7fe ffd2 	bl	23f4d34 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23f5d90:	7923      	ldrb	r3, [r4, #4]
 23f5d92:	069b      	lsls	r3, r3, #26
 23f5d94:	d507      	bpl.n	23f5da6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23f5d96:	4914      	ldr	r1, [pc, #80]	; (23f5de8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23f5d98:	2206      	movs	r2, #6
 23f5d9a:	a801      	add	r0, sp, #4
 23f5d9c:	f7ff f84c 	bl	23f4e38 <_ZN5spark10JSONWriter4nameEPKcj>
 23f5da0:	69e1      	ldr	r1, [r4, #28]
 23f5da2:	f7ff f8d0 	bl	23f4f46 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23f5da6:	a801      	add	r0, sp, #4
 23f5da8:	f7fe ffa1 	bl	23f4cee <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23f5dac:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23f5dae:	2202      	movs	r2, #2
 23f5db0:	6803      	ldr	r3, [r0, #0]
 23f5db2:	490e      	ldr	r1, [pc, #56]	; (23f5dec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23f5db4:	68db      	ldr	r3, [r3, #12]
 23f5db6:	4798      	blx	r3
}
 23f5db8:	b005      	add	sp, #20
 23f5dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23f5dbe:	bf00      	nop
 23f5dc0:	1007ae9c 	.word	0x1007ae9c
 23f5dc4:	023ff8b8 	.word	0x023ff8b8
 23f5dc8:	023ff84e 	.word	0x023ff84e
 23f5dcc:	023ff89c 	.word	0x023ff89c
 23f5dd0:	023ffece 	.word	0x023ffece
 23f5dd4:	023ff96a 	.word	0x023ff96a
 23f5dd8:	023ff89e 	.word	0x023ff89e
 23f5ddc:	023ff8a1 	.word	0x023ff8a1
 23f5de0:	023fbacc 	.word	0x023fbacc
 23f5de4:	023ff8a4 	.word	0x023ff8a4
 23f5de8:	023ff8a9 	.word	0x023ff8a9
 23f5dec:	023fb323 	.word	0x023fb323

023f5df0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23f5df0:	2300      	movs	r3, #0
 23f5df2:	6840      	ldr	r0, [r0, #4]
 23f5df4:	461a      	mov	r2, r3
 23f5df6:	f7fe bbf9 	b.w	23f45ec <network_connect>

023f5dfa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23f5dfa:	2200      	movs	r2, #0
 23f5dfc:	2102      	movs	r1, #2
 23f5dfe:	6840      	ldr	r0, [r0, #4]
 23f5e00:	f7fe bc10 	b.w	23f4624 <network_disconnect>

023f5e04 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23f5e04:	2200      	movs	r2, #0
 23f5e06:	6840      	ldr	r0, [r0, #4]
 23f5e08:	4611      	mov	r1, r2
 23f5e0a:	f7fe bbfd 	b.w	23f4608 <network_connecting>

023f5e0e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23f5e0e:	2200      	movs	r2, #0
 23f5e10:	6840      	ldr	r0, [r0, #4]
 23f5e12:	4611      	mov	r1, r2
 23f5e14:	f7fe bc14 	b.w	23f4640 <network_ready>

023f5e18 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23f5e18:	2300      	movs	r3, #0
 23f5e1a:	6840      	ldr	r0, [r0, #4]
 23f5e1c:	461a      	mov	r2, r3
 23f5e1e:	4619      	mov	r1, r3
 23f5e20:	f7fe bc1c 	b.w	23f465c <network_on>

023f5e24 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23f5e24:	2300      	movs	r3, #0
 23f5e26:	6840      	ldr	r0, [r0, #4]
 23f5e28:	461a      	mov	r2, r3
 23f5e2a:	4619      	mov	r1, r3
 23f5e2c:	f7fe bc24 	b.w	23f4678 <network_off>

023f5e30 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23f5e30:	2100      	movs	r1, #0
 23f5e32:	6840      	ldr	r0, [r0, #4]
 23f5e34:	f7fe bc66 	b.w	23f4704 <network_is_on>

023f5e38 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23f5e38:	2100      	movs	r1, #0
 23f5e3a:	6840      	ldr	r0, [r0, #4]
 23f5e3c:	f7fe bc70 	b.w	23f4720 <network_is_off>

023f5e40 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23f5e40:	2200      	movs	r2, #0
 23f5e42:	6840      	ldr	r0, [r0, #4]
 23f5e44:	f081 0101 	eor.w	r1, r1, #1
 23f5e48:	f7fe bc24 	b.w	23f4694 <network_listen>

023f5e4c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23f5e4c:	2200      	movs	r2, #0
 23f5e4e:	6840      	ldr	r0, [r0, #4]
 23f5e50:	f7fe bc3c 	b.w	23f46cc <network_set_listen_timeout>

023f5e54 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23f5e54:	2200      	movs	r2, #0
 23f5e56:	6840      	ldr	r0, [r0, #4]
 23f5e58:	4611      	mov	r1, r2
 23f5e5a:	f7fe bc45 	b.w	23f46e8 <network_get_listen_timeout>

023f5e5e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23f5e5e:	2200      	movs	r2, #0
 23f5e60:	6840      	ldr	r0, [r0, #4]
 23f5e62:	4611      	mov	r1, r2
 23f5e64:	f7fe bc24 	b.w	23f46b0 <network_listening>

023f5e68 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23f5e68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f5e6c:	b095      	sub	sp, #84	; 0x54
 23f5e6e:	4614      	mov	r4, r2
 23f5e70:	460d      	mov	r5, r1
 23f5e72:	4607      	mov	r7, r0
    IPAddress addr;
 23f5e74:	f7fe fdea 	bl	23f4a4c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23f5e78:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23f5e7a:	221c      	movs	r2, #28
 23f5e7c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23f5e7e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23f5e80:	f002 ff4f 	bl	23f8d22 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23f5e84:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23f5e86:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23f5e88:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23f5e8a:	2100      	movs	r1, #0
 23f5e8c:	466b      	mov	r3, sp
 23f5e8e:	aa0c      	add	r2, sp, #48	; 0x30
 23f5e90:	f7fe f98a 	bl	23f41a8 <netdb_getaddrinfo>
    if (!r) {
 23f5e94:	4604      	mov	r4, r0
 23f5e96:	2800      	cmp	r0, #0
 23f5e98:	d14b      	bne.n	23f5f32 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f5e9a:	4602      	mov	r2, r0
 23f5e9c:	2101      	movs	r1, #1
 23f5e9e:	6868      	ldr	r0, [r5, #4]
 23f5ea0:	f7fe fbce 	bl	23f4640 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f5ea4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23f5ea6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f5ea8:	4622      	mov	r2, r4
 23f5eaa:	6868      	ldr	r0, [r5, #4]
 23f5eac:	f7fe fbc8 	bl	23f4640 <network_ready>
        bool ok = false;
 23f5eb0:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23f5eb2:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f5eb4:	9e00      	ldr	r6, [sp, #0]
 23f5eb6:	2e00      	cmp	r6, #0
 23f5eb8:	d03b      	beq.n	23f5f32 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23f5eba:	2900      	cmp	r1, #0
 23f5ebc:	d139      	bne.n	23f5f32 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23f5ebe:	6873      	ldr	r3, [r6, #4]
 23f5ec0:	2b02      	cmp	r3, #2
 23f5ec2:	d003      	beq.n	23f5ecc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23f5ec4:	2b0a      	cmp	r3, #10
 23f5ec6:	d011      	beq.n	23f5eec <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23f5ec8:	69f6      	ldr	r6, [r6, #28]
 23f5eca:	e7f4      	b.n	23f5eb6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23f5ecc:	f1b8 0f00 	cmp.w	r8, #0
 23f5ed0:	d0fa      	beq.n	23f5ec8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23f5ed2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23f5ed4:	a806      	add	r0, sp, #24
 23f5ed6:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23f5ed8:	1d3c      	adds	r4, r7, #4
 23f5eda:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23f5edc:	f7fe fde4 	bl	23f4aa8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23f5ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f5ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f5ee4:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f5ee6:	4641      	mov	r1, r8
 23f5ee8:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23f5eea:	e7ed      	b.n	23f5ec8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23f5eec:	f1b9 0f00 	cmp.w	r9, #0
 23f5ef0:	d0ea      	beq.n	23f5ec8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23f5ef2:	2210      	movs	r2, #16
 23f5ef4:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23f5ef6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23f5ef8:	f002 ff13 	bl	23f8d22 <memset>
                    a.v = 6;
 23f5efc:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f5efe:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23f5f00:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23f5f04:	f104 0308 	add.w	r3, r4, #8
 23f5f08:	3418      	adds	r4, #24
 23f5f0a:	462a      	mov	r2, r5
 23f5f0c:	6818      	ldr	r0, [r3, #0]
 23f5f0e:	6859      	ldr	r1, [r3, #4]
 23f5f10:	3308      	adds	r3, #8
 23f5f12:	c203      	stmia	r2!, {r0, r1}
 23f5f14:	42a3      	cmp	r3, r4
 23f5f16:	4615      	mov	r5, r2
 23f5f18:	d1f7      	bne.n	23f5f0a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23f5f1a:	a901      	add	r1, sp, #4
 23f5f1c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23f5f1e:	1d3c      	adds	r4, r7, #4
 23f5f20:	ad07      	add	r5, sp, #28
 23f5f22:	f7fe fda1 	bl	23f4a68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23f5f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23f5f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23f5f2a:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23f5f2c:	4649      	mov	r1, r9
 23f5f2e:	7023      	strb	r3, [r4, #0]
                    break;
 23f5f30:	e7ca      	b.n	23f5ec8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23f5f32:	9800      	ldr	r0, [sp, #0]
 23f5f34:	f7fe f92a 	bl	23f418c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23f5f38:	4638      	mov	r0, r7
 23f5f3a:	b015      	add	sp, #84	; 0x54
 23f5f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023f5f40 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23f5f40:	4b02      	ldr	r3, [pc, #8]	; (23f5f4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23f5f42:	4a03      	ldr	r2, [pc, #12]	; (23f5f50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23f5f44:	601a      	str	r2, [r3, #0]
 23f5f46:	2200      	movs	r2, #0
 23f5f48:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23f5f4a:	4770      	bx	lr
 23f5f4c:	1007ae9c 	.word	0x1007ae9c
 23f5f50:	023ff930 	.word	0x023ff930

023f5f54 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23f5f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f5f56:	4606      	mov	r6, r0
 23f5f58:	460d      	mov	r5, r1
  size_t n = 0;
 23f5f5a:	2400      	movs	r4, #0
 23f5f5c:	188f      	adds	r7, r1, r2
  while (size--) {
 23f5f5e:	42bd      	cmp	r5, r7
 23f5f60:	d00c      	beq.n	23f5f7c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23f5f62:	6833      	ldr	r3, [r6, #0]
 23f5f64:	4630      	mov	r0, r6
 23f5f66:	689b      	ldr	r3, [r3, #8]
 23f5f68:	f815 1b01 	ldrb.w	r1, [r5], #1
 23f5f6c:	4798      	blx	r3
     if (chunk>=0)
 23f5f6e:	1e03      	subs	r3, r0, #0
 23f5f70:	db01      	blt.n	23f5f76 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23f5f72:	441c      	add	r4, r3
  while (size--) {
 23f5f74:	e7f3      	b.n	23f5f5e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23f5f76:	2c00      	cmp	r4, #0
 23f5f78:	bf08      	it	eq
 23f5f7a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23f5f7c:	4620      	mov	r0, r4
 23f5f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023f5f80 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23f5f80:	b513      	push	{r0, r1, r4, lr}
 23f5f82:	4604      	mov	r4, r0
    }
 23f5f84:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23f5f86:	b159      	cbz	r1, 23f5fa0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23f5f88:	9101      	str	r1, [sp, #4]
 23f5f8a:	f7f2 fad5 	bl	23e8538 <strlen>
 23f5f8e:	4602      	mov	r2, r0
 23f5f90:	4620      	mov	r0, r4
 23f5f92:	6823      	ldr	r3, [r4, #0]
 23f5f94:	9901      	ldr	r1, [sp, #4]
 23f5f96:	68db      	ldr	r3, [r3, #12]
    }
 23f5f98:	b002      	add	sp, #8
 23f5f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23f5f9e:	4718      	bx	r3
    }
 23f5fa0:	b002      	add	sp, #8
 23f5fa2:	bd10      	pop	{r4, pc}

023f5fa4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23f5fa4:	b508      	push	{r3, lr}
  return write(str);
 23f5fa6:	f7ff ffeb 	bl	23f5f80 <_ZN5Print5writeEPKc>
}
 23f5faa:	bd08      	pop	{r3, pc}

023f5fac <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23f5fac:	6803      	ldr	r3, [r0, #0]
 23f5fae:	689b      	ldr	r3, [r3, #8]
 23f5fb0:	4718      	bx	r3

023f5fb2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23f5fb2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23f5fb4:	210d      	movs	r1, #13
{
 23f5fb6:	4605      	mov	r5, r0
  size_t n = print('\r');
 23f5fb8:	f7ff fff8 	bl	23f5fac <_ZN5Print5printEc>
  n += print('\n');
 23f5fbc:	210a      	movs	r1, #10
  size_t n = print('\r');
 23f5fbe:	4604      	mov	r4, r0
  n += print('\n');
 23f5fc0:	4628      	mov	r0, r5
 23f5fc2:	f7ff fff3 	bl	23f5fac <_ZN5Print5printEc>
  return n;
}
 23f5fc6:	4420      	add	r0, r4
 23f5fc8:	bd38      	pop	{r3, r4, r5, pc}

023f5fca <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23f5fca:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23f5fcc:	2a01      	cmp	r2, #1
 23f5fce:	bf98      	it	ls
 23f5fd0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23f5fd2:	b530      	push	{r4, r5, lr}
 23f5fd4:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23f5fd6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23f5fda:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23f5fdc:	460d      	mov	r5, r1
 23f5fde:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23f5fe2:	fb01 5312 	mls	r3, r1, r2, r5
 23f5fe6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f5fea:	2b09      	cmp	r3, #9
 23f5fec:	bf94      	ite	ls
 23f5fee:	3330      	addls	r3, #48	; 0x30
 23f5ff0:	3337      	addhi	r3, #55	; 0x37
 23f5ff2:	b2db      	uxtb	r3, r3
  } while(n);
 23f5ff4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23f5ff6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23f5ffa:	d9ef      	bls.n	23f5fdc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23f5ffc:	4621      	mov	r1, r4
 23f5ffe:	f7ff ffbf 	bl	23f5f80 <_ZN5Print5writeEPKc>
}
 23f6002:	b00b      	add	sp, #44	; 0x2c
 23f6004:	bd30      	pop	{r4, r5, pc}
	...

023f6008 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 23f6008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f600c:	ec55 4b10 	vmov	r4, r5, d0
 23f6010:	4606      	mov	r6, r0
 23f6012:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
 23f6014:	ee10 2a10 	vmov	r2, s0
 23f6018:	462b      	mov	r3, r5
 23f601a:	ee10 0a10 	vmov	r0, s0
 23f601e:	4629      	mov	r1, r5
 23f6020:	f7f1 ffd4 	bl	23e7fcc <__aeabi_dcmpun>
 23f6024:	b140      	cbz	r0, 23f6038 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
 23f6026:	4953      	ldr	r1, [pc, #332]	; (23f6174 <_ZN5Print10printFloatEdh+0x16c>)
 23f6028:	4630      	mov	r0, r6
 23f602a:	f7ff ffa9 	bl	23f5f80 <_ZN5Print5writeEPKc>
 23f602e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 23f6030:	4650      	mov	r0, sl
 23f6032:	b003      	add	sp, #12
 23f6034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  { return __builtin_isinf(__x); }
 23f6038:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 23f603c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f6040:	4620      	mov	r0, r4
 23f6042:	4649      	mov	r1, r9
 23f6044:	4b4c      	ldr	r3, [pc, #304]	; (23f6178 <_ZN5Print10printFloatEdh+0x170>)
 23f6046:	f7f1 ffc1 	bl	23e7fcc <__aeabi_dcmpun>
 23f604a:	b948      	cbnz	r0, 23f6060 <_ZN5Print10printFloatEdh+0x58>
 23f604c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f6050:	4620      	mov	r0, r4
 23f6052:	4649      	mov	r1, r9
 23f6054:	4b48      	ldr	r3, [pc, #288]	; (23f6178 <_ZN5Print10printFloatEdh+0x170>)
 23f6056:	f7f1 ff9b 	bl	23e7f90 <__aeabi_dcmple>
 23f605a:	b908      	cbnz	r0, 23f6060 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
 23f605c:	4947      	ldr	r1, [pc, #284]	; (23f617c <_ZN5Print10printFloatEdh+0x174>)
 23f605e:	e7e3      	b.n	23f6028 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 23f6060:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f6064:	4620      	mov	r0, r4
 23f6066:	4629      	mov	r1, r5
 23f6068:	4b45      	ldr	r3, [pc, #276]	; (23f6180 <_ZN5Print10printFloatEdh+0x178>)
 23f606a:	f7f1 ffa5 	bl	23e7fb8 <__aeabi_dcmpgt>
 23f606e:	b108      	cbz	r0, 23f6074 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
 23f6070:	4944      	ldr	r1, [pc, #272]	; (23f6184 <_ZN5Print10printFloatEdh+0x17c>)
 23f6072:	e7d9      	b.n	23f6028 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 23f6074:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23f6078:	4620      	mov	r0, r4
 23f607a:	4629      	mov	r1, r5
 23f607c:	4b42      	ldr	r3, [pc, #264]	; (23f6188 <_ZN5Print10printFloatEdh+0x180>)
 23f607e:	f7f1 ff7d 	bl	23e7f7c <__aeabi_dcmplt>
 23f6082:	2800      	cmp	r0, #0
 23f6084:	d1f4      	bne.n	23f6070 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
 23f6086:	2200      	movs	r2, #0
 23f6088:	2300      	movs	r3, #0
 23f608a:	4620      	mov	r0, r4
 23f608c:	4629      	mov	r1, r5
 23f608e:	f7f1 ff75 	bl	23e7f7c <__aeabi_dcmplt>
 23f6092:	b1d0      	cbz	r0, 23f60ca <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
 23f6094:	212d      	movs	r1, #45	; 0x2d
 23f6096:	4630      	mov	r0, r6
 23f6098:	f7ff ff88 	bl	23f5fac <_ZN5Print5printEc>
     number = -number;
 23f609c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
 23f60a0:	4682      	mov	sl, r0
     number = -number;
 23f60a2:	461d      	mov	r5, r3
  size_t n = 0;
 23f60a4:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 23f60a8:	2000      	movs	r0, #0
    rounding /= 10.0;
 23f60aa:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 23f60ae:	4937      	ldr	r1, [pc, #220]	; (23f618c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
 23f60b0:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 23f6194 <_ZN5Print10printFloatEdh+0x18c>
  for (uint8_t i=0; i<digits; ++i)
 23f60b4:	fa5f f38b 	uxtb.w	r3, fp
 23f60b8:	429f      	cmp	r7, r3
 23f60ba:	d908      	bls.n	23f60ce <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
 23f60bc:	4642      	mov	r2, r8
 23f60be:	464b      	mov	r3, r9
 23f60c0:	f7f1 fe14 	bl	23e7cec <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 23f60c4:	f10b 0b01 	add.w	fp, fp, #1
 23f60c8:	e7f4      	b.n	23f60b4 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
 23f60ca:	4682      	mov	sl, r0
 23f60cc:	e7ea      	b.n	23f60a4 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
 23f60ce:	4622      	mov	r2, r4
 23f60d0:	462b      	mov	r3, r5
 23f60d2:	f7f1 fb2b 	bl	23e772c <__adddf3>
 23f60d6:	460d      	mov	r5, r1
 23f60d8:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
 23f60da:	f7f1 ffb5 	bl	23e8048 <__aeabi_d2uiz>
 23f60de:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
 23f60e0:	f7f1 fc60 	bl	23e79a4 <__aeabi_ui2d>
 23f60e4:	4602      	mov	r2, r0
 23f60e6:	460b      	mov	r3, r1
 23f60e8:	4620      	mov	r0, r4
 23f60ea:	4629      	mov	r1, r5
 23f60ec:	f7f1 fb1c 	bl	23e7728 <__aeabi_dsub>
        return printNumber(val, base) + t;
 23f60f0:	220a      	movs	r2, #10
 23f60f2:	4604      	mov	r4, r0
 23f60f4:	460d      	mov	r5, r1
 23f60f6:	4630      	mov	r0, r6
 23f60f8:	4641      	mov	r1, r8
 23f60fa:	f7ff ff66 	bl	23f5fca <_ZN5Print11printNumberEmh>
  n += print(int_part);
 23f60fe:	4482      	add	sl, r0
  if (digits > 0) {
 23f6100:	2f00      	cmp	r7, #0
 23f6102:	d095      	beq.n	23f6030 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
 23f6104:	4630      	mov	r0, r6
 23f6106:	4922      	ldr	r1, [pc, #136]	; (23f6190 <_ZN5Print10printFloatEdh+0x188>)
 23f6108:	f7ff ff3a 	bl	23f5f80 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 23f610c:	f04f 0800 	mov.w	r8, #0
 23f6110:	f8df 9080 	ldr.w	r9, [pc, #128]	; 23f6194 <_ZN5Print10printFloatEdh+0x18c>
    n += print(".");
 23f6114:	4482      	add	sl, r0
  while (digits-- > 0)
 23f6116:	2f00      	cmp	r7, #0
 23f6118:	d08a      	beq.n	23f6030 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
 23f611a:	4642      	mov	r2, r8
 23f611c:	464b      	mov	r3, r9
 23f611e:	4620      	mov	r0, r4
 23f6120:	4629      	mov	r1, r5
 23f6122:	f7f1 fcb9 	bl	23e7a98 <__aeabi_dmul>
 23f6126:	4604      	mov	r4, r0
 23f6128:	460d      	mov	r5, r1
    int toPrint = int(remainder);
 23f612a:	f7f1 ff65 	bl	23e7ff8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 23f612e:	f1b0 0b00 	subs.w	fp, r0, #0
 23f6132:	da1c      	bge.n	23f616e <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
 23f6134:	212d      	movs	r1, #45	; 0x2d
 23f6136:	4630      	mov	r0, r6
 23f6138:	f7ff ff38 	bl	23f5fac <_ZN5Print5printEc>
 23f613c:	4603      	mov	r3, r0
            val = -n;
 23f613e:	f1cb 0100 	rsb	r1, fp, #0
        return printNumber(val, base) + t;
 23f6142:	220a      	movs	r2, #10
 23f6144:	4630      	mov	r0, r6
 23f6146:	9301      	str	r3, [sp, #4]
 23f6148:	f7ff ff3f 	bl	23f5fca <_ZN5Print11printNumberEmh>
 23f614c:	9b01      	ldr	r3, [sp, #4]
 23f614e:	3f01      	subs	r7, #1
 23f6150:	4418      	add	r0, r3
    n += print(toPrint);
 23f6152:	4482      	add	sl, r0
    remainder -= toPrint;
 23f6154:	4658      	mov	r0, fp
 23f6156:	f7f1 fc35 	bl	23e79c4 <__aeabi_i2d>
 23f615a:	4602      	mov	r2, r0
 23f615c:	460b      	mov	r3, r1
 23f615e:	4620      	mov	r0, r4
 23f6160:	4629      	mov	r1, r5
 23f6162:	f7f1 fae1 	bl	23e7728 <__aeabi_dsub>
 23f6166:	b2ff      	uxtb	r7, r7
 23f6168:	4604      	mov	r4, r0
 23f616a:	460d      	mov	r5, r1
  while (digits-- > 0)
 23f616c:	e7d3      	b.n	23f6116 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
 23f616e:	4659      	mov	r1, fp
        size_t t = 0;
 23f6170:	2300      	movs	r3, #0
 23f6172:	e7e6      	b.n	23f6142 <_ZN5Print10printFloatEdh+0x13a>
 23f6174:	023ff964 	.word	0x023ff964
 23f6178:	7fefffff 	.word	0x7fefffff
 23f617c:	023ff968 	.word	0x023ff968
 23f6180:	41efffff 	.word	0x41efffff
 23f6184:	023ff96c 	.word	0x023ff96c
 23f6188:	c1efffff 	.word	0xc1efffff
 23f618c:	3fe00000 	.word	0x3fe00000
 23f6190:	023fb181 	.word	0x023fb181
 23f6194:	40240000 	.word	0x40240000

023f6198 <_ZN5Print5printEfi>:
{
 23f6198:	b538      	push	{r3, r4, r5, lr}
 23f619a:	4604      	mov	r4, r0
 23f619c:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
 23f61a0:	b2cd      	uxtb	r5, r1
 23f61a2:	f7f1 fc21 	bl	23e79e8 <__aeabi_f2d>
 23f61a6:	ec41 0b10 	vmov	d0, r0, r1
 23f61aa:	4629      	mov	r1, r5
 23f61ac:	4620      	mov	r0, r4
}
 23f61ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
 23f61b2:	f7ff bf29 	b.w	23f6008 <_ZN5Print10printFloatEdh>

023f61b6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 23f61b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f61ba:	b086      	sub	sp, #24
 23f61bc:	af00      	add	r7, sp, #0
 23f61be:	4605      	mov	r5, r0
 23f61c0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 23f61c2:	1d38      	adds	r0, r7, #4
 23f61c4:	2114      	movs	r1, #20
{
 23f61c6:	4614      	mov	r4, r2
    va_copy(args2, args);
 23f61c8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 23f61ca:	f7fe fae1 	bl	23f4790 <vsnprintf>

    if (n<bufsize)
 23f61ce:	2813      	cmp	r0, #19
 23f61d0:	d80e      	bhi.n	23f61f0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 23f61d2:	4628      	mov	r0, r5
 23f61d4:	1d39      	adds	r1, r7, #4
 23f61d6:	f7ff fed3 	bl	23f5f80 <_ZN5Print5writeEPKc>
 23f61da:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 23f61dc:	b11e      	cbz	r6, 23f61e6 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 23f61de:	4628      	mov	r0, r5
 23f61e0:	f7ff fee7 	bl	23f5fb2 <_ZN5Print7printlnEv>
 23f61e4:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 23f61e6:	4620      	mov	r0, r4
 23f61e8:	3718      	adds	r7, #24
 23f61ea:	46bd      	mov	sp, r7
 23f61ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 23f61f0:	f100 0308 	add.w	r3, r0, #8
 23f61f4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 23f61f8:	46e8      	mov	r8, sp
        char bigger[n+1];
 23f61fa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 23f61fe:	4622      	mov	r2, r4
 23f6200:	1c41      	adds	r1, r0, #1
 23f6202:	683b      	ldr	r3, [r7, #0]
 23f6204:	4668      	mov	r0, sp
 23f6206:	f7fe fac3 	bl	23f4790 <vsnprintf>
  return write(str);
 23f620a:	4669      	mov	r1, sp
 23f620c:	4628      	mov	r0, r5
 23f620e:	f7ff feb7 	bl	23f5f80 <_ZN5Print5writeEPKc>
 23f6212:	4604      	mov	r4, r0
 23f6214:	46c5      	mov	sp, r8
 23f6216:	e7e1      	b.n	23f61dc <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

023f6218 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23f6218:	2200      	movs	r2, #0
 23f621a:	4b01      	ldr	r3, [pc, #4]	; (23f6220 <_GLOBAL__sub_I_RGB+0x8>)
 23f621c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23f621e:	4770      	bx	lr
 23f6220:	1007aea4 	.word	0x1007aea4

023f6224 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23f6224:	2100      	movs	r1, #0
 23f6226:	f7fe b83d 	b.w	23f42a4 <hal_spi_release>

023f622a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23f622a:	2100      	movs	r1, #0
 23f622c:	f7fe b82c 	b.w	23f4288 <hal_spi_acquire>

023f6230 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23f6230:	b510      	push	{r4, lr}
 23f6232:	4604      	mov	r4, r0
 23f6234:	4608      	mov	r0, r1
{
    _spi = spi;
 23f6236:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23f6238:	f7fd ffd2 	bl	23f41e0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23f623c:	2300      	movs	r3, #0
}
 23f623e:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23f6240:	6063      	str	r3, [r4, #4]
}
 23f6242:	bd10      	pop	{r4, pc}

023f6244 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
 23f6244:	b513      	push	{r0, r1, r4, lr}
 23f6246:	4604      	mov	r4, r0
    if (!lock())
 23f6248:	7800      	ldrb	r0, [r0, #0]
{
 23f624a:	9101      	str	r1, [sp, #4]
    if (!lock())
 23f624c:	f7ff ffed 	bl	23f622a <_ZN8SPIClass4lockEv.isra.0>
 23f6250:	9901      	ldr	r1, [sp, #4]
 23f6252:	b948      	cbnz	r0, 23f6268 <_ZN8SPIClass5beginEt+0x24>
 23f6254:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, ss_pin);
 23f6256:	9001      	str	r0, [sp, #4]
 23f6258:	f7fd ffb4 	bl	23f41c4 <hal_spi_begin>
        unlock();
 23f625c:	9801      	ldr	r0, [sp, #4]
    }
}
 23f625e:	b002      	add	sp, #8
 23f6260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23f6264:	f7ff bfde 	b.w	23f6224 <_ZN8SPIClass6unlockEv.isra.0>
 23f6268:	b002      	add	sp, #8
 23f626a:	bd10      	pop	{r4, pc}

023f626c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23f626c:	7800      	ldrb	r0, [r0, #0]
 23f626e:	f7ff bfd9 	b.w	23f6224 <_ZN8SPIClass6unlockEv.isra.0>
	...

023f6274 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23f6274:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23f6276:	2400      	movs	r4, #0
 23f6278:	0840      	lsrs	r0, r0, #1
 23f627a:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23f627c:	6818      	ldr	r0, [r3, #0]
 23f627e:	b2e5      	uxtb	r5, r4
 23f6280:	4288      	cmp	r0, r1
 23f6282:	d906      	bls.n	23f6292 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23f6284:	3401      	adds	r4, #1
 23f6286:	2c08      	cmp	r4, #8
 23f6288:	d002      	beq.n	23f6290 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23f628a:	0840      	lsrs	r0, r0, #1
 23f628c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23f628e:	e7f5      	b.n	23f627c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23f6290:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23f6292:	4b02      	ldr	r3, [pc, #8]	; (23f629c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23f6294:	5d5b      	ldrb	r3, [r3, r5]
 23f6296:	7013      	strb	r3, [r2, #0]
}
 23f6298:	bd30      	pop	{r4, r5, pc}
 23f629a:	bf00      	nop
 23f629c:	023ff970 	.word	0x023ff970

023f62a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23f62a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f62a4:	4606      	mov	r6, r0
 23f62a6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23f62a8:	7800      	ldrb	r0, [r0, #0]
{
 23f62aa:	460c      	mov	r4, r1
    CHECK(lock());
 23f62ac:	f7ff ffbd 	bl	23f622a <_ZN8SPIClass4lockEv.isra.0>
 23f62b0:	2800      	cmp	r0, #0
 23f62b2:	db1b      	blt.n	23f62ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23f62b4:	2214      	movs	r2, #20
 23f62b6:	2100      	movs	r1, #0
 23f62b8:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23f62ba:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23f62bc:	f002 fd31 	bl	23f8d22 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23f62c0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23f62c2:	2200      	movs	r2, #0
 23f62c4:	4628      	mov	r0, r5
 23f62c6:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23f62c8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23f62cc:	f7fd ffa4 	bl	23f4218 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23f62d0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23f62d4:	b113      	cbz	r3, 23f62dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23f62d6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23f62da:	b155      	cbz	r5, 23f62f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23f62dc:	2700      	movs	r7, #0
 23f62de:	2501      	movs	r5, #1
 23f62e0:	46b9      	mov	r9, r7
 23f62e2:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23f62e4:	7923      	ldrb	r3, [r4, #4]
 23f62e6:	b15d      	cbz	r5, 23f6300 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23f62e8:	b1c3      	cbz	r3, 23f631c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23f62ea:	2000      	movs	r0, #0
}
 23f62ec:	b00f      	add	sp, #60	; 0x3c
 23f62ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23f62f2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23f62f6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23f62fa:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23f62fe:	e7f1      	b.n	23f62e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23f6300:	2b00      	cmp	r3, #0
 23f6302:	d135      	bne.n	23f6370 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23f6304:	68a3      	ldr	r3, [r4, #8]
 23f6306:	4543      	cmp	r3, r8
 23f6308:	d108      	bne.n	23f631c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23f630a:	f88d 9020 	strb.w	r9, [sp, #32]
 23f630e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23f6312:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23f6316:	89a3      	ldrh	r3, [r4, #12]
 23f6318:	429a      	cmp	r2, r3
 23f631a:	d0e6      	beq.n	23f62ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23f631c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23f631e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23f6320:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23f6324:	980a      	ldr	r0, [sp, #40]	; 0x28
 23f6326:	ab04      	add	r3, sp, #16
 23f6328:	f10d 020f 	add.w	r2, sp, #15
 23f632c:	f7ff ffa2 	bl	23f6274 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23f6330:	7921      	ldrb	r1, [r4, #4]
 23f6332:	b985      	cbnz	r5, 23f6356 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23f6334:	b989      	cbnz	r1, 23f635a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23f6336:	68a3      	ldr	r3, [r4, #8]
 23f6338:	4543      	cmp	r3, r8
 23f633a:	d30e      	bcc.n	23f635a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23f633c:	f88d 9020 	strb.w	r9, [sp, #32]
 23f6340:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23f6344:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23f6348:	89a3      	ldrh	r3, [r4, #12]
 23f634a:	429a      	cmp	r2, r3
 23f634c:	d105      	bne.n	23f635a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23f634e:	9b04      	ldr	r3, [sp, #16]
 23f6350:	4543      	cmp	r3, r8
 23f6352:	d102      	bne.n	23f635a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23f6354:	e7c9      	b.n	23f62ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23f6356:	2900      	cmp	r1, #0
 23f6358:	d1f9      	bne.n	23f634e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23f635a:	2300      	movs	r3, #0
 23f635c:	9301      	str	r3, [sp, #4]
 23f635e:	7b63      	ldrb	r3, [r4, #13]
 23f6360:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23f6364:	9300      	str	r3, [sp, #0]
 23f6366:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23f6368:	7830      	ldrb	r0, [r6, #0]
 23f636a:	f7fd ff7f 	bl	23f426c <hal_spi_set_settings>
 23f636e:	e7bc      	b.n	23f62ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23f6370:	462b      	mov	r3, r5
 23f6372:	462a      	mov	r2, r5
 23f6374:	2101      	movs	r1, #1
 23f6376:	e9cd 5500 	strd	r5, r5, [sp]
 23f637a:	e7f5      	b.n	23f6368 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023f637c <_ZN8SPIClass8transferEPKvPvjPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 23f637c:	b530      	push	{r4, r5, lr}
 23f637e:	b087      	sub	sp, #28
 23f6380:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23f6382:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 23f6384:	9500      	str	r5, [sp, #0]
 23f6386:	7800      	ldrb	r0, [r0, #0]
 23f6388:	f7fd ff54 	bl	23f4234 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 23f638c:	b93d      	cbnz	r5, 23f639e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 23f638e:	7820      	ldrb	r0, [r4, #0]
 23f6390:	a902      	add	r1, sp, #8
 23f6392:	f7fd ff5d 	bl	23f4250 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 23f6396:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23f639a:	07db      	lsls	r3, r3, #31
 23f639c:	d4f7      	bmi.n	23f638e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 23f639e:	b007      	add	sp, #28
 23f63a0:	bd30      	pop	{r4, r5, pc}

023f63a2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23f63a2:	b510      	push	{r4, lr}
 23f63a4:	4604      	mov	r4, r0
{
	free(buffer);
 23f63a6:	6800      	ldr	r0, [r0, #0]
 23f63a8:	f7fe f9d6 	bl	23f4758 <free>
}
 23f63ac:	4620      	mov	r0, r4
 23f63ae:	bd10      	pop	{r4, pc}

023f63b0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23f63b0:	b510      	push	{r4, lr}
 23f63b2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23f63b4:	6800      	ldr	r0, [r0, #0]
 23f63b6:	b108      	cbz	r0, 23f63bc <_ZN6String10invalidateEv+0xc>
 23f63b8:	f7fe f9ce 	bl	23f4758 <free>
	buffer = NULL;
 23f63bc:	2300      	movs	r3, #0
	capacity = len = 0;
 23f63be:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23f63c2:	6023      	str	r3, [r4, #0]
}
 23f63c4:	bd10      	pop	{r4, pc}

023f63c6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23f63c6:	b538      	push	{r3, r4, r5, lr}
 23f63c8:	4604      	mov	r4, r0
 23f63ca:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23f63cc:	6800      	ldr	r0, [r0, #0]
 23f63ce:	3101      	adds	r1, #1
 23f63d0:	f7fe f9d0 	bl	23f4774 <realloc>
	if (newbuffer) {
 23f63d4:	b110      	cbz	r0, 23f63dc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23f63d6:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23f63da:	2001      	movs	r0, #1
	}
	return 0;
}
 23f63dc:	bd38      	pop	{r3, r4, r5, pc}

023f63de <_ZN6String7reserveEj>:
{
 23f63de:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23f63e0:	6803      	ldr	r3, [r0, #0]
{
 23f63e2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23f63e4:	b123      	cbz	r3, 23f63f0 <_ZN6String7reserveEj+0x12>
 23f63e6:	6843      	ldr	r3, [r0, #4]
 23f63e8:	428b      	cmp	r3, r1
 23f63ea:	d301      	bcc.n	23f63f0 <_ZN6String7reserveEj+0x12>
 23f63ec:	2001      	movs	r0, #1
}
 23f63ee:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23f63f0:	4620      	mov	r0, r4
 23f63f2:	f7ff ffe8 	bl	23f63c6 <_ZN6String12changeBufferEj>
 23f63f6:	2800      	cmp	r0, #0
 23f63f8:	d0f9      	beq.n	23f63ee <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23f63fa:	68a3      	ldr	r3, [r4, #8]
 23f63fc:	2b00      	cmp	r3, #0
 23f63fe:	d1f5      	bne.n	23f63ec <_ZN6String7reserveEj+0xe>
 23f6400:	6822      	ldr	r2, [r4, #0]
 23f6402:	7013      	strb	r3, [r2, #0]
 23f6404:	e7f2      	b.n	23f63ec <_ZN6String7reserveEj+0xe>

023f6406 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23f6406:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f6408:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23f640a:	4611      	mov	r1, r2
 23f640c:	9201      	str	r2, [sp, #4]
{
 23f640e:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23f6410:	f7ff ffe5 	bl	23f63de <_ZN6String7reserveEj>
 23f6414:	9a01      	ldr	r2, [sp, #4]
 23f6416:	b928      	cbnz	r0, 23f6424 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23f6418:	4620      	mov	r0, r4
 23f641a:	f7ff ffc9 	bl	23f63b0 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23f641e:	4620      	mov	r0, r4
 23f6420:	b003      	add	sp, #12
 23f6422:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23f6424:	4629      	mov	r1, r5
	len = length;
 23f6426:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23f6428:	6820      	ldr	r0, [r4, #0]
 23f642a:	f002 fc53 	bl	23f8cd4 <memcpy>
	buffer[len] = 0;
 23f642e:	2100      	movs	r1, #0
 23f6430:	6822      	ldr	r2, [r4, #0]
 23f6432:	68a3      	ldr	r3, [r4, #8]
 23f6434:	54d1      	strb	r1, [r2, r3]
	return *this;
 23f6436:	e7f2      	b.n	23f641e <_ZN6String4copyEPKcj+0x18>

023f6438 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23f6438:	b538      	push	{r3, r4, r5, lr}
 23f643a:	4605      	mov	r5, r0
	if (buffer) {
 23f643c:	6800      	ldr	r0, [r0, #0]
{
 23f643e:	460c      	mov	r4, r1
	if (buffer) {
 23f6440:	b170      	cbz	r0, 23f6460 <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
 23f6442:	686a      	ldr	r2, [r5, #4]
 23f6444:	688b      	ldr	r3, [r1, #8]
 23f6446:	429a      	cmp	r2, r3
 23f6448:	d308      	bcc.n	23f645c <_ZN6String4moveERS_+0x24>
 23f644a:	6809      	ldr	r1, [r1, #0]
 23f644c:	b131      	cbz	r1, 23f645c <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
 23f644e:	f002 fcc4 	bl	23f8dda <strcpy>
			len = rhs.len;
 23f6452:	68a3      	ldr	r3, [r4, #8]
 23f6454:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 23f6456:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 23f6458:	60a3      	str	r3, [r4, #8]
}
 23f645a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 23f645c:	f7fe f97c 	bl	23f4758 <free>
	buffer = rhs.buffer;
 23f6460:	6823      	ldr	r3, [r4, #0]
 23f6462:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 23f6464:	6863      	ldr	r3, [r4, #4]
 23f6466:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 23f6468:	68a3      	ldr	r3, [r4, #8]
 23f646a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 23f646c:	2300      	movs	r3, #0
	rhs.capacity = 0;
 23f646e:	e9c4 3300 	strd	r3, r3, [r4]
 23f6472:	e7f1      	b.n	23f6458 <_ZN6String4moveERS_+0x20>

023f6474 <_ZN6StringC1EOS_>:
	buffer = NULL;
 23f6474:	2300      	movs	r3, #0
String::String(String &&rval)
 23f6476:	b510      	push	{r4, lr}
 23f6478:	4604      	mov	r4, r0
	capacity = 0;
 23f647a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23f647e:	6083      	str	r3, [r0, #8]
	flags = 0;
 23f6480:	7303      	strb	r3, [r0, #12]
	move(rval);
 23f6482:	f7ff ffd9 	bl	23f6438 <_ZN6String4moveERS_>
}
 23f6486:	4620      	mov	r0, r4
 23f6488:	bd10      	pop	{r4, pc}

023f648a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23f648a:	4288      	cmp	r0, r1
{
 23f648c:	b510      	push	{r4, lr}
 23f648e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23f6490:	d005      	beq.n	23f649e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23f6492:	680b      	ldr	r3, [r1, #0]
 23f6494:	b12b      	cbz	r3, 23f64a2 <_ZN6StringaSERKS_+0x18>
 23f6496:	688a      	ldr	r2, [r1, #8]
 23f6498:	4619      	mov	r1, r3
 23f649a:	f7ff ffb4 	bl	23f6406 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23f649e:	4620      	mov	r0, r4
 23f64a0:	bd10      	pop	{r4, pc}
	else invalidate();
 23f64a2:	f7ff ff85 	bl	23f63b0 <_ZN6String10invalidateEv>
 23f64a6:	e7fa      	b.n	23f649e <_ZN6StringaSERKS_+0x14>

023f64a8 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23f64a8:	2300      	movs	r3, #0
String::String(const String &value)
 23f64aa:	b510      	push	{r4, lr}
 23f64ac:	4604      	mov	r4, r0
	capacity = 0;
 23f64ae:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23f64b2:	6083      	str	r3, [r0, #8]
	flags = 0;
 23f64b4:	7303      	strb	r3, [r0, #12]
	*this = value;
 23f64b6:	f7ff ffe8 	bl	23f648a <_ZN6StringaSERKS_>
}
 23f64ba:	4620      	mov	r0, r4
 23f64bc:	bd10      	pop	{r4, pc}
	...

023f64c0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23f64c0:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23f64c2:	2000      	movs	r0, #0
 23f64c4:	4b04      	ldr	r3, [pc, #16]	; (23f64d8 <_GLOBAL__sub_I_System+0x18>)
 23f64c6:	601a      	str	r2, [r3, #0]
 23f64c8:	4b04      	ldr	r3, [pc, #16]	; (23f64dc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23f64ca:	4a05      	ldr	r2, [pc, #20]	; (23f64e0 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23f64cc:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23f64d0:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23f64d2:	f7fe b829 	b.w	23f4528 <set_system_mode>
 23f64d6:	bf00      	nop
 23f64d8:	1007aec0 	.word	0x1007aec0
 23f64dc:	1007aeb4 	.word	0x1007aeb4
 23f64e0:	ffff0000 	.word	0xffff0000

023f64e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23f64e4:	4b02      	ldr	r3, [pc, #8]	; (23f64f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23f64e6:	681a      	ldr	r2, [r3, #0]
 23f64e8:	4b02      	ldr	r3, [pc, #8]	; (23f64f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23f64ea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23f64ec:	4770      	bx	lr
 23f64ee:	bf00      	nop
 23f64f0:	1007a4b4 	.word	0x1007a4b4
 23f64f4:	1007aec4 	.word	0x1007aec4

023f64f8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23f64f8:	4770      	bx	lr

023f64fa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f64fa:	7441      	strb	r1, [r0, #17]
}
 23f64fc:	4770      	bx	lr

023f64fe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23f64fe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23f6500:	7c00      	ldrb	r0, [r0, #16]
 23f6502:	f7fd ff3f 	bl	23f4384 <hal_usart_available_data_for_write>
}
 23f6506:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f650a:	bd08      	pop	{r3, pc}

023f650c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23f650c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23f650e:	7c00      	ldrb	r0, [r0, #16]
 23f6510:	f7fd fef2 	bl	23f42f8 <hal_usart_available>
}
 23f6514:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f6518:	bd08      	pop	{r3, pc}

023f651a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23f651a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23f651c:	7c00      	ldrb	r0, [r0, #16]
 23f651e:	f7fd ff07 	bl	23f4330 <hal_usart_peek>
}
 23f6522:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f6526:	bd08      	pop	{r3, pc}

023f6528 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23f6528:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23f652a:	7c00      	ldrb	r0, [r0, #16]
 23f652c:	f7fd fef2 	bl	23f4314 <hal_usart_read>
}
 23f6530:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f6534:	bd08      	pop	{r3, pc}

023f6536 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23f6536:	7c00      	ldrb	r0, [r0, #16]
 23f6538:	f7fd bf08 	b.w	23f434c <hal_usart_flush>

023f653c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23f653c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f653e:	7c45      	ldrb	r5, [r0, #17]
{
 23f6540:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f6542:	b12d      	cbz	r5, 23f6550 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23f6544:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23f6546:	b003      	add	sp, #12
 23f6548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23f654c:	f7fd bec6 	b.w	23f42dc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23f6550:	7c00      	ldrb	r0, [r0, #16]
 23f6552:	9101      	str	r1, [sp, #4]
 23f6554:	f7fd ff16 	bl	23f4384 <hal_usart_available_data_for_write>
 23f6558:	2800      	cmp	r0, #0
 23f655a:	9901      	ldr	r1, [sp, #4]
 23f655c:	dcf2      	bgt.n	23f6544 <_ZN11USARTSerial5writeEh+0x8>
}
 23f655e:	4628      	mov	r0, r5
 23f6560:	b003      	add	sp, #12
 23f6562:	bd30      	pop	{r4, r5, pc}

023f6564 <_ZN11USARTSerialD0Ev>:
 23f6564:	b510      	push	{r4, lr}
 23f6566:	4604      	mov	r4, r0
 23f6568:	2114      	movs	r1, #20
 23f656a:	f7f2 f80e 	bl	23e858a <_ZdlPvj>
 23f656e:	4620      	mov	r0, r4
 23f6570:	bd10      	pop	{r4, pc}
	...

023f6574 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f6574:	b510      	push	{r4, lr}
 23f6576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f657a:	4604      	mov	r4, r0
 23f657c:	4608      	mov	r0, r1
 23f657e:	4611      	mov	r1, r2
 23f6580:	2200      	movs	r2, #0
 23f6582:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23f6586:	4b04      	ldr	r3, [pc, #16]	; (23f6598 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23f6588:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23f658a:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f658c:	2301      	movs	r3, #1
 23f658e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23f6590:	f7fd ff14 	bl	23f43bc <hal_usart_init_ex>
}
 23f6594:	4620      	mov	r0, r4
 23f6596:	bd10      	pop	{r4, pc}
 23f6598:	023ff99c 	.word	0x023ff99c

023f659c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23f659c:	2300      	movs	r3, #0
 23f659e:	7c00      	ldrb	r0, [r0, #16]
 23f65a0:	f7fd befe 	b.w	23f43a0 <hal_usart_begin_config>

023f65a4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23f65a4:	2200      	movs	r2, #0
 23f65a6:	f7ff bff9 	b.w	23f659c <_ZN11USARTSerial5beginEmm>

023f65aa <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23f65aa:	7c00      	ldrb	r0, [r0, #16]
 23f65ac:	f7fd be88 	b.w	23f42c0 <hal_usart_end>

023f65b0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23f65b0:	7c00      	ldrb	r0, [r0, #16]
 23f65b2:	f7fd bed9 	b.w	23f4368 <hal_usart_is_enabled>

023f65b6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23f65b6:	7441      	strb	r1, [r0, #17]
}
 23f65b8:	4770      	bx	lr

023f65ba <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f65ba:	4770      	bx	lr

023f65bc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23f65bc:	4770      	bx	lr

023f65be <_ZN9USBSerial4readEv>:
{
 23f65be:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23f65c0:	2100      	movs	r1, #0
 23f65c2:	7c00      	ldrb	r0, [r0, #16]
 23f65c4:	f7fd ff4e 	bl	23f4464 <HAL_USB_USART_Receive_Data>
}
 23f65c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f65cc:	bd08      	pop	{r3, pc}

023f65ce <_ZN9USBSerial4peekEv>:
{
 23f65ce:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23f65d0:	2101      	movs	r1, #1
 23f65d2:	7c00      	ldrb	r0, [r0, #16]
 23f65d4:	f7fd ff46 	bl	23f4464 <HAL_USB_USART_Receive_Data>
}
 23f65d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23f65dc:	bd08      	pop	{r3, pc}

023f65de <_ZN9USBSerial17availableForWriteEv>:
{
 23f65de:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23f65e0:	7c00      	ldrb	r0, [r0, #16]
 23f65e2:	f7fd ff31 	bl	23f4448 <HAL_USB_USART_Available_Data_For_Write>
}
 23f65e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f65ea:	bd08      	pop	{r3, pc}

023f65ec <_ZN9USBSerial9availableEv>:
{
 23f65ec:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23f65ee:	7c00      	ldrb	r0, [r0, #16]
 23f65f0:	f7fd ff1c 	bl	23f442c <HAL_USB_USART_Available_Data>
}
 23f65f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23f65f8:	bd08      	pop	{r3, pc}

023f65fa <_ZN9USBSerial5writeEh>:
{
 23f65fa:	b513      	push	{r0, r1, r4, lr}
 23f65fc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f65fe:	7c00      	ldrb	r0, [r0, #16]
{
 23f6600:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23f6602:	f7fd ff21 	bl	23f4448 <HAL_USB_USART_Available_Data_For_Write>
 23f6606:	2800      	cmp	r0, #0
 23f6608:	9901      	ldr	r1, [sp, #4]
 23f660a:	dc01      	bgt.n	23f6610 <_ZN9USBSerial5writeEh+0x16>
 23f660c:	7c60      	ldrb	r0, [r4, #17]
 23f660e:	b120      	cbz	r0, 23f661a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23f6610:	7c20      	ldrb	r0, [r4, #16]
 23f6612:	f7fd ff35 	bl	23f4480 <HAL_USB_USART_Send_Data>
 23f6616:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23f661a:	b002      	add	sp, #8
 23f661c:	bd10      	pop	{r4, pc}

023f661e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23f661e:	7c00      	ldrb	r0, [r0, #16]
 23f6620:	f7fd bf3c 	b.w	23f449c <HAL_USB_USART_Flush_Data>

023f6624 <_ZN9USBSerialD0Ev>:
 23f6624:	b510      	push	{r4, lr}
 23f6626:	4604      	mov	r4, r0
 23f6628:	2114      	movs	r1, #20
 23f662a:	f7f1 ffae 	bl	23e858a <_ZdlPvj>
 23f662e:	4620      	mov	r0, r4
 23f6630:	bd10      	pop	{r4, pc}
	...

023f6634 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f6634:	b510      	push	{r4, lr}
 23f6636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23f663a:	4604      	mov	r4, r0
 23f663c:	4608      	mov	r0, r1
 23f663e:	2100      	movs	r1, #0
 23f6640:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23f6644:	4b04      	ldr	r3, [pc, #16]	; (23f6658 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23f6646:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23f6648:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23f664a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23f664c:	4611      	mov	r1, r2
  _blocking = true;
 23f664e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23f6650:	f7fd fec2 	bl	23f43d8 <HAL_USB_USART_Init>
}
 23f6654:	4620      	mov	r0, r4
 23f6656:	bd10      	pop	{r4, pc}
 23f6658:	023ff9cc 	.word	0x023ff9cc

023f665c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23f665c:	2200      	movs	r2, #0
 23f665e:	7c00      	ldrb	r0, [r0, #16]
 23f6660:	f7fd bec8 	b.w	23f43f4 <HAL_USB_USART_Begin>

023f6664 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23f6664:	7c00      	ldrb	r0, [r0, #16]
 23f6666:	f7fd bed3 	b.w	23f4410 <HAL_USB_USART_End>

023f666a <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
 23f666a:	7c00      	ldrb	r0, [r0, #16]
 23f666c:	f7fd bf24 	b.w	23f44b8 <HAL_USB_USART_Is_Connected>

023f6670 <_Z19acquireSerialBufferv>:
{
 23f6670:	b510      	push	{r4, lr}
 23f6672:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23f6674:	2214      	movs	r2, #20
 23f6676:	2100      	movs	r1, #0
 23f6678:	f002 fb53 	bl	23f8d22 <memset>
}
 23f667c:	4620      	mov	r0, r4
 23f667e:	bd10      	pop	{r4, pc}

023f6680 <_Z16_fetch_usbserialv>:
{
 23f6680:	b510      	push	{r4, lr}
 23f6682:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23f6684:	a803      	add	r0, sp, #12
 23f6686:	f7ff fff3 	bl	23f6670 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23f668a:	4c0c      	ldr	r4, [pc, #48]	; (23f66bc <_Z16_fetch_usbserialv+0x3c>)
 23f668c:	e8d4 1f8f 	ldab	r1, [r4]
 23f6690:	f011 0101 	ands.w	r1, r1, #1
 23f6694:	d10f      	bne.n	23f66b6 <_Z16_fetch_usbserialv+0x36>
 23f6696:	4620      	mov	r0, r4
 23f6698:	9101      	str	r1, [sp, #4]
 23f669a:	f7f1 ff85 	bl	23e85a8 <__cxa_guard_acquire>
 23f669e:	9901      	ldr	r1, [sp, #4]
 23f66a0:	b148      	cbz	r0, 23f66b6 <_Z16_fetch_usbserialv+0x36>
 23f66a2:	aa03      	add	r2, sp, #12
 23f66a4:	4806      	ldr	r0, [pc, #24]	; (23f66c0 <_Z16_fetch_usbserialv+0x40>)
 23f66a6:	f7ff ffc5 	bl	23f6634 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23f66aa:	4620      	mov	r0, r4
 23f66ac:	f7f1 ff81 	bl	23e85b2 <__cxa_guard_release>
 23f66b0:	4804      	ldr	r0, [pc, #16]	; (23f66c4 <_Z16_fetch_usbserialv+0x44>)
 23f66b2:	f002 faf5 	bl	23f8ca0 <atexit>
	return _usbserial;
}
 23f66b6:	4802      	ldr	r0, [pc, #8]	; (23f66c0 <_Z16_fetch_usbserialv+0x40>)
 23f66b8:	b008      	add	sp, #32
 23f66ba:	bd10      	pop	{r4, pc}
 23f66bc:	1007aec8 	.word	0x1007aec8
 23f66c0:	1007aecc 	.word	0x1007aecc
 23f66c4:	023f65bb 	.word	0x023f65bb

023f66c8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23f66c8:	2200      	movs	r2, #0
 23f66ca:	6840      	ldr	r0, [r0, #4]
 23f66cc:	4611      	mov	r1, r2
 23f66ce:	f7fd bfb7 	b.w	23f4640 <network_ready>

023f66d2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23f66d2:	2200      	movs	r2, #0
 23f66d4:	6840      	ldr	r0, [r0, #4]
 23f66d6:	4611      	mov	r1, r2
 23f66d8:	f7fd bfea 	b.w	23f46b0 <network_listening>

023f66dc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23f66dc:	2200      	movs	r2, #0
 23f66de:	6840      	ldr	r0, [r0, #4]
 23f66e0:	4611      	mov	r1, r2
 23f66e2:	f7fe b801 	b.w	23f46e8 <network_get_listen_timeout>

023f66e6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23f66e6:	2200      	movs	r2, #0
 23f66e8:	6840      	ldr	r0, [r0, #4]
 23f66ea:	f7fd bfef 	b.w	23f46cc <network_set_listen_timeout>

023f66ee <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23f66ee:	2200      	movs	r2, #0
 23f66f0:	6840      	ldr	r0, [r0, #4]
 23f66f2:	f081 0101 	eor.w	r1, r1, #1
 23f66f6:	f7fd bfcd 	b.w	23f4694 <network_listen>

023f66fa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23f66fa:	2300      	movs	r3, #0
 23f66fc:	6840      	ldr	r0, [r0, #4]
 23f66fe:	461a      	mov	r2, r3
 23f6700:	4619      	mov	r1, r3
 23f6702:	f7fd bfb9 	b.w	23f4678 <network_off>

023f6706 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23f6706:	2300      	movs	r3, #0
 23f6708:	6840      	ldr	r0, [r0, #4]
 23f670a:	461a      	mov	r2, r3
 23f670c:	4619      	mov	r1, r3
 23f670e:	f7fd bfa5 	b.w	23f465c <network_on>

023f6712 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23f6712:	2200      	movs	r2, #0
 23f6714:	6840      	ldr	r0, [r0, #4]
 23f6716:	4611      	mov	r1, r2
 23f6718:	f7fd bf76 	b.w	23f4608 <network_connecting>

023f671c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23f671c:	2200      	movs	r2, #0
 23f671e:	2102      	movs	r1, #2
 23f6720:	6840      	ldr	r0, [r0, #4]
 23f6722:	f7fd bf7f 	b.w	23f4624 <network_disconnect>

023f6726 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23f6726:	2300      	movs	r3, #0
 23f6728:	6840      	ldr	r0, [r0, #4]
 23f672a:	461a      	mov	r2, r3
 23f672c:	f7fd bf5e 	b.w	23f45ec <network_connect>

023f6730 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23f6730:	2204      	movs	r2, #4
 23f6732:	4b02      	ldr	r3, [pc, #8]	; (23f673c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23f6734:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23f6736:	4a02      	ldr	r2, [pc, #8]	; (23f6740 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23f6738:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23f673a:	4770      	bx	lr
 23f673c:	1007aee0 	.word	0x1007aee0
 23f6740:	023ff9fc 	.word	0x023ff9fc

023f6744 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23f6744:	4b01      	ldr	r3, [pc, #4]	; (23f674c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23f6746:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23f6748:	4770      	bx	lr
 23f674a:	bf00      	nop
 23f674c:	1007a4bc 	.word	0x1007a4bc

023f6750 <serialEventRun>:
{
 23f6750:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23f6752:	4b0f      	ldr	r3, [pc, #60]	; (23f6790 <serialEventRun+0x40>)
 23f6754:	b143      	cbz	r3, 23f6768 <serialEventRun+0x18>
 23f6756:	f7ff ff93 	bl	23f6680 <_Z16_fetch_usbserialv>
 23f675a:	6803      	ldr	r3, [r0, #0]
 23f675c:	691b      	ldr	r3, [r3, #16]
 23f675e:	4798      	blx	r3
 23f6760:	2800      	cmp	r0, #0
 23f6762:	dd01      	ble.n	23f6768 <serialEventRun+0x18>
        serialEvent();
 23f6764:	e000      	b.n	23f6768 <serialEventRun+0x18>
 23f6766:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23f6768:	4b0a      	ldr	r3, [pc, #40]	; (23f6794 <serialEventRun+0x44>)
 23f676a:	b143      	cbz	r3, 23f677e <serialEventRun+0x2e>
 23f676c:	f000 f958 	bl	23f6a20 <_Z22__fetch_global_Serial1v>
 23f6770:	6803      	ldr	r3, [r0, #0]
 23f6772:	691b      	ldr	r3, [r3, #16]
 23f6774:	4798      	blx	r3
 23f6776:	2800      	cmp	r0, #0
 23f6778:	dd01      	ble.n	23f677e <serialEventRun+0x2e>
        serialEvent1();
 23f677a:	e000      	b.n	23f677e <serialEventRun+0x2e>
 23f677c:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23f677e:	4b06      	ldr	r3, [pc, #24]	; (23f6798 <serialEventRun+0x48>)
 23f6780:	b10b      	cbz	r3, 23f6786 <serialEventRun+0x36>
 23f6782:	f000 f993 	bl	23f6aac <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23f6786:	4b05      	ldr	r3, [pc, #20]	; (23f679c <serialEventRun+0x4c>)
 23f6788:	b10b      	cbz	r3, 23f678e <serialEventRun+0x3e>
 23f678a:	f000 f9c5 	bl	23f6b18 <_Z15serialEventRun3v>
}
 23f678e:	bd08      	pop	{r3, pc}
	...

023f67a0 <_post_loop>:
{
 23f67a0:	b508      	push	{r3, lr}
	serialEventRun();
 23f67a2:	f7ff ffd5 	bl	23f6750 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23f67a6:	f7fd fc49 	bl	23f403c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23f67aa:	4b01      	ldr	r3, [pc, #4]	; (23f67b0 <_post_loop+0x10>)
 23f67ac:	6018      	str	r0, [r3, #0]
}
 23f67ae:	bd08      	pop	{r3, pc}
 23f67b0:	1007aef0 	.word	0x1007aef0

023f67b4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23f67b4:	4805      	ldr	r0, [pc, #20]	; (23f67cc <_Z33system_initialize_user_backup_ramv+0x18>)
 23f67b6:	4a06      	ldr	r2, [pc, #24]	; (23f67d0 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23f67b8:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23f67ba:	1a12      	subs	r2, r2, r0
 23f67bc:	4905      	ldr	r1, [pc, #20]	; (23f67d4 <_Z33system_initialize_user_backup_ramv+0x20>)
 23f67be:	f002 fa89 	bl	23f8cd4 <memcpy>
    __backup_sram_signature = signature;
 23f67c2:	4b05      	ldr	r3, [pc, #20]	; (23f67d8 <_Z33system_initialize_user_backup_ramv+0x24>)
 23f67c4:	4a05      	ldr	r2, [pc, #20]	; (23f67dc <_Z33system_initialize_user_backup_ramv+0x28>)
 23f67c6:	601a      	str	r2, [r3, #0]
}
 23f67c8:	bd08      	pop	{r3, pc}
 23f67ca:	bf00      	nop
 23f67cc:	1007b400 	.word	0x1007b400
 23f67d0:	1007b404 	.word	0x1007b404
 23f67d4:	085ffcfc 	.word	0x085ffcfc
 23f67d8:	1007b400 	.word	0x1007b400
 23f67dc:	9a271c1e 	.word	0x9a271c1e

023f67e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f67e0:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23f67e2:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f67e4:	461a      	mov	r2, r3
 23f67e6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23f67ea:	9300      	str	r3, [sp, #0]
 23f67ec:	f7fd fed4 	bl	23f4598 <system_ctrl_set_result>
}
 23f67f0:	b003      	add	sp, #12
 23f67f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023f67f8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23f67f8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23f67fa:	8843      	ldrh	r3, [r0, #2]
 23f67fc:	2b0a      	cmp	r3, #10
 23f67fe:	d008      	beq.n	23f6812 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23f6800:	2b50      	cmp	r3, #80	; 0x50
 23f6802:	d10b      	bne.n	23f681c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23f6804:	4b09      	ldr	r3, [pc, #36]	; (23f682c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23f6806:	681b      	ldr	r3, [r3, #0]
 23f6808:	b14b      	cbz	r3, 23f681e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23f680a:	b003      	add	sp, #12
 23f680c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23f6810:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23f6812:	f7ff ffe5 	bl	23f67e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23f6816:	b003      	add	sp, #12
 23f6818:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23f681c:	2300      	movs	r3, #0
 23f681e:	461a      	mov	r2, r3
 23f6820:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23f6824:	9300      	str	r3, [sp, #0]
 23f6826:	f7fd feb7 	bl	23f4598 <system_ctrl_set_result>
}
 23f682a:	e7f4      	b.n	23f6816 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23f682c:	1007aeec 	.word	0x1007aeec

023f6830 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23f6830:	2100      	movs	r1, #0
{
 23f6832:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23f6834:	4811      	ldr	r0, [pc, #68]	; (23f687c <module_user_init_hook+0x4c>)
 23f6836:	f7fd fff1 	bl	23f481c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23f683a:	4b11      	ldr	r3, [pc, #68]	; (23f6880 <module_user_init_hook+0x50>)
 23f683c:	681a      	ldr	r2, [r3, #0]
 23f683e:	4b11      	ldr	r3, [pc, #68]	; (23f6884 <module_user_init_hook+0x54>)
 23f6840:	429a      	cmp	r2, r3
 23f6842:	bf0c      	ite	eq
 23f6844:	2201      	moveq	r2, #1
 23f6846:	2200      	movne	r2, #0
 23f6848:	4b0f      	ldr	r3, [pc, #60]	; (23f6888 <module_user_init_hook+0x58>)
 23f684a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23f684c:	d001      	beq.n	23f6852 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23f684e:	f7ff ffb1 	bl	23f67b4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23f6852:	f7fd fbc9 	bl	23f3fe8 <HAL_RNG_GetRandomNumber>
 23f6856:	4604      	mov	r4, r0
    srand(seed);
 23f6858:	f002 fa7a 	bl	23f8d50 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23f685c:	4b0b      	ldr	r3, [pc, #44]	; (23f688c <module_user_init_hook+0x5c>)
 23f685e:	b113      	cbz	r3, 23f6866 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23f6860:	4620      	mov	r0, r4
 23f6862:	e000      	b.n	23f6866 <module_user_init_hook+0x36>
 23f6864:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23f6866:	2100      	movs	r1, #0
 23f6868:	4808      	ldr	r0, [pc, #32]	; (23f688c <module_user_init_hook+0x5c>)
 23f686a:	f7fd feb1 	bl	23f45d0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23f686e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23f6872:	2100      	movs	r1, #0
 23f6874:	4806      	ldr	r0, [pc, #24]	; (23f6890 <module_user_init_hook+0x60>)
 23f6876:	f7fd be81 	b.w	23f457c <system_ctrl_set_app_request_handler>
 23f687a:	bf00      	nop
 23f687c:	023f6745 	.word	0x023f6745
 23f6880:	1007b400 	.word	0x1007b400
 23f6884:	9a271c1e 	.word	0x9a271c1e
 23f6888:	1007aee8 	.word	0x1007aee8
 23f688c:	00000000 	.word	0x00000000
 23f6890:	023f67f9 	.word	0x023f67f9

023f6894 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23f6894:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23f6896:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23f6898:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23f689a:	d902      	bls.n	23f68a2 <pinAvailable+0xe>
    return false;
 23f689c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23f689e:	b003      	add	sp, #12
 23f68a0:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23f68a2:	f1a0 030f 	sub.w	r3, r0, #15
 23f68a6:	2b02      	cmp	r3, #2
 23f68a8:	d90b      	bls.n	23f68c2 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23f68aa:	2801      	cmp	r0, #1
 23f68ac:	d821      	bhi.n	23f68f2 <pinAvailable+0x5e>
 23f68ae:	f000 f863 	bl	23f6978 <_Z19__fetch_global_Wirev>
 23f68b2:	2100      	movs	r1, #0
 23f68b4:	7c00      	ldrb	r0, [r0, #16]
 23f68b6:	f7fd fc3f 	bl	23f4138 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23f68ba:	f080 0001 	eor.w	r0, r0, #1
 23f68be:	b2c0      	uxtb	r0, r0
 23f68c0:	e7ed      	b.n	23f689e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23f68c2:	4d11      	ldr	r5, [pc, #68]	; (23f6908 <pinAvailable+0x74>)
 23f68c4:	e8d5 1f8f 	ldab	r1, [r5]
 23f68c8:	f011 0101 	ands.w	r1, r1, #1
 23f68cc:	d10b      	bne.n	23f68e6 <pinAvailable+0x52>
 23f68ce:	4628      	mov	r0, r5
 23f68d0:	9101      	str	r1, [sp, #4]
 23f68d2:	f7f1 fe69 	bl	23e85a8 <__cxa_guard_acquire>
 23f68d6:	9901      	ldr	r1, [sp, #4]
 23f68d8:	b128      	cbz	r0, 23f68e6 <pinAvailable+0x52>
 23f68da:	480c      	ldr	r0, [pc, #48]	; (23f690c <pinAvailable+0x78>)
 23f68dc:	f7ff fca8 	bl	23f6230 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23f68e0:	4628      	mov	r0, r5
 23f68e2:	f7f1 fe66 	bl	23e85b2 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23f68e6:	4b09      	ldr	r3, [pc, #36]	; (23f690c <pinAvailable+0x78>)
 23f68e8:	7818      	ldrb	r0, [r3, #0]
 23f68ea:	f7fd fc87 	bl	23f41fc <hal_spi_is_enabled>
 23f68ee:	2800      	cmp	r0, #0
 23f68f0:	d1d4      	bne.n	23f689c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23f68f2:	3c08      	subs	r4, #8
 23f68f4:	2c01      	cmp	r4, #1
 23f68f6:	d805      	bhi.n	23f6904 <pinAvailable+0x70>
 23f68f8:	f000 f892 	bl	23f6a20 <_Z22__fetch_global_Serial1v>
 23f68fc:	7c00      	ldrb	r0, [r0, #16]
 23f68fe:	f7fd fd33 	bl	23f4368 <hal_usart_is_enabled>
 23f6902:	e7da      	b.n	23f68ba <pinAvailable+0x26>
  return true; // 'pin' is available
 23f6904:	2001      	movs	r0, #1
 23f6906:	e7ca      	b.n	23f689e <pinAvailable+0xa>
 23f6908:	1007a694 	.word	0x1007a694
 23f690c:	1007a698 	.word	0x1007a698

023f6910 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23f6910:	b538      	push	{r3, r4, r5, lr}
 23f6912:	4604      	mov	r4, r0
 23f6914:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23f6916:	f7fd fbad 	bl	23f4074 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23f691a:	28ff      	cmp	r0, #255	; 0xff
 23f691c:	d010      	beq.n	23f6940 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23f691e:	2806      	cmp	r0, #6
 23f6920:	d804      	bhi.n	23f692c <digitalWrite+0x1c>
 23f6922:	234d      	movs	r3, #77	; 0x4d
 23f6924:	fa23 f000 	lsr.w	r0, r3, r0
 23f6928:	07c3      	lsls	r3, r0, #31
 23f692a:	d409      	bmi.n	23f6940 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23f692c:	4620      	mov	r0, r4
 23f692e:	f7ff ffb1 	bl	23f6894 <pinAvailable>
 23f6932:	b128      	cbz	r0, 23f6940 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23f6934:	4629      	mov	r1, r5
 23f6936:	4620      	mov	r0, r4
}
 23f6938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23f693c:	f7fd bba8 	b.w	23f4090 <hal_gpio_write>
}
 23f6940:	bd38      	pop	{r3, r4, r5, pc}

023f6942 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23f6942:	4770      	bx	lr

023f6944 <_Z17acquireWireBufferv>:
{
 23f6944:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23f6946:	4b0a      	ldr	r3, [pc, #40]	; (23f6970 <_Z17acquireWireBufferv+0x2c>)
{
 23f6948:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23f694a:	6003      	str	r3, [r0, #0]
 23f694c:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f694e:	4909      	ldr	r1, [pc, #36]	; (23f6974 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23f6950:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f6952:	2020      	movs	r0, #32
 23f6954:	f000 f8f6 	bl	23f6b44 <_ZnajRKSt9nothrow_t>
	};
 23f6958:	2520      	movs	r5, #32
 23f695a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f695c:	4905      	ldr	r1, [pc, #20]	; (23f6974 <_Z17acquireWireBufferv+0x30>)
 23f695e:	4628      	mov	r0, r5
	};
 23f6960:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23f6962:	f000 f8ef 	bl	23f6b44 <_ZnajRKSt9nothrow_t>
	};
 23f6966:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23f696a:	4620      	mov	r0, r4
 23f696c:	bd38      	pop	{r3, r4, r5, pc}
 23f696e:	bf00      	nop
 23f6970:	00010018 	.word	0x00010018
 23f6974:	023ffa30 	.word	0x023ffa30

023f6978 <_Z19__fetch_global_Wirev>:
{
 23f6978:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23f697a:	4d0e      	ldr	r5, [pc, #56]	; (23f69b4 <_Z19__fetch_global_Wirev+0x3c>)
{
 23f697c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23f697e:	e8d5 1f8f 	ldab	r1, [r5]
 23f6982:	f011 0401 	ands.w	r4, r1, #1
 23f6986:	d111      	bne.n	23f69ac <_Z19__fetch_global_Wirev+0x34>
 23f6988:	4628      	mov	r0, r5
 23f698a:	f7f1 fe0d 	bl	23e85a8 <__cxa_guard_acquire>
 23f698e:	b168      	cbz	r0, 23f69ac <_Z19__fetch_global_Wirev+0x34>
 23f6990:	4668      	mov	r0, sp
 23f6992:	f7ff ffd7 	bl	23f6944 <_Z17acquireWireBufferv>
 23f6996:	466a      	mov	r2, sp
 23f6998:	4621      	mov	r1, r4
 23f699a:	4807      	ldr	r0, [pc, #28]	; (23f69b8 <_Z19__fetch_global_Wirev+0x40>)
 23f699c:	f7fd fffe 	bl	23f499c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23f69a0:	4628      	mov	r0, r5
 23f69a2:	f7f1 fe06 	bl	23e85b2 <__cxa_guard_release>
 23f69a6:	4805      	ldr	r0, [pc, #20]	; (23f69bc <_Z19__fetch_global_Wirev+0x44>)
 23f69a8:	f002 f97a 	bl	23f8ca0 <atexit>
	return wire;
}
 23f69ac:	4802      	ldr	r0, [pc, #8]	; (23f69b8 <_Z19__fetch_global_Wirev+0x40>)
 23f69ae:	b007      	add	sp, #28
 23f69b0:	bd30      	pop	{r4, r5, pc}
 23f69b2:	bf00      	nop
 23f69b4:	1007aef4 	.word	0x1007aef4
 23f69b8:	1007aef8 	.word	0x1007aef8
 23f69bc:	023f6943 	.word	0x023f6943

023f69c0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f69c0:	4770      	bx	lr
	...

023f69c4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23f69c4:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23f69c6:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23f69c8:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23f69ca:	462a      	mov	r2, r5
 23f69cc:	2100      	movs	r1, #0
 23f69ce:	f002 f9a8 	bl	23f8d22 <memset>
 23f69d2:	8025      	strh	r5, [r4, #0]
 23f69d4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f69d6:	4907      	ldr	r1, [pc, #28]	; (23f69f4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23f69d8:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23f69da:	8125      	strh	r5, [r4, #8]
 23f69dc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f69de:	f000 f8b1 	bl	23f6b44 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f69e2:	4904      	ldr	r1, [pc, #16]	; (23f69f4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23f69e4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23f69e6:	4628      	mov	r0, r5
 23f69e8:	f000 f8ac 	bl	23f6b44 <_ZnajRKSt9nothrow_t>
    };
 23f69ec:	60e0      	str	r0, [r4, #12]
}
 23f69ee:	4620      	mov	r0, r4
 23f69f0:	bd38      	pop	{r3, r4, r5, pc}
 23f69f2:	bf00      	nop
 23f69f4:	023ffa30 	.word	0x023ffa30

023f69f8 <__tcf_2>:
 23f69f8:	4770      	bx	lr

023f69fa <__tcf_1>:
 23f69fa:	4770      	bx	lr

023f69fc <_Z20acquireSerial1Bufferv>:
{
 23f69fc:	b510      	push	{r4, lr}
 23f69fe:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23f6a00:	f7ff ffe0 	bl	23f69c4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23f6a04:	4620      	mov	r0, r4
 23f6a06:	bd10      	pop	{r4, pc}

023f6a08 <_Z20acquireSerial2Bufferv>:
 23f6a08:	b510      	push	{r4, lr}
 23f6a0a:	4604      	mov	r4, r0
 23f6a0c:	f7ff ffda 	bl	23f69c4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23f6a10:	4620      	mov	r0, r4
 23f6a12:	bd10      	pop	{r4, pc}

023f6a14 <_Z20acquireSerial3Bufferv>:
 23f6a14:	b510      	push	{r4, lr}
 23f6a16:	4604      	mov	r4, r0
 23f6a18:	f7ff ffd4 	bl	23f69c4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23f6a1c:	4620      	mov	r0, r4
 23f6a1e:	bd10      	pop	{r4, pc}

023f6a20 <_Z22__fetch_global_Serial1v>:
{
 23f6a20:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f6a22:	4d0e      	ldr	r5, [pc, #56]	; (23f6a5c <_Z22__fetch_global_Serial1v+0x3c>)
{
 23f6a24:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23f6a26:	e8d5 1f8f 	ldab	r1, [r5]
 23f6a2a:	f011 0401 	ands.w	r4, r1, #1
 23f6a2e:	d111      	bne.n	23f6a54 <_Z22__fetch_global_Serial1v+0x34>
 23f6a30:	4628      	mov	r0, r5
 23f6a32:	f7f1 fdb9 	bl	23e85a8 <__cxa_guard_acquire>
 23f6a36:	b168      	cbz	r0, 23f6a54 <_Z22__fetch_global_Serial1v+0x34>
 23f6a38:	a801      	add	r0, sp, #4
 23f6a3a:	f7ff ffdf 	bl	23f69fc <_Z20acquireSerial1Bufferv>
 23f6a3e:	4621      	mov	r1, r4
 23f6a40:	aa01      	add	r2, sp, #4
 23f6a42:	4807      	ldr	r0, [pc, #28]	; (23f6a60 <_Z22__fetch_global_Serial1v+0x40>)
 23f6a44:	f7ff fd96 	bl	23f6574 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23f6a48:	4628      	mov	r0, r5
 23f6a4a:	f7f1 fdb2 	bl	23e85b2 <__cxa_guard_release>
 23f6a4e:	4805      	ldr	r0, [pc, #20]	; (23f6a64 <_Z22__fetch_global_Serial1v+0x44>)
 23f6a50:	f002 f926 	bl	23f8ca0 <atexit>
    return serial1;
}
 23f6a54:	4802      	ldr	r0, [pc, #8]	; (23f6a60 <_Z22__fetch_global_Serial1v+0x40>)
 23f6a56:	b007      	add	sp, #28
 23f6a58:	bd30      	pop	{r4, r5, pc}
 23f6a5a:	bf00      	nop
 23f6a5c:	1007af0c 	.word	0x1007af0c
 23f6a60:	1007af18 	.word	0x1007af18
 23f6a64:	023f69c1 	.word	0x023f69c1

023f6a68 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23f6a68:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23f6a6a:	4c0d      	ldr	r4, [pc, #52]	; (23f6aa0 <_Z22__fetch_global_Serial2v+0x38>)
{
 23f6a6c:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23f6a6e:	e8d4 3f8f 	ldab	r3, [r4]
 23f6a72:	07db      	lsls	r3, r3, #31
 23f6a74:	d411      	bmi.n	23f6a9a <_Z22__fetch_global_Serial2v+0x32>
 23f6a76:	4620      	mov	r0, r4
 23f6a78:	f7f1 fd96 	bl	23e85a8 <__cxa_guard_acquire>
 23f6a7c:	b168      	cbz	r0, 23f6a9a <_Z22__fetch_global_Serial2v+0x32>
 23f6a7e:	a801      	add	r0, sp, #4
 23f6a80:	f7ff ffc2 	bl	23f6a08 <_Z20acquireSerial2Bufferv>
 23f6a84:	2101      	movs	r1, #1
 23f6a86:	aa01      	add	r2, sp, #4
 23f6a88:	4806      	ldr	r0, [pc, #24]	; (23f6aa4 <_Z22__fetch_global_Serial2v+0x3c>)
 23f6a8a:	f7ff fd73 	bl	23f6574 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23f6a8e:	4620      	mov	r0, r4
 23f6a90:	f7f1 fd8f 	bl	23e85b2 <__cxa_guard_release>
 23f6a94:	4804      	ldr	r0, [pc, #16]	; (23f6aa8 <_Z22__fetch_global_Serial2v+0x40>)
 23f6a96:	f002 f903 	bl	23f8ca0 <atexit>
	return serial2;
}
 23f6a9a:	4802      	ldr	r0, [pc, #8]	; (23f6aa4 <_Z22__fetch_global_Serial2v+0x3c>)
 23f6a9c:	b006      	add	sp, #24
 23f6a9e:	bd10      	pop	{r4, pc}
 23f6aa0:	1007af10 	.word	0x1007af10
 23f6aa4:	1007af2c 	.word	0x1007af2c
 23f6aa8:	023f69fb 	.word	0x023f69fb

023f6aac <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23f6aac:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23f6aae:	f7ff ffdb 	bl	23f6a68 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23f6ab2:	4b07      	ldr	r3, [pc, #28]	; (23f6ad0 <_Z15serialEventRun2v+0x24>)
 23f6ab4:	4604      	mov	r4, r0
 23f6ab6:	b153      	cbz	r3, 23f6ace <_Z15serialEventRun2v+0x22>
 23f6ab8:	f7ff fd7a 	bl	23f65b0 <_ZN11USARTSerial9isEnabledEv>
 23f6abc:	b138      	cbz	r0, 23f6ace <_Z15serialEventRun2v+0x22>
 23f6abe:	6823      	ldr	r3, [r4, #0]
 23f6ac0:	4620      	mov	r0, r4
 23f6ac2:	691b      	ldr	r3, [r3, #16]
 23f6ac4:	4798      	blx	r3
 23f6ac6:	2800      	cmp	r0, #0
 23f6ac8:	dd01      	ble.n	23f6ace <_Z15serialEventRun2v+0x22>
        handler();
 23f6aca:	e000      	b.n	23f6ace <_Z15serialEventRun2v+0x22>
 23f6acc:	bf00      	nop
}
 23f6ace:	bd10      	pop	{r4, pc}
 23f6ad0:	00000000 	.word	0x00000000

023f6ad4 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23f6ad4:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23f6ad6:	4c0d      	ldr	r4, [pc, #52]	; (23f6b0c <_Z22__fetch_global_Serial3v+0x38>)
{
 23f6ad8:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23f6ada:	e8d4 3f8f 	ldab	r3, [r4]
 23f6ade:	07db      	lsls	r3, r3, #31
 23f6ae0:	d411      	bmi.n	23f6b06 <_Z22__fetch_global_Serial3v+0x32>
 23f6ae2:	4620      	mov	r0, r4
 23f6ae4:	f7f1 fd60 	bl	23e85a8 <__cxa_guard_acquire>
 23f6ae8:	b168      	cbz	r0, 23f6b06 <_Z22__fetch_global_Serial3v+0x32>
 23f6aea:	a801      	add	r0, sp, #4
 23f6aec:	f7ff ff92 	bl	23f6a14 <_Z20acquireSerial3Bufferv>
 23f6af0:	2102      	movs	r1, #2
 23f6af2:	aa01      	add	r2, sp, #4
 23f6af4:	4806      	ldr	r0, [pc, #24]	; (23f6b10 <_Z22__fetch_global_Serial3v+0x3c>)
 23f6af6:	f7ff fd3d 	bl	23f6574 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23f6afa:	4620      	mov	r0, r4
 23f6afc:	f7f1 fd59 	bl	23e85b2 <__cxa_guard_release>
 23f6b00:	4804      	ldr	r0, [pc, #16]	; (23f6b14 <_Z22__fetch_global_Serial3v+0x40>)
 23f6b02:	f002 f8cd 	bl	23f8ca0 <atexit>
	return serial3;
}
 23f6b06:	4802      	ldr	r0, [pc, #8]	; (23f6b10 <_Z22__fetch_global_Serial3v+0x3c>)
 23f6b08:	b006      	add	sp, #24
 23f6b0a:	bd10      	pop	{r4, pc}
 23f6b0c:	1007af14 	.word	0x1007af14
 23f6b10:	1007af40 	.word	0x1007af40
 23f6b14:	023f69f9 	.word	0x023f69f9

023f6b18 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23f6b18:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23f6b1a:	f7ff ffdb 	bl	23f6ad4 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23f6b1e:	4b07      	ldr	r3, [pc, #28]	; (23f6b3c <_Z15serialEventRun3v+0x24>)
 23f6b20:	4604      	mov	r4, r0
 23f6b22:	b153      	cbz	r3, 23f6b3a <_Z15serialEventRun3v+0x22>
 23f6b24:	f7ff fd44 	bl	23f65b0 <_ZN11USARTSerial9isEnabledEv>
 23f6b28:	b138      	cbz	r0, 23f6b3a <_Z15serialEventRun3v+0x22>
 23f6b2a:	6823      	ldr	r3, [r4, #0]
 23f6b2c:	4620      	mov	r0, r4
 23f6b2e:	691b      	ldr	r3, [r3, #16]
 23f6b30:	4798      	blx	r3
 23f6b32:	2800      	cmp	r0, #0
 23f6b34:	dd01      	ble.n	23f6b3a <_Z15serialEventRun3v+0x22>
        handler();
 23f6b36:	e000      	b.n	23f6b3a <_Z15serialEventRun3v+0x22>
 23f6b38:	bf00      	nop
}
 23f6b3a:	bd10      	pop	{r4, pc}
 23f6b3c:	00000000 	.word	0x00000000

023f6b40 <_ZnwjRKSt9nothrow_t>:
 23f6b40:	f7f1 bd1f 	b.w	23e8582 <_Znwj>

023f6b44 <_ZnajRKSt9nothrow_t>:
 23f6b44:	f7f1 bd1f 	b.w	23e8586 <_Znaj>

023f6b48 <_ZSt20__throw_length_errorPKc>:
 23f6b48:	b508      	push	{r3, lr}
 23f6b4a:	f7fd fe2f 	bl	23f47ac <abort>

023f6b4e <_ZSt25__throw_bad_function_callv>:
 23f6b4e:	b508      	push	{r3, lr}
 23f6b50:	f7fd fe2c 	bl	23f47ac <abort>
 23f6b54:	0000      	movs	r0, r0
	...

023f6b58 <cos>:
 23f6b58:	ec51 0b10 	vmov	r0, r1, d0
 23f6b5c:	4a26      	ldr	r2, [pc, #152]	; (23f6bf8 <cos+0xa0>)
 23f6b5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f6b62:	4293      	cmp	r3, r2
 23f6b64:	dd20      	ble.n	23f6ba8 <cos+0x50>
 23f6b66:	4a25      	ldr	r2, [pc, #148]	; (23f6bfc <cos+0xa4>)
 23f6b68:	4293      	cmp	r3, r2
 23f6b6a:	b500      	push	{lr}
 23f6b6c:	b085      	sub	sp, #20
 23f6b6e:	dd09      	ble.n	23f6b84 <cos+0x2c>
 23f6b70:	ee10 2a10 	vmov	r2, s0
 23f6b74:	460b      	mov	r3, r1
 23f6b76:	f7f0 fdd7 	bl	23e7728 <__aeabi_dsub>
 23f6b7a:	ec41 0b10 	vmov	d0, r0, r1
 23f6b7e:	b005      	add	sp, #20
 23f6b80:	f85d fb04 	ldr.w	pc, [sp], #4
 23f6b84:	4668      	mov	r0, sp
 23f6b86:	f000 fae3 	bl	23f7150 <__ieee754_rem_pio2>
 23f6b8a:	f000 0003 	and.w	r0, r0, #3
 23f6b8e:	2801      	cmp	r0, #1
 23f6b90:	d00e      	beq.n	23f6bb0 <cos+0x58>
 23f6b92:	2802      	cmp	r0, #2
 23f6b94:	d022      	beq.n	23f6bdc <cos+0x84>
 23f6b96:	b1d0      	cbz	r0, 23f6bce <cos+0x76>
 23f6b98:	2001      	movs	r0, #1
 23f6b9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f6b9e:	ed9d 0b00 	vldr	d0, [sp]
 23f6ba2:	f001 fd19 	bl	23f85d8 <__kernel_sin>
 23f6ba6:	e7ea      	b.n	23f6b7e <cos+0x26>
 23f6ba8:	ed9f 1b11 	vldr	d1, [pc, #68]	; 23f6bf0 <cos+0x98>
 23f6bac:	f000 bfb0 	b.w	23f7b10 <__kernel_cos>
 23f6bb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f6bb4:	ed9d 0b00 	vldr	d0, [sp]
 23f6bb8:	f001 fd0e 	bl	23f85d8 <__kernel_sin>
 23f6bbc:	ec53 2b10 	vmov	r2, r3, d0
 23f6bc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23f6bc4:	ee00 3a90 	vmov	s1, r3
 23f6bc8:	b005      	add	sp, #20
 23f6bca:	f85d fb04 	ldr.w	pc, [sp], #4
 23f6bce:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f6bd2:	ed9d 0b00 	vldr	d0, [sp]
 23f6bd6:	f000 ff9b 	bl	23f7b10 <__kernel_cos>
 23f6bda:	e7d0      	b.n	23f6b7e <cos+0x26>
 23f6bdc:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f6be0:	ed9d 0b00 	vldr	d0, [sp]
 23f6be4:	f000 ff94 	bl	23f7b10 <__kernel_cos>
 23f6be8:	e7e8      	b.n	23f6bbc <cos+0x64>
 23f6bea:	bf00      	nop
 23f6bec:	f3af 8000 	nop.w
	...
 23f6bf8:	3fe921fb 	.word	0x3fe921fb
 23f6bfc:	7fefffff 	.word	0x7fefffff

023f6c00 <fabs>:
 23f6c00:	ec51 0b10 	vmov	r0, r1, d0
 23f6c04:	ee10 2a10 	vmov	r2, s0
 23f6c08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f6c0c:	ec43 2b10 	vmov	d0, r2, r3
 23f6c10:	4770      	bx	lr
 23f6c12:	bf00      	nop
 23f6c14:	0000      	movs	r0, r0
	...

023f6c18 <floor>:
 23f6c18:	ec51 0b10 	vmov	r0, r1, d0
 23f6c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23f6c1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23f6c22:	460c      	mov	r4, r1
 23f6c24:	ee10 6a10 	vmov	r6, s0
 23f6c28:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 23f6c2c:	2d13      	cmp	r5, #19
 23f6c2e:	dc30      	bgt.n	23f6c92 <floor+0x7a>
 23f6c30:	2d00      	cmp	r5, #0
 23f6c32:	db1e      	blt.n	23f6c72 <floor+0x5a>
 23f6c34:	4f38      	ldr	r7, [pc, #224]	; (23f6d18 <floor+0x100>)
 23f6c36:	412f      	asrs	r7, r5
 23f6c38:	ea01 0307 	and.w	r3, r1, r7
 23f6c3c:	4303      	orrs	r3, r0
 23f6c3e:	d02d      	beq.n	23f6c9c <floor+0x84>
 23f6c40:	a333      	add	r3, pc, #204	; (adr r3, 23f6d10 <floor+0xf8>)
 23f6c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f6c46:	f7f0 fd71 	bl	23e772c <__adddf3>
 23f6c4a:	2200      	movs	r2, #0
 23f6c4c:	2300      	movs	r3, #0
 23f6c4e:	f7f1 f9b3 	bl	23e7fb8 <__aeabi_dcmpgt>
 23f6c52:	b148      	cbz	r0, 23f6c68 <floor+0x50>
 23f6c54:	2c00      	cmp	r4, #0
 23f6c56:	da04      	bge.n	23f6c62 <floor+0x4a>
 23f6c58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 23f6c5c:	fa43 f505 	asr.w	r5, r3, r5
 23f6c60:	442c      	add	r4, r5
 23f6c62:	ea24 0407 	bic.w	r4, r4, r7
 23f6c66:	2600      	movs	r6, #0
 23f6c68:	4623      	mov	r3, r4
 23f6c6a:	4632      	mov	r2, r6
 23f6c6c:	ec43 2b10 	vmov	d0, r2, r3
 23f6c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f6c72:	a327      	add	r3, pc, #156	; (adr r3, 23f6d10 <floor+0xf8>)
 23f6c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f6c78:	f7f0 fd58 	bl	23e772c <__adddf3>
 23f6c7c:	2200      	movs	r2, #0
 23f6c7e:	2300      	movs	r3, #0
 23f6c80:	f7f1 f99a 	bl	23e7fb8 <__aeabi_dcmpgt>
 23f6c84:	2800      	cmp	r0, #0
 23f6c86:	d0ef      	beq.n	23f6c68 <floor+0x50>
 23f6c88:	2c00      	cmp	r4, #0
 23f6c8a:	db29      	blt.n	23f6ce0 <floor+0xc8>
 23f6c8c:	2600      	movs	r6, #0
 23f6c8e:	4634      	mov	r4, r6
 23f6c90:	e7ea      	b.n	23f6c68 <floor+0x50>
 23f6c92:	2d33      	cmp	r5, #51	; 0x33
 23f6c94:	dd05      	ble.n	23f6ca2 <floor+0x8a>
 23f6c96:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 23f6c9a:	d019      	beq.n	23f6cd0 <floor+0xb8>
 23f6c9c:	ec41 0b10 	vmov	d0, r0, r1
 23f6ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f6ca2:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 23f6ca6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 23f6caa:	40df      	lsrs	r7, r3
 23f6cac:	4207      	tst	r7, r0
 23f6cae:	d0f5      	beq.n	23f6c9c <floor+0x84>
 23f6cb0:	a317      	add	r3, pc, #92	; (adr r3, 23f6d10 <floor+0xf8>)
 23f6cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f6cb6:	f7f0 fd39 	bl	23e772c <__adddf3>
 23f6cba:	2200      	movs	r2, #0
 23f6cbc:	2300      	movs	r3, #0
 23f6cbe:	f7f1 f97b 	bl	23e7fb8 <__aeabi_dcmpgt>
 23f6cc2:	2800      	cmp	r0, #0
 23f6cc4:	d0d0      	beq.n	23f6c68 <floor+0x50>
 23f6cc6:	2c00      	cmp	r4, #0
 23f6cc8:	db13      	blt.n	23f6cf2 <floor+0xda>
 23f6cca:	ea26 0607 	bic.w	r6, r6, r7
 23f6cce:	e7cb      	b.n	23f6c68 <floor+0x50>
 23f6cd0:	ee10 2a10 	vmov	r2, s0
 23f6cd4:	460b      	mov	r3, r1
 23f6cd6:	f7f0 fd29 	bl	23e772c <__adddf3>
 23f6cda:	ec41 0b10 	vmov	d0, r0, r1
 23f6cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23f6ce0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 23f6ce4:	4a0d      	ldr	r2, [pc, #52]	; (23f6d1c <floor+0x104>)
 23f6ce6:	4333      	orrs	r3, r6
 23f6ce8:	2600      	movs	r6, #0
 23f6cea:	42b3      	cmp	r3, r6
 23f6cec:	bf18      	it	ne
 23f6cee:	4614      	movne	r4, r2
 23f6cf0:	e7ba      	b.n	23f6c68 <floor+0x50>
 23f6cf2:	2d14      	cmp	r5, #20
 23f6cf4:	d008      	beq.n	23f6d08 <floor+0xf0>
 23f6cf6:	2301      	movs	r3, #1
 23f6cf8:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 23f6cfc:	fa03 f505 	lsl.w	r5, r3, r5
 23f6d00:	19ae      	adds	r6, r5, r6
 23f6d02:	bf28      	it	cs
 23f6d04:	18e4      	addcs	r4, r4, r3
 23f6d06:	e7e0      	b.n	23f6cca <floor+0xb2>
 23f6d08:	3401      	adds	r4, #1
 23f6d0a:	e7de      	b.n	23f6cca <floor+0xb2>
 23f6d0c:	f3af 8000 	nop.w
 23f6d10:	8800759c 	.word	0x8800759c
 23f6d14:	7e37e43c 	.word	0x7e37e43c
 23f6d18:	000fffff 	.word	0x000fffff
 23f6d1c:	bff00000 	.word	0xbff00000

023f6d20 <frexp>:
 23f6d20:	b538      	push	{r3, r4, r5, lr}
 23f6d22:	ec53 2b10 	vmov	r2, r3, d0
 23f6d26:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 23f6d2a:	4d15      	ldr	r5, [pc, #84]	; (23f6d80 <frexp+0x60>)
 23f6d2c:	4604      	mov	r4, r0
 23f6d2e:	2000      	movs	r0, #0
 23f6d30:	42a9      	cmp	r1, r5
 23f6d32:	6020      	str	r0, [r4, #0]
 23f6d34:	dc20      	bgt.n	23f6d78 <frexp+0x58>
 23f6d36:	ee10 5a10 	vmov	r5, s0
 23f6d3a:	430d      	orrs	r5, r1
 23f6d3c:	d01c      	beq.n	23f6d78 <frexp+0x58>
 23f6d3e:	4d11      	ldr	r5, [pc, #68]	; (23f6d84 <frexp+0x64>)
 23f6d40:	469c      	mov	ip, r3
 23f6d42:	401d      	ands	r5, r3
 23f6d44:	b965      	cbnz	r5, 23f6d60 <frexp+0x40>
 23f6d46:	4619      	mov	r1, r3
 23f6d48:	2200      	movs	r2, #0
 23f6d4a:	ee10 0a10 	vmov	r0, s0
 23f6d4e:	4b0e      	ldr	r3, [pc, #56]	; (23f6d88 <frexp+0x68>)
 23f6d50:	f7f0 fea2 	bl	23e7a98 <__aeabi_dmul>
 23f6d54:	4602      	mov	r2, r0
 23f6d56:	468c      	mov	ip, r1
 23f6d58:	f06f 0035 	mvn.w	r0, #53	; 0x35
 23f6d5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f6d60:	1509      	asrs	r1, r1, #20
 23f6d62:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
 23f6d66:	4401      	add	r1, r0
 23f6d68:	6021      	str	r1, [r4, #0]
 23f6d6a:	4908      	ldr	r1, [pc, #32]	; (23f6d8c <frexp+0x6c>)
 23f6d6c:	ea0c 0101 	and.w	r1, ip, r1
 23f6d70:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 23f6d74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 23f6d78:	ec43 2b10 	vmov	d0, r2, r3
 23f6d7c:	bd38      	pop	{r3, r4, r5, pc}
 23f6d7e:	bf00      	nop
 23f6d80:	7fefffff 	.word	0x7fefffff
 23f6d84:	7ff00000 	.word	0x7ff00000
 23f6d88:	43500000 	.word	0x43500000
 23f6d8c:	800fffff 	.word	0x800fffff

023f6d90 <round>:
 23f6d90:	b538      	push	{r3, r4, r5, lr}
 23f6d92:	ec53 2b10 	vmov	r2, r3, d0
 23f6d96:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 23f6d9a:	461c      	mov	r4, r3
 23f6d9c:	ee10 0a10 	vmov	r0, s0
 23f6da0:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 23f6da4:	2913      	cmp	r1, #19
 23f6da6:	dc1c      	bgt.n	23f6de2 <round+0x52>
 23f6da8:	2900      	cmp	r1, #0
 23f6daa:	db13      	blt.n	23f6dd4 <round+0x44>
 23f6dac:	4d20      	ldr	r5, [pc, #128]	; (23f6e30 <round+0xa0>)
 23f6dae:	fa45 fc01 	asr.w	ip, r5, r1
 23f6db2:	ea03 050c 	and.w	r5, r3, ip
 23f6db6:	4328      	orrs	r0, r5
 23f6db8:	d018      	beq.n	23f6dec <round+0x5c>
 23f6dba:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 23f6dbe:	2000      	movs	r0, #0
 23f6dc0:	fa43 f101 	asr.w	r1, r3, r1
 23f6dc4:	440c      	add	r4, r1
 23f6dc6:	ea24 040c 	bic.w	r4, r4, ip
 23f6dca:	4623      	mov	r3, r4
 23f6dcc:	4602      	mov	r2, r0
 23f6dce:	ec43 2b10 	vmov	d0, r2, r3
 23f6dd2:	bd38      	pop	{r3, r4, r5, pc}
 23f6dd4:	3101      	adds	r1, #1
 23f6dd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 23f6dda:	d024      	beq.n	23f6e26 <round+0x96>
 23f6ddc:	461c      	mov	r4, r3
 23f6dde:	2000      	movs	r0, #0
 23f6de0:	e7f3      	b.n	23f6dca <round+0x3a>
 23f6de2:	2933      	cmp	r1, #51	; 0x33
 23f6de4:	dd05      	ble.n	23f6df2 <round+0x62>
 23f6de6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 23f6dea:	d016      	beq.n	23f6e1a <round+0x8a>
 23f6dec:	ec43 2b10 	vmov	d0, r2, r3
 23f6df0:	bd38      	pop	{r3, r4, r5, pc}
 23f6df2:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 23f6df6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23f6dfa:	fa25 fc0c 	lsr.w	ip, r5, ip
 23f6dfe:	ea12 0f0c 	tst.w	r2, ip
 23f6e02:	d0f3      	beq.n	23f6dec <round+0x5c>
 23f6e04:	2301      	movs	r3, #1
 23f6e06:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 23f6e0a:	fa03 f101 	lsl.w	r1, r3, r1
 23f6e0e:	1840      	adds	r0, r0, r1
 23f6e10:	bf28      	it	cs
 23f6e12:	18e4      	addcs	r4, r4, r3
 23f6e14:	ea20 000c 	bic.w	r0, r0, ip
 23f6e18:	e7d7      	b.n	23f6dca <round+0x3a>
 23f6e1a:	4619      	mov	r1, r3
 23f6e1c:	f7f0 fc86 	bl	23e772c <__adddf3>
 23f6e20:	ec41 0b10 	vmov	d0, r0, r1
 23f6e24:	bd38      	pop	{r3, r4, r5, pc}
 23f6e26:	4c03      	ldr	r4, [pc, #12]	; (23f6e34 <round+0xa4>)
 23f6e28:	2000      	movs	r0, #0
 23f6e2a:	431c      	orrs	r4, r3
 23f6e2c:	e7cd      	b.n	23f6dca <round+0x3a>
 23f6e2e:	bf00      	nop
 23f6e30:	000fffff 	.word	0x000fffff
 23f6e34:	3ff00000 	.word	0x3ff00000

023f6e38 <sin>:
 23f6e38:	ec51 0b10 	vmov	r0, r1, d0
 23f6e3c:	4a26      	ldr	r2, [pc, #152]	; (23f6ed8 <sin+0xa0>)
 23f6e3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f6e42:	4293      	cmp	r3, r2
 23f6e44:	dd27      	ble.n	23f6e96 <sin+0x5e>
 23f6e46:	4a25      	ldr	r2, [pc, #148]	; (23f6edc <sin+0xa4>)
 23f6e48:	4293      	cmp	r3, r2
 23f6e4a:	b500      	push	{lr}
 23f6e4c:	b085      	sub	sp, #20
 23f6e4e:	dd09      	ble.n	23f6e64 <sin+0x2c>
 23f6e50:	ee10 2a10 	vmov	r2, s0
 23f6e54:	460b      	mov	r3, r1
 23f6e56:	f7f0 fc67 	bl	23e7728 <__aeabi_dsub>
 23f6e5a:	ec41 0b10 	vmov	d0, r0, r1
 23f6e5e:	b005      	add	sp, #20
 23f6e60:	f85d fb04 	ldr.w	pc, [sp], #4
 23f6e64:	4668      	mov	r0, sp
 23f6e66:	f000 f973 	bl	23f7150 <__ieee754_rem_pio2>
 23f6e6a:	f000 0003 	and.w	r0, r0, #3
 23f6e6e:	2801      	cmp	r0, #1
 23f6e70:	d016      	beq.n	23f6ea0 <sin+0x68>
 23f6e72:	2802      	cmp	r0, #2
 23f6e74:	d023      	beq.n	23f6ebe <sin+0x86>
 23f6e76:	b1d0      	cbz	r0, 23f6eae <sin+0x76>
 23f6e78:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f6e7c:	ed9d 0b00 	vldr	d0, [sp]
 23f6e80:	f000 fe46 	bl	23f7b10 <__kernel_cos>
 23f6e84:	ec53 2b10 	vmov	r2, r3, d0
 23f6e88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 23f6e8c:	ee00 3a90 	vmov	s1, r3
 23f6e90:	b005      	add	sp, #20
 23f6e92:	f85d fb04 	ldr.w	pc, [sp], #4
 23f6e96:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 23f6ed0 <sin+0x98>
 23f6e9a:	2000      	movs	r0, #0
 23f6e9c:	f001 bb9c 	b.w	23f85d8 <__kernel_sin>
 23f6ea0:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f6ea4:	ed9d 0b00 	vldr	d0, [sp]
 23f6ea8:	f000 fe32 	bl	23f7b10 <__kernel_cos>
 23f6eac:	e7d7      	b.n	23f6e5e <sin+0x26>
 23f6eae:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f6eb2:	ed9d 0b00 	vldr	d0, [sp]
 23f6eb6:	2001      	movs	r0, #1
 23f6eb8:	f001 fb8e 	bl	23f85d8 <__kernel_sin>
 23f6ebc:	e7cf      	b.n	23f6e5e <sin+0x26>
 23f6ebe:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f6ec2:	ed9d 0b00 	vldr	d0, [sp]
 23f6ec6:	2001      	movs	r0, #1
 23f6ec8:	f001 fb86 	bl	23f85d8 <__kernel_sin>
 23f6ecc:	e7da      	b.n	23f6e84 <sin+0x4c>
 23f6ece:	bf00      	nop
	...
 23f6ed8:	3fe921fb 	.word	0x3fe921fb
 23f6edc:	7fefffff 	.word	0x7fefffff

023f6ee0 <tan>:
 23f6ee0:	ec51 0b10 	vmov	r0, r1, d0
 23f6ee4:	4a16      	ldr	r2, [pc, #88]	; (23f6f40 <tan+0x60>)
 23f6ee6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f6eea:	4293      	cmp	r3, r2
 23f6eec:	dd1f      	ble.n	23f6f2e <tan+0x4e>
 23f6eee:	4a15      	ldr	r2, [pc, #84]	; (23f6f44 <tan+0x64>)
 23f6ef0:	4293      	cmp	r3, r2
 23f6ef2:	b500      	push	{lr}
 23f6ef4:	b085      	sub	sp, #20
 23f6ef6:	dd09      	ble.n	23f6f0c <tan+0x2c>
 23f6ef8:	ee10 2a10 	vmov	r2, s0
 23f6efc:	460b      	mov	r3, r1
 23f6efe:	f7f0 fc13 	bl	23e7728 <__aeabi_dsub>
 23f6f02:	ec41 0b10 	vmov	d0, r0, r1
 23f6f06:	b005      	add	sp, #20
 23f6f08:	f85d fb04 	ldr.w	pc, [sp], #4
 23f6f0c:	4668      	mov	r0, sp
 23f6f0e:	f000 f91f 	bl	23f7150 <__ieee754_rem_pio2>
 23f6f12:	0040      	lsls	r0, r0, #1
 23f6f14:	f000 0002 	and.w	r0, r0, #2
 23f6f18:	ed9d 1b02 	vldr	d1, [sp, #8]
 23f6f1c:	f1c0 0001 	rsb	r0, r0, #1
 23f6f20:	ed9d 0b00 	vldr	d0, [sp]
 23f6f24:	f001 fc20 	bl	23f8768 <__kernel_tan>
 23f6f28:	b005      	add	sp, #20
 23f6f2a:	f85d fb04 	ldr.w	pc, [sp], #4
 23f6f2e:	ed9f 1b02 	vldr	d1, [pc, #8]	; 23f6f38 <tan+0x58>
 23f6f32:	2001      	movs	r0, #1
 23f6f34:	f001 bc18 	b.w	23f8768 <__kernel_tan>
	...
 23f6f40:	3fe921fb 	.word	0x3fe921fb
 23f6f44:	7fefffff 	.word	0x7fefffff

023f6f48 <frexpf>:
 23f6f48:	2300      	movs	r3, #0
 23f6f4a:	ee10 2a10 	vmov	r2, s0
 23f6f4e:	ee10 1a10 	vmov	r1, s0
 23f6f52:	6003      	str	r3, [r0, #0]
 23f6f54:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 23f6f58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 23f6f5c:	da1c      	bge.n	23f6f98 <frexpf+0x50>
 23f6f5e:	fab3 fc83 	clz	ip, r3
 23f6f62:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 23f6f66:	b1bb      	cbz	r3, 23f6f98 <frexpf+0x50>
 23f6f68:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 23f6f6c:	d109      	bne.n	23f6f82 <frexpf+0x3a>
 23f6f6e:	eddf 7a0c 	vldr	s15, [pc, #48]	; 23f6fa0 <frexpf+0x58>
 23f6f72:	f06f 0c18 	mvn.w	ip, #24
 23f6f76:	ee60 7a27 	vmul.f32	s15, s0, s15
 23f6f7a:	ee17 1a90 	vmov	r1, s15
 23f6f7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23f6f82:	15db      	asrs	r3, r3, #23
 23f6f84:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 23f6f88:	3b7e      	subs	r3, #126	; 0x7e
 23f6f8a:	f041 527c 	orr.w	r2, r1, #1056964608	; 0x3f000000
 23f6f8e:	4463      	add	r3, ip
 23f6f90:	ee00 2a10 	vmov	s0, r2
 23f6f94:	6003      	str	r3, [r0, #0]
 23f6f96:	4770      	bx	lr
 23f6f98:	ee00 2a10 	vmov	s0, r2
 23f6f9c:	4770      	bx	lr
 23f6f9e:	bf00      	nop
 23f6fa0:	4c000000 	.word	0x4c000000

023f6fa4 <sqrt>:
 23f6fa4:	b538      	push	{r3, r4, r5, lr}
 23f6fa6:	ed2d 8b02 	vpush	{d8}
 23f6faa:	ec55 4b10 	vmov	r4, r5, d0
 23f6fae:	f000 faf5 	bl	23f759c <__ieee754_sqrt>
 23f6fb2:	4b18      	ldr	r3, [pc, #96]	; (23f7014 <sqrt+0x70>)
 23f6fb4:	eeb0 8a40 	vmov.f32	s16, s0
 23f6fb8:	eef0 8a60 	vmov.f32	s17, s1
 23f6fbc:	f993 3000 	ldrsb.w	r3, [r3]
 23f6fc0:	3301      	adds	r3, #1
 23f6fc2:	d00d      	beq.n	23f6fe0 <sqrt+0x3c>
 23f6fc4:	4622      	mov	r2, r4
 23f6fc6:	462b      	mov	r3, r5
 23f6fc8:	4620      	mov	r0, r4
 23f6fca:	4629      	mov	r1, r5
 23f6fcc:	f7f0 fffe 	bl	23e7fcc <__aeabi_dcmpun>
 23f6fd0:	b930      	cbnz	r0, 23f6fe0 <sqrt+0x3c>
 23f6fd2:	2200      	movs	r2, #0
 23f6fd4:	2300      	movs	r3, #0
 23f6fd6:	4620      	mov	r0, r4
 23f6fd8:	4629      	mov	r1, r5
 23f6fda:	f7f0 ffcf 	bl	23e7f7c <__aeabi_dcmplt>
 23f6fde:	b930      	cbnz	r0, 23f6fee <sqrt+0x4a>
 23f6fe0:	eeb0 0a48 	vmov.f32	s0, s16
 23f6fe4:	eef0 0a68 	vmov.f32	s1, s17
 23f6fe8:	ecbd 8b02 	vpop	{d8}
 23f6fec:	bd38      	pop	{r3, r4, r5, pc}
 23f6fee:	f7fd fbf9 	bl	23f47e4 <__errno>
 23f6ff2:	2200      	movs	r2, #0
 23f6ff4:	2300      	movs	r3, #0
 23f6ff6:	2121      	movs	r1, #33	; 0x21
 23f6ff8:	6001      	str	r1, [r0, #0]
 23f6ffa:	4610      	mov	r0, r2
 23f6ffc:	4619      	mov	r1, r3
 23f6ffe:	f7f0 fe75 	bl	23e7cec <__aeabi_ddiv>
 23f7002:	ec41 0b18 	vmov	d8, r0, r1
 23f7006:	eeb0 0a48 	vmov.f32	s0, s16
 23f700a:	eef0 0a68 	vmov.f32	s1, s17
 23f700e:	ecbd 8b02 	vpop	{d8}
 23f7012:	bd38      	pop	{r3, r4, r5, pc}
 23f7014:	1007a4b8 	.word	0x1007a4b8

023f7018 <expf>:
 23f7018:	b508      	push	{r3, lr}
 23f701a:	ed2d 8b02 	vpush	{d8}
 23f701e:	eeb0 8a40 	vmov.f32	s16, s0
 23f7022:	f000 fb7d 	bl	23f7720 <__ieee754_expf>
 23f7026:	4b16      	ldr	r3, [pc, #88]	; (23f7080 <expf+0x68>)
 23f7028:	eef0 8a40 	vmov.f32	s17, s0
 23f702c:	f993 3000 	ldrsb.w	r3, [r3]
 23f7030:	3301      	adds	r3, #1
 23f7032:	d012      	beq.n	23f705a <expf+0x42>
 23f7034:	eeb0 0a48 	vmov.f32	s0, s16
 23f7038:	f001 fe1e 	bl	23f8c78 <finitef>
 23f703c:	b168      	cbz	r0, 23f705a <expf+0x42>
 23f703e:	eddf 7a11 	vldr	s15, [pc, #68]	; 23f7084 <expf+0x6c>
 23f7042:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23f7046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f704a:	dc12      	bgt.n	23f7072 <expf+0x5a>
 23f704c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 23f7088 <expf+0x70>
 23f7050:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23f7054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f7058:	d404      	bmi.n	23f7064 <expf+0x4c>
 23f705a:	eeb0 0a68 	vmov.f32	s0, s17
 23f705e:	ecbd 8b02 	vpop	{d8}
 23f7062:	bd08      	pop	{r3, pc}
 23f7064:	f7fd fbbe 	bl	23f47e4 <__errno>
 23f7068:	2322      	movs	r3, #34	; 0x22
 23f706a:	eddf 8a08 	vldr	s17, [pc, #32]	; 23f708c <expf+0x74>
 23f706e:	6003      	str	r3, [r0, #0]
 23f7070:	e7f3      	b.n	23f705a <expf+0x42>
 23f7072:	f7fd fbb7 	bl	23f47e4 <__errno>
 23f7076:	2322      	movs	r3, #34	; 0x22
 23f7078:	eddf 8a05 	vldr	s17, [pc, #20]	; 23f7090 <expf+0x78>
 23f707c:	6003      	str	r3, [r0, #0]
 23f707e:	e7ec      	b.n	23f705a <expf+0x42>
 23f7080:	1007a4b8 	.word	0x1007a4b8
 23f7084:	42b17180 	.word	0x42b17180
 23f7088:	c2cff1b5 	.word	0xc2cff1b5
 23f708c:	00000000 	.word	0x00000000
 23f7090:	7f800000 	.word	0x7f800000

023f7094 <logf>:
 23f7094:	b508      	push	{r3, lr}
 23f7096:	ed2d 8b02 	vpush	{d8}
 23f709a:	eeb0 8a40 	vmov.f32	s16, s0
 23f709e:	f000 fc31 	bl	23f7904 <__ieee754_logf>
 23f70a2:	4b14      	ldr	r3, [pc, #80]	; (23f70f4 <logf+0x60>)
 23f70a4:	f993 3000 	ldrsb.w	r3, [r3]
 23f70a8:	3301      	adds	r3, #1
 23f70aa:	d014      	beq.n	23f70d6 <logf+0x42>
 23f70ac:	eeb4 8a48 	vcmp.f32	s16, s16
 23f70b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f70b4:	d60f      	bvs.n	23f70d6 <logf+0x42>
 23f70b6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23f70ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f70be:	dc0a      	bgt.n	23f70d6 <logf+0x42>
 23f70c0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 23f70c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f70c8:	d108      	bne.n	23f70dc <logf+0x48>
 23f70ca:	f7fd fb8b 	bl	23f47e4 <__errno>
 23f70ce:	2322      	movs	r3, #34	; 0x22
 23f70d0:	ed9f 0a09 	vldr	s0, [pc, #36]	; 23f70f8 <logf+0x64>
 23f70d4:	6003      	str	r3, [r0, #0]
 23f70d6:	ecbd 8b02 	vpop	{d8}
 23f70da:	bd08      	pop	{r3, pc}
 23f70dc:	f7fd fb82 	bl	23f47e4 <__errno>
 23f70e0:	2221      	movs	r2, #33	; 0x21
 23f70e2:	4603      	mov	r3, r0
 23f70e4:	4805      	ldr	r0, [pc, #20]	; (23f70fc <logf+0x68>)
 23f70e6:	ecbd 8b02 	vpop	{d8}
 23f70ea:	601a      	str	r2, [r3, #0]
 23f70ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23f70f0:	f001 bdd0 	b.w	23f8c94 <nanf>
 23f70f4:	1007a4b8 	.word	0x1007a4b8
 23f70f8:	ff800000 	.word	0xff800000
 23f70fc:	023ffa34 	.word	0x023ffa34

023f7100 <sqrtf>:
 23f7100:	b508      	push	{r3, lr}
 23f7102:	ed2d 8b02 	vpush	{d8}
 23f7106:	eeb0 8a40 	vmov.f32	s16, s0
 23f710a:	f000 fcfb 	bl	23f7b04 <__ieee754_sqrtf>
 23f710e:	4b0e      	ldr	r3, [pc, #56]	; (23f7148 <sqrtf+0x48>)
 23f7110:	f993 3000 	ldrsb.w	r3, [r3]
 23f7114:	3301      	adds	r3, #1
 23f7116:	d00b      	beq.n	23f7130 <sqrtf+0x30>
 23f7118:	eeb4 8a48 	vcmp.f32	s16, s16
 23f711c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f7120:	d606      	bvs.n	23f7130 <sqrtf+0x30>
 23f7122:	eddf 8a0a 	vldr	s17, [pc, #40]	; 23f714c <sqrtf+0x4c>
 23f7126:	eeb4 8ae8 	vcmpe.f32	s16, s17
 23f712a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f712e:	d402      	bmi.n	23f7136 <sqrtf+0x36>
 23f7130:	ecbd 8b02 	vpop	{d8}
 23f7134:	bd08      	pop	{r3, pc}
 23f7136:	f7fd fb55 	bl	23f47e4 <__errno>
 23f713a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 23f713e:	2321      	movs	r3, #33	; 0x21
 23f7140:	6003      	str	r3, [r0, #0]
 23f7142:	ecbd 8b02 	vpop	{d8}
 23f7146:	bd08      	pop	{r3, pc}
 23f7148:	1007a4b8 	.word	0x1007a4b8
 23f714c:	00000000 	.word	0x00000000

023f7150 <__ieee754_rem_pio2>:
 23f7150:	ec53 2b10 	vmov	r2, r3, d0
 23f7154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f7158:	4991      	ldr	r1, [pc, #580]	; (23f73a0 <__ieee754_rem_pio2+0x250>)
 23f715a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 23f715e:	4604      	mov	r4, r0
 23f7160:	428d      	cmp	r5, r1
 23f7162:	ed2d 8b06 	vpush	{d8-d10}
 23f7166:	b08b      	sub	sp, #44	; 0x2c
 23f7168:	f340 808c 	ble.w	23f7284 <__ieee754_rem_pio2+0x134>
 23f716c:	498d      	ldr	r1, [pc, #564]	; (23f73a4 <__ieee754_rem_pio2+0x254>)
 23f716e:	461f      	mov	r7, r3
 23f7170:	428d      	cmp	r5, r1
 23f7172:	dc2b      	bgt.n	23f71cc <__ieee754_rem_pio2+0x7c>
 23f7174:	2f00      	cmp	r7, #0
 23f7176:	4619      	mov	r1, r3
 23f7178:	ee10 0a10 	vmov	r0, s0
 23f717c:	a37e      	add	r3, pc, #504	; (adr r3, 23f7378 <__ieee754_rem_pio2+0x228>)
 23f717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7182:	f340 81b8 	ble.w	23f74f6 <__ieee754_rem_pio2+0x3a6>
 23f7186:	f7f0 facf 	bl	23e7728 <__aeabi_dsub>
 23f718a:	4b87      	ldr	r3, [pc, #540]	; (23f73a8 <__ieee754_rem_pio2+0x258>)
 23f718c:	4680      	mov	r8, r0
 23f718e:	4689      	mov	r9, r1
 23f7190:	429d      	cmp	r5, r3
 23f7192:	f000 808f 	beq.w	23f72b4 <__ieee754_rem_pio2+0x164>
 23f7196:	2601      	movs	r6, #1
 23f7198:	a379      	add	r3, pc, #484	; (adr r3, 23f7380 <__ieee754_rem_pio2+0x230>)
 23f719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f719e:	f7f0 fac3 	bl	23e7728 <__aeabi_dsub>
 23f71a2:	4602      	mov	r2, r0
 23f71a4:	460b      	mov	r3, r1
 23f71a6:	4640      	mov	r0, r8
 23f71a8:	4649      	mov	r1, r9
 23f71aa:	e9c4 2300 	strd	r2, r3, [r4]
 23f71ae:	f7f0 fabb 	bl	23e7728 <__aeabi_dsub>
 23f71b2:	a373      	add	r3, pc, #460	; (adr r3, 23f7380 <__ieee754_rem_pio2+0x230>)
 23f71b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f71b8:	f7f0 fab6 	bl	23e7728 <__aeabi_dsub>
 23f71bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23f71c0:	4630      	mov	r0, r6
 23f71c2:	b00b      	add	sp, #44	; 0x2c
 23f71c4:	ecbd 8b06 	vpop	{d8-d10}
 23f71c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f71cc:	4977      	ldr	r1, [pc, #476]	; (23f73ac <__ieee754_rem_pio2+0x25c>)
 23f71ce:	428d      	cmp	r5, r1
 23f71d0:	f340 8092 	ble.w	23f72f8 <__ieee754_rem_pio2+0x1a8>
 23f71d4:	4976      	ldr	r1, [pc, #472]	; (23f73b0 <__ieee754_rem_pio2+0x260>)
 23f71d6:	428d      	cmp	r5, r1
 23f71d8:	dc61      	bgt.n	23f729e <__ieee754_rem_pio2+0x14e>
 23f71da:	152e      	asrs	r6, r5, #20
 23f71dc:	ee10 0a10 	vmov	r0, s0
 23f71e0:	4690      	mov	r8, r2
 23f71e2:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 23f71e6:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
 23f71ea:	4689      	mov	r9, r1
 23f71ec:	f7f0 ff04 	bl	23e7ff8 <__aeabi_d2iz>
 23f71f0:	f7f0 fbe8 	bl	23e79c4 <__aeabi_i2d>
 23f71f4:	4602      	mov	r2, r0
 23f71f6:	460b      	mov	r3, r1
 23f71f8:	4640      	mov	r0, r8
 23f71fa:	4649      	mov	r1, r9
 23f71fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23f7200:	f7f0 fa92 	bl	23e7728 <__aeabi_dsub>
 23f7204:	2200      	movs	r2, #0
 23f7206:	4b6b      	ldr	r3, [pc, #428]	; (23f73b4 <__ieee754_rem_pio2+0x264>)
 23f7208:	f7f0 fc46 	bl	23e7a98 <__aeabi_dmul>
 23f720c:	4689      	mov	r9, r1
 23f720e:	4680      	mov	r8, r0
 23f7210:	f7f0 fef2 	bl	23e7ff8 <__aeabi_d2iz>
 23f7214:	4605      	mov	r5, r0
 23f7216:	f7f0 fbd5 	bl	23e79c4 <__aeabi_i2d>
 23f721a:	4602      	mov	r2, r0
 23f721c:	460b      	mov	r3, r1
 23f721e:	4640      	mov	r0, r8
 23f7220:	4649      	mov	r1, r9
 23f7222:	e9cd 2306 	strd	r2, r3, [sp, #24]
 23f7226:	f7f0 fa7f 	bl	23e7728 <__aeabi_dsub>
 23f722a:	2200      	movs	r2, #0
 23f722c:	4b61      	ldr	r3, [pc, #388]	; (23f73b4 <__ieee754_rem_pio2+0x264>)
 23f722e:	f7f0 fc33 	bl	23e7a98 <__aeabi_dmul>
 23f7232:	4602      	mov	r2, r0
 23f7234:	460b      	mov	r3, r1
 23f7236:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23f723a:	2200      	movs	r2, #0
 23f723c:	2300      	movs	r3, #0
 23f723e:	f7f0 fe93 	bl	23e7f68 <__aeabi_dcmpeq>
 23f7242:	2800      	cmp	r0, #0
 23f7244:	f000 8155 	beq.w	23f74f2 <__ieee754_rem_pio2+0x3a2>
 23f7248:	2d00      	cmp	r5, #0
 23f724a:	bf0c      	ite	eq
 23f724c:	2301      	moveq	r3, #1
 23f724e:	2302      	movne	r3, #2
 23f7250:	4959      	ldr	r1, [pc, #356]	; (23f73b8 <__ieee754_rem_pio2+0x268>)
 23f7252:	4632      	mov	r2, r6
 23f7254:	a804      	add	r0, sp, #16
 23f7256:	9101      	str	r1, [sp, #4]
 23f7258:	2102      	movs	r1, #2
 23f725a:	9100      	str	r1, [sp, #0]
 23f725c:	4621      	mov	r1, r4
 23f725e:	f000 fd97 	bl	23f7d90 <__kernel_rem_pio2>
 23f7262:	2f00      	cmp	r7, #0
 23f7264:	4606      	mov	r6, r0
 23f7266:	daab      	bge.n	23f71c0 <__ieee754_rem_pio2+0x70>
 23f7268:	6861      	ldr	r1, [r4, #4]
 23f726a:	4246      	negs	r6, r0
 23f726c:	6822      	ldr	r2, [r4, #0]
 23f726e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23f7272:	68e1      	ldr	r1, [r4, #12]
 23f7274:	e9c4 2300 	strd	r2, r3, [r4]
 23f7278:	68a2      	ldr	r2, [r4, #8]
 23f727a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23f727e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23f7282:	e79d      	b.n	23f71c0 <__ieee754_rem_pio2+0x70>
 23f7284:	2000      	movs	r0, #0
 23f7286:	2100      	movs	r1, #0
 23f7288:	2600      	movs	r6, #0
 23f728a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23f728e:	4630      	mov	r0, r6
 23f7290:	ed84 0b00 	vstr	d0, [r4]
 23f7294:	b00b      	add	sp, #44	; 0x2c
 23f7296:	ecbd 8b06 	vpop	{d8-d10}
 23f729a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f729e:	ee10 0a10 	vmov	r0, s0
 23f72a2:	4619      	mov	r1, r3
 23f72a4:	f7f0 fa40 	bl	23e7728 <__aeabi_dsub>
 23f72a8:	2600      	movs	r6, #0
 23f72aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23f72ae:	e9c4 0100 	strd	r0, r1, [r4]
 23f72b2:	e785      	b.n	23f71c0 <__ieee754_rem_pio2+0x70>
 23f72b4:	a334      	add	r3, pc, #208	; (adr r3, 23f7388 <__ieee754_rem_pio2+0x238>)
 23f72b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f72ba:	f7f0 fa35 	bl	23e7728 <__aeabi_dsub>
 23f72be:	4680      	mov	r8, r0
 23f72c0:	4689      	mov	r9, r1
 23f72c2:	2601      	movs	r6, #1
 23f72c4:	a332      	add	r3, pc, #200	; (adr r3, 23f7390 <__ieee754_rem_pio2+0x240>)
 23f72c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f72ca:	f7f0 fa2d 	bl	23e7728 <__aeabi_dsub>
 23f72ce:	4602      	mov	r2, r0
 23f72d0:	460b      	mov	r3, r1
 23f72d2:	4640      	mov	r0, r8
 23f72d4:	4649      	mov	r1, r9
 23f72d6:	e9c4 2300 	strd	r2, r3, [r4]
 23f72da:	f7f0 fa25 	bl	23e7728 <__aeabi_dsub>
 23f72de:	a32c      	add	r3, pc, #176	; (adr r3, 23f7390 <__ieee754_rem_pio2+0x240>)
 23f72e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f72e4:	f7f0 fa20 	bl	23e7728 <__aeabi_dsub>
 23f72e8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23f72ec:	4630      	mov	r0, r6
 23f72ee:	b00b      	add	sp, #44	; 0x2c
 23f72f0:	ecbd 8b06 	vpop	{d8-d10}
 23f72f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f72f8:	f7ff fc82 	bl	23f6c00 <fabs>
 23f72fc:	ee10 0a10 	vmov	r0, s0
 23f7300:	ec59 8b10 	vmov	r8, r9, d0
 23f7304:	a324      	add	r3, pc, #144	; (adr r3, 23f7398 <__ieee754_rem_pio2+0x248>)
 23f7306:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f730a:	4649      	mov	r1, r9
 23f730c:	f7f0 fbc4 	bl	23e7a98 <__aeabi_dmul>
 23f7310:	2200      	movs	r2, #0
 23f7312:	4b2a      	ldr	r3, [pc, #168]	; (23f73bc <__ieee754_rem_pio2+0x26c>)
 23f7314:	f7f0 fa0a 	bl	23e772c <__adddf3>
 23f7318:	f7f0 fe6e 	bl	23e7ff8 <__aeabi_d2iz>
 23f731c:	4606      	mov	r6, r0
 23f731e:	f7f0 fb51 	bl	23e79c4 <__aeabi_i2d>
 23f7322:	4602      	mov	r2, r0
 23f7324:	460b      	mov	r3, r1
 23f7326:	ec43 2b18 	vmov	d8, r2, r3
 23f732a:	a313      	add	r3, pc, #76	; (adr r3, 23f7378 <__ieee754_rem_pio2+0x228>)
 23f732c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7330:	f7f0 fbb2 	bl	23e7a98 <__aeabi_dmul>
 23f7334:	4602      	mov	r2, r0
 23f7336:	460b      	mov	r3, r1
 23f7338:	4640      	mov	r0, r8
 23f733a:	4649      	mov	r1, r9
 23f733c:	eeb0 9a48 	vmov.f32	s18, s16
 23f7340:	eef0 9a68 	vmov.f32	s19, s17
 23f7344:	f7f0 f9f0 	bl	23e7728 <__aeabi_dsub>
 23f7348:	4682      	mov	sl, r0
 23f734a:	468b      	mov	fp, r1
 23f734c:	a30c      	add	r3, pc, #48	; (adr r3, 23f7380 <__ieee754_rem_pio2+0x230>)
 23f734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7352:	ec51 0b18 	vmov	r0, r1, d8
 23f7356:	f7f0 fb9f 	bl	23e7a98 <__aeabi_dmul>
 23f735a:	2e1f      	cmp	r6, #31
 23f735c:	ec41 0b18 	vmov	d8, r0, r1
 23f7360:	dc30      	bgt.n	23f73c4 <__ieee754_rem_pio2+0x274>
 23f7362:	4b17      	ldr	r3, [pc, #92]	; (23f73c0 <__ieee754_rem_pio2+0x270>)
 23f7364:	1e72      	subs	r2, r6, #1
 23f7366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23f736a:	42ab      	cmp	r3, r5
 23f736c:	d02a      	beq.n	23f73c4 <__ieee754_rem_pio2+0x274>
 23f736e:	4602      	mov	r2, r0
 23f7370:	460b      	mov	r3, r1
 23f7372:	e09d      	b.n	23f74b0 <__ieee754_rem_pio2+0x360>
 23f7374:	f3af 8000 	nop.w
 23f7378:	54400000 	.word	0x54400000
 23f737c:	3ff921fb 	.word	0x3ff921fb
 23f7380:	1a626331 	.word	0x1a626331
 23f7384:	3dd0b461 	.word	0x3dd0b461
 23f7388:	1a600000 	.word	0x1a600000
 23f738c:	3dd0b461 	.word	0x3dd0b461
 23f7390:	2e037073 	.word	0x2e037073
 23f7394:	3ba3198a 	.word	0x3ba3198a
 23f7398:	6dc9c883 	.word	0x6dc9c883
 23f739c:	3fe45f30 	.word	0x3fe45f30
 23f73a0:	3fe921fb 	.word	0x3fe921fb
 23f73a4:	4002d97b 	.word	0x4002d97b
 23f73a8:	3ff921fb 	.word	0x3ff921fb
 23f73ac:	413921fb 	.word	0x413921fb
 23f73b0:	7fefffff 	.word	0x7fefffff
 23f73b4:	41700000 	.word	0x41700000
 23f73b8:	023ffab8 	.word	0x023ffab8
 23f73bc:	3fe00000 	.word	0x3fe00000
 23f73c0:	023ffa38 	.word	0x023ffa38
 23f73c4:	152b      	asrs	r3, r5, #20
 23f73c6:	4650      	mov	r0, sl
 23f73c8:	4659      	mov	r1, fp
 23f73ca:	9303      	str	r3, [sp, #12]
 23f73cc:	ec53 2b18 	vmov	r2, r3, d8
 23f73d0:	f7f0 f9aa 	bl	23e7728 <__aeabi_dsub>
 23f73d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23f73d8:	4680      	mov	r8, r0
 23f73da:	4689      	mov	r9, r1
 23f73dc:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
 23f73e0:	2d10      	cmp	r5, #16
 23f73e2:	dd6b      	ble.n	23f74bc <__ieee754_rem_pio2+0x36c>
 23f73e4:	a364      	add	r3, pc, #400	; (adr r3, 23f7578 <__ieee754_rem_pio2+0x428>)
 23f73e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f73ea:	ec51 0b19 	vmov	r0, r1, d9
 23f73ee:	f7f0 fb53 	bl	23e7a98 <__aeabi_dmul>
 23f73f2:	4680      	mov	r8, r0
 23f73f4:	4689      	mov	r9, r1
 23f73f6:	4650      	mov	r0, sl
 23f73f8:	4642      	mov	r2, r8
 23f73fa:	4659      	mov	r1, fp
 23f73fc:	464b      	mov	r3, r9
 23f73fe:	f7f0 f993 	bl	23e7728 <__aeabi_dsub>
 23f7402:	4602      	mov	r2, r0
 23f7404:	460b      	mov	r3, r1
 23f7406:	4650      	mov	r0, sl
 23f7408:	4659      	mov	r1, fp
 23f740a:	4692      	mov	sl, r2
 23f740c:	469b      	mov	fp, r3
 23f740e:	ec43 2b1a 	vmov	d10, r2, r3
 23f7412:	f7f0 f989 	bl	23e7728 <__aeabi_dsub>
 23f7416:	4642      	mov	r2, r8
 23f7418:	464b      	mov	r3, r9
 23f741a:	f7f0 f985 	bl	23e7728 <__aeabi_dsub>
 23f741e:	4680      	mov	r8, r0
 23f7420:	4689      	mov	r9, r1
 23f7422:	a357      	add	r3, pc, #348	; (adr r3, 23f7580 <__ieee754_rem_pio2+0x430>)
 23f7424:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7428:	ec51 0b19 	vmov	r0, r1, d9
 23f742c:	f7f0 fb34 	bl	23e7a98 <__aeabi_dmul>
 23f7430:	4642      	mov	r2, r8
 23f7432:	464b      	mov	r3, r9
 23f7434:	f7f0 f978 	bl	23e7728 <__aeabi_dsub>
 23f7438:	4602      	mov	r2, r0
 23f743a:	460b      	mov	r3, r1
 23f743c:	4650      	mov	r0, sl
 23f743e:	4659      	mov	r1, fp
 23f7440:	ec43 2b18 	vmov	d8, r2, r3
 23f7444:	f7f0 f970 	bl	23e7728 <__aeabi_dsub>
 23f7448:	9a03      	ldr	r2, [sp, #12]
 23f744a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 23f744e:	4680      	mov	r8, r0
 23f7450:	4689      	mov	r9, r1
 23f7452:	1ad3      	subs	r3, r2, r3
 23f7454:	2b31      	cmp	r3, #49	; 0x31
 23f7456:	dd31      	ble.n	23f74bc <__ieee754_rem_pio2+0x36c>
 23f7458:	a34c      	add	r3, pc, #304	; (adr r3, 23f758c <__ieee754_rem_pio2+0x43c>)
 23f745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f745e:	ec51 0b19 	vmov	r0, r1, d9
 23f7462:	f7f0 fb19 	bl	23e7a98 <__aeabi_dmul>
 23f7466:	4680      	mov	r8, r0
 23f7468:	4689      	mov	r9, r1
 23f746a:	4642      	mov	r2, r8
 23f746c:	464b      	mov	r3, r9
 23f746e:	ec51 0b1a 	vmov	r0, r1, d10
 23f7472:	f7f0 f959 	bl	23e7728 <__aeabi_dsub>
 23f7476:	4682      	mov	sl, r0
 23f7478:	468b      	mov	fp, r1
 23f747a:	4652      	mov	r2, sl
 23f747c:	465b      	mov	r3, fp
 23f747e:	ec51 0b1a 	vmov	r0, r1, d10
 23f7482:	f7f0 f951 	bl	23e7728 <__aeabi_dsub>
 23f7486:	4642      	mov	r2, r8
 23f7488:	464b      	mov	r3, r9
 23f748a:	f7f0 f94d 	bl	23e7728 <__aeabi_dsub>
 23f748e:	4680      	mov	r8, r0
 23f7490:	4689      	mov	r9, r1
 23f7492:	a340      	add	r3, pc, #256	; (adr r3, 23f7594 <__ieee754_rem_pio2+0x444>)
 23f7494:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7498:	ec51 0b19 	vmov	r0, r1, d9
 23f749c:	f7f0 fafc 	bl	23e7a98 <__aeabi_dmul>
 23f74a0:	4642      	mov	r2, r8
 23f74a2:	464b      	mov	r3, r9
 23f74a4:	f7f0 f940 	bl	23e7728 <__aeabi_dsub>
 23f74a8:	4602      	mov	r2, r0
 23f74aa:	460b      	mov	r3, r1
 23f74ac:	ec43 2b18 	vmov	d8, r2, r3
 23f74b0:	4650      	mov	r0, sl
 23f74b2:	4659      	mov	r1, fp
 23f74b4:	f7f0 f938 	bl	23e7728 <__aeabi_dsub>
 23f74b8:	4680      	mov	r8, r0
 23f74ba:	4689      	mov	r9, r1
 23f74bc:	4642      	mov	r2, r8
 23f74be:	464b      	mov	r3, r9
 23f74c0:	4650      	mov	r0, sl
 23f74c2:	4659      	mov	r1, fp
 23f74c4:	e9c4 8900 	strd	r8, r9, [r4]
 23f74c8:	f7f0 f92e 	bl	23e7728 <__aeabi_dsub>
 23f74cc:	ec53 2b18 	vmov	r2, r3, d8
 23f74d0:	f7f0 f92a 	bl	23e7728 <__aeabi_dsub>
 23f74d4:	2f00      	cmp	r7, #0
 23f74d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23f74da:	f6bf ae71 	bge.w	23f71c0 <__ieee754_rem_pio2+0x70>
 23f74de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 23f74e2:	4276      	negs	r6, r6
 23f74e4:	e9c4 8300 	strd	r8, r3, [r4]
 23f74e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23f74ec:	e9c4 0302 	strd	r0, r3, [r4, #8]
 23f74f0:	e666      	b.n	23f71c0 <__ieee754_rem_pio2+0x70>
 23f74f2:	2303      	movs	r3, #3
 23f74f4:	e6ac      	b.n	23f7250 <__ieee754_rem_pio2+0x100>
 23f74f6:	f7f0 f919 	bl	23e772c <__adddf3>
 23f74fa:	4b23      	ldr	r3, [pc, #140]	; (23f7588 <__ieee754_rem_pio2+0x438>)
 23f74fc:	4680      	mov	r8, r0
 23f74fe:	4689      	mov	r9, r1
 23f7500:	429d      	cmp	r5, r3
 23f7502:	d016      	beq.n	23f7532 <__ieee754_rem_pio2+0x3e2>
 23f7504:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23f7508:	a319      	add	r3, pc, #100	; (adr r3, 23f7570 <__ieee754_rem_pio2+0x420>)
 23f750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f750e:	f7f0 f90d 	bl	23e772c <__adddf3>
 23f7512:	4602      	mov	r2, r0
 23f7514:	460b      	mov	r3, r1
 23f7516:	4640      	mov	r0, r8
 23f7518:	4649      	mov	r1, r9
 23f751a:	e9c4 2300 	strd	r2, r3, [r4]
 23f751e:	f7f0 f903 	bl	23e7728 <__aeabi_dsub>
 23f7522:	a313      	add	r3, pc, #76	; (adr r3, 23f7570 <__ieee754_rem_pio2+0x420>)
 23f7524:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7528:	f7f0 f900 	bl	23e772c <__adddf3>
 23f752c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23f7530:	e646      	b.n	23f71c0 <__ieee754_rem_pio2+0x70>
 23f7532:	a311      	add	r3, pc, #68	; (adr r3, 23f7578 <__ieee754_rem_pio2+0x428>)
 23f7534:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7538:	f7f0 f8f8 	bl	23e772c <__adddf3>
 23f753c:	4680      	mov	r8, r0
 23f753e:	4689      	mov	r9, r1
 23f7540:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 23f7544:	a30e      	add	r3, pc, #56	; (adr r3, 23f7580 <__ieee754_rem_pio2+0x430>)
 23f7546:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f754a:	f7f0 f8ef 	bl	23e772c <__adddf3>
 23f754e:	4602      	mov	r2, r0
 23f7550:	460b      	mov	r3, r1
 23f7552:	4640      	mov	r0, r8
 23f7554:	4649      	mov	r1, r9
 23f7556:	e9c4 2300 	strd	r2, r3, [r4]
 23f755a:	f7f0 f8e5 	bl	23e7728 <__aeabi_dsub>
 23f755e:	a308      	add	r3, pc, #32	; (adr r3, 23f7580 <__ieee754_rem_pio2+0x430>)
 23f7560:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7564:	f7f0 f8e2 	bl	23e772c <__adddf3>
 23f7568:	e9c4 0102 	strd	r0, r1, [r4, #8]
 23f756c:	e628      	b.n	23f71c0 <__ieee754_rem_pio2+0x70>
 23f756e:	bf00      	nop
 23f7570:	1a626331 	.word	0x1a626331
 23f7574:	3dd0b461 	.word	0x3dd0b461
 23f7578:	1a600000 	.word	0x1a600000
 23f757c:	3dd0b461 	.word	0x3dd0b461
 23f7580:	2e037073 	.word	0x2e037073
 23f7584:	3ba3198a 	.word	0x3ba3198a
 23f7588:	3ff921fb 	.word	0x3ff921fb
 23f758c:	2e000000 	.word	0x2e000000
 23f7590:	3ba3198a 	.word	0x3ba3198a
 23f7594:	252049c1 	.word	0x252049c1
 23f7598:	397b839a 	.word	0x397b839a

023f759c <__ieee754_sqrt>:
 23f759c:	495e      	ldr	r1, [pc, #376]	; (23f7718 <__ieee754_sqrt+0x17c>)
 23f759e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f75a2:	ec55 4b10 	vmov	r4, r5, d0
 23f75a6:	43a9      	bics	r1, r5
 23f75a8:	f000 8094 	beq.w	23f76d4 <__ieee754_sqrt+0x138>
 23f75ac:	2d00      	cmp	r5, #0
 23f75ae:	462b      	mov	r3, r5
 23f75b0:	ee10 2a10 	vmov	r2, s0
 23f75b4:	dd5a      	ble.n	23f766c <__ieee754_sqrt+0xd0>
 23f75b6:	1528      	asrs	r0, r5, #20
 23f75b8:	d067      	beq.n	23f768a <__ieee754_sqrt+0xee>
 23f75ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23f75be:	07c1      	lsls	r1, r0, #31
 23f75c0:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 23f75c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23f75c8:	d403      	bmi.n	23f75d2 <__ieee754_sqrt+0x36>
 23f75ca:	005b      	lsls	r3, r3, #1
 23f75cc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23f75d0:	0052      	lsls	r2, r2, #1
 23f75d2:	0fd1      	lsrs	r1, r2, #31
 23f75d4:	2600      	movs	r6, #0
 23f75d6:	107f      	asrs	r7, r7, #1
 23f75d8:	f04f 0c16 	mov.w	ip, #22
 23f75dc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23f75e0:	46b6      	mov	lr, r6
 23f75e2:	0052      	lsls	r2, r2, #1
 23f75e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 23f75e8:	eb0e 0001 	add.w	r0, lr, r1
 23f75ec:	4298      	cmp	r0, r3
 23f75ee:	dc03      	bgt.n	23f75f8 <__ieee754_sqrt+0x5c>
 23f75f0:	1a1b      	subs	r3, r3, r0
 23f75f2:	eb00 0e01 	add.w	lr, r0, r1
 23f75f6:	440e      	add	r6, r1
 23f75f8:	005b      	lsls	r3, r3, #1
 23f75fa:	f1bc 0c01 	subs.w	ip, ip, #1
 23f75fe:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23f7602:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23f7606:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23f760a:	d1ed      	bne.n	23f75e8 <__ieee754_sqrt+0x4c>
 23f760c:	4665      	mov	r5, ip
 23f760e:	2420      	movs	r4, #32
 23f7610:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 23f7614:	e014      	b.n	23f7640 <__ieee754_sqrt+0xa4>
 23f7616:	d10a      	bne.n	23f762e <__ieee754_sqrt+0x92>
 23f7618:	4290      	cmp	r0, r2
 23f761a:	d808      	bhi.n	23f762e <__ieee754_sqrt+0x92>
 23f761c:	2800      	cmp	r0, #0
 23f761e:	eb00 0c01 	add.w	ip, r0, r1
 23f7622:	db1d      	blt.n	23f7660 <__ieee754_sqrt+0xc4>
 23f7624:	46f0      	mov	r8, lr
 23f7626:	2300      	movs	r3, #0
 23f7628:	1a12      	subs	r2, r2, r0
 23f762a:	440d      	add	r5, r1
 23f762c:	46c6      	mov	lr, r8
 23f762e:	0fd0      	lsrs	r0, r2, #31
 23f7630:	3c01      	subs	r4, #1
 23f7632:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23f7636:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 23f763a:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23f763e:	d033      	beq.n	23f76a8 <__ieee754_sqrt+0x10c>
 23f7640:	4573      	cmp	r3, lr
 23f7642:	eb01 000c 	add.w	r0, r1, ip
 23f7646:	dde6      	ble.n	23f7616 <__ieee754_sqrt+0x7a>
 23f7648:	2800      	cmp	r0, #0
 23f764a:	eb00 0c01 	add.w	ip, r0, r1
 23f764e:	db07      	blt.n	23f7660 <__ieee754_sqrt+0xc4>
 23f7650:	46f0      	mov	r8, lr
 23f7652:	eba3 030e 	sub.w	r3, r3, lr
 23f7656:	4290      	cmp	r0, r2
 23f7658:	bf88      	it	hi
 23f765a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 23f765e:	e7e3      	b.n	23f7628 <__ieee754_sqrt+0x8c>
 23f7660:	f1bc 0f00 	cmp.w	ip, #0
 23f7664:	dbf4      	blt.n	23f7650 <__ieee754_sqrt+0xb4>
 23f7666:	f10e 0801 	add.w	r8, lr, #1
 23f766a:	e7f2      	b.n	23f7652 <__ieee754_sqrt+0xb6>
 23f766c:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 23f7670:	4321      	orrs	r1, r4
 23f7672:	d028      	beq.n	23f76c6 <__ieee754_sqrt+0x12a>
 23f7674:	2d00      	cmp	r5, #0
 23f7676:	d13d      	bne.n	23f76f4 <__ieee754_sqrt+0x158>
 23f7678:	4628      	mov	r0, r5
 23f767a:	0ad1      	lsrs	r1, r2, #11
 23f767c:	3815      	subs	r0, #21
 23f767e:	0552      	lsls	r2, r2, #21
 23f7680:	460b      	mov	r3, r1
 23f7682:	2900      	cmp	r1, #0
 23f7684:	d0f9      	beq.n	23f767a <__ieee754_sqrt+0xde>
 23f7686:	02cf      	lsls	r7, r1, #11
 23f7688:	d441      	bmi.n	23f770e <__ieee754_sqrt+0x172>
 23f768a:	2400      	movs	r4, #0
 23f768c:	005b      	lsls	r3, r3, #1
 23f768e:	4625      	mov	r5, r4
 23f7690:	3401      	adds	r4, #1
 23f7692:	02de      	lsls	r6, r3, #11
 23f7694:	d5fa      	bpl.n	23f768c <__ieee754_sqrt+0xf0>
 23f7696:	4619      	mov	r1, r3
 23f7698:	4613      	mov	r3, r2
 23f769a:	40a2      	lsls	r2, r4
 23f769c:	f1c4 0420 	rsb	r4, r4, #32
 23f76a0:	40e3      	lsrs	r3, r4
 23f76a2:	1b40      	subs	r0, r0, r5
 23f76a4:	430b      	orrs	r3, r1
 23f76a6:	e788      	b.n	23f75ba <__ieee754_sqrt+0x1e>
 23f76a8:	4313      	orrs	r3, r2
 23f76aa:	d10e      	bne.n	23f76ca <__ieee754_sqrt+0x12e>
 23f76ac:	086c      	lsrs	r4, r5, #1
 23f76ae:	07f3      	lsls	r3, r6, #31
 23f76b0:	491a      	ldr	r1, [pc, #104]	; (23f771c <__ieee754_sqrt+0x180>)
 23f76b2:	bf48      	it	mi
 23f76b4:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 23f76b8:	eb01 0166 	add.w	r1, r1, r6, asr #1
 23f76bc:	4622      	mov	r2, r4
 23f76be:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 23f76c2:	ec43 2b10 	vmov	d0, r2, r3
 23f76c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f76ca:	1c6a      	adds	r2, r5, #1
 23f76cc:	d01d      	beq.n	23f770a <__ieee754_sqrt+0x16e>
 23f76ce:	1c6c      	adds	r4, r5, #1
 23f76d0:	0864      	lsrs	r4, r4, #1
 23f76d2:	e7ec      	b.n	23f76ae <__ieee754_sqrt+0x112>
 23f76d4:	ee10 2a10 	vmov	r2, s0
 23f76d8:	462b      	mov	r3, r5
 23f76da:	ee10 0a10 	vmov	r0, s0
 23f76de:	4629      	mov	r1, r5
 23f76e0:	f7f0 f9da 	bl	23e7a98 <__aeabi_dmul>
 23f76e4:	4622      	mov	r2, r4
 23f76e6:	462b      	mov	r3, r5
 23f76e8:	f7f0 f820 	bl	23e772c <__adddf3>
 23f76ec:	ec41 0b10 	vmov	d0, r0, r1
 23f76f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23f76f4:	4620      	mov	r0, r4
 23f76f6:	4629      	mov	r1, r5
 23f76f8:	f7f0 f816 	bl	23e7728 <__aeabi_dsub>
 23f76fc:	4602      	mov	r2, r0
 23f76fe:	460b      	mov	r3, r1
 23f7700:	f7f0 faf4 	bl	23e7cec <__aeabi_ddiv>
 23f7704:	ec41 0b10 	vmov	d0, r0, r1
 23f7708:	e7dd      	b.n	23f76c6 <__ieee754_sqrt+0x12a>
 23f770a:	3601      	adds	r6, #1
 23f770c:	e7cf      	b.n	23f76ae <__ieee754_sqrt+0x112>
 23f770e:	4613      	mov	r3, r2
 23f7710:	2420      	movs	r4, #32
 23f7712:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23f7716:	e7c3      	b.n	23f76a0 <__ieee754_sqrt+0x104>
 23f7718:	7ff00000 	.word	0x7ff00000
 23f771c:	3fe00000 	.word	0x3fe00000

023f7720 <__ieee754_expf>:
 23f7720:	ee10 3a10 	vmov	r3, s0
 23f7724:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 23f7728:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 23f772c:	d859      	bhi.n	23f77e2 <__ieee754_expf+0xc2>
 23f772e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 23f7732:	f000 8093 	beq.w	23f785c <__ieee754_expf+0x13c>
 23f7736:	4861      	ldr	r0, [pc, #388]	; (23f78bc <__ieee754_expf+0x19c>)
 23f7738:	4283      	cmp	r3, r0
 23f773a:	dc55      	bgt.n	23f77e8 <__ieee754_expf+0xc8>
 23f773c:	b129      	cbz	r1, 23f774a <__ieee754_expf+0x2a>
 23f773e:	4b60      	ldr	r3, [pc, #384]	; (23f78c0 <__ieee754_expf+0x1a0>)
 23f7740:	429a      	cmp	r2, r3
 23f7742:	d902      	bls.n	23f774a <__ieee754_expf+0x2a>
 23f7744:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 23f78c4 <__ieee754_expf+0x1a4>
 23f7748:	4770      	bx	lr
 23f774a:	4b5f      	ldr	r3, [pc, #380]	; (23f78c8 <__ieee754_expf+0x1a8>)
 23f774c:	429a      	cmp	r2, r3
 23f774e:	d950      	bls.n	23f77f2 <__ieee754_expf+0xd2>
 23f7750:	4b5e      	ldr	r3, [pc, #376]	; (23f78cc <__ieee754_expf+0x1ac>)
 23f7752:	429a      	cmp	r2, r3
 23f7754:	f200 8094 	bhi.w	23f7880 <__ieee754_expf+0x160>
 23f7758:	485d      	ldr	r0, [pc, #372]	; (23f78d0 <__ieee754_expf+0x1b0>)
 23f775a:	f1c1 0301 	rsb	r3, r1, #1
 23f775e:	4a5d      	ldr	r2, [pc, #372]	; (23f78d4 <__ieee754_expf+0x1b4>)
 23f7760:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 23f7764:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 23f7768:	1a59      	subs	r1, r3, r1
 23f776a:	ed90 4a00 	vldr	s8, [r0]
 23f776e:	ed92 7a00 	vldr	s14, [r2]
 23f7772:	ee30 4a44 	vsub.f32	s8, s0, s8
 23f7776:	ee34 0a47 	vsub.f32	s0, s8, s14
 23f777a:	eddf 7a57 	vldr	s15, [pc, #348]	; 23f78d8 <__ieee754_expf+0x1b8>
 23f777e:	eddf 4a57 	vldr	s9, [pc, #348]	; 23f78dc <__ieee754_expf+0x1bc>
 23f7782:	ed9f 5a57 	vldr	s10, [pc, #348]	; 23f78e0 <__ieee754_expf+0x1c0>
 23f7786:	ee60 6a00 	vmul.f32	s13, s0, s0
 23f778a:	ed9f 6a56 	vldr	s12, [pc, #344]	; 23f78e4 <__ieee754_expf+0x1c4>
 23f778e:	eddf 5a56 	vldr	s11, [pc, #344]	; 23f78e8 <__ieee754_expf+0x1c8>
 23f7792:	eee6 4aa7 	vfma.f32	s9, s13, s15
 23f7796:	eea4 5aa6 	vfma.f32	s10, s9, s13
 23f779a:	eea5 6a26 	vfma.f32	s12, s10, s13
 23f779e:	eee6 5a26 	vfma.f32	s11, s12, s13
 23f77a2:	eeb0 6a40 	vmov.f32	s12, s0
 23f77a6:	eea5 6ae6 	vfms.f32	s12, s11, s13
 23f77aa:	2900      	cmp	r1, #0
 23f77ac:	d047      	beq.n	23f783e <__ieee754_expf+0x11e>
 23f77ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 23f77b2:	f111 0f7d 	cmn.w	r1, #125	; 0x7d
 23f77b6:	ee60 5a06 	vmul.f32	s11, s0, s12
 23f77ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 23f77be:	ee36 6ac6 	vsub.f32	s12, s13, s12
 23f77c2:	ee85 0a86 	vdiv.f32	s0, s11, s12
 23f77c6:	ee37 0a40 	vsub.f32	s0, s14, s0
 23f77ca:	ee30 0a44 	vsub.f32	s0, s0, s8
 23f77ce:	ee37 0ac0 	vsub.f32	s0, s15, s0
 23f77d2:	db49      	blt.n	23f7868 <__ieee754_expf+0x148>
 23f77d4:	ee10 3a10 	vmov	r3, s0
 23f77d8:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 23f77dc:	ee00 3a10 	vmov	s0, r3
 23f77e0:	4770      	bx	lr
 23f77e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 23f77e6:	4770      	bx	lr
 23f77e8:	ed9f 0a40 	vldr	s0, [pc, #256]	; 23f78ec <__ieee754_expf+0x1cc>
 23f77ec:	ee20 0a00 	vmul.f32	s0, s0, s0
 23f77f0:	4770      	bx	lr
 23f77f2:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 23f77f6:	d20a      	bcs.n	23f780e <__ieee754_expf+0xee>
 23f77f8:	eddf 7a3c 	vldr	s15, [pc, #240]	; 23f78ec <__ieee754_expf+0x1cc>
 23f77fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23f7800:	ee70 7a27 	vadd.f32	s15, s0, s15
 23f7804:	eef4 7ac7 	vcmpe.f32	s15, s14
 23f7808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f780c:	dc52      	bgt.n	23f78b4 <__ieee754_expf+0x194>
 23f780e:	ee60 7a00 	vmul.f32	s15, s0, s0
 23f7812:	ed9f 5a31 	vldr	s10, [pc, #196]	; 23f78d8 <__ieee754_expf+0x1b8>
 23f7816:	eddf 5a31 	vldr	s11, [pc, #196]	; 23f78dc <__ieee754_expf+0x1bc>
 23f781a:	ed9f 6a31 	vldr	s12, [pc, #196]	; 23f78e0 <__ieee754_expf+0x1c0>
 23f781e:	eee7 5a85 	vfma.f32	s11, s15, s10
 23f7822:	eddf 6a30 	vldr	s13, [pc, #192]	; 23f78e4 <__ieee754_expf+0x1c4>
 23f7826:	ed9f 7a30 	vldr	s14, [pc, #192]	; 23f78e8 <__ieee754_expf+0x1c8>
 23f782a:	eea7 6aa5 	vfma.f32	s12, s15, s11
 23f782e:	eee7 6a86 	vfma.f32	s13, s15, s12
 23f7832:	eeb0 6a40 	vmov.f32	s12, s0
 23f7836:	eea7 7aa6 	vfma.f32	s14, s15, s13
 23f783a:	eea7 6ac7 	vfms.f32	s12, s15, s14
 23f783e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 23f7842:	ee60 6a06 	vmul.f32	s13, s0, s12
 23f7846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23f784a:	ee36 6a67 	vsub.f32	s12, s12, s15
 23f784e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 23f7852:	ee37 0ac0 	vsub.f32	s0, s15, s0
 23f7856:	ee37 0a40 	vsub.f32	s0, s14, s0
 23f785a:	4770      	bx	lr
 23f785c:	eddf 7a19 	vldr	s15, [pc, #100]	; 23f78c4 <__ieee754_expf+0x1a4>
 23f7860:	2900      	cmp	r1, #0
 23f7862:	fe00 0a27 	vseleq.f32	s0, s0, s15
 23f7866:	4770      	bx	lr
 23f7868:	3164      	adds	r1, #100	; 0x64
 23f786a:	ee10 3a10 	vmov	r3, s0
 23f786e:	eddf 7a20 	vldr	s15, [pc, #128]	; 23f78f0 <__ieee754_expf+0x1d0>
 23f7872:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 23f7876:	ee00 3a10 	vmov	s0, r3
 23f787a:	ee20 0a27 	vmul.f32	s0, s0, s15
 23f787e:	4770      	bx	lr
 23f7880:	4b1c      	ldr	r3, [pc, #112]	; (23f78f4 <__ieee754_expf+0x1d4>)
 23f7882:	eeb0 4a40 	vmov.f32	s8, s0
 23f7886:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 23f78f8 <__ieee754_expf+0x1d8>
 23f788a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 23f788e:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 23f78fc <__ieee754_expf+0x1dc>
 23f7892:	eddf 6a1b 	vldr	s13, [pc, #108]	; 23f7900 <__ieee754_expf+0x1e0>
 23f7896:	edd1 7a00 	vldr	s15, [r1]
 23f789a:	eee0 7a07 	vfma.f32	s15, s0, s14
 23f789e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 23f78a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 23f78a6:	ee17 1a90 	vmov	r1, s15
 23f78aa:	eea7 4a46 	vfms.f32	s8, s14, s12
 23f78ae:	ee27 7a26 	vmul.f32	s14, s14, s13
 23f78b2:	e760      	b.n	23f7776 <__ieee754_expf+0x56>
 23f78b4:	ee30 0a07 	vadd.f32	s0, s0, s14
 23f78b8:	4770      	bx	lr
 23f78ba:	bf00      	nop
 23f78bc:	42b17217 	.word	0x42b17217
 23f78c0:	42cff1b5 	.word	0x42cff1b5
 23f78c4:	00000000 	.word	0x00000000
 23f78c8:	3eb17218 	.word	0x3eb17218
 23f78cc:	3f851591 	.word	0x3f851591
 23f78d0:	023ffbc8 	.word	0x023ffbc8
 23f78d4:	023ffbd0 	.word	0x023ffbd0
 23f78d8:	3331bb4c 	.word	0x3331bb4c
 23f78dc:	b5ddea0e 	.word	0xb5ddea0e
 23f78e0:	388ab355 	.word	0x388ab355
 23f78e4:	bb360b61 	.word	0xbb360b61
 23f78e8:	3e2aaaab 	.word	0x3e2aaaab
 23f78ec:	7149f2ca 	.word	0x7149f2ca
 23f78f0:	0d800000 	.word	0x0d800000
 23f78f4:	023ffbc0 	.word	0x023ffbc0
 23f78f8:	3fb8aa3b 	.word	0x3fb8aa3b
 23f78fc:	3f317180 	.word	0x3f317180
 23f7900:	3717f7d1 	.word	0x3717f7d1

023f7904 <__ieee754_logf>:
 23f7904:	ee10 3a10 	vmov	r3, s0
 23f7908:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 23f790c:	d02f      	beq.n	23f796e <__ieee754_logf+0x6a>
 23f790e:	2b00      	cmp	r3, #0
 23f7910:	db34      	blt.n	23f797c <__ieee754_logf+0x78>
 23f7912:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 23f7916:	da41      	bge.n	23f799c <__ieee754_logf+0x98>
 23f7918:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 23f791c:	b500      	push	{lr}
 23f791e:	db34      	blt.n	23f798a <__ieee754_logf+0x86>
 23f7920:	f04f 0e00 	mov.w	lr, #0
 23f7924:	f3c3 0116 	ubfx	r1, r3, #0, #23
 23f7928:	4865      	ldr	r0, [pc, #404]	; (23f7ac0 <__ieee754_logf+0x1bc>)
 23f792a:	15db      	asrs	r3, r3, #23
 23f792c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 23f7930:	4408      	add	r0, r1
 23f7932:	f101 0c0f 	add.w	ip, r1, #15
 23f7936:	3b7f      	subs	r3, #127	; 0x7f
 23f7938:	f400 0200 	and.w	r2, r0, #8388608	; 0x800000
 23f793c:	4473      	add	r3, lr
 23f793e:	f082 527e 	eor.w	r2, r2, #1065353216	; 0x3f800000
 23f7942:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 23f7946:	485f      	ldr	r0, [pc, #380]	; (23f7ac4 <__ieee754_logf+0x1c0>)
 23f7948:	430a      	orrs	r2, r1
 23f794a:	ea0c 0000 	and.w	r0, ip, r0
 23f794e:	ee00 2a10 	vmov	s0, r2
 23f7952:	ee30 0a67 	vsub.f32	s0, s0, s15
 23f7956:	bb20      	cbnz	r0, 23f79a2 <__ieee754_logf+0x9e>
 23f7958:	eeb5 0a40 	vcmp.f32	s0, #0.0
 23f795c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f7960:	d15f      	bne.n	23f7a22 <__ieee754_logf+0x11e>
 23f7962:	2b00      	cmp	r3, #0
 23f7964:	f040 808f 	bne.w	23f7a86 <__ieee754_logf+0x182>
 23f7968:	ed9f 0a57 	vldr	s0, [pc, #348]	; 23f7ac8 <__ieee754_logf+0x1c4>
 23f796c:	e057      	b.n	23f7a1e <__ieee754_logf+0x11a>
 23f796e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 23f7acc <__ieee754_logf+0x1c8>
 23f7972:	eddf 7a55 	vldr	s15, [pc, #340]	; 23f7ac8 <__ieee754_logf+0x1c4>
 23f7976:	ee87 0a27 	vdiv.f32	s0, s14, s15
 23f797a:	4770      	bx	lr
 23f797c:	ee70 7a40 	vsub.f32	s15, s0, s0
 23f7980:	ed9f 7a51 	vldr	s14, [pc, #324]	; 23f7ac8 <__ieee754_logf+0x1c4>
 23f7984:	ee87 0a87 	vdiv.f32	s0, s15, s14
 23f7988:	4770      	bx	lr
 23f798a:	eddf 7a51 	vldr	s15, [pc, #324]	; 23f7ad0 <__ieee754_logf+0x1cc>
 23f798e:	f06f 0e18 	mvn.w	lr, #24
 23f7992:	ee60 7a27 	vmul.f32	s15, s0, s15
 23f7996:	ee17 3a90 	vmov	r3, s15
 23f799a:	e7c3      	b.n	23f7924 <__ieee754_logf+0x20>
 23f799c:	ee30 0a00 	vadd.f32	s0, s0, s0
 23f79a0:	4770      	bx	lr
 23f79a2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 23f79a6:	ee06 3a10 	vmov	s12, r3
 23f79aa:	ed9f 3a4a 	vldr	s6, [pc, #296]	; 23f7ad4 <__ieee754_logf+0x1d0>
 23f79ae:	eef8 2ac6 	vcvt.f32.s32	s5, s12
 23f79b2:	eddf 4a49 	vldr	s9, [pc, #292]	; 23f7ad8 <__ieee754_logf+0x1d4>
 23f79b6:	ee30 7a07 	vadd.f32	s14, s0, s14
 23f79ba:	eddf 5a48 	vldr	s11, [pc, #288]	; 23f7adc <__ieee754_logf+0x1d8>
 23f79be:	eddf 3a48 	vldr	s7, [pc, #288]	; 23f7ae0 <__ieee754_logf+0x1dc>
 23f79c2:	ed9f 5a48 	vldr	s10, [pc, #288]	; 23f7ae4 <__ieee754_logf+0x1e0>
 23f79c6:	ee80 4a07 	vdiv.f32	s8, s0, s14
 23f79ca:	eddf 7a47 	vldr	s15, [pc, #284]	; 23f7ae8 <__ieee754_logf+0x1e4>
 23f79ce:	eddf 6a47 	vldr	s13, [pc, #284]	; 23f7aec <__ieee754_logf+0x1e8>
 23f79d2:	4847      	ldr	r0, [pc, #284]	; (23f7af0 <__ieee754_logf+0x1ec>)
 23f79d4:	4a47      	ldr	r2, [pc, #284]	; (23f7af4 <__ieee754_logf+0x1f0>)
 23f79d6:	4408      	add	r0, r1
 23f79d8:	1a52      	subs	r2, r2, r1
 23f79da:	4302      	orrs	r2, r0
 23f79dc:	2a00      	cmp	r2, #0
 23f79de:	ee24 6a04 	vmul.f32	s12, s8, s8
 23f79e2:	ee26 7a06 	vmul.f32	s14, s12, s12
 23f79e6:	eee7 4a03 	vfma.f32	s9, s14, s6
 23f79ea:	eea7 5a23 	vfma.f32	s10, s14, s7
 23f79ee:	eee4 5a87 	vfma.f32	s11, s9, s14
 23f79f2:	eee5 6a07 	vfma.f32	s13, s10, s14
 23f79f6:	eee5 7a87 	vfma.f32	s15, s11, s14
 23f79fa:	ee67 7a86 	vmul.f32	s15, s15, s12
 23f79fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 23f7a02:	dd29      	ble.n	23f7a58 <__ieee754_logf+0x154>
 23f7a04:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 23f7a08:	ee20 7a07 	vmul.f32	s14, s0, s14
 23f7a0c:	ee27 7a00 	vmul.f32	s14, s14, s0
 23f7a10:	bb43      	cbnz	r3, 23f7a64 <__ieee754_logf+0x160>
 23f7a12:	ee77 7a87 	vadd.f32	s15, s15, s14
 23f7a16:	eea7 7ac4 	vfms.f32	s14, s15, s8
 23f7a1a:	ee30 0a47 	vsub.f32	s0, s0, s14
 23f7a1e:	f85d fb04 	ldr.w	pc, [sp], #4
 23f7a22:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 23f7a26:	eddf 6a34 	vldr	s13, [pc, #208]	; 23f7af8 <__ieee754_logf+0x1f4>
 23f7a2a:	ee20 7a00 	vmul.f32	s14, s0, s0
 23f7a2e:	eee0 7a66 	vfms.f32	s15, s0, s13
 23f7a32:	ee27 7a27 	vmul.f32	s14, s14, s15
 23f7a36:	2b00      	cmp	r3, #0
 23f7a38:	d0ef      	beq.n	23f7a1a <__ieee754_logf+0x116>
 23f7a3a:	ee07 3a90 	vmov	s15, r3
 23f7a3e:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 23f7afc <__ieee754_logf+0x1f8>
 23f7a42:	eddf 6a2f 	vldr	s13, [pc, #188]	; 23f7b00 <__ieee754_logf+0x1fc>
 23f7a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f7a4a:	eea7 7ac6 	vfms.f32	s14, s15, s12
 23f7a4e:	ee37 0a40 	vsub.f32	s0, s14, s0
 23f7a52:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 23f7a56:	e7e2      	b.n	23f7a1e <__ieee754_logf+0x11a>
 23f7a58:	bb13      	cbnz	r3, 23f7aa0 <__ieee754_logf+0x19c>
 23f7a5a:	ee70 7a67 	vsub.f32	s15, s0, s15
 23f7a5e:	eea7 0ac4 	vfms.f32	s0, s15, s8
 23f7a62:	e7dc      	b.n	23f7a1e <__ieee754_logf+0x11a>
 23f7a64:	eddf 6a25 	vldr	s13, [pc, #148]	; 23f7afc <__ieee754_logf+0x1f8>
 23f7a68:	ee77 7a87 	vadd.f32	s15, s15, s14
 23f7a6c:	ed9f 6a24 	vldr	s12, [pc, #144]	; 23f7b00 <__ieee754_logf+0x1fc>
 23f7a70:	ee62 6aa6 	vmul.f32	s13, s5, s13
 23f7a74:	eee7 6a84 	vfma.f32	s13, s15, s8
 23f7a78:	ee37 7a66 	vsub.f32	s14, s14, s13
 23f7a7c:	ee37 0a40 	vsub.f32	s0, s14, s0
 23f7a80:	ee92 0a86 	vfnms.f32	s0, s5, s12
 23f7a84:	e7cb      	b.n	23f7a1e <__ieee754_logf+0x11a>
 23f7a86:	ee07 3a90 	vmov	s15, r3
 23f7a8a:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 23f7afc <__ieee754_logf+0x1f8>
 23f7a8e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 23f7b00 <__ieee754_logf+0x1fc>
 23f7a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23f7a96:	ee27 0a80 	vmul.f32	s0, s15, s0
 23f7a9a:	eea7 0a87 	vfma.f32	s0, s15, s14
 23f7a9e:	e7be      	b.n	23f7a1e <__ieee754_logf+0x11a>
 23f7aa0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 23f7afc <__ieee754_logf+0x1f8>
 23f7aa4:	ee70 7a67 	vsub.f32	s15, s0, s15
 23f7aa8:	eddf 6a15 	vldr	s13, [pc, #84]	; 23f7b00 <__ieee754_logf+0x1fc>
 23f7aac:	ee27 7a62 	vnmul.f32	s14, s14, s5
 23f7ab0:	eea7 7a84 	vfma.f32	s14, s15, s8
 23f7ab4:	ee37 0a40 	vsub.f32	s0, s14, s0
 23f7ab8:	ee92 0aa6 	vfnms.f32	s0, s5, s13
 23f7abc:	e7af      	b.n	23f7a1e <__ieee754_logf+0x11a>
 23f7abe:	bf00      	nop
 23f7ac0:	004afb20 	.word	0x004afb20
 23f7ac4:	007ffff0 	.word	0x007ffff0
 23f7ac8:	00000000 	.word	0x00000000
 23f7acc:	cc000000 	.word	0xcc000000
 23f7ad0:	4c000000 	.word	0x4c000000
 23f7ad4:	3e178897 	.word	0x3e178897
 23f7ad8:	3e3a3325 	.word	0x3e3a3325
 23f7adc:	3e924925 	.word	0x3e924925
 23f7ae0:	3e1cd04f 	.word	0x3e1cd04f
 23f7ae4:	3e638e29 	.word	0x3e638e29
 23f7ae8:	3f2aaaab 	.word	0x3f2aaaab
 23f7aec:	3ecccccd 	.word	0x3ecccccd
 23f7af0:	ffcf5c30 	.word	0xffcf5c30
 23f7af4:	0035c288 	.word	0x0035c288
 23f7af8:	3eaaaaab 	.word	0x3eaaaaab
 23f7afc:	3717f7d1 	.word	0x3717f7d1
 23f7b00:	3f317180 	.word	0x3f317180

023f7b04 <__ieee754_sqrtf>:
 23f7b04:	eeb1 0ac0 	vsqrt.f32	s0, s0
 23f7b08:	4770      	bx	lr
 23f7b0a:	bf00      	nop
 23f7b0c:	0000      	movs	r0, r0
	...

023f7b10 <__kernel_cos>:
 23f7b10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f7b14:	ec57 6b10 	vmov	r6, r7, d0
 23f7b18:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 23f7b1c:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 23f7b20:	ec5b ab11 	vmov	sl, fp, d1
 23f7b24:	ed2d 8b04 	vpush	{d8-d9}
 23f7b28:	da71      	bge.n	23f7c0e <__kernel_cos+0xfe>
 23f7b2a:	ee10 0a10 	vmov	r0, s0
 23f7b2e:	4639      	mov	r1, r7
 23f7b30:	f7f0 fa62 	bl	23e7ff8 <__aeabi_d2iz>
 23f7b34:	2800      	cmp	r0, #0
 23f7b36:	f000 80f6 	beq.w	23f7d26 <__kernel_cos+0x216>
 23f7b3a:	4632      	mov	r2, r6
 23f7b3c:	463b      	mov	r3, r7
 23f7b3e:	4630      	mov	r0, r6
 23f7b40:	4639      	mov	r1, r7
 23f7b42:	f7ef ffa9 	bl	23e7a98 <__aeabi_dmul>
 23f7b46:	4604      	mov	r4, r0
 23f7b48:	460d      	mov	r5, r1
 23f7b4a:	a37b      	add	r3, pc, #492	; (adr r3, 23f7d38 <__kernel_cos+0x228>)
 23f7b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7b50:	f7ef ffa2 	bl	23e7a98 <__aeabi_dmul>
 23f7b54:	a37a      	add	r3, pc, #488	; (adr r3, 23f7d40 <__kernel_cos+0x230>)
 23f7b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7b5a:	f7ef fde7 	bl	23e772c <__adddf3>
 23f7b5e:	4622      	mov	r2, r4
 23f7b60:	462b      	mov	r3, r5
 23f7b62:	f7ef ff99 	bl	23e7a98 <__aeabi_dmul>
 23f7b66:	a378      	add	r3, pc, #480	; (adr r3, 23f7d48 <__kernel_cos+0x238>)
 23f7b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7b6c:	f7ef fddc 	bl	23e7728 <__aeabi_dsub>
 23f7b70:	4622      	mov	r2, r4
 23f7b72:	462b      	mov	r3, r5
 23f7b74:	f7ef ff90 	bl	23e7a98 <__aeabi_dmul>
 23f7b78:	a375      	add	r3, pc, #468	; (adr r3, 23f7d50 <__kernel_cos+0x240>)
 23f7b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7b7e:	f7ef fdd5 	bl	23e772c <__adddf3>
 23f7b82:	4622      	mov	r2, r4
 23f7b84:	462b      	mov	r3, r5
 23f7b86:	f7ef ff87 	bl	23e7a98 <__aeabi_dmul>
 23f7b8a:	a373      	add	r3, pc, #460	; (adr r3, 23f7d58 <__kernel_cos+0x248>)
 23f7b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7b90:	f7ef fdca 	bl	23e7728 <__aeabi_dsub>
 23f7b94:	4622      	mov	r2, r4
 23f7b96:	462b      	mov	r3, r5
 23f7b98:	f7ef ff7e 	bl	23e7a98 <__aeabi_dmul>
 23f7b9c:	a370      	add	r3, pc, #448	; (adr r3, 23f7d60 <__kernel_cos+0x250>)
 23f7b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7ba2:	f7ef fdc3 	bl	23e772c <__adddf3>
 23f7ba6:	4622      	mov	r2, r4
 23f7ba8:	462b      	mov	r3, r5
 23f7baa:	f7ef ff75 	bl	23e7a98 <__aeabi_dmul>
 23f7bae:	ec41 0b18 	vmov	d8, r0, r1
 23f7bb2:	2200      	movs	r2, #0
 23f7bb4:	4b70      	ldr	r3, [pc, #448]	; (23f7d78 <__kernel_cos+0x268>)
 23f7bb6:	4620      	mov	r0, r4
 23f7bb8:	4629      	mov	r1, r5
 23f7bba:	f7ef ff6d 	bl	23e7a98 <__aeabi_dmul>
 23f7bbe:	4680      	mov	r8, r0
 23f7bc0:	4689      	mov	r9, r1
 23f7bc2:	4620      	mov	r0, r4
 23f7bc4:	4629      	mov	r1, r5
 23f7bc6:	ec53 2b18 	vmov	r2, r3, d8
 23f7bca:	f7ef ff65 	bl	23e7a98 <__aeabi_dmul>
 23f7bce:	4604      	mov	r4, r0
 23f7bd0:	460d      	mov	r5, r1
 23f7bd2:	4652      	mov	r2, sl
 23f7bd4:	465b      	mov	r3, fp
 23f7bd6:	4630      	mov	r0, r6
 23f7bd8:	4639      	mov	r1, r7
 23f7bda:	f7ef ff5d 	bl	23e7a98 <__aeabi_dmul>
 23f7bde:	4602      	mov	r2, r0
 23f7be0:	460b      	mov	r3, r1
 23f7be2:	4620      	mov	r0, r4
 23f7be4:	4629      	mov	r1, r5
 23f7be6:	f7ef fd9f 	bl	23e7728 <__aeabi_dsub>
 23f7bea:	4602      	mov	r2, r0
 23f7bec:	460b      	mov	r3, r1
 23f7bee:	4640      	mov	r0, r8
 23f7bf0:	4649      	mov	r1, r9
 23f7bf2:	f7ef fd99 	bl	23e7728 <__aeabi_dsub>
 23f7bf6:	4602      	mov	r2, r0
 23f7bf8:	460b      	mov	r3, r1
 23f7bfa:	2000      	movs	r0, #0
 23f7bfc:	495f      	ldr	r1, [pc, #380]	; (23f7d7c <__kernel_cos+0x26c>)
 23f7bfe:	f7ef fd93 	bl	23e7728 <__aeabi_dsub>
 23f7c02:	ecbd 8b04 	vpop	{d8-d9}
 23f7c06:	ec41 0b10 	vmov	d0, r0, r1
 23f7c0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f7c0e:	ee10 2a10 	vmov	r2, s0
 23f7c12:	ee10 0a10 	vmov	r0, s0
 23f7c16:	463b      	mov	r3, r7
 23f7c18:	4639      	mov	r1, r7
 23f7c1a:	f7ef ff3d 	bl	23e7a98 <__aeabi_dmul>
 23f7c1e:	4604      	mov	r4, r0
 23f7c20:	460d      	mov	r5, r1
 23f7c22:	a345      	add	r3, pc, #276	; (adr r3, 23f7d38 <__kernel_cos+0x228>)
 23f7c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7c28:	f7ef ff36 	bl	23e7a98 <__aeabi_dmul>
 23f7c2c:	a344      	add	r3, pc, #272	; (adr r3, 23f7d40 <__kernel_cos+0x230>)
 23f7c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7c32:	f7ef fd7b 	bl	23e772c <__adddf3>
 23f7c36:	4622      	mov	r2, r4
 23f7c38:	462b      	mov	r3, r5
 23f7c3a:	f7ef ff2d 	bl	23e7a98 <__aeabi_dmul>
 23f7c3e:	a342      	add	r3, pc, #264	; (adr r3, 23f7d48 <__kernel_cos+0x238>)
 23f7c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7c44:	f7ef fd70 	bl	23e7728 <__aeabi_dsub>
 23f7c48:	4622      	mov	r2, r4
 23f7c4a:	462b      	mov	r3, r5
 23f7c4c:	f7ef ff24 	bl	23e7a98 <__aeabi_dmul>
 23f7c50:	a33f      	add	r3, pc, #252	; (adr r3, 23f7d50 <__kernel_cos+0x240>)
 23f7c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7c56:	f7ef fd69 	bl	23e772c <__adddf3>
 23f7c5a:	4622      	mov	r2, r4
 23f7c5c:	462b      	mov	r3, r5
 23f7c5e:	f7ef ff1b 	bl	23e7a98 <__aeabi_dmul>
 23f7c62:	a33d      	add	r3, pc, #244	; (adr r3, 23f7d58 <__kernel_cos+0x248>)
 23f7c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7c68:	f7ef fd5e 	bl	23e7728 <__aeabi_dsub>
 23f7c6c:	4622      	mov	r2, r4
 23f7c6e:	462b      	mov	r3, r5
 23f7c70:	f7ef ff12 	bl	23e7a98 <__aeabi_dmul>
 23f7c74:	a33a      	add	r3, pc, #232	; (adr r3, 23f7d60 <__kernel_cos+0x250>)
 23f7c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f7c7a:	f7ef fd57 	bl	23e772c <__adddf3>
 23f7c7e:	462b      	mov	r3, r5
 23f7c80:	4622      	mov	r2, r4
 23f7c82:	f7ef ff09 	bl	23e7a98 <__aeabi_dmul>
 23f7c86:	4b3e      	ldr	r3, [pc, #248]	; (23f7d80 <__kernel_cos+0x270>)
 23f7c88:	4599      	cmp	r9, r3
 23f7c8a:	ec41 0b18 	vmov	d8, r0, r1
 23f7c8e:	dd90      	ble.n	23f7bb2 <__kernel_cos+0xa2>
 23f7c90:	4b3c      	ldr	r3, [pc, #240]	; (23f7d84 <__kernel_cos+0x274>)
 23f7c92:	4599      	cmp	r9, r3
 23f7c94:	dc3c      	bgt.n	23f7d10 <__kernel_cos+0x200>
 23f7c96:	2200      	movs	r2, #0
 23f7c98:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 23f7c9c:	2000      	movs	r0, #0
 23f7c9e:	4937      	ldr	r1, [pc, #220]	; (23f7d7c <__kernel_cos+0x26c>)
 23f7ca0:	4690      	mov	r8, r2
 23f7ca2:	4699      	mov	r9, r3
 23f7ca4:	f7ef fd40 	bl	23e7728 <__aeabi_dsub>
 23f7ca8:	ec41 0b19 	vmov	d9, r0, r1
 23f7cac:	2200      	movs	r2, #0
 23f7cae:	4b32      	ldr	r3, [pc, #200]	; (23f7d78 <__kernel_cos+0x268>)
 23f7cb0:	4620      	mov	r0, r4
 23f7cb2:	4629      	mov	r1, r5
 23f7cb4:	f7ef fef0 	bl	23e7a98 <__aeabi_dmul>
 23f7cb8:	4642      	mov	r2, r8
 23f7cba:	464b      	mov	r3, r9
 23f7cbc:	f7ef fd34 	bl	23e7728 <__aeabi_dsub>
 23f7cc0:	4680      	mov	r8, r0
 23f7cc2:	4689      	mov	r9, r1
 23f7cc4:	4620      	mov	r0, r4
 23f7cc6:	4629      	mov	r1, r5
 23f7cc8:	ec53 2b18 	vmov	r2, r3, d8
 23f7ccc:	f7ef fee4 	bl	23e7a98 <__aeabi_dmul>
 23f7cd0:	4604      	mov	r4, r0
 23f7cd2:	460d      	mov	r5, r1
 23f7cd4:	4652      	mov	r2, sl
 23f7cd6:	465b      	mov	r3, fp
 23f7cd8:	4630      	mov	r0, r6
 23f7cda:	4639      	mov	r1, r7
 23f7cdc:	f7ef fedc 	bl	23e7a98 <__aeabi_dmul>
 23f7ce0:	4602      	mov	r2, r0
 23f7ce2:	460b      	mov	r3, r1
 23f7ce4:	4620      	mov	r0, r4
 23f7ce6:	4629      	mov	r1, r5
 23f7ce8:	f7ef fd1e 	bl	23e7728 <__aeabi_dsub>
 23f7cec:	4602      	mov	r2, r0
 23f7cee:	460b      	mov	r3, r1
 23f7cf0:	4640      	mov	r0, r8
 23f7cf2:	4649      	mov	r1, r9
 23f7cf4:	f7ef fd18 	bl	23e7728 <__aeabi_dsub>
 23f7cf8:	4602      	mov	r2, r0
 23f7cfa:	460b      	mov	r3, r1
 23f7cfc:	ec51 0b19 	vmov	r0, r1, d9
 23f7d00:	f7ef fd12 	bl	23e7728 <__aeabi_dsub>
 23f7d04:	ecbd 8b04 	vpop	{d8-d9}
 23f7d08:	ec41 0b10 	vmov	d0, r0, r1
 23f7d0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f7d10:	ed9f 7b15 	vldr	d7, [pc, #84]	; 23f7d68 <__kernel_cos+0x258>
 23f7d14:	f04f 0800 	mov.w	r8, #0
 23f7d18:	f8df 906c 	ldr.w	r9, [pc, #108]	; 23f7d88 <__kernel_cos+0x278>
 23f7d1c:	eeb0 9a47 	vmov.f32	s18, s14
 23f7d20:	eef0 9a67 	vmov.f32	s19, s15
 23f7d24:	e7c2      	b.n	23f7cac <__kernel_cos+0x19c>
 23f7d26:	ecbd 8b04 	vpop	{d8-d9}
 23f7d2a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 23f7d70 <__kernel_cos+0x260>
 23f7d2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f7d32:	bf00      	nop
 23f7d34:	f3af 8000 	nop.w
 23f7d38:	be8838d4 	.word	0xbe8838d4
 23f7d3c:	bda8fae9 	.word	0xbda8fae9
 23f7d40:	bdb4b1c4 	.word	0xbdb4b1c4
 23f7d44:	3e21ee9e 	.word	0x3e21ee9e
 23f7d48:	809c52ad 	.word	0x809c52ad
 23f7d4c:	3e927e4f 	.word	0x3e927e4f
 23f7d50:	19cb1590 	.word	0x19cb1590
 23f7d54:	3efa01a0 	.word	0x3efa01a0
 23f7d58:	16c15177 	.word	0x16c15177
 23f7d5c:	3f56c16c 	.word	0x3f56c16c
 23f7d60:	5555554c 	.word	0x5555554c
 23f7d64:	3fa55555 	.word	0x3fa55555
 23f7d68:	00000000 	.word	0x00000000
 23f7d6c:	3fe70000 	.word	0x3fe70000
 23f7d70:	00000000 	.word	0x00000000
 23f7d74:	3ff00000 	.word	0x3ff00000
 23f7d78:	3fe00000 	.word	0x3fe00000
 23f7d7c:	3ff00000 	.word	0x3ff00000
 23f7d80:	3fd33332 	.word	0x3fd33332
 23f7d84:	3fe90000 	.word	0x3fe90000
 23f7d88:	3fd20000 	.word	0x3fd20000
 23f7d8c:	00000000 	.word	0x00000000

023f7d90 <__kernel_rem_pio2>:
 23f7d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f7d94:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 23f7d98:	461c      	mov	r4, r3
 23f7d9a:	f112 0f14 	cmn.w	r2, #20
 23f7d9e:	9308      	str	r3, [sp, #32]
 23f7da0:	910b      	str	r1, [sp, #44]	; 0x2c
 23f7da2:	4bb6      	ldr	r3, [pc, #728]	; (23f807c <__kernel_rem_pio2+0x2ec>)
 23f7da4:	99a2      	ldr	r1, [sp, #648]	; 0x288
 23f7da6:	9004      	str	r0, [sp, #16]
 23f7da8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 23f7dac:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 23f7db0:	9105      	str	r1, [sp, #20]
 23f7db2:	9303      	str	r3, [sp, #12]
 23f7db4:	f2c0 833a 	blt.w	23f842c <__kernel_rem_pio2+0x69c>
 23f7db8:	1ed3      	subs	r3, r2, #3
 23f7dba:	49b1      	ldr	r1, [pc, #708]	; (23f8080 <__kernel_rem_pio2+0x2f0>)
 23f7dbc:	fb81 0103 	smull	r0, r1, r1, r3
 23f7dc0:	17db      	asrs	r3, r3, #31
 23f7dc2:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 23f7dc6:	9307      	str	r3, [sp, #28]
 23f7dc8:	3301      	adds	r3, #1
 23f7dca:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 23f7dce:	00db      	lsls	r3, r3, #3
 23f7dd0:	18d3      	adds	r3, r2, r3
 23f7dd2:	9a07      	ldr	r2, [sp, #28]
 23f7dd4:	9306      	str	r3, [sp, #24]
 23f7dd6:	9b03      	ldr	r3, [sp, #12]
 23f7dd8:	1ad4      	subs	r4, r2, r3
 23f7dda:	9a05      	ldr	r2, [sp, #20]
 23f7ddc:	18d6      	adds	r6, r2, r3
 23f7dde:	d414      	bmi.n	23f7e0a <__kernel_rem_pio2+0x7a>
 23f7de0:	3601      	adds	r6, #1
 23f7de2:	ad20      	add	r5, sp, #128	; 0x80
 23f7de4:	f04f 0800 	mov.w	r8, #0
 23f7de8:	f04f 0900 	mov.w	r9, #0
 23f7dec:	4426      	add	r6, r4
 23f7dee:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
 23f7df0:	2c00      	cmp	r4, #0
 23f7df2:	4640      	mov	r0, r8
 23f7df4:	4649      	mov	r1, r9
 23f7df6:	db03      	blt.n	23f7e00 <__kernel_rem_pio2+0x70>
 23f7df8:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 23f7dfc:	f7ef fde2 	bl	23e79c4 <__aeabi_i2d>
 23f7e00:	3401      	adds	r4, #1
 23f7e02:	42b4      	cmp	r4, r6
 23f7e04:	e8e5 0102 	strd	r0, r1, [r5], #8
 23f7e08:	d1f2      	bne.n	23f7df0 <__kernel_rem_pio2+0x60>
 23f7e0a:	9b05      	ldr	r3, [sp, #20]
 23f7e0c:	2b00      	cmp	r3, #0
 23f7e0e:	f2c0 83c7 	blt.w	23f85a0 <__kernel_rem_pio2+0x810>
 23f7e12:	9b08      	ldr	r3, [sp, #32]
 23f7e14:	a920      	add	r1, sp, #128	; 0x80
 23f7e16:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 23f7e1a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 23f7e1e:	00da      	lsls	r2, r3, #3
 23f7e20:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 23f7e24:	9202      	str	r2, [sp, #8]
 23f7e26:	9a05      	ldr	r2, [sp, #20]
 23f7e28:	441a      	add	r2, r3
 23f7e2a:	9201      	str	r2, [sp, #4]
 23f7e2c:	9a04      	ldr	r2, [sp, #16]
 23f7e2e:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 23f7e32:	9b03      	ldr	r3, [sp, #12]
 23f7e34:	2b00      	cmp	r3, #0
 23f7e36:	f2c0 81a6 	blt.w	23f8186 <__kernel_rem_pio2+0x3f6>
 23f7e3a:	4657      	mov	r7, sl
 23f7e3c:	9e04      	ldr	r6, [sp, #16]
 23f7e3e:	2400      	movs	r4, #0
 23f7e40:	2500      	movs	r5, #0
 23f7e42:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23f7e46:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23f7e4a:	f7ef fe25 	bl	23e7a98 <__aeabi_dmul>
 23f7e4e:	4602      	mov	r2, r0
 23f7e50:	460b      	mov	r3, r1
 23f7e52:	4620      	mov	r0, r4
 23f7e54:	4629      	mov	r1, r5
 23f7e56:	f7ef fc69 	bl	23e772c <__adddf3>
 23f7e5a:	4546      	cmp	r6, r8
 23f7e5c:	4604      	mov	r4, r0
 23f7e5e:	460d      	mov	r5, r1
 23f7e60:	d1ef      	bne.n	23f7e42 <__kernel_rem_pio2+0xb2>
 23f7e62:	f109 0901 	add.w	r9, r9, #1
 23f7e66:	9b01      	ldr	r3, [sp, #4]
 23f7e68:	f10a 0a08 	add.w	sl, sl, #8
 23f7e6c:	4599      	cmp	r9, r3
 23f7e6e:	e8eb 4502 	strd	r4, r5, [fp], #8
 23f7e72:	d1de      	bne.n	23f7e32 <__kernel_rem_pio2+0xa2>
 23f7e74:	9a04      	ldr	r2, [sp, #16]
 23f7e76:	a90b      	add	r1, sp, #44	; 0x2c
 23f7e78:	9b02      	ldr	r3, [sp, #8]
 23f7e7a:	4413      	add	r3, r2
 23f7e7c:	469b      	mov	fp, r3
 23f7e7e:	9b05      	ldr	r3, [sp, #20]
 23f7e80:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 23f7e84:	a90c      	add	r1, sp, #48	; 0x30
 23f7e86:	920a      	str	r2, [sp, #40]	; 0x28
 23f7e88:	461a      	mov	r2, r3
 23f7e8a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23f7e8e:	9201      	str	r2, [sp, #4]
 23f7e90:	3b08      	subs	r3, #8
 23f7e92:	9309      	str	r3, [sp, #36]	; 0x24
 23f7e94:	9a01      	ldr	r2, [sp, #4]
 23f7e96:	a998      	add	r1, sp, #608	; 0x260
 23f7e98:	2a00      	cmp	r2, #0
 23f7e9a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 23f7e9e:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 23f7ea2:	dd29      	ble.n	23f7ef8 <__kernel_rem_pio2+0x168>
 23f7ea4:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 23f7ea8:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 23f7eac:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 23f7eb0:	2200      	movs	r2, #0
 23f7eb2:	4b74      	ldr	r3, [pc, #464]	; (23f8084 <__kernel_rem_pio2+0x2f4>)
 23f7eb4:	4620      	mov	r0, r4
 23f7eb6:	4629      	mov	r1, r5
 23f7eb8:	f7ef fdee 	bl	23e7a98 <__aeabi_dmul>
 23f7ebc:	f7f0 f89c 	bl	23e7ff8 <__aeabi_d2iz>
 23f7ec0:	f7ef fd80 	bl	23e79c4 <__aeabi_i2d>
 23f7ec4:	2200      	movs	r2, #0
 23f7ec6:	4b70      	ldr	r3, [pc, #448]	; (23f8088 <__kernel_rem_pio2+0x2f8>)
 23f7ec8:	4606      	mov	r6, r0
 23f7eca:	460f      	mov	r7, r1
 23f7ecc:	f7ef fde4 	bl	23e7a98 <__aeabi_dmul>
 23f7ed0:	4602      	mov	r2, r0
 23f7ed2:	460b      	mov	r3, r1
 23f7ed4:	4620      	mov	r0, r4
 23f7ed6:	4629      	mov	r1, r5
 23f7ed8:	f7ef fc26 	bl	23e7728 <__aeabi_dsub>
 23f7edc:	f7f0 f88c 	bl	23e7ff8 <__aeabi_d2iz>
 23f7ee0:	4639      	mov	r1, r7
 23f7ee2:	f849 0b04 	str.w	r0, [r9], #4
 23f7ee6:	4630      	mov	r0, r6
 23f7ee8:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 23f7eec:	f7ef fc1e 	bl	23e772c <__adddf3>
 23f7ef0:	4604      	mov	r4, r0
 23f7ef2:	45d0      	cmp	r8, sl
 23f7ef4:	460d      	mov	r5, r1
 23f7ef6:	d1db      	bne.n	23f7eb0 <__kernel_rem_pio2+0x120>
 23f7ef8:	f8dd 9018 	ldr.w	r9, [sp, #24]
 23f7efc:	ec45 4b10 	vmov	d0, r4, r5
 23f7f00:	4648      	mov	r0, r9
 23f7f02:	f000 fe25 	bl	23f8b50 <scalbn>
 23f7f06:	2200      	movs	r2, #0
 23f7f08:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 23f7f0c:	ee10 0a10 	vmov	r0, s0
 23f7f10:	ec55 4b10 	vmov	r4, r5, d0
 23f7f14:	4629      	mov	r1, r5
 23f7f16:	f7ef fdbf 	bl	23e7a98 <__aeabi_dmul>
 23f7f1a:	ec41 0b10 	vmov	d0, r0, r1
 23f7f1e:	f7fe fe7b 	bl	23f6c18 <floor>
 23f7f22:	2200      	movs	r2, #0
 23f7f24:	4b59      	ldr	r3, [pc, #356]	; (23f808c <__kernel_rem_pio2+0x2fc>)
 23f7f26:	ec51 0b10 	vmov	r0, r1, d0
 23f7f2a:	f7ef fdb5 	bl	23e7a98 <__aeabi_dmul>
 23f7f2e:	4602      	mov	r2, r0
 23f7f30:	460b      	mov	r3, r1
 23f7f32:	4620      	mov	r0, r4
 23f7f34:	4629      	mov	r1, r5
 23f7f36:	f7ef fbf7 	bl	23e7728 <__aeabi_dsub>
 23f7f3a:	460d      	mov	r5, r1
 23f7f3c:	4604      	mov	r4, r0
 23f7f3e:	f7f0 f85b 	bl	23e7ff8 <__aeabi_d2iz>
 23f7f42:	4680      	mov	r8, r0
 23f7f44:	f7ef fd3e 	bl	23e79c4 <__aeabi_i2d>
 23f7f48:	460b      	mov	r3, r1
 23f7f4a:	4602      	mov	r2, r0
 23f7f4c:	4629      	mov	r1, r5
 23f7f4e:	4620      	mov	r0, r4
 23f7f50:	f7ef fbea 	bl	23e7728 <__aeabi_dsub>
 23f7f54:	464b      	mov	r3, r9
 23f7f56:	4606      	mov	r6, r0
 23f7f58:	460f      	mov	r7, r1
 23f7f5a:	2b00      	cmp	r3, #0
 23f7f5c:	f340 8098 	ble.w	23f8090 <__kernel_rem_pio2+0x300>
 23f7f60:	9a01      	ldr	r2, [sp, #4]
 23f7f62:	a90c      	add	r1, sp, #48	; 0x30
 23f7f64:	f1c9 0318 	rsb	r3, r9, #24
 23f7f68:	f1c9 0517 	rsb	r5, r9, #23
 23f7f6c:	3a01      	subs	r2, #1
 23f7f6e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 23f7f72:	fa41 f003 	asr.w	r0, r1, r3
 23f7f76:	fa00 f303 	lsl.w	r3, r0, r3
 23f7f7a:	4480      	add	r8, r0
 23f7f7c:	1acb      	subs	r3, r1, r3
 23f7f7e:	a90c      	add	r1, sp, #48	; 0x30
 23f7f80:	fa43 f505 	asr.w	r5, r3, r5
 23f7f84:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23f7f88:	2d00      	cmp	r5, #0
 23f7f8a:	f300 808b 	bgt.w	23f80a4 <__kernel_rem_pio2+0x314>
 23f7f8e:	2200      	movs	r2, #0
 23f7f90:	2300      	movs	r3, #0
 23f7f92:	4630      	mov	r0, r6
 23f7f94:	4639      	mov	r1, r7
 23f7f96:	f7ef ffe7 	bl	23e7f68 <__aeabi_dcmpeq>
 23f7f9a:	2800      	cmp	r0, #0
 23f7f9c:	f000 824d 	beq.w	23f843a <__kernel_rem_pio2+0x6aa>
 23f7fa0:	9a01      	ldr	r2, [sp, #4]
 23f7fa2:	9b05      	ldr	r3, [sp, #20]
 23f7fa4:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
 23f7fa8:	4553      	cmp	r3, sl
 23f7faa:	dc10      	bgt.n	23f7fce <__kernel_rem_pio2+0x23e>
 23f7fac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 23f7fb0:	980a      	ldr	r0, [sp, #40]	; 0x28
 23f7fb2:	4413      	add	r3, r2
 23f7fb4:	aa0c      	add	r2, sp, #48	; 0x30
 23f7fb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23f7fba:	2200      	movs	r2, #0
 23f7fbc:	f853 1904 	ldr.w	r1, [r3], #-4
 23f7fc0:	4283      	cmp	r3, r0
 23f7fc2:	ea42 0201 	orr.w	r2, r2, r1
 23f7fc6:	d1f9      	bne.n	23f7fbc <__kernel_rem_pio2+0x22c>
 23f7fc8:	2a00      	cmp	r2, #0
 23f7fca:	f040 80df 	bne.w	23f818c <__kernel_rem_pio2+0x3fc>
 23f7fce:	9b05      	ldr	r3, [sp, #20]
 23f7fd0:	aa0c      	add	r2, sp, #48	; 0x30
 23f7fd2:	3b01      	subs	r3, #1
 23f7fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23f7fd8:	2b00      	cmp	r3, #0
 23f7fda:	f040 80cf 	bne.w	23f817c <__kernel_rem_pio2+0x3ec>
 23f7fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23f7fe0:	2301      	movs	r3, #1
 23f7fe2:	f852 1904 	ldr.w	r1, [r2], #-4
 23f7fe6:	3301      	adds	r3, #1
 23f7fe8:	2900      	cmp	r1, #0
 23f7fea:	d0fa      	beq.n	23f7fe2 <__kernel_rem_pio2+0x252>
 23f7fec:	9a01      	ldr	r2, [sp, #4]
 23f7fee:	18d3      	adds	r3, r2, r3
 23f7ff0:	9302      	str	r3, [sp, #8]
 23f7ff2:	1c53      	adds	r3, r2, #1
 23f7ff4:	4699      	mov	r9, r3
 23f7ff6:	9a01      	ldr	r2, [sp, #4]
 23f7ff8:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 23f7ffc:	9908      	ldr	r1, [sp, #32]
 23f7ffe:	440a      	add	r2, r1
 23f8000:	4690      	mov	r8, r2
 23f8002:	9a07      	ldr	r2, [sp, #28]
 23f8004:	441a      	add	r2, r3
 23f8006:	4492      	add	sl, r2
 23f8008:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 23f800a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 23f800e:	aa20      	add	r2, sp, #128	; 0x80
 23f8010:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 23f8014:	aa70      	add	r2, sp, #448	; 0x1c0
 23f8016:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 23f801a:	9301      	str	r3, [sp, #4]
 23f801c:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 23f8020:	4647      	mov	r7, r8
 23f8022:	f7ef fccf 	bl	23e79c4 <__aeabi_i2d>
 23f8026:	460b      	mov	r3, r1
 23f8028:	9903      	ldr	r1, [sp, #12]
 23f802a:	4602      	mov	r2, r0
 23f802c:	f108 0808 	add.w	r8, r8, #8
 23f8030:	2900      	cmp	r1, #0
 23f8032:	e948 2302 	strd	r2, r3, [r8, #-8]
 23f8036:	db1e      	blt.n	23f8076 <__kernel_rem_pio2+0x2e6>
 23f8038:	9e04      	ldr	r6, [sp, #16]
 23f803a:	2400      	movs	r4, #0
 23f803c:	2500      	movs	r5, #0
 23f803e:	e001      	b.n	23f8044 <__kernel_rem_pio2+0x2b4>
 23f8040:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 23f8044:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 23f8048:	f7ef fd26 	bl	23e7a98 <__aeabi_dmul>
 23f804c:	4602      	mov	r2, r0
 23f804e:	460b      	mov	r3, r1
 23f8050:	4620      	mov	r0, r4
 23f8052:	4629      	mov	r1, r5
 23f8054:	f7ef fb6a 	bl	23e772c <__adddf3>
 23f8058:	455e      	cmp	r6, fp
 23f805a:	4604      	mov	r4, r0
 23f805c:	460d      	mov	r5, r1
 23f805e:	d1ef      	bne.n	23f8040 <__kernel_rem_pio2+0x2b0>
 23f8060:	9b01      	ldr	r3, [sp, #4]
 23f8062:	f109 0901 	add.w	r9, r9, #1
 23f8066:	e8e3 4502 	strd	r4, r5, [r3], #8
 23f806a:	9301      	str	r3, [sp, #4]
 23f806c:	9b02      	ldr	r3, [sp, #8]
 23f806e:	4599      	cmp	r9, r3
 23f8070:	ddd4      	ble.n	23f801c <__kernel_rem_pio2+0x28c>
 23f8072:	9301      	str	r3, [sp, #4]
 23f8074:	e70e      	b.n	23f7e94 <__kernel_rem_pio2+0x104>
 23f8076:	2400      	movs	r4, #0
 23f8078:	2500      	movs	r5, #0
 23f807a:	e7f1      	b.n	23f8060 <__kernel_rem_pio2+0x2d0>
 23f807c:	023ffc18 	.word	0x023ffc18
 23f8080:	2aaaaaab 	.word	0x2aaaaaab
 23f8084:	3e700000 	.word	0x3e700000
 23f8088:	41700000 	.word	0x41700000
 23f808c:	40200000 	.word	0x40200000
 23f8090:	d16b      	bne.n	23f816a <__kernel_rem_pio2+0x3da>
 23f8092:	9b01      	ldr	r3, [sp, #4]
 23f8094:	aa0c      	add	r2, sp, #48	; 0x30
 23f8096:	3b01      	subs	r3, #1
 23f8098:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 23f809c:	15ed      	asrs	r5, r5, #23
 23f809e:	2d00      	cmp	r5, #0
 23f80a0:	f77f af75 	ble.w	23f7f8e <__kernel_rem_pio2+0x1fe>
 23f80a4:	9b01      	ldr	r3, [sp, #4]
 23f80a6:	f108 0801 	add.w	r8, r8, #1
 23f80aa:	2b00      	cmp	r3, #0
 23f80ac:	f340 81c3 	ble.w	23f8436 <__kernel_rem_pio2+0x6a6>
 23f80b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 23f80b2:	2c00      	cmp	r4, #0
 23f80b4:	d151      	bne.n	23f815a <__kernel_rem_pio2+0x3ca>
 23f80b6:	9b01      	ldr	r3, [sp, #4]
 23f80b8:	2b01      	cmp	r3, #1
 23f80ba:	d020      	beq.n	23f80fe <__kernel_rem_pio2+0x36e>
 23f80bc:	ab0c      	add	r3, sp, #48	; 0x30
 23f80be:	2201      	movs	r2, #1
 23f80c0:	f853 4f04 	ldr.w	r4, [r3, #4]!
 23f80c4:	2c00      	cmp	r4, #0
 23f80c6:	d04b      	beq.n	23f8160 <__kernel_rem_pio2+0x3d0>
 23f80c8:	1c53      	adds	r3, r2, #1
 23f80ca:	a90c      	add	r1, sp, #48	; 0x30
 23f80cc:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 23f80d0:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 23f80d4:	9901      	ldr	r1, [sp, #4]
 23f80d6:	4299      	cmp	r1, r3
 23f80d8:	dd10      	ble.n	23f80fc <__kernel_rem_pio2+0x36c>
 23f80da:	a80c      	add	r0, sp, #48	; 0x30
 23f80dc:	aa0c      	add	r2, sp, #48	; 0x30
 23f80de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 23f80e2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 23f80e6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 23f80ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 23f80ee:	e000      	b.n	23f80f2 <__kernel_rem_pio2+0x362>
 23f80f0:	681a      	ldr	r2, [r3, #0]
 23f80f2:	1a8a      	subs	r2, r1, r2
 23f80f4:	f843 2b04 	str.w	r2, [r3], #4
 23f80f8:	4283      	cmp	r3, r0
 23f80fa:	d1f9      	bne.n	23f80f0 <__kernel_rem_pio2+0x360>
 23f80fc:	2401      	movs	r4, #1
 23f80fe:	9b06      	ldr	r3, [sp, #24]
 23f8100:	2b00      	cmp	r3, #0
 23f8102:	dd0e      	ble.n	23f8122 <__kernel_rem_pio2+0x392>
 23f8104:	2b01      	cmp	r3, #1
 23f8106:	f000 816b 	beq.w	23f83e0 <__kernel_rem_pio2+0x650>
 23f810a:	2b02      	cmp	r3, #2
 23f810c:	d109      	bne.n	23f8122 <__kernel_rem_pio2+0x392>
 23f810e:	9b01      	ldr	r3, [sp, #4]
 23f8110:	a90c      	add	r1, sp, #48	; 0x30
 23f8112:	1e5a      	subs	r2, r3, #1
 23f8114:	ab0c      	add	r3, sp, #48	; 0x30
 23f8116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23f811a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 23f811e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23f8122:	2d02      	cmp	r5, #2
 23f8124:	f47f af33 	bne.w	23f7f8e <__kernel_rem_pio2+0x1fe>
 23f8128:	4632      	mov	r2, r6
 23f812a:	463b      	mov	r3, r7
 23f812c:	2000      	movs	r0, #0
 23f812e:	49b6      	ldr	r1, [pc, #728]	; (23f8408 <__kernel_rem_pio2+0x678>)
 23f8130:	f7ef fafa 	bl	23e7728 <__aeabi_dsub>
 23f8134:	4606      	mov	r6, r0
 23f8136:	460f      	mov	r7, r1
 23f8138:	2c00      	cmp	r4, #0
 23f813a:	f43f af28 	beq.w	23f7f8e <__kernel_rem_pio2+0x1fe>
 23f813e:	9806      	ldr	r0, [sp, #24]
 23f8140:	ed9f 0bad 	vldr	d0, [pc, #692]	; 23f83f8 <__kernel_rem_pio2+0x668>
 23f8144:	f000 fd04 	bl	23f8b50 <scalbn>
 23f8148:	4630      	mov	r0, r6
 23f814a:	4639      	mov	r1, r7
 23f814c:	ec53 2b10 	vmov	r2, r3, d0
 23f8150:	f7ef faea 	bl	23e7728 <__aeabi_dsub>
 23f8154:	4606      	mov	r6, r0
 23f8156:	460f      	mov	r7, r1
 23f8158:	e719      	b.n	23f7f8e <__kernel_rem_pio2+0x1fe>
 23f815a:	2301      	movs	r3, #1
 23f815c:	2200      	movs	r2, #0
 23f815e:	e7b4      	b.n	23f80ca <__kernel_rem_pio2+0x33a>
 23f8160:	3201      	adds	r2, #1
 23f8162:	9901      	ldr	r1, [sp, #4]
 23f8164:	428a      	cmp	r2, r1
 23f8166:	d1ab      	bne.n	23f80c0 <__kernel_rem_pio2+0x330>
 23f8168:	e7c9      	b.n	23f80fe <__kernel_rem_pio2+0x36e>
 23f816a:	2200      	movs	r2, #0
 23f816c:	4ba7      	ldr	r3, [pc, #668]	; (23f840c <__kernel_rem_pio2+0x67c>)
 23f816e:	f7ef ff19 	bl	23e7fa4 <__aeabi_dcmpge>
 23f8172:	2800      	cmp	r0, #0
 23f8174:	f040 8152 	bne.w	23f841c <__kernel_rem_pio2+0x68c>
 23f8178:	4605      	mov	r5, r0
 23f817a:	e708      	b.n	23f7f8e <__kernel_rem_pio2+0x1fe>
 23f817c:	9b01      	ldr	r3, [sp, #4]
 23f817e:	3301      	adds	r3, #1
 23f8180:	4699      	mov	r9, r3
 23f8182:	9302      	str	r3, [sp, #8]
 23f8184:	e737      	b.n	23f7ff6 <__kernel_rem_pio2+0x266>
 23f8186:	2400      	movs	r4, #0
 23f8188:	2500      	movs	r5, #0
 23f818a:	e66a      	b.n	23f7e62 <__kernel_rem_pio2+0xd2>
 23f818c:	9b06      	ldr	r3, [sp, #24]
 23f818e:	9503      	str	r5, [sp, #12]
 23f8190:	f1a3 0218 	sub.w	r2, r3, #24
 23f8194:	ab0c      	add	r3, sp, #48	; 0x30
 23f8196:	f8cd 801c 	str.w	r8, [sp, #28]
 23f819a:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 23f819e:	9206      	str	r2, [sp, #24]
 23f81a0:	b973      	cbnz	r3, 23f81c0 <__kernel_rem_pio2+0x430>
 23f81a2:	4b9b      	ldr	r3, [pc, #620]	; (23f8410 <__kernel_rem_pio2+0x680>)
 23f81a4:	9901      	ldr	r1, [sp, #4]
 23f81a6:	4419      	add	r1, r3
 23f81a8:	460b      	mov	r3, r1
 23f81aa:	a90c      	add	r1, sp, #48	; 0x30
 23f81ac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 23f81b0:	f853 1904 	ldr.w	r1, [r3], #-4
 23f81b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 23f81b8:	3a18      	subs	r2, #24
 23f81ba:	2900      	cmp	r1, #0
 23f81bc:	d0f8      	beq.n	23f81b0 <__kernel_rem_pio2+0x420>
 23f81be:	9206      	str	r2, [sp, #24]
 23f81c0:	9806      	ldr	r0, [sp, #24]
 23f81c2:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 23f83f8 <__kernel_rem_pio2+0x668>
 23f81c6:	f000 fcc3 	bl	23f8b50 <scalbn>
 23f81ca:	f1ba 0f00 	cmp.w	sl, #0
 23f81ce:	ec55 4b10 	vmov	r4, r5, d0
 23f81d2:	f2c0 81db 	blt.w	23f858c <__kernel_rem_pio2+0x7fc>
 23f81d6:	ab70      	add	r3, sp, #448	; 0x1c0
 23f81d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 23f81dc:	f04f 0800 	mov.w	r8, #0
 23f81e0:	f8df 9230 	ldr.w	r9, [pc, #560]	; 23f8414 <__kernel_rem_pio2+0x684>
 23f81e4:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 23f81e8:	9204      	str	r2, [sp, #16]
 23f81ea:	f10a 0301 	add.w	r3, sl, #1
 23f81ee:	aa0c      	add	r2, sp, #48	; 0x30
 23f81f0:	f10b 0708 	add.w	r7, fp, #8
 23f81f4:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 23f81f8:	9306      	str	r3, [sp, #24]
 23f81fa:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 23f81fe:	f7ef fbe1 	bl	23e79c4 <__aeabi_i2d>
 23f8202:	4622      	mov	r2, r4
 23f8204:	462b      	mov	r3, r5
 23f8206:	f7ef fc47 	bl	23e7a98 <__aeabi_dmul>
 23f820a:	464b      	mov	r3, r9
 23f820c:	4642      	mov	r2, r8
 23f820e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 23f8212:	4620      	mov	r0, r4
 23f8214:	4629      	mov	r1, r5
 23f8216:	f7ef fc3f 	bl	23e7a98 <__aeabi_dmul>
 23f821a:	ab0c      	add	r3, sp, #48	; 0x30
 23f821c:	4604      	mov	r4, r0
 23f821e:	460d      	mov	r5, r1
 23f8220:	429e      	cmp	r6, r3
 23f8222:	d1ea      	bne.n	23f81fa <__kernel_rem_pio2+0x46a>
 23f8224:	ab48      	add	r3, sp, #288	; 0x120
 23f8226:	f04f 0900 	mov.w	r9, #0
 23f822a:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 23f822e:	f8dd a014 	ldr.w	sl, [sp, #20]
 23f8232:	f1ba 0f00 	cmp.w	sl, #0
 23f8236:	db2c      	blt.n	23f8292 <__kernel_rem_pio2+0x502>
 23f8238:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 23f8418 <__kernel_rem_pio2+0x688>
 23f823c:	465f      	mov	r7, fp
 23f823e:	2600      	movs	r6, #0
 23f8240:	2400      	movs	r4, #0
 23f8242:	2500      	movs	r5, #0
 23f8244:	a36e      	add	r3, pc, #440	; (adr r3, 23f8400 <__kernel_rem_pio2+0x670>)
 23f8246:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f824a:	e003      	b.n	23f8254 <__kernel_rem_pio2+0x4c4>
 23f824c:	45b1      	cmp	r9, r6
 23f824e:	db10      	blt.n	23f8272 <__kernel_rem_pio2+0x4e2>
 23f8250:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 23f8254:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 23f8258:	3601      	adds	r6, #1
 23f825a:	f7ef fc1d 	bl	23e7a98 <__aeabi_dmul>
 23f825e:	4602      	mov	r2, r0
 23f8260:	460b      	mov	r3, r1
 23f8262:	4620      	mov	r0, r4
 23f8264:	4629      	mov	r1, r5
 23f8266:	f7ef fa61 	bl	23e772c <__adddf3>
 23f826a:	45b2      	cmp	sl, r6
 23f826c:	4604      	mov	r4, r0
 23f826e:	460d      	mov	r5, r1
 23f8270:	daec      	bge.n	23f824c <__kernel_rem_pio2+0x4bc>
 23f8272:	9b01      	ldr	r3, [sp, #4]
 23f8274:	f1ab 0b08 	sub.w	fp, fp, #8
 23f8278:	9a02      	ldr	r2, [sp, #8]
 23f827a:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 23f827e:	454a      	cmp	r2, r9
 23f8280:	e9c3 4500 	strd	r4, r5, [r3]
 23f8284:	f109 0301 	add.w	r3, r9, #1
 23f8288:	d006      	beq.n	23f8298 <__kernel_rem_pio2+0x508>
 23f828a:	f1ba 0f00 	cmp.w	sl, #0
 23f828e:	4699      	mov	r9, r3
 23f8290:	dad2      	bge.n	23f8238 <__kernel_rem_pio2+0x4a8>
 23f8292:	2400      	movs	r4, #0
 23f8294:	2500      	movs	r5, #0
 23f8296:	e7ec      	b.n	23f8272 <__kernel_rem_pio2+0x4e2>
 23f8298:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23f829a:	f8dd a008 	ldr.w	sl, [sp, #8]
 23f829e:	2b02      	cmp	r3, #2
 23f82a0:	dc1e      	bgt.n	23f82e0 <__kernel_rem_pio2+0x550>
 23f82a2:	2b00      	cmp	r3, #0
 23f82a4:	f300 80ff 	bgt.w	23f84a6 <__kernel_rem_pio2+0x716>
 23f82a8:	d113      	bne.n	23f82d2 <__kernel_rem_pio2+0x542>
 23f82aa:	9c04      	ldr	r4, [sp, #16]
 23f82ac:	2000      	movs	r0, #0
 23f82ae:	9d01      	ldr	r5, [sp, #4]
 23f82b0:	2100      	movs	r1, #0
 23f82b2:	3408      	adds	r4, #8
 23f82b4:	442c      	add	r4, r5
 23f82b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23f82ba:	f7ef fa37 	bl	23e772c <__adddf3>
 23f82be:	42a5      	cmp	r5, r4
 23f82c0:	d1f9      	bne.n	23f82b6 <__kernel_rem_pio2+0x526>
 23f82c2:	9b03      	ldr	r3, [sp, #12]
 23f82c4:	b113      	cbz	r3, 23f82cc <__kernel_rem_pio2+0x53c>
 23f82c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23f82ca:	4619      	mov	r1, r3
 23f82cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f82ce:	e9c3 0100 	strd	r0, r1, [r3]
 23f82d2:	9b07      	ldr	r3, [sp, #28]
 23f82d4:	f003 0007 	and.w	r0, r3, #7
 23f82d8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23f82dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f82e0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23f82e2:	2b03      	cmp	r3, #3
 23f82e4:	d1f5      	bne.n	23f82d2 <__kernel_rem_pio2+0x542>
 23f82e6:	f1ba 0f00 	cmp.w	sl, #0
 23f82ea:	f000 816b 	beq.w	23f85c4 <__kernel_rem_pio2+0x834>
 23f82ee:	9a01      	ldr	r2, [sp, #4]
 23f82f0:	9b04      	ldr	r3, [sp, #16]
 23f82f2:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
 23f82f6:	18d3      	adds	r3, r2, r3
 23f82f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 23f82fc:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
 23f8300:	4620      	mov	r0, r4
 23f8302:	4629      	mov	r1, r5
 23f8304:	4632      	mov	r2, r6
 23f8306:	463b      	mov	r3, r7
 23f8308:	f7ef fa10 	bl	23e772c <__adddf3>
 23f830c:	46a0      	mov	r8, r4
 23f830e:	46a9      	mov	r9, r5
 23f8310:	4604      	mov	r4, r0
 23f8312:	460d      	mov	r5, r1
 23f8314:	4630      	mov	r0, r6
 23f8316:	4622      	mov	r2, r4
 23f8318:	4639      	mov	r1, r7
 23f831a:	462b      	mov	r3, r5
 23f831c:	f7ef fa04 	bl	23e7728 <__aeabi_dsub>
 23f8320:	464b      	mov	r3, r9
 23f8322:	4642      	mov	r2, r8
 23f8324:	f7ef fa02 	bl	23e772c <__adddf3>
 23f8328:	9b01      	ldr	r3, [sp, #4]
 23f832a:	455b      	cmp	r3, fp
 23f832c:	e9cb 0102 	strd	r0, r1, [fp, #8]
 23f8330:	e9cb 4500 	strd	r4, r5, [fp]
 23f8334:	d1e2      	bne.n	23f82fc <__kernel_rem_pio2+0x56c>
 23f8336:	f1ba 0f01 	cmp.w	sl, #1
 23f833a:	f340 8143 	ble.w	23f85c4 <__kernel_rem_pio2+0x834>
 23f833e:	9b04      	ldr	r3, [sp, #16]
 23f8340:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 23f8344:	9901      	ldr	r1, [sp, #4]
 23f8346:	461a      	mov	r2, r3
 23f8348:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 23f834c:	4453      	add	r3, sl
 23f834e:	440a      	add	r2, r1
 23f8350:	00db      	lsls	r3, r3, #3
 23f8352:	f103 0a08 	add.w	sl, r3, #8
 23f8356:	9302      	str	r3, [sp, #8]
 23f8358:	e9d2 4500 	ldrd	r4, r5, [r2]
 23f835c:	448a      	add	sl, r1
 23f835e:	4620      	mov	r0, r4
 23f8360:	4629      	mov	r1, r5
 23f8362:	46a0      	mov	r8, r4
 23f8364:	46a9      	mov	r9, r5
 23f8366:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
 23f836a:	4632      	mov	r2, r6
 23f836c:	463b      	mov	r3, r7
 23f836e:	f7ef f9dd 	bl	23e772c <__adddf3>
 23f8372:	4604      	mov	r4, r0
 23f8374:	460d      	mov	r5, r1
 23f8376:	4630      	mov	r0, r6
 23f8378:	4622      	mov	r2, r4
 23f837a:	4639      	mov	r1, r7
 23f837c:	462b      	mov	r3, r5
 23f837e:	f7ef f9d3 	bl	23e7728 <__aeabi_dsub>
 23f8382:	4642      	mov	r2, r8
 23f8384:	464b      	mov	r3, r9
 23f8386:	f7ef f9d1 	bl	23e772c <__adddf3>
 23f838a:	45d3      	cmp	fp, sl
 23f838c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 23f8390:	e9ca 4500 	strd	r4, r5, [sl]
 23f8394:	d1e3      	bne.n	23f835e <__kernel_rem_pio2+0x5ce>
 23f8396:	9c02      	ldr	r4, [sp, #8]
 23f8398:	2000      	movs	r0, #0
 23f839a:	9b01      	ldr	r3, [sp, #4]
 23f839c:	2100      	movs	r1, #0
 23f839e:	3410      	adds	r4, #16
 23f83a0:	f103 0510 	add.w	r5, r3, #16
 23f83a4:	441c      	add	r4, r3
 23f83a6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23f83aa:	f7ef f9bf 	bl	23e772c <__adddf3>
 23f83ae:	42a5      	cmp	r5, r4
 23f83b0:	d1f9      	bne.n	23f83a6 <__kernel_rem_pio2+0x616>
 23f83b2:	9b03      	ldr	r3, [sp, #12]
 23f83b4:	2b00      	cmp	r3, #0
 23f83b6:	f040 80b4 	bne.w	23f8522 <__kernel_rem_pio2+0x792>
 23f83ba:	9d01      	ldr	r5, [sp, #4]
 23f83bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 23f83be:	e9d5 2300 	ldrd	r2, r3, [r5]
 23f83c2:	e9c4 0104 	strd	r0, r1, [r4, #16]
 23f83c6:	e9c4 2300 	strd	r2, r3, [r4]
 23f83ca:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 23f83ce:	e9c4 2302 	strd	r2, r3, [r4, #8]
 23f83d2:	9b07      	ldr	r3, [sp, #28]
 23f83d4:	f003 0007 	and.w	r0, r3, #7
 23f83d8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23f83dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f83e0:	9b01      	ldr	r3, [sp, #4]
 23f83e2:	a90c      	add	r1, sp, #48	; 0x30
 23f83e4:	1e5a      	subs	r2, r3, #1
 23f83e6:	ab0c      	add	r3, sp, #48	; 0x30
 23f83e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 23f83ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 23f83f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 23f83f4:	e695      	b.n	23f8122 <__kernel_rem_pio2+0x392>
 23f83f6:	bf00      	nop
 23f83f8:	00000000 	.word	0x00000000
 23f83fc:	3ff00000 	.word	0x3ff00000
 23f8400:	40000000 	.word	0x40000000
 23f8404:	3ff921fb 	.word	0x3ff921fb
 23f8408:	3ff00000 	.word	0x3ff00000
 23f840c:	3fe00000 	.word	0x3fe00000
 23f8410:	3ffffffe 	.word	0x3ffffffe
 23f8414:	3e700000 	.word	0x3e700000
 23f8418:	023ffbe0 	.word	0x023ffbe0
 23f841c:	9b01      	ldr	r3, [sp, #4]
 23f841e:	f108 0801 	add.w	r8, r8, #1
 23f8422:	2b00      	cmp	r3, #0
 23f8424:	f340 80a8 	ble.w	23f8578 <__kernel_rem_pio2+0x7e8>
 23f8428:	2502      	movs	r5, #2
 23f842a:	e641      	b.n	23f80b0 <__kernel_rem_pio2+0x320>
 23f842c:	2100      	movs	r1, #0
 23f842e:	f06f 0317 	mvn.w	r3, #23
 23f8432:	9107      	str	r1, [sp, #28]
 23f8434:	e4cc      	b.n	23f7dd0 <__kernel_rem_pio2+0x40>
 23f8436:	2400      	movs	r4, #0
 23f8438:	e661      	b.n	23f80fe <__kernel_rem_pio2+0x36e>
 23f843a:	ec47 6b10 	vmov	d0, r6, r7
 23f843e:	9e06      	ldr	r6, [sp, #24]
 23f8440:	9503      	str	r5, [sp, #12]
 23f8442:	4270      	negs	r0, r6
 23f8444:	f8cd 801c 	str.w	r8, [sp, #28]
 23f8448:	f000 fb82 	bl	23f8b50 <scalbn>
 23f844c:	2200      	movs	r2, #0
 23f844e:	4b5f      	ldr	r3, [pc, #380]	; (23f85cc <__kernel_rem_pio2+0x83c>)
 23f8450:	ee10 0a10 	vmov	r0, s0
 23f8454:	ec55 4b10 	vmov	r4, r5, d0
 23f8458:	4629      	mov	r1, r5
 23f845a:	f7ef fda3 	bl	23e7fa4 <__aeabi_dcmpge>
 23f845e:	2800      	cmp	r0, #0
 23f8460:	d055      	beq.n	23f850e <__kernel_rem_pio2+0x77e>
 23f8462:	3618      	adds	r6, #24
 23f8464:	2200      	movs	r2, #0
 23f8466:	4b5a      	ldr	r3, [pc, #360]	; (23f85d0 <__kernel_rem_pio2+0x840>)
 23f8468:	4620      	mov	r0, r4
 23f846a:	4629      	mov	r1, r5
 23f846c:	9606      	str	r6, [sp, #24]
 23f846e:	f7ef fb13 	bl	23e7a98 <__aeabi_dmul>
 23f8472:	9f01      	ldr	r7, [sp, #4]
 23f8474:	f7ef fdc0 	bl	23e7ff8 <__aeabi_d2iz>
 23f8478:	4606      	mov	r6, r0
 23f847a:	f7ef faa3 	bl	23e79c4 <__aeabi_i2d>
 23f847e:	2200      	movs	r2, #0
 23f8480:	4b52      	ldr	r3, [pc, #328]	; (23f85cc <__kernel_rem_pio2+0x83c>)
 23f8482:	f107 0a01 	add.w	sl, r7, #1
 23f8486:	f7ef fb07 	bl	23e7a98 <__aeabi_dmul>
 23f848a:	460b      	mov	r3, r1
 23f848c:	4602      	mov	r2, r0
 23f848e:	4629      	mov	r1, r5
 23f8490:	4620      	mov	r0, r4
 23f8492:	f7ef f949 	bl	23e7728 <__aeabi_dsub>
 23f8496:	f7ef fdaf 	bl	23e7ff8 <__aeabi_d2iz>
 23f849a:	ab0c      	add	r3, sp, #48	; 0x30
 23f849c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 23f84a0:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 23f84a4:	e68c      	b.n	23f81c0 <__kernel_rem_pio2+0x430>
 23f84a6:	9d01      	ldr	r5, [sp, #4]
 23f84a8:	2000      	movs	r0, #0
 23f84aa:	9a06      	ldr	r2, [sp, #24]
 23f84ac:	2100      	movs	r1, #0
 23f84ae:	eb05 04c2 	add.w	r4, r5, r2, lsl #3
 23f84b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 23f84b6:	f7ef f939 	bl	23e772c <__adddf3>
 23f84ba:	42a5      	cmp	r5, r4
 23f84bc:	d1f9      	bne.n	23f84b2 <__kernel_rem_pio2+0x722>
 23f84be:	9b03      	ldr	r3, [sp, #12]
 23f84c0:	2b00      	cmp	r3, #0
 23f84c2:	d149      	bne.n	23f8558 <__kernel_rem_pio2+0x7c8>
 23f84c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f84c6:	4602      	mov	r2, r0
 23f84c8:	e9c3 0100 	strd	r0, r1, [r3]
 23f84cc:	460b      	mov	r3, r1
 23f84ce:	9901      	ldr	r1, [sp, #4]
 23f84d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f84d4:	f7ef f928 	bl	23e7728 <__aeabi_dsub>
 23f84d8:	f1ba 0f00 	cmp.w	sl, #0
 23f84dc:	dd0d      	ble.n	23f84fa <__kernel_rem_pio2+0x76a>
 23f84de:	ad4a      	add	r5, sp, #296	; 0x128
 23f84e0:	2401      	movs	r4, #1
 23f84e2:	3401      	adds	r4, #1
 23f84e4:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 23f84e8:	f7ef f920 	bl	23e772c <__adddf3>
 23f84ec:	45a2      	cmp	sl, r4
 23f84ee:	daf8      	bge.n	23f84e2 <__kernel_rem_pio2+0x752>
 23f84f0:	9b03      	ldr	r3, [sp, #12]
 23f84f2:	b113      	cbz	r3, 23f84fa <__kernel_rem_pio2+0x76a>
 23f84f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23f84f8:	4619      	mov	r1, r3
 23f84fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f84fc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 23f8500:	9b07      	ldr	r3, [sp, #28]
 23f8502:	f003 0007 	and.w	r0, r3, #7
 23f8506:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23f850a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f850e:	4620      	mov	r0, r4
 23f8510:	4629      	mov	r1, r5
 23f8512:	f7ef fd71 	bl	23e7ff8 <__aeabi_d2iz>
 23f8516:	9b01      	ldr	r3, [sp, #4]
 23f8518:	aa0c      	add	r2, sp, #48	; 0x30
 23f851a:	469a      	mov	sl, r3
 23f851c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 23f8520:	e64e      	b.n	23f81c0 <__kernel_rem_pio2+0x430>
 23f8522:	9b01      	ldr	r3, [sp, #4]
 23f8524:	4602      	mov	r2, r0
 23f8526:	461e      	mov	r6, r3
 23f8528:	685c      	ldr	r4, [r3, #4]
 23f852a:	68dd      	ldr	r5, [r3, #12]
 23f852c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23f8530:	990b      	ldr	r1, [sp, #44]	; 0x2c
 23f8532:	e9c1 2304 	strd	r2, r3, [r1, #16]
 23f8536:	6832      	ldr	r2, [r6, #0]
 23f8538:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 23f853c:	e9c1 2300 	strd	r2, r3, [r1]
 23f8540:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23f8544:	68b2      	ldr	r2, [r6, #8]
 23f8546:	e9c1 2302 	strd	r2, r3, [r1, #8]
 23f854a:	9b07      	ldr	r3, [sp, #28]
 23f854c:	f003 0007 	and.w	r0, r3, #7
 23f8550:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 23f8554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f8558:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23f855a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23f855e:	6053      	str	r3, [r2, #4]
 23f8560:	460b      	mov	r3, r1
 23f8562:	9901      	ldr	r1, [sp, #4]
 23f8564:	6010      	str	r0, [r2, #0]
 23f8566:	4602      	mov	r2, r0
 23f8568:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f856c:	f7ef f8dc 	bl	23e7728 <__aeabi_dsub>
 23f8570:	f1ba 0f00 	cmp.w	sl, #0
 23f8574:	dcb3      	bgt.n	23f84de <__kernel_rem_pio2+0x74e>
 23f8576:	e7bd      	b.n	23f84f4 <__kernel_rem_pio2+0x764>
 23f8578:	4632      	mov	r2, r6
 23f857a:	463b      	mov	r3, r7
 23f857c:	2000      	movs	r0, #0
 23f857e:	4915      	ldr	r1, [pc, #84]	; (23f85d4 <__kernel_rem_pio2+0x844>)
 23f8580:	f7ef f8d2 	bl	23e7728 <__aeabi_dsub>
 23f8584:	2502      	movs	r5, #2
 23f8586:	4606      	mov	r6, r0
 23f8588:	460f      	mov	r7, r1
 23f858a:	e500      	b.n	23f7f8e <__kernel_rem_pio2+0x1fe>
 23f858c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23f858e:	2b02      	cmp	r3, #2
 23f8590:	dc0a      	bgt.n	23f85a8 <__kernel_rem_pio2+0x818>
 23f8592:	2b00      	cmp	r3, #0
 23f8594:	dc11      	bgt.n	23f85ba <__kernel_rem_pio2+0x82a>
 23f8596:	f47f ae9c 	bne.w	23f82d2 <__kernel_rem_pio2+0x542>
 23f859a:	2000      	movs	r0, #0
 23f859c:	2100      	movs	r1, #0
 23f859e:	e690      	b.n	23f82c2 <__kernel_rem_pio2+0x532>
 23f85a0:	9b08      	ldr	r3, [sp, #32]
 23f85a2:	00db      	lsls	r3, r3, #3
 23f85a4:	9302      	str	r3, [sp, #8]
 23f85a6:	e465      	b.n	23f7e74 <__kernel_rem_pio2+0xe4>
 23f85a8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 23f85aa:	2b03      	cmp	r3, #3
 23f85ac:	f47f ae91 	bne.w	23f82d2 <__kernel_rem_pio2+0x542>
 23f85b0:	ab48      	add	r3, sp, #288	; 0x120
 23f85b2:	2000      	movs	r0, #0
 23f85b4:	2100      	movs	r1, #0
 23f85b6:	9301      	str	r3, [sp, #4]
 23f85b8:	e6fb      	b.n	23f83b2 <__kernel_rem_pio2+0x622>
 23f85ba:	ab48      	add	r3, sp, #288	; 0x120
 23f85bc:	2000      	movs	r0, #0
 23f85be:	2100      	movs	r1, #0
 23f85c0:	9301      	str	r3, [sp, #4]
 23f85c2:	e77c      	b.n	23f84be <__kernel_rem_pio2+0x72e>
 23f85c4:	2000      	movs	r0, #0
 23f85c6:	2100      	movs	r1, #0
 23f85c8:	e6f3      	b.n	23f83b2 <__kernel_rem_pio2+0x622>
 23f85ca:	bf00      	nop
 23f85cc:	41700000 	.word	0x41700000
 23f85d0:	3e700000 	.word	0x3e700000
 23f85d4:	3ff00000 	.word	0x3ff00000

023f85d8 <__kernel_sin>:
 23f85d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f85dc:	ec5b ab10 	vmov	sl, fp, d0
 23f85e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23f85e4:	4680      	mov	r8, r0
 23f85e6:	ed2d 8b02 	vpush	{d8}
 23f85ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 23f85ee:	b083      	sub	sp, #12
 23f85f0:	ed8d 1b00 	vstr	d1, [sp]
 23f85f4:	da07      	bge.n	23f8606 <__kernel_sin+0x2e>
 23f85f6:	ee10 0a10 	vmov	r0, s0
 23f85fa:	4659      	mov	r1, fp
 23f85fc:	f7ef fcfc 	bl	23e7ff8 <__aeabi_d2iz>
 23f8600:	2800      	cmp	r0, #0
 23f8602:	f000 808e 	beq.w	23f8722 <__kernel_sin+0x14a>
 23f8606:	4652      	mov	r2, sl
 23f8608:	465b      	mov	r3, fp
 23f860a:	4650      	mov	r0, sl
 23f860c:	4659      	mov	r1, fp
 23f860e:	f7ef fa43 	bl	23e7a98 <__aeabi_dmul>
 23f8612:	4604      	mov	r4, r0
 23f8614:	460d      	mov	r5, r1
 23f8616:	4650      	mov	r0, sl
 23f8618:	4622      	mov	r2, r4
 23f861a:	4659      	mov	r1, fp
 23f861c:	462b      	mov	r3, r5
 23f861e:	f7ef fa3b 	bl	23e7a98 <__aeabi_dmul>
 23f8622:	4606      	mov	r6, r0
 23f8624:	460f      	mov	r7, r1
 23f8626:	4620      	mov	r0, r4
 23f8628:	4629      	mov	r1, r5
 23f862a:	a344      	add	r3, pc, #272	; (adr r3, 23f873c <__kernel_sin+0x164>)
 23f862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f8630:	f7ef fa32 	bl	23e7a98 <__aeabi_dmul>
 23f8634:	a343      	add	r3, pc, #268	; (adr r3, 23f8744 <__kernel_sin+0x16c>)
 23f8636:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f863a:	f7ef f875 	bl	23e7728 <__aeabi_dsub>
 23f863e:	4622      	mov	r2, r4
 23f8640:	462b      	mov	r3, r5
 23f8642:	f7ef fa29 	bl	23e7a98 <__aeabi_dmul>
 23f8646:	a341      	add	r3, pc, #260	; (adr r3, 23f874c <__kernel_sin+0x174>)
 23f8648:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f864c:	f7ef f86e 	bl	23e772c <__adddf3>
 23f8650:	4622      	mov	r2, r4
 23f8652:	462b      	mov	r3, r5
 23f8654:	f7ef fa20 	bl	23e7a98 <__aeabi_dmul>
 23f8658:	a33e      	add	r3, pc, #248	; (adr r3, 23f8754 <__kernel_sin+0x17c>)
 23f865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f865e:	f7ef f863 	bl	23e7728 <__aeabi_dsub>
 23f8662:	4622      	mov	r2, r4
 23f8664:	462b      	mov	r3, r5
 23f8666:	f7ef fa17 	bl	23e7a98 <__aeabi_dmul>
 23f866a:	a33c      	add	r3, pc, #240	; (adr r3, 23f875c <__kernel_sin+0x184>)
 23f866c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f8670:	f7ef f85c 	bl	23e772c <__adddf3>
 23f8674:	ec41 0b18 	vmov	d8, r0, r1
 23f8678:	f1b8 0f00 	cmp.w	r8, #0
 23f867c:	d037      	beq.n	23f86ee <__kernel_sin+0x116>
 23f867e:	2200      	movs	r2, #0
 23f8680:	4b2d      	ldr	r3, [pc, #180]	; (23f8738 <__kernel_sin+0x160>)
 23f8682:	e9dd 0100 	ldrd	r0, r1, [sp]
 23f8686:	f7ef fa07 	bl	23e7a98 <__aeabi_dmul>
 23f868a:	4680      	mov	r8, r0
 23f868c:	4689      	mov	r9, r1
 23f868e:	4630      	mov	r0, r6
 23f8690:	4639      	mov	r1, r7
 23f8692:	ec53 2b18 	vmov	r2, r3, d8
 23f8696:	f7ef f9ff 	bl	23e7a98 <__aeabi_dmul>
 23f869a:	4602      	mov	r2, r0
 23f869c:	460b      	mov	r3, r1
 23f869e:	4640      	mov	r0, r8
 23f86a0:	4649      	mov	r1, r9
 23f86a2:	f7ef f841 	bl	23e7728 <__aeabi_dsub>
 23f86a6:	4622      	mov	r2, r4
 23f86a8:	462b      	mov	r3, r5
 23f86aa:	f7ef f9f5 	bl	23e7a98 <__aeabi_dmul>
 23f86ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 23f86b2:	f7ef f839 	bl	23e7728 <__aeabi_dsub>
 23f86b6:	4604      	mov	r4, r0
 23f86b8:	460d      	mov	r5, r1
 23f86ba:	4630      	mov	r0, r6
 23f86bc:	4639      	mov	r1, r7
 23f86be:	a31c      	add	r3, pc, #112	; (adr r3, 23f8730 <__kernel_sin+0x158>)
 23f86c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f86c4:	f7ef f9e8 	bl	23e7a98 <__aeabi_dmul>
 23f86c8:	4602      	mov	r2, r0
 23f86ca:	460b      	mov	r3, r1
 23f86cc:	4620      	mov	r0, r4
 23f86ce:	4629      	mov	r1, r5
 23f86d0:	f7ef f82c 	bl	23e772c <__adddf3>
 23f86d4:	4602      	mov	r2, r0
 23f86d6:	460b      	mov	r3, r1
 23f86d8:	4650      	mov	r0, sl
 23f86da:	4659      	mov	r1, fp
 23f86dc:	f7ef f824 	bl	23e7728 <__aeabi_dsub>
 23f86e0:	ec41 0b10 	vmov	d0, r0, r1
 23f86e4:	b003      	add	sp, #12
 23f86e6:	ecbd 8b02 	vpop	{d8}
 23f86ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f86ee:	4602      	mov	r2, r0
 23f86f0:	460b      	mov	r3, r1
 23f86f2:	4620      	mov	r0, r4
 23f86f4:	4629      	mov	r1, r5
 23f86f6:	f7ef f9cf 	bl	23e7a98 <__aeabi_dmul>
 23f86fa:	a30d      	add	r3, pc, #52	; (adr r3, 23f8730 <__kernel_sin+0x158>)
 23f86fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f8700:	f7ef f812 	bl	23e7728 <__aeabi_dsub>
 23f8704:	4632      	mov	r2, r6
 23f8706:	463b      	mov	r3, r7
 23f8708:	f7ef f9c6 	bl	23e7a98 <__aeabi_dmul>
 23f870c:	4652      	mov	r2, sl
 23f870e:	465b      	mov	r3, fp
 23f8710:	f7ef f80c 	bl	23e772c <__adddf3>
 23f8714:	ec41 0b10 	vmov	d0, r0, r1
 23f8718:	b003      	add	sp, #12
 23f871a:	ecbd 8b02 	vpop	{d8}
 23f871e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f8722:	ec4b ab10 	vmov	d0, sl, fp
 23f8726:	b003      	add	sp, #12
 23f8728:	ecbd 8b02 	vpop	{d8}
 23f872c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f8730:	55555549 	.word	0x55555549
 23f8734:	3fc55555 	.word	0x3fc55555
 23f8738:	3fe00000 	.word	0x3fe00000
 23f873c:	5acfd57c 	.word	0x5acfd57c
 23f8740:	3de5d93a 	.word	0x3de5d93a
 23f8744:	8a2b9ceb 	.word	0x8a2b9ceb
 23f8748:	3e5ae5e6 	.word	0x3e5ae5e6
 23f874c:	57b1fe7d 	.word	0x57b1fe7d
 23f8750:	3ec71de3 	.word	0x3ec71de3
 23f8754:	19c161d5 	.word	0x19c161d5
 23f8758:	3f2a01a0 	.word	0x3f2a01a0
 23f875c:	1110f8a6 	.word	0x1110f8a6
 23f8760:	3f811111 	.word	0x3f811111
 23f8764:	00000000 	.word	0x00000000

023f8768 <__kernel_tan>:
 23f8768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f876c:	ec5b ab10 	vmov	sl, fp, d0
 23f8770:	4bc3      	ldr	r3, [pc, #780]	; (23f8a80 <__kernel_tan+0x318>)
 23f8772:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
 23f8776:	4607      	mov	r7, r0
 23f8778:	429e      	cmp	r6, r3
 23f877a:	ed2d 8b04 	vpush	{d8-d9}
 23f877e:	b085      	sub	sp, #20
 23f8780:	ed8d 1b00 	vstr	d1, [sp]
 23f8784:	f8cd b00c 	str.w	fp, [sp, #12]
 23f8788:	dc1d      	bgt.n	23f87c6 <__kernel_tan+0x5e>
 23f878a:	ee10 0a10 	vmov	r0, s0
 23f878e:	4659      	mov	r1, fp
 23f8790:	f7ef fc32 	bl	23e7ff8 <__aeabi_d2iz>
 23f8794:	2800      	cmp	r0, #0
 23f8796:	d142      	bne.n	23f881e <__kernel_tan+0xb6>
 23f8798:	1c7b      	adds	r3, r7, #1
 23f879a:	4652      	mov	r2, sl
 23f879c:	4313      	orrs	r3, r2
 23f879e:	4333      	orrs	r3, r6
 23f87a0:	f000 81bc 	beq.w	23f8b1c <__kernel_tan+0x3b4>
 23f87a4:	2f01      	cmp	r7, #1
 23f87a6:	f000 81c6 	beq.w	23f8b36 <__kernel_tan+0x3ce>
 23f87aa:	465b      	mov	r3, fp
 23f87ac:	2000      	movs	r0, #0
 23f87ae:	49b5      	ldr	r1, [pc, #724]	; (23f8a84 <__kernel_tan+0x31c>)
 23f87b0:	f7ef fa9c 	bl	23e7cec <__aeabi_ddiv>
 23f87b4:	4604      	mov	r4, r0
 23f87b6:	460d      	mov	r5, r1
 23f87b8:	ec45 4b10 	vmov	d0, r4, r5
 23f87bc:	b005      	add	sp, #20
 23f87be:	ecbd 8b04 	vpop	{d8-d9}
 23f87c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f87c6:	4bb0      	ldr	r3, [pc, #704]	; (23f8a88 <__kernel_tan+0x320>)
 23f87c8:	429e      	cmp	r6, r3
 23f87ca:	dd28      	ble.n	23f881e <__kernel_tan+0xb6>
 23f87cc:	9b03      	ldr	r3, [sp, #12]
 23f87ce:	2b00      	cmp	r3, #0
 23f87d0:	da0b      	bge.n	23f87ea <__kernel_tan+0x82>
 23f87d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 23f87d6:	ee10 aa10 	vmov	sl, s0
 23f87da:	e9dd 0100 	ldrd	r0, r1, [sp]
 23f87de:	469b      	mov	fp, r3
 23f87e0:	4602      	mov	r2, r0
 23f87e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23f87e6:	e9cd 2300 	strd	r2, r3, [sp]
 23f87ea:	4652      	mov	r2, sl
 23f87ec:	465b      	mov	r3, fp
 23f87ee:	a184      	add	r1, pc, #528	; (adr r1, 23f8a00 <__kernel_tan+0x298>)
 23f87f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f87f4:	f7ee ff98 	bl	23e7728 <__aeabi_dsub>
 23f87f8:	4604      	mov	r4, r0
 23f87fa:	460d      	mov	r5, r1
 23f87fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 23f8800:	a181      	add	r1, pc, #516	; (adr r1, 23f8a08 <__kernel_tan+0x2a0>)
 23f8802:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f8806:	f7ee ff8f 	bl	23e7728 <__aeabi_dsub>
 23f880a:	4622      	mov	r2, r4
 23f880c:	462b      	mov	r3, r5
 23f880e:	f7ee ff8d 	bl	23e772c <__adddf3>
 23f8812:	4682      	mov	sl, r0
 23f8814:	468b      	mov	fp, r1
 23f8816:	ed9f 7b7e 	vldr	d7, [pc, #504]	; 23f8a10 <__kernel_tan+0x2a8>
 23f881a:	ed8d 7b00 	vstr	d7, [sp]
 23f881e:	4652      	mov	r2, sl
 23f8820:	465b      	mov	r3, fp
 23f8822:	4650      	mov	r0, sl
 23f8824:	4659      	mov	r1, fp
 23f8826:	f7ef f937 	bl	23e7a98 <__aeabi_dmul>
 23f882a:	4680      	mov	r8, r0
 23f882c:	4689      	mov	r9, r1
 23f882e:	4602      	mov	r2, r0
 23f8830:	460b      	mov	r3, r1
 23f8832:	f7ef f931 	bl	23e7a98 <__aeabi_dmul>
 23f8836:	4604      	mov	r4, r0
 23f8838:	460d      	mov	r5, r1
 23f883a:	4642      	mov	r2, r8
 23f883c:	464b      	mov	r3, r9
 23f883e:	4650      	mov	r0, sl
 23f8840:	4659      	mov	r1, fp
 23f8842:	f7ef f929 	bl	23e7a98 <__aeabi_dmul>
 23f8846:	a374      	add	r3, pc, #464	; (adr r3, 23f8a18 <__kernel_tan+0x2b0>)
 23f8848:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f884c:	ec41 0b18 	vmov	d8, r0, r1
 23f8850:	4620      	mov	r0, r4
 23f8852:	4629      	mov	r1, r5
 23f8854:	f7ef f920 	bl	23e7a98 <__aeabi_dmul>
 23f8858:	a371      	add	r3, pc, #452	; (adr r3, 23f8a20 <__kernel_tan+0x2b8>)
 23f885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f885e:	f7ee ff65 	bl	23e772c <__adddf3>
 23f8862:	4622      	mov	r2, r4
 23f8864:	462b      	mov	r3, r5
 23f8866:	f7ef f917 	bl	23e7a98 <__aeabi_dmul>
 23f886a:	a36f      	add	r3, pc, #444	; (adr r3, 23f8a28 <__kernel_tan+0x2c0>)
 23f886c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f8870:	f7ee ff5c 	bl	23e772c <__adddf3>
 23f8874:	4622      	mov	r2, r4
 23f8876:	462b      	mov	r3, r5
 23f8878:	f7ef f90e 	bl	23e7a98 <__aeabi_dmul>
 23f887c:	a36c      	add	r3, pc, #432	; (adr r3, 23f8a30 <__kernel_tan+0x2c8>)
 23f887e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f8882:	f7ee ff53 	bl	23e772c <__adddf3>
 23f8886:	4622      	mov	r2, r4
 23f8888:	462b      	mov	r3, r5
 23f888a:	f7ef f905 	bl	23e7a98 <__aeabi_dmul>
 23f888e:	a36a      	add	r3, pc, #424	; (adr r3, 23f8a38 <__kernel_tan+0x2d0>)
 23f8890:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f8894:	f7ee ff4a 	bl	23e772c <__adddf3>
 23f8898:	4622      	mov	r2, r4
 23f889a:	462b      	mov	r3, r5
 23f889c:	f7ef f8fc 	bl	23e7a98 <__aeabi_dmul>
 23f88a0:	a367      	add	r3, pc, #412	; (adr r3, 23f8a40 <__kernel_tan+0x2d8>)
 23f88a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f88a6:	f7ee ff41 	bl	23e772c <__adddf3>
 23f88aa:	4642      	mov	r2, r8
 23f88ac:	464b      	mov	r3, r9
 23f88ae:	f7ef f8f3 	bl	23e7a98 <__aeabi_dmul>
 23f88b2:	a365      	add	r3, pc, #404	; (adr r3, 23f8a48 <__kernel_tan+0x2e0>)
 23f88b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f88b8:	ec41 0b19 	vmov	d9, r0, r1
 23f88bc:	4620      	mov	r0, r4
 23f88be:	4629      	mov	r1, r5
 23f88c0:	f7ef f8ea 	bl	23e7a98 <__aeabi_dmul>
 23f88c4:	a362      	add	r3, pc, #392	; (adr r3, 23f8a50 <__kernel_tan+0x2e8>)
 23f88c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f88ca:	f7ee ff2f 	bl	23e772c <__adddf3>
 23f88ce:	4622      	mov	r2, r4
 23f88d0:	462b      	mov	r3, r5
 23f88d2:	f7ef f8e1 	bl	23e7a98 <__aeabi_dmul>
 23f88d6:	a360      	add	r3, pc, #384	; (adr r3, 23f8a58 <__kernel_tan+0x2f0>)
 23f88d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f88dc:	f7ee ff26 	bl	23e772c <__adddf3>
 23f88e0:	4622      	mov	r2, r4
 23f88e2:	462b      	mov	r3, r5
 23f88e4:	f7ef f8d8 	bl	23e7a98 <__aeabi_dmul>
 23f88e8:	a35d      	add	r3, pc, #372	; (adr r3, 23f8a60 <__kernel_tan+0x2f8>)
 23f88ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f88ee:	f7ee ff1d 	bl	23e772c <__adddf3>
 23f88f2:	4622      	mov	r2, r4
 23f88f4:	462b      	mov	r3, r5
 23f88f6:	f7ef f8cf 	bl	23e7a98 <__aeabi_dmul>
 23f88fa:	a35b      	add	r3, pc, #364	; (adr r3, 23f8a68 <__kernel_tan+0x300>)
 23f88fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f8900:	f7ee ff14 	bl	23e772c <__adddf3>
 23f8904:	4622      	mov	r2, r4
 23f8906:	462b      	mov	r3, r5
 23f8908:	f7ef f8c6 	bl	23e7a98 <__aeabi_dmul>
 23f890c:	a358      	add	r3, pc, #352	; (adr r3, 23f8a70 <__kernel_tan+0x308>)
 23f890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f8912:	f7ee ff0b 	bl	23e772c <__adddf3>
 23f8916:	4602      	mov	r2, r0
 23f8918:	460b      	mov	r3, r1
 23f891a:	ec51 0b19 	vmov	r0, r1, d9
 23f891e:	f7ee ff05 	bl	23e772c <__adddf3>
 23f8922:	ec53 2b18 	vmov	r2, r3, d8
 23f8926:	f7ef f8b7 	bl	23e7a98 <__aeabi_dmul>
 23f892a:	e9dd 4500 	ldrd	r4, r5, [sp]
 23f892e:	4622      	mov	r2, r4
 23f8930:	462b      	mov	r3, r5
 23f8932:	f7ee fefb 	bl	23e772c <__adddf3>
 23f8936:	4642      	mov	r2, r8
 23f8938:	464b      	mov	r3, r9
 23f893a:	f7ef f8ad 	bl	23e7a98 <__aeabi_dmul>
 23f893e:	4622      	mov	r2, r4
 23f8940:	462b      	mov	r3, r5
 23f8942:	f7ee fef3 	bl	23e772c <__adddf3>
 23f8946:	4604      	mov	r4, r0
 23f8948:	460d      	mov	r5, r1
 23f894a:	a34b      	add	r3, pc, #300	; (adr r3, 23f8a78 <__kernel_tan+0x310>)
 23f894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f8950:	ec51 0b18 	vmov	r0, r1, d8
 23f8954:	f7ef f8a0 	bl	23e7a98 <__aeabi_dmul>
 23f8958:	4622      	mov	r2, r4
 23f895a:	462b      	mov	r3, r5
 23f895c:	f7ee fee6 	bl	23e772c <__adddf3>
 23f8960:	4680      	mov	r8, r0
 23f8962:	4689      	mov	r9, r1
 23f8964:	4650      	mov	r0, sl
 23f8966:	4659      	mov	r1, fp
 23f8968:	4642      	mov	r2, r8
 23f896a:	464b      	mov	r3, r9
 23f896c:	f7ee fede 	bl	23e772c <__adddf3>
 23f8970:	4b45      	ldr	r3, [pc, #276]	; (23f8a88 <__kernel_tan+0x320>)
 23f8972:	4604      	mov	r4, r0
 23f8974:	460d      	mov	r5, r1
 23f8976:	429e      	cmp	r6, r3
 23f8978:	f300 808a 	bgt.w	23f8a90 <__kernel_tan+0x328>
 23f897c:	2f01      	cmp	r7, #1
 23f897e:	d037      	beq.n	23f89f0 <__kernel_tan+0x288>
 23f8980:	2400      	movs	r4, #0
 23f8982:	4602      	mov	r2, r0
 23f8984:	460b      	mov	r3, r1
 23f8986:	2000      	movs	r0, #0
 23f8988:	493e      	ldr	r1, [pc, #248]	; (23f8a84 <__kernel_tan+0x31c>)
 23f898a:	4626      	mov	r6, r4
 23f898c:	f7ef f9ae 	bl	23e7cec <__aeabi_ddiv>
 23f8990:	4652      	mov	r2, sl
 23f8992:	465b      	mov	r3, fp
 23f8994:	4682      	mov	sl, r0
 23f8996:	468b      	mov	fp, r1
 23f8998:	4620      	mov	r0, r4
 23f899a:	4629      	mov	r1, r5
 23f899c:	f7ee fec4 	bl	23e7728 <__aeabi_dsub>
 23f89a0:	4602      	mov	r2, r0
 23f89a2:	460b      	mov	r3, r1
 23f89a4:	4640      	mov	r0, r8
 23f89a6:	4649      	mov	r1, r9
 23f89a8:	f7ee febe 	bl	23e7728 <__aeabi_dsub>
 23f89ac:	4622      	mov	r2, r4
 23f89ae:	465b      	mov	r3, fp
 23f89b0:	f7ef f872 	bl	23e7a98 <__aeabi_dmul>
 23f89b4:	4602      	mov	r2, r0
 23f89b6:	460b      	mov	r3, r1
 23f89b8:	4620      	mov	r0, r4
 23f89ba:	4629      	mov	r1, r5
 23f89bc:	4614      	mov	r4, r2
 23f89be:	461d      	mov	r5, r3
 23f89c0:	4632      	mov	r2, r6
 23f89c2:	465b      	mov	r3, fp
 23f89c4:	f7ef f868 	bl	23e7a98 <__aeabi_dmul>
 23f89c8:	2200      	movs	r2, #0
 23f89ca:	4b30      	ldr	r3, [pc, #192]	; (23f8a8c <__kernel_tan+0x324>)
 23f89cc:	f7ee feae 	bl	23e772c <__adddf3>
 23f89d0:	4602      	mov	r2, r0
 23f89d2:	460b      	mov	r3, r1
 23f89d4:	4620      	mov	r0, r4
 23f89d6:	4629      	mov	r1, r5
 23f89d8:	f7ee fea8 	bl	23e772c <__adddf3>
 23f89dc:	4652      	mov	r2, sl
 23f89de:	465b      	mov	r3, fp
 23f89e0:	f7ef f85a 	bl	23e7a98 <__aeabi_dmul>
 23f89e4:	4632      	mov	r2, r6
 23f89e6:	465b      	mov	r3, fp
 23f89e8:	f7ee fea0 	bl	23e772c <__adddf3>
 23f89ec:	4604      	mov	r4, r0
 23f89ee:	460d      	mov	r5, r1
 23f89f0:	ec45 4b10 	vmov	d0, r4, r5
 23f89f4:	b005      	add	sp, #20
 23f89f6:	ecbd 8b04 	vpop	{d8-d9}
 23f89fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f89fe:	bf00      	nop
 23f8a00:	54442d18 	.word	0x54442d18
 23f8a04:	3fe921fb 	.word	0x3fe921fb
 23f8a08:	33145c07 	.word	0x33145c07
 23f8a0c:	3c81a626 	.word	0x3c81a626
	...
 23f8a18:	74bf7ad4 	.word	0x74bf7ad4
 23f8a1c:	3efb2a70 	.word	0x3efb2a70
 23f8a20:	32f0a7e9 	.word	0x32f0a7e9
 23f8a24:	3f12b80f 	.word	0x3f12b80f
 23f8a28:	1a8d1068 	.word	0x1a8d1068
 23f8a2c:	3f3026f7 	.word	0x3f3026f7
 23f8a30:	fee08315 	.word	0xfee08315
 23f8a34:	3f57dbc8 	.word	0x3f57dbc8
 23f8a38:	e96e8493 	.word	0xe96e8493
 23f8a3c:	3f8226e3 	.word	0x3f8226e3
 23f8a40:	1bb341fe 	.word	0x1bb341fe
 23f8a44:	3faba1ba 	.word	0x3faba1ba
 23f8a48:	db605373 	.word	0xdb605373
 23f8a4c:	bef375cb 	.word	0xbef375cb
 23f8a50:	a03792a6 	.word	0xa03792a6
 23f8a54:	3f147e88 	.word	0x3f147e88
 23f8a58:	f2f26501 	.word	0xf2f26501
 23f8a5c:	3f4344d8 	.word	0x3f4344d8
 23f8a60:	c9560328 	.word	0xc9560328
 23f8a64:	3f6d6d22 	.word	0x3f6d6d22
 23f8a68:	8406d637 	.word	0x8406d637
 23f8a6c:	3f9664f4 	.word	0x3f9664f4
 23f8a70:	1110fe7a 	.word	0x1110fe7a
 23f8a74:	3fc11111 	.word	0x3fc11111
 23f8a78:	55555563 	.word	0x55555563
 23f8a7c:	3fd55555 	.word	0x3fd55555
 23f8a80:	3e2fffff 	.word	0x3e2fffff
 23f8a84:	bff00000 	.word	0xbff00000
 23f8a88:	3fe59427 	.word	0x3fe59427
 23f8a8c:	3ff00000 	.word	0x3ff00000
 23f8a90:	4638      	mov	r0, r7
 23f8a92:	f7ee ff97 	bl	23e79c4 <__aeabi_i2d>
 23f8a96:	4606      	mov	r6, r0
 23f8a98:	460f      	mov	r7, r1
 23f8a9a:	4622      	mov	r2, r4
 23f8a9c:	462b      	mov	r3, r5
 23f8a9e:	4620      	mov	r0, r4
 23f8aa0:	4629      	mov	r1, r5
 23f8aa2:	f7ee fff9 	bl	23e7a98 <__aeabi_dmul>
 23f8aa6:	4632      	mov	r2, r6
 23f8aa8:	463b      	mov	r3, r7
 23f8aaa:	ec41 0b18 	vmov	d8, r0, r1
 23f8aae:	4620      	mov	r0, r4
 23f8ab0:	4629      	mov	r1, r5
 23f8ab2:	f7ee fe3b 	bl	23e772c <__adddf3>
 23f8ab6:	4602      	mov	r2, r0
 23f8ab8:	460b      	mov	r3, r1
 23f8aba:	ec51 0b18 	vmov	r0, r1, d8
 23f8abe:	f7ef f915 	bl	23e7cec <__aeabi_ddiv>
 23f8ac2:	4642      	mov	r2, r8
 23f8ac4:	464b      	mov	r3, r9
 23f8ac6:	f7ee fe2f 	bl	23e7728 <__aeabi_dsub>
 23f8aca:	4602      	mov	r2, r0
 23f8acc:	460b      	mov	r3, r1
 23f8ace:	4650      	mov	r0, sl
 23f8ad0:	4659      	mov	r1, fp
 23f8ad2:	f7ee fe29 	bl	23e7728 <__aeabi_dsub>
 23f8ad6:	4602      	mov	r2, r0
 23f8ad8:	460b      	mov	r3, r1
 23f8ada:	f7ee fe27 	bl	23e772c <__adddf3>
 23f8ade:	4602      	mov	r2, r0
 23f8ae0:	460b      	mov	r3, r1
 23f8ae2:	4630      	mov	r0, r6
 23f8ae4:	4639      	mov	r1, r7
 23f8ae6:	f7ee fe1f 	bl	23e7728 <__aeabi_dsub>
 23f8aea:	9b03      	ldr	r3, [sp, #12]
 23f8aec:	4604      	mov	r4, r0
 23f8aee:	460d      	mov	r5, r1
 23f8af0:	179b      	asrs	r3, r3, #30
 23f8af2:	f003 0302 	and.w	r3, r3, #2
 23f8af6:	f1c3 0001 	rsb	r0, r3, #1
 23f8afa:	f7ee ff63 	bl	23e79c4 <__aeabi_i2d>
 23f8afe:	4602      	mov	r2, r0
 23f8b00:	460b      	mov	r3, r1
 23f8b02:	4620      	mov	r0, r4
 23f8b04:	4629      	mov	r1, r5
 23f8b06:	f7ee ffc7 	bl	23e7a98 <__aeabi_dmul>
 23f8b0a:	4604      	mov	r4, r0
 23f8b0c:	460d      	mov	r5, r1
 23f8b0e:	ec45 4b10 	vmov	d0, r4, r5
 23f8b12:	b005      	add	sp, #20
 23f8b14:	ecbd 8b04 	vpop	{d8-d9}
 23f8b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f8b1c:	ec4b ab10 	vmov	d0, sl, fp
 23f8b20:	f7fe f86e 	bl	23f6c00 <fabs>
 23f8b24:	2000      	movs	r0, #0
 23f8b26:	4905      	ldr	r1, [pc, #20]	; (23f8b3c <__kernel_tan+0x3d4>)
 23f8b28:	ec53 2b10 	vmov	r2, r3, d0
 23f8b2c:	f7ef f8de 	bl	23e7cec <__aeabi_ddiv>
 23f8b30:	4604      	mov	r4, r0
 23f8b32:	460d      	mov	r5, r1
 23f8b34:	e75c      	b.n	23f89f0 <__kernel_tan+0x288>
 23f8b36:	4654      	mov	r4, sl
 23f8b38:	465d      	mov	r5, fp
 23f8b3a:	e759      	b.n	23f89f0 <__kernel_tan+0x288>
 23f8b3c:	3ff00000 	.word	0x3ff00000

023f8b40 <nan>:
 23f8b40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 23f8b48 <nan+0x8>
 23f8b44:	4770      	bx	lr
 23f8b46:	bf00      	nop
 23f8b48:	00000000 	.word	0x00000000
 23f8b4c:	7ff80000 	.word	0x7ff80000

023f8b50 <scalbn>:
 23f8b50:	b538      	push	{r3, r4, r5, lr}
 23f8b52:	ec53 2b10 	vmov	r2, r3, d0
 23f8b56:	f3c3 510a 	ubfx	r1, r3, #20, #11
 23f8b5a:	469c      	mov	ip, r3
 23f8b5c:	4604      	mov	r4, r0
 23f8b5e:	bb89      	cbnz	r1, 23f8bc4 <scalbn+0x74>
 23f8b60:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 23f8b64:	ee10 1a10 	vmov	r1, s0
 23f8b68:	ea5c 0101 	orrs.w	r1, ip, r1
 23f8b6c:	d029      	beq.n	23f8bc2 <scalbn+0x72>
 23f8b6e:	4d3e      	ldr	r5, [pc, #248]	; (23f8c68 <scalbn+0x118>)
 23f8b70:	4619      	mov	r1, r3
 23f8b72:	2200      	movs	r2, #0
 23f8b74:	4b3d      	ldr	r3, [pc, #244]	; (23f8c6c <scalbn+0x11c>)
 23f8b76:	ee10 0a10 	vmov	r0, s0
 23f8b7a:	f7ee ff8d 	bl	23e7a98 <__aeabi_dmul>
 23f8b7e:	42ac      	cmp	r4, r5
 23f8b80:	4602      	mov	r2, r0
 23f8b82:	460b      	mov	r3, r1
 23f8b84:	db16      	blt.n	23f8bb4 <scalbn+0x64>
 23f8b86:	468c      	mov	ip, r1
 23f8b88:	f3c1 510a 	ubfx	r1, r1, #20, #11
 23f8b8c:	3936      	subs	r1, #54	; 0x36
 23f8b8e:	4421      	add	r1, r4
 23f8b90:	f240 70fe 	movw	r0, #2046	; 0x7fe
 23f8b94:	4281      	cmp	r1, r0
 23f8b96:	dc21      	bgt.n	23f8bdc <scalbn+0x8c>
 23f8b98:	2900      	cmp	r1, #0
 23f8b9a:	dc47      	bgt.n	23f8c2c <scalbn+0xdc>
 23f8b9c:	f111 0f35 	cmn.w	r1, #53	; 0x35
 23f8ba0:	da34      	bge.n	23f8c0c <scalbn+0xbc>
 23f8ba2:	f24c 3150 	movw	r1, #50000	; 0xc350
 23f8ba6:	428c      	cmp	r4, r1
 23f8ba8:	dc18      	bgt.n	23f8bdc <scalbn+0x8c>
 23f8baa:	2b00      	cmp	r3, #0
 23f8bac:	a126      	add	r1, pc, #152	; (adr r1, 23f8c48 <scalbn+0xf8>)
 23f8bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f8bb2:	db43      	blt.n	23f8c3c <scalbn+0xec>
 23f8bb4:	a324      	add	r3, pc, #144	; (adr r3, 23f8c48 <scalbn+0xf8>)
 23f8bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f8bba:	f7ee ff6d 	bl	23e7a98 <__aeabi_dmul>
 23f8bbe:	ec41 0b10 	vmov	d0, r0, r1
 23f8bc2:	bd38      	pop	{r3, r4, r5, pc}
 23f8bc4:	f240 7eff 	movw	lr, #2047	; 0x7ff
 23f8bc8:	4571      	cmp	r1, lr
 23f8bca:	d1e0      	bne.n	23f8b8e <scalbn+0x3e>
 23f8bcc:	ee10 0a10 	vmov	r0, s0
 23f8bd0:	4619      	mov	r1, r3
 23f8bd2:	f7ee fdab 	bl	23e772c <__adddf3>
 23f8bd6:	ec41 0b10 	vmov	d0, r0, r1
 23f8bda:	bd38      	pop	{r3, r4, r5, pc}
 23f8bdc:	2b00      	cmp	r3, #0
 23f8bde:	a11c      	add	r1, pc, #112	; (adr r1, 23f8c50 <scalbn+0x100>)
 23f8be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f8be4:	db07      	blt.n	23f8bf6 <scalbn+0xa6>
 23f8be6:	a31a      	add	r3, pc, #104	; (adr r3, 23f8c50 <scalbn+0x100>)
 23f8be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f8bec:	f7ee ff54 	bl	23e7a98 <__aeabi_dmul>
 23f8bf0:	ec41 0b10 	vmov	d0, r0, r1
 23f8bf4:	bd38      	pop	{r3, r4, r5, pc}
 23f8bf6:	a118      	add	r1, pc, #96	; (adr r1, 23f8c58 <scalbn+0x108>)
 23f8bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f8bfc:	a314      	add	r3, pc, #80	; (adr r3, 23f8c50 <scalbn+0x100>)
 23f8bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f8c02:	f7ee ff49 	bl	23e7a98 <__aeabi_dmul>
 23f8c06:	ec41 0b10 	vmov	d0, r0, r1
 23f8c0a:	e7f3      	b.n	23f8bf4 <scalbn+0xa4>
 23f8c0c:	4818      	ldr	r0, [pc, #96]	; (23f8c70 <scalbn+0x120>)
 23f8c0e:	3136      	adds	r1, #54	; 0x36
 23f8c10:	4614      	mov	r4, r2
 23f8c12:	4b18      	ldr	r3, [pc, #96]	; (23f8c74 <scalbn+0x124>)
 23f8c14:	ea0c 0000 	and.w	r0, ip, r0
 23f8c18:	2200      	movs	r2, #0
 23f8c1a:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
 23f8c1e:	4620      	mov	r0, r4
 23f8c20:	4629      	mov	r1, r5
 23f8c22:	f7ee ff39 	bl	23e7a98 <__aeabi_dmul>
 23f8c26:	ec41 0b10 	vmov	d0, r0, r1
 23f8c2a:	bd38      	pop	{r3, r4, r5, pc}
 23f8c2c:	4810      	ldr	r0, [pc, #64]	; (23f8c70 <scalbn+0x120>)
 23f8c2e:	ea0c 0000 	and.w	r0, ip, r0
 23f8c32:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
 23f8c36:	ec43 2b10 	vmov	d0, r2, r3
 23f8c3a:	bd38      	pop	{r3, r4, r5, pc}
 23f8c3c:	a108      	add	r1, pc, #32	; (adr r1, 23f8c60 <scalbn+0x110>)
 23f8c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f8c42:	e7b7      	b.n	23f8bb4 <scalbn+0x64>
 23f8c44:	f3af 8000 	nop.w
 23f8c48:	c2f8f359 	.word	0xc2f8f359
 23f8c4c:	01a56e1f 	.word	0x01a56e1f
 23f8c50:	8800759c 	.word	0x8800759c
 23f8c54:	7e37e43c 	.word	0x7e37e43c
 23f8c58:	8800759c 	.word	0x8800759c
 23f8c5c:	fe37e43c 	.word	0xfe37e43c
 23f8c60:	c2f8f359 	.word	0xc2f8f359
 23f8c64:	81a56e1f 	.word	0x81a56e1f
 23f8c68:	ffff3cb0 	.word	0xffff3cb0
 23f8c6c:	43500000 	.word	0x43500000
 23f8c70:	800fffff 	.word	0x800fffff
 23f8c74:	3c900000 	.word	0x3c900000

023f8c78 <finitef>:
 23f8c78:	b082      	sub	sp, #8
 23f8c7a:	ed8d 0a01 	vstr	s0, [sp, #4]
 23f8c7e:	9801      	ldr	r0, [sp, #4]
 23f8c80:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 23f8c84:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 23f8c88:	bfac      	ite	ge
 23f8c8a:	2000      	movge	r0, #0
 23f8c8c:	2001      	movlt	r0, #1
 23f8c8e:	b002      	add	sp, #8
 23f8c90:	4770      	bx	lr
 23f8c92:	bf00      	nop

023f8c94 <nanf>:
 23f8c94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 23f8c9c <nanf+0x8>
 23f8c98:	4770      	bx	lr
 23f8c9a:	bf00      	nop
 23f8c9c:	7fc00000 	.word	0x7fc00000

023f8ca0 <atexit>:
 23f8ca0:	2300      	movs	r3, #0
 23f8ca2:	4601      	mov	r1, r0
 23f8ca4:	461a      	mov	r2, r3
 23f8ca6:	4618      	mov	r0, r3
 23f8ca8:	f000 bf80 	b.w	23f9bac <__register_exitproc>

023f8cac <atof>:
 23f8cac:	2100      	movs	r1, #0
 23f8cae:	f000 bee5 	b.w	23f9a7c <strtod>
	...

023f8cb4 <calloc>:
 23f8cb4:	4b02      	ldr	r3, [pc, #8]	; (23f8cc0 <calloc+0xc>)
 23f8cb6:	460a      	mov	r2, r1
 23f8cb8:	4601      	mov	r1, r0
 23f8cba:	6818      	ldr	r0, [r3, #0]
 23f8cbc:	f000 b839 	b.w	23f8d32 <_calloc_r>
 23f8cc0:	1007a4bc 	.word	0x1007a4bc

023f8cc4 <isprint>:
 23f8cc4:	4b02      	ldr	r3, [pc, #8]	; (23f8cd0 <isprint+0xc>)
 23f8cc6:	4418      	add	r0, r3
 23f8cc8:	7840      	ldrb	r0, [r0, #1]
 23f8cca:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23f8cce:	4770      	bx	lr
 23f8cd0:	023ffcf0 	.word	0x023ffcf0

023f8cd4 <memcpy>:
 23f8cd4:	440a      	add	r2, r1
 23f8cd6:	1e43      	subs	r3, r0, #1
 23f8cd8:	4291      	cmp	r1, r2
 23f8cda:	d100      	bne.n	23f8cde <memcpy+0xa>
 23f8cdc:	4770      	bx	lr
 23f8cde:	b510      	push	{r4, lr}
 23f8ce0:	f811 4b01 	ldrb.w	r4, [r1], #1
 23f8ce4:	4291      	cmp	r1, r2
 23f8ce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 23f8cea:	d1f9      	bne.n	23f8ce0 <memcpy+0xc>
 23f8cec:	bd10      	pop	{r4, pc}

023f8cee <memmove>:
 23f8cee:	4288      	cmp	r0, r1
 23f8cf0:	b510      	push	{r4, lr}
 23f8cf2:	eb01 0402 	add.w	r4, r1, r2
 23f8cf6:	d902      	bls.n	23f8cfe <memmove+0x10>
 23f8cf8:	4284      	cmp	r4, r0
 23f8cfa:	4623      	mov	r3, r4
 23f8cfc:	d807      	bhi.n	23f8d0e <memmove+0x20>
 23f8cfe:	1e43      	subs	r3, r0, #1
 23f8d00:	42a1      	cmp	r1, r4
 23f8d02:	d008      	beq.n	23f8d16 <memmove+0x28>
 23f8d04:	f811 2b01 	ldrb.w	r2, [r1], #1
 23f8d08:	f803 2f01 	strb.w	r2, [r3, #1]!
 23f8d0c:	e7f8      	b.n	23f8d00 <memmove+0x12>
 23f8d0e:	4402      	add	r2, r0
 23f8d10:	4601      	mov	r1, r0
 23f8d12:	428a      	cmp	r2, r1
 23f8d14:	d100      	bne.n	23f8d18 <memmove+0x2a>
 23f8d16:	bd10      	pop	{r4, pc}
 23f8d18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23f8d1c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23f8d20:	e7f7      	b.n	23f8d12 <memmove+0x24>

023f8d22 <memset>:
 23f8d22:	4402      	add	r2, r0
 23f8d24:	4603      	mov	r3, r0
 23f8d26:	4293      	cmp	r3, r2
 23f8d28:	d100      	bne.n	23f8d2c <memset+0xa>
 23f8d2a:	4770      	bx	lr
 23f8d2c:	f803 1b01 	strb.w	r1, [r3], #1
 23f8d30:	e7f9      	b.n	23f8d26 <memset+0x4>

023f8d32 <_calloc_r>:
 23f8d32:	434a      	muls	r2, r1
 23f8d34:	b513      	push	{r0, r1, r4, lr}
 23f8d36:	4611      	mov	r1, r2
 23f8d38:	9201      	str	r2, [sp, #4]
 23f8d3a:	f7fb fd45 	bl	23f47c8 <_malloc_r>
 23f8d3e:	4604      	mov	r4, r0
 23f8d40:	b118      	cbz	r0, 23f8d4a <_calloc_r+0x18>
 23f8d42:	9a01      	ldr	r2, [sp, #4]
 23f8d44:	2100      	movs	r1, #0
 23f8d46:	f7ff ffec 	bl	23f8d22 <memset>
 23f8d4a:	4620      	mov	r0, r4
 23f8d4c:	b002      	add	sp, #8
 23f8d4e:	bd10      	pop	{r4, pc}

023f8d50 <srand>:
 23f8d50:	b538      	push	{r3, r4, r5, lr}
 23f8d52:	4b10      	ldr	r3, [pc, #64]	; (23f8d94 <srand+0x44>)
 23f8d54:	4604      	mov	r4, r0
 23f8d56:	681d      	ldr	r5, [r3, #0]
 23f8d58:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23f8d5a:	b9b3      	cbnz	r3, 23f8d8a <srand+0x3a>
 23f8d5c:	2018      	movs	r0, #24
 23f8d5e:	f7fb fced 	bl	23f473c <malloc>
 23f8d62:	4602      	mov	r2, r0
 23f8d64:	63a8      	str	r0, [r5, #56]	; 0x38
 23f8d66:	b920      	cbnz	r0, 23f8d72 <srand+0x22>
 23f8d68:	4b0b      	ldr	r3, [pc, #44]	; (23f8d98 <srand+0x48>)
 23f8d6a:	2142      	movs	r1, #66	; 0x42
 23f8d6c:	480b      	ldr	r0, [pc, #44]	; (23f8d9c <srand+0x4c>)
 23f8d6e:	f7fb fd47 	bl	23f4800 <__assert_func>
 23f8d72:	490b      	ldr	r1, [pc, #44]	; (23f8da0 <srand+0x50>)
 23f8d74:	4b0b      	ldr	r3, [pc, #44]	; (23f8da4 <srand+0x54>)
 23f8d76:	e9c0 1300 	strd	r1, r3, [r0]
 23f8d7a:	4b0b      	ldr	r3, [pc, #44]	; (23f8da8 <srand+0x58>)
 23f8d7c:	2100      	movs	r1, #0
 23f8d7e:	6083      	str	r3, [r0, #8]
 23f8d80:	230b      	movs	r3, #11
 23f8d82:	8183      	strh	r3, [r0, #12]
 23f8d84:	2001      	movs	r0, #1
 23f8d86:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23f8d8a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23f8d8c:	2200      	movs	r2, #0
 23f8d8e:	611c      	str	r4, [r3, #16]
 23f8d90:	615a      	str	r2, [r3, #20]
 23f8d92:	bd38      	pop	{r3, r4, r5, pc}
 23f8d94:	1007a4bc 	.word	0x1007a4bc
 23f8d98:	023ffc28 	.word	0x023ffc28
 23f8d9c:	023ffc3f 	.word	0x023ffc3f
 23f8da0:	abcd330e 	.word	0xabcd330e
 23f8da4:	e66d1234 	.word	0xe66d1234
 23f8da8:	0005deec 	.word	0x0005deec

023f8dac <strchr>:
 23f8dac:	b2c9      	uxtb	r1, r1
 23f8dae:	4603      	mov	r3, r0
 23f8db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 23f8db4:	b11a      	cbz	r2, 23f8dbe <strchr+0x12>
 23f8db6:	428a      	cmp	r2, r1
 23f8db8:	d1f9      	bne.n	23f8dae <strchr+0x2>
 23f8dba:	4618      	mov	r0, r3
 23f8dbc:	4770      	bx	lr
 23f8dbe:	2900      	cmp	r1, #0
 23f8dc0:	bf18      	it	ne
 23f8dc2:	2300      	movne	r3, #0
 23f8dc4:	e7f9      	b.n	23f8dba <strchr+0xe>

023f8dc6 <strchrnul>:
 23f8dc6:	b510      	push	{r4, lr}
 23f8dc8:	4604      	mov	r4, r0
 23f8dca:	f7ff ffef 	bl	23f8dac <strchr>
 23f8dce:	b918      	cbnz	r0, 23f8dd8 <strchrnul+0x12>
 23f8dd0:	4620      	mov	r0, r4
 23f8dd2:	f7ef fbb1 	bl	23e8538 <strlen>
 23f8dd6:	4420      	add	r0, r4
 23f8dd8:	bd10      	pop	{r4, pc}

023f8dda <strcpy>:
 23f8dda:	4603      	mov	r3, r0
 23f8ddc:	f811 2b01 	ldrb.w	r2, [r1], #1
 23f8de0:	f803 2b01 	strb.w	r2, [r3], #1
 23f8de4:	2a00      	cmp	r2, #0
 23f8de6:	d1f9      	bne.n	23f8ddc <strcpy+0x2>
 23f8de8:	4770      	bx	lr

023f8dea <strncmp>:
 23f8dea:	b510      	push	{r4, lr}
 23f8dec:	b17a      	cbz	r2, 23f8e0e <strncmp+0x24>
 23f8dee:	4603      	mov	r3, r0
 23f8df0:	3901      	subs	r1, #1
 23f8df2:	1884      	adds	r4, r0, r2
 23f8df4:	f813 0b01 	ldrb.w	r0, [r3], #1
 23f8df8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23f8dfc:	4290      	cmp	r0, r2
 23f8dfe:	d101      	bne.n	23f8e04 <strncmp+0x1a>
 23f8e00:	42a3      	cmp	r3, r4
 23f8e02:	d101      	bne.n	23f8e08 <strncmp+0x1e>
 23f8e04:	1a80      	subs	r0, r0, r2
 23f8e06:	bd10      	pop	{r4, pc}
 23f8e08:	2800      	cmp	r0, #0
 23f8e0a:	d1f3      	bne.n	23f8df4 <strncmp+0xa>
 23f8e0c:	e7fa      	b.n	23f8e04 <strncmp+0x1a>
 23f8e0e:	4610      	mov	r0, r2
 23f8e10:	e7f9      	b.n	23f8e06 <strncmp+0x1c>

023f8e12 <strrchr>:
 23f8e12:	b538      	push	{r3, r4, r5, lr}
 23f8e14:	4603      	mov	r3, r0
 23f8e16:	460c      	mov	r4, r1
 23f8e18:	b969      	cbnz	r1, 23f8e36 <strrchr+0x24>
 23f8e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23f8e1e:	f7ff bfc5 	b.w	23f8dac <strchr>
 23f8e22:	1c43      	adds	r3, r0, #1
 23f8e24:	4605      	mov	r5, r0
 23f8e26:	4621      	mov	r1, r4
 23f8e28:	4618      	mov	r0, r3
 23f8e2a:	f7ff ffbf 	bl	23f8dac <strchr>
 23f8e2e:	2800      	cmp	r0, #0
 23f8e30:	d1f7      	bne.n	23f8e22 <strrchr+0x10>
 23f8e32:	4628      	mov	r0, r5
 23f8e34:	bd38      	pop	{r3, r4, r5, pc}
 23f8e36:	2500      	movs	r5, #0
 23f8e38:	e7f5      	b.n	23f8e26 <strrchr+0x14>

023f8e3a <sulp>:
 23f8e3a:	b570      	push	{r4, r5, r6, lr}
 23f8e3c:	4604      	mov	r4, r0
 23f8e3e:	460d      	mov	r5, r1
 23f8e40:	4616      	mov	r6, r2
 23f8e42:	ec45 4b10 	vmov	d0, r4, r5
 23f8e46:	f001 fe11 	bl	23faa6c <__ulp>
 23f8e4a:	ec51 0b10 	vmov	r0, r1, d0
 23f8e4e:	b17e      	cbz	r6, 23f8e70 <sulp+0x36>
 23f8e50:	f3c5 530a 	ubfx	r3, r5, #20, #11
 23f8e54:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 23f8e58:	2b00      	cmp	r3, #0
 23f8e5a:	dd09      	ble.n	23f8e70 <sulp+0x36>
 23f8e5c:	051b      	lsls	r3, r3, #20
 23f8e5e:	2400      	movs	r4, #0
 23f8e60:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 23f8e64:	4622      	mov	r2, r4
 23f8e66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 23f8e6a:	462b      	mov	r3, r5
 23f8e6c:	f7ee fe14 	bl	23e7a98 <__aeabi_dmul>
 23f8e70:	bd70      	pop	{r4, r5, r6, pc}
 23f8e72:	0000      	movs	r0, r0
 23f8e74:	0000      	movs	r0, r0
	...

023f8e78 <_strtod_l>:
 23f8e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f8e7c:	461f      	mov	r7, r3
 23f8e7e:	2300      	movs	r3, #0
 23f8e80:	4604      	mov	r4, r0
 23f8e82:	4688      	mov	r8, r1
 23f8e84:	f04f 0a00 	mov.w	sl, #0
 23f8e88:	f04f 0b00 	mov.w	fp, #0
 23f8e8c:	ed2d 8b02 	vpush	{d8}
 23f8e90:	b09d      	sub	sp, #116	; 0x74
 23f8e92:	9318      	str	r3, [sp, #96]	; 0x60
 23f8e94:	4b9f      	ldr	r3, [pc, #636]	; (23f9114 <_strtod_l+0x29c>)
 23f8e96:	9213      	str	r2, [sp, #76]	; 0x4c
 23f8e98:	681b      	ldr	r3, [r3, #0]
 23f8e9a:	4618      	mov	r0, r3
 23f8e9c:	9305      	str	r3, [sp, #20]
 23f8e9e:	f7ef fb4b 	bl	23e8538 <strlen>
 23f8ea2:	4605      	mov	r5, r0
 23f8ea4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23f8ea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23f8eaa:	781a      	ldrb	r2, [r3, #0]
 23f8eac:	2a2b      	cmp	r2, #43	; 0x2b
 23f8eae:	d04e      	beq.n	23f8f4e <_strtod_l+0xd6>
 23f8eb0:	d83b      	bhi.n	23f8f2a <_strtod_l+0xb2>
 23f8eb2:	2a0d      	cmp	r2, #13
 23f8eb4:	d834      	bhi.n	23f8f20 <_strtod_l+0xa8>
 23f8eb6:	2a08      	cmp	r2, #8
 23f8eb8:	d834      	bhi.n	23f8f24 <_strtod_l+0xac>
 23f8eba:	2a00      	cmp	r2, #0
 23f8ebc:	d03e      	beq.n	23f8f3c <_strtod_l+0xc4>
 23f8ebe:	2300      	movs	r3, #0
 23f8ec0:	930a      	str	r3, [sp, #40]	; 0x28
 23f8ec2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 23f8ec4:	7833      	ldrb	r3, [r6, #0]
 23f8ec6:	2b30      	cmp	r3, #48	; 0x30
 23f8ec8:	f040 80b0 	bne.w	23f902c <_strtod_l+0x1b4>
 23f8ecc:	7873      	ldrb	r3, [r6, #1]
 23f8ece:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 23f8ed2:	2b58      	cmp	r3, #88	; 0x58
 23f8ed4:	d168      	bne.n	23f8fa8 <_strtod_l+0x130>
 23f8ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f8ed8:	a917      	add	r1, sp, #92	; 0x5c
 23f8eda:	9702      	str	r7, [sp, #8]
 23f8edc:	4620      	mov	r0, r4
 23f8ede:	9301      	str	r3, [sp, #4]
 23f8ee0:	ab18      	add	r3, sp, #96	; 0x60
 23f8ee2:	4a8d      	ldr	r2, [pc, #564]	; (23f9118 <_strtod_l+0x2a0>)
 23f8ee4:	9300      	str	r3, [sp, #0]
 23f8ee6:	ab19      	add	r3, sp, #100	; 0x64
 23f8ee8:	f000 ff2a 	bl	23f9d40 <__gethex>
 23f8eec:	f010 0707 	ands.w	r7, r0, #7
 23f8ef0:	4605      	mov	r5, r0
 23f8ef2:	d005      	beq.n	23f8f00 <_strtod_l+0x88>
 23f8ef4:	2f06      	cmp	r7, #6
 23f8ef6:	d12c      	bne.n	23f8f52 <_strtod_l+0xda>
 23f8ef8:	3601      	adds	r6, #1
 23f8efa:	2300      	movs	r3, #0
 23f8efc:	9617      	str	r6, [sp, #92]	; 0x5c
 23f8efe:	930a      	str	r3, [sp, #40]	; 0x28
 23f8f00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23f8f02:	2b00      	cmp	r3, #0
 23f8f04:	f040 858e 	bne.w	23f9a24 <_strtod_l+0xbac>
 23f8f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23f8f0a:	b1eb      	cbz	r3, 23f8f48 <_strtod_l+0xd0>
 23f8f0c:	4652      	mov	r2, sl
 23f8f0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 23f8f12:	ec43 2b10 	vmov	d0, r2, r3
 23f8f16:	b01d      	add	sp, #116	; 0x74
 23f8f18:	ecbd 8b02 	vpop	{d8}
 23f8f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f8f20:	2a20      	cmp	r2, #32
 23f8f22:	d1cc      	bne.n	23f8ebe <_strtod_l+0x46>
 23f8f24:	3301      	adds	r3, #1
 23f8f26:	9317      	str	r3, [sp, #92]	; 0x5c
 23f8f28:	e7be      	b.n	23f8ea8 <_strtod_l+0x30>
 23f8f2a:	2a2d      	cmp	r2, #45	; 0x2d
 23f8f2c:	d1c7      	bne.n	23f8ebe <_strtod_l+0x46>
 23f8f2e:	2201      	movs	r2, #1
 23f8f30:	920a      	str	r2, [sp, #40]	; 0x28
 23f8f32:	1c5a      	adds	r2, r3, #1
 23f8f34:	9217      	str	r2, [sp, #92]	; 0x5c
 23f8f36:	785b      	ldrb	r3, [r3, #1]
 23f8f38:	2b00      	cmp	r3, #0
 23f8f3a:	d1c2      	bne.n	23f8ec2 <_strtod_l+0x4a>
 23f8f3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23f8f3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23f8f42:	2b00      	cmp	r3, #0
 23f8f44:	f040 856c 	bne.w	23f9a20 <_strtod_l+0xba8>
 23f8f48:	4652      	mov	r2, sl
 23f8f4a:	465b      	mov	r3, fp
 23f8f4c:	e7e1      	b.n	23f8f12 <_strtod_l+0x9a>
 23f8f4e:	2200      	movs	r2, #0
 23f8f50:	e7ee      	b.n	23f8f30 <_strtod_l+0xb8>
 23f8f52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23f8f54:	b13a      	cbz	r2, 23f8f66 <_strtod_l+0xee>
 23f8f56:	2135      	movs	r1, #53	; 0x35
 23f8f58:	a81a      	add	r0, sp, #104	; 0x68
 23f8f5a:	f001 fe90 	bl	23fac7e <__copybits>
 23f8f5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 23f8f60:	4620      	mov	r0, r4
 23f8f62:	f001 fa4b 	bl	23fa3fc <_Bfree>
 23f8f66:	3f01      	subs	r7, #1
 23f8f68:	2f04      	cmp	r7, #4
 23f8f6a:	d806      	bhi.n	23f8f7a <_strtod_l+0x102>
 23f8f6c:	e8df f007 	tbb	[pc, r7]
 23f8f70:	1714030a 	.word	0x1714030a
 23f8f74:	0a          	.byte	0x0a
 23f8f75:	00          	.byte	0x00
 23f8f76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 23f8f7a:	0728      	lsls	r0, r5, #28
 23f8f7c:	d5c0      	bpl.n	23f8f00 <_strtod_l+0x88>
 23f8f7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 23f8f82:	e7bd      	b.n	23f8f00 <_strtod_l+0x88>
 23f8f84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 23f8f88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 23f8f8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 23f8f8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 23f8f92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 23f8f96:	e7f0      	b.n	23f8f7a <_strtod_l+0x102>
 23f8f98:	f8df b180 	ldr.w	fp, [pc, #384]	; 23f911c <_strtod_l+0x2a4>
 23f8f9c:	e7ed      	b.n	23f8f7a <_strtod_l+0x102>
 23f8f9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 23f8fa2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23f8fa6:	e7e8      	b.n	23f8f7a <_strtod_l+0x102>
 23f8fa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23f8faa:	1c5a      	adds	r2, r3, #1
 23f8fac:	9217      	str	r2, [sp, #92]	; 0x5c
 23f8fae:	785b      	ldrb	r3, [r3, #1]
 23f8fb0:	2b30      	cmp	r3, #48	; 0x30
 23f8fb2:	d0f9      	beq.n	23f8fa8 <_strtod_l+0x130>
 23f8fb4:	2b00      	cmp	r3, #0
 23f8fb6:	d0a3      	beq.n	23f8f00 <_strtod_l+0x88>
 23f8fb8:	2301      	movs	r3, #1
 23f8fba:	f04f 0900 	mov.w	r9, #0
 23f8fbe:	9304      	str	r3, [sp, #16]
 23f8fc0:	220a      	movs	r2, #10
 23f8fc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23f8fc4:	464f      	mov	r7, r9
 23f8fc6:	f8cd 901c 	str.w	r9, [sp, #28]
 23f8fca:	9308      	str	r3, [sp, #32]
 23f8fcc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 23f8fce:	7806      	ldrb	r6, [r0, #0]
 23f8fd0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 23f8fd4:	b2d9      	uxtb	r1, r3
 23f8fd6:	2909      	cmp	r1, #9
 23f8fd8:	d92a      	bls.n	23f9030 <_strtod_l+0x1b8>
 23f8fda:	462a      	mov	r2, r5
 23f8fdc:	9905      	ldr	r1, [sp, #20]
 23f8fde:	f7ff ff04 	bl	23f8dea <strncmp>
 23f8fe2:	b3a0      	cbz	r0, 23f904e <_strtod_l+0x1d6>
 23f8fe4:	2000      	movs	r0, #0
 23f8fe6:	4632      	mov	r2, r6
 23f8fe8:	463d      	mov	r5, r7
 23f8fea:	4603      	mov	r3, r0
 23f8fec:	9005      	str	r0, [sp, #20]
 23f8fee:	2a65      	cmp	r2, #101	; 0x65
 23f8ff0:	d001      	beq.n	23f8ff6 <_strtod_l+0x17e>
 23f8ff2:	2a45      	cmp	r2, #69	; 0x45
 23f8ff4:	d118      	bne.n	23f9028 <_strtod_l+0x1b0>
 23f8ff6:	b91d      	cbnz	r5, 23f9000 <_strtod_l+0x188>
 23f8ff8:	9a04      	ldr	r2, [sp, #16]
 23f8ffa:	4302      	orrs	r2, r0
 23f8ffc:	d09e      	beq.n	23f8f3c <_strtod_l+0xc4>
 23f8ffe:	2500      	movs	r5, #0
 23f9000:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 23f9004:	f108 0201 	add.w	r2, r8, #1
 23f9008:	9217      	str	r2, [sp, #92]	; 0x5c
 23f900a:	f898 2001 	ldrb.w	r2, [r8, #1]
 23f900e:	2a2b      	cmp	r2, #43	; 0x2b
 23f9010:	d075      	beq.n	23f90fe <_strtod_l+0x286>
 23f9012:	2a2d      	cmp	r2, #45	; 0x2d
 23f9014:	d07b      	beq.n	23f910e <_strtod_l+0x296>
 23f9016:	f04f 0c00 	mov.w	ip, #0
 23f901a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 23f901e:	2909      	cmp	r1, #9
 23f9020:	f240 8082 	bls.w	23f9128 <_strtod_l+0x2b0>
 23f9024:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 23f9028:	2600      	movs	r6, #0
 23f902a:	e09d      	b.n	23f9168 <_strtod_l+0x2f0>
 23f902c:	2300      	movs	r3, #0
 23f902e:	e7c4      	b.n	23f8fba <_strtod_l+0x142>
 23f9030:	2f08      	cmp	r7, #8
 23f9032:	f100 0001 	add.w	r0, r0, #1
 23f9036:	f107 0701 	add.w	r7, r7, #1
 23f903a:	bfd4      	ite	le
 23f903c:	9907      	ldrle	r1, [sp, #28]
 23f903e:	fb02 3909 	mlagt	r9, r2, r9, r3
 23f9042:	9017      	str	r0, [sp, #92]	; 0x5c
 23f9044:	bfdc      	itt	le
 23f9046:	fb02 3301 	mlale	r3, r2, r1, r3
 23f904a:	9307      	strle	r3, [sp, #28]
 23f904c:	e7be      	b.n	23f8fcc <_strtod_l+0x154>
 23f904e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23f9050:	195a      	adds	r2, r3, r5
 23f9052:	9217      	str	r2, [sp, #92]	; 0x5c
 23f9054:	5d5a      	ldrb	r2, [r3, r5]
 23f9056:	2f00      	cmp	r7, #0
 23f9058:	d036      	beq.n	23f90c8 <_strtod_l+0x250>
 23f905a:	463d      	mov	r5, r7
 23f905c:	9005      	str	r0, [sp, #20]
 23f905e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 23f9062:	2b09      	cmp	r3, #9
 23f9064:	d912      	bls.n	23f908c <_strtod_l+0x214>
 23f9066:	2301      	movs	r3, #1
 23f9068:	e7c1      	b.n	23f8fee <_strtod_l+0x176>
 23f906a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23f906c:	3001      	adds	r0, #1
 23f906e:	1c5a      	adds	r2, r3, #1
 23f9070:	9217      	str	r2, [sp, #92]	; 0x5c
 23f9072:	785a      	ldrb	r2, [r3, #1]
 23f9074:	2a30      	cmp	r2, #48	; 0x30
 23f9076:	d0f8      	beq.n	23f906a <_strtod_l+0x1f2>
 23f9078:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 23f907c:	2b08      	cmp	r3, #8
 23f907e:	f200 84d6 	bhi.w	23f9a2e <_strtod_l+0xbb6>
 23f9082:	9005      	str	r0, [sp, #20]
 23f9084:	2000      	movs	r0, #0
 23f9086:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23f9088:	4605      	mov	r5, r0
 23f908a:	9308      	str	r3, [sp, #32]
 23f908c:	3a30      	subs	r2, #48	; 0x30
 23f908e:	f100 0301 	add.w	r3, r0, #1
 23f9092:	d013      	beq.n	23f90bc <_strtod_l+0x244>
 23f9094:	9905      	ldr	r1, [sp, #20]
 23f9096:	eb00 0e05 	add.w	lr, r0, r5
 23f909a:	4419      	add	r1, r3
 23f909c:	462b      	mov	r3, r5
 23f909e:	9105      	str	r1, [sp, #20]
 23f90a0:	210a      	movs	r1, #10
 23f90a2:	4573      	cmp	r3, lr
 23f90a4:	d112      	bne.n	23f90cc <_strtod_l+0x254>
 23f90a6:	182b      	adds	r3, r5, r0
 23f90a8:	3501      	adds	r5, #1
 23f90aa:	2b08      	cmp	r3, #8
 23f90ac:	4405      	add	r5, r0
 23f90ae:	dc1c      	bgt.n	23f90ea <_strtod_l+0x272>
 23f90b0:	9907      	ldr	r1, [sp, #28]
 23f90b2:	230a      	movs	r3, #10
 23f90b4:	fb03 2301 	mla	r3, r3, r1, r2
 23f90b8:	9307      	str	r3, [sp, #28]
 23f90ba:	2300      	movs	r3, #0
 23f90bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23f90be:	4618      	mov	r0, r3
 23f90c0:	1c51      	adds	r1, r2, #1
 23f90c2:	9117      	str	r1, [sp, #92]	; 0x5c
 23f90c4:	7852      	ldrb	r2, [r2, #1]
 23f90c6:	e7ca      	b.n	23f905e <_strtod_l+0x1e6>
 23f90c8:	4638      	mov	r0, r7
 23f90ca:	e7d3      	b.n	23f9074 <_strtod_l+0x1fc>
 23f90cc:	2b08      	cmp	r3, #8
 23f90ce:	dc04      	bgt.n	23f90da <_strtod_l+0x262>
 23f90d0:	9e07      	ldr	r6, [sp, #28]
 23f90d2:	434e      	muls	r6, r1
 23f90d4:	9607      	str	r6, [sp, #28]
 23f90d6:	3301      	adds	r3, #1
 23f90d8:	e7e3      	b.n	23f90a2 <_strtod_l+0x22a>
 23f90da:	f103 0c01 	add.w	ip, r3, #1
 23f90de:	f1bc 0f10 	cmp.w	ip, #16
 23f90e2:	bfd8      	it	le
 23f90e4:	fb01 f909 	mulle.w	r9, r1, r9
 23f90e8:	e7f5      	b.n	23f90d6 <_strtod_l+0x25e>
 23f90ea:	2d10      	cmp	r5, #16
 23f90ec:	bfdc      	itt	le
 23f90ee:	230a      	movle	r3, #10
 23f90f0:	fb03 2909 	mlale	r9, r3, r9, r2
 23f90f4:	e7e1      	b.n	23f90ba <_strtod_l+0x242>
 23f90f6:	2300      	movs	r3, #0
 23f90f8:	9305      	str	r3, [sp, #20]
 23f90fa:	2301      	movs	r3, #1
 23f90fc:	e77c      	b.n	23f8ff8 <_strtod_l+0x180>
 23f90fe:	f04f 0c00 	mov.w	ip, #0
 23f9102:	f108 0202 	add.w	r2, r8, #2
 23f9106:	9217      	str	r2, [sp, #92]	; 0x5c
 23f9108:	f898 2002 	ldrb.w	r2, [r8, #2]
 23f910c:	e785      	b.n	23f901a <_strtod_l+0x1a2>
 23f910e:	f04f 0c01 	mov.w	ip, #1
 23f9112:	e7f6      	b.n	23f9102 <_strtod_l+0x28a>
 23f9114:	023ffe64 	.word	0x023ffe64
 23f9118:	023ffca0 	.word	0x023ffca0
 23f911c:	7ff00000 	.word	0x7ff00000
 23f9120:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23f9122:	1c51      	adds	r1, r2, #1
 23f9124:	9117      	str	r1, [sp, #92]	; 0x5c
 23f9126:	7852      	ldrb	r2, [r2, #1]
 23f9128:	2a30      	cmp	r2, #48	; 0x30
 23f912a:	d0f9      	beq.n	23f9120 <_strtod_l+0x2a8>
 23f912c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 23f9130:	2908      	cmp	r1, #8
 23f9132:	f63f af79 	bhi.w	23f9028 <_strtod_l+0x1b0>
 23f9136:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 23f913a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23f913c:	9206      	str	r2, [sp, #24]
 23f913e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 23f9140:	1c51      	adds	r1, r2, #1
 23f9142:	9117      	str	r1, [sp, #92]	; 0x5c
 23f9144:	7852      	ldrb	r2, [r2, #1]
 23f9146:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 23f914a:	2e09      	cmp	r6, #9
 23f914c:	d937      	bls.n	23f91be <_strtod_l+0x346>
 23f914e:	9e06      	ldr	r6, [sp, #24]
 23f9150:	1b89      	subs	r1, r1, r6
 23f9152:	f644 661f 	movw	r6, #19999	; 0x4e1f
 23f9156:	2908      	cmp	r1, #8
 23f9158:	dc02      	bgt.n	23f9160 <_strtod_l+0x2e8>
 23f915a:	4576      	cmp	r6, lr
 23f915c:	bfa8      	it	ge
 23f915e:	4676      	movge	r6, lr
 23f9160:	f1bc 0f00 	cmp.w	ip, #0
 23f9164:	d000      	beq.n	23f9168 <_strtod_l+0x2f0>
 23f9166:	4276      	negs	r6, r6
 23f9168:	2d00      	cmp	r5, #0
 23f916a:	d14d      	bne.n	23f9208 <_strtod_l+0x390>
 23f916c:	9904      	ldr	r1, [sp, #16]
 23f916e:	4301      	orrs	r1, r0
 23f9170:	f47f aec6 	bne.w	23f8f00 <_strtod_l+0x88>
 23f9174:	2b00      	cmp	r3, #0
 23f9176:	f47f aee1 	bne.w	23f8f3c <_strtod_l+0xc4>
 23f917a:	2a69      	cmp	r2, #105	; 0x69
 23f917c:	d027      	beq.n	23f91ce <_strtod_l+0x356>
 23f917e:	dc24      	bgt.n	23f91ca <_strtod_l+0x352>
 23f9180:	2a49      	cmp	r2, #73	; 0x49
 23f9182:	d024      	beq.n	23f91ce <_strtod_l+0x356>
 23f9184:	2a4e      	cmp	r2, #78	; 0x4e
 23f9186:	f47f aed9 	bne.w	23f8f3c <_strtod_l+0xc4>
 23f918a:	499f      	ldr	r1, [pc, #636]	; (23f9408 <_strtod_l+0x590>)
 23f918c:	a817      	add	r0, sp, #92	; 0x5c
 23f918e:	f001 f82f 	bl	23fa1f0 <__match>
 23f9192:	2800      	cmp	r0, #0
 23f9194:	f43f aed2 	beq.w	23f8f3c <_strtod_l+0xc4>
 23f9198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23f919a:	781b      	ldrb	r3, [r3, #0]
 23f919c:	2b28      	cmp	r3, #40	; 0x28
 23f919e:	d12d      	bne.n	23f91fc <_strtod_l+0x384>
 23f91a0:	aa1a      	add	r2, sp, #104	; 0x68
 23f91a2:	499a      	ldr	r1, [pc, #616]	; (23f940c <_strtod_l+0x594>)
 23f91a4:	a817      	add	r0, sp, #92	; 0x5c
 23f91a6:	f001 f837 	bl	23fa218 <__hexnan>
 23f91aa:	2805      	cmp	r0, #5
 23f91ac:	d126      	bne.n	23f91fc <_strtod_l+0x384>
 23f91ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 23f91b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 23f91b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 23f91b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 23f91bc:	e6a0      	b.n	23f8f00 <_strtod_l+0x88>
 23f91be:	210a      	movs	r1, #10
 23f91c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 23f91c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 23f91c8:	e7b9      	b.n	23f913e <_strtod_l+0x2c6>
 23f91ca:	2a6e      	cmp	r2, #110	; 0x6e
 23f91cc:	e7db      	b.n	23f9186 <_strtod_l+0x30e>
 23f91ce:	4990      	ldr	r1, [pc, #576]	; (23f9410 <_strtod_l+0x598>)
 23f91d0:	a817      	add	r0, sp, #92	; 0x5c
 23f91d2:	f001 f80d 	bl	23fa1f0 <__match>
 23f91d6:	2800      	cmp	r0, #0
 23f91d8:	f43f aeb0 	beq.w	23f8f3c <_strtod_l+0xc4>
 23f91dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23f91de:	a817      	add	r0, sp, #92	; 0x5c
 23f91e0:	498c      	ldr	r1, [pc, #560]	; (23f9414 <_strtod_l+0x59c>)
 23f91e2:	3b01      	subs	r3, #1
 23f91e4:	9317      	str	r3, [sp, #92]	; 0x5c
 23f91e6:	f001 f803 	bl	23fa1f0 <__match>
 23f91ea:	b910      	cbnz	r0, 23f91f2 <_strtod_l+0x37a>
 23f91ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23f91ee:	3301      	adds	r3, #1
 23f91f0:	9317      	str	r3, [sp, #92]	; 0x5c
 23f91f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 23f9424 <_strtod_l+0x5ac>
 23f91f6:	f04f 0a00 	mov.w	sl, #0
 23f91fa:	e681      	b.n	23f8f00 <_strtod_l+0x88>
 23f91fc:	4886      	ldr	r0, [pc, #536]	; (23f9418 <_strtod_l+0x5a0>)
 23f91fe:	f7ff fc9f 	bl	23f8b40 <nan>
 23f9202:	ec5b ab10 	vmov	sl, fp, d0
 23f9206:	e67b      	b.n	23f8f00 <_strtod_l+0x88>
 23f9208:	9b05      	ldr	r3, [sp, #20]
 23f920a:	2f00      	cmp	r7, #0
 23f920c:	bf08      	it	eq
 23f920e:	462f      	moveq	r7, r5
 23f9210:	2d10      	cmp	r5, #16
 23f9212:	9807      	ldr	r0, [sp, #28]
 23f9214:	eba6 0303 	sub.w	r3, r6, r3
 23f9218:	46a8      	mov	r8, r5
 23f921a:	bfa8      	it	ge
 23f921c:	f04f 0810 	movge.w	r8, #16
 23f9220:	9306      	str	r3, [sp, #24]
 23f9222:	f7ee fbbf 	bl	23e79a4 <__aeabi_ui2d>
 23f9226:	2d09      	cmp	r5, #9
 23f9228:	4682      	mov	sl, r0
 23f922a:	468b      	mov	fp, r1
 23f922c:	dd13      	ble.n	23f9256 <_strtod_l+0x3de>
 23f922e:	4b7b      	ldr	r3, [pc, #492]	; (23f941c <_strtod_l+0x5a4>)
 23f9230:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 23f9234:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 23f9238:	f7ee fc2e 	bl	23e7a98 <__aeabi_dmul>
 23f923c:	4682      	mov	sl, r0
 23f923e:	468b      	mov	fp, r1
 23f9240:	4648      	mov	r0, r9
 23f9242:	f7ee fbaf 	bl	23e79a4 <__aeabi_ui2d>
 23f9246:	4602      	mov	r2, r0
 23f9248:	460b      	mov	r3, r1
 23f924a:	4650      	mov	r0, sl
 23f924c:	4659      	mov	r1, fp
 23f924e:	f7ee fa6d 	bl	23e772c <__adddf3>
 23f9252:	4682      	mov	sl, r0
 23f9254:	468b      	mov	fp, r1
 23f9256:	2d0f      	cmp	r5, #15
 23f9258:	dc38      	bgt.n	23f92cc <_strtod_l+0x454>
 23f925a:	9b06      	ldr	r3, [sp, #24]
 23f925c:	2b00      	cmp	r3, #0
 23f925e:	f43f ae4f 	beq.w	23f8f00 <_strtod_l+0x88>
 23f9262:	dd24      	ble.n	23f92ae <_strtod_l+0x436>
 23f9264:	2b16      	cmp	r3, #22
 23f9266:	dc0b      	bgt.n	23f9280 <_strtod_l+0x408>
 23f9268:	496c      	ldr	r1, [pc, #432]	; (23f941c <_strtod_l+0x5a4>)
 23f926a:	4652      	mov	r2, sl
 23f926c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 23f9270:	465b      	mov	r3, fp
 23f9272:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f9276:	f7ee fc0f 	bl	23e7a98 <__aeabi_dmul>
 23f927a:	4682      	mov	sl, r0
 23f927c:	468b      	mov	fp, r1
 23f927e:	e63f      	b.n	23f8f00 <_strtod_l+0x88>
 23f9280:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 23f9284:	9a06      	ldr	r2, [sp, #24]
 23f9286:	4293      	cmp	r3, r2
 23f9288:	db20      	blt.n	23f92cc <_strtod_l+0x454>
 23f928a:	f1c5 050f 	rsb	r5, r5, #15
 23f928e:	4c63      	ldr	r4, [pc, #396]	; (23f941c <_strtod_l+0x5a4>)
 23f9290:	4652      	mov	r2, sl
 23f9292:	465b      	mov	r3, fp
 23f9294:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 23f9298:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f929c:	f7ee fbfc 	bl	23e7a98 <__aeabi_dmul>
 23f92a0:	9b06      	ldr	r3, [sp, #24]
 23f92a2:	1b5d      	subs	r5, r3, r5
 23f92a4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 23f92a8:	e9d4 2300 	ldrd	r2, r3, [r4]
 23f92ac:	e7e3      	b.n	23f9276 <_strtod_l+0x3fe>
 23f92ae:	9b06      	ldr	r3, [sp, #24]
 23f92b0:	3316      	adds	r3, #22
 23f92b2:	db0b      	blt.n	23f92cc <_strtod_l+0x454>
 23f92b4:	9b05      	ldr	r3, [sp, #20]
 23f92b6:	4650      	mov	r0, sl
 23f92b8:	4659      	mov	r1, fp
 23f92ba:	1b9e      	subs	r6, r3, r6
 23f92bc:	4b57      	ldr	r3, [pc, #348]	; (23f941c <_strtod_l+0x5a4>)
 23f92be:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 23f92c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 23f92c6:	f7ee fd11 	bl	23e7cec <__aeabi_ddiv>
 23f92ca:	e7d6      	b.n	23f927a <_strtod_l+0x402>
 23f92cc:	eba5 0808 	sub.w	r8, r5, r8
 23f92d0:	9b06      	ldr	r3, [sp, #24]
 23f92d2:	4498      	add	r8, r3
 23f92d4:	f1b8 0f00 	cmp.w	r8, #0
 23f92d8:	dd74      	ble.n	23f93c4 <_strtod_l+0x54c>
 23f92da:	f018 030f 	ands.w	r3, r8, #15
 23f92de:	d00a      	beq.n	23f92f6 <_strtod_l+0x47e>
 23f92e0:	494e      	ldr	r1, [pc, #312]	; (23f941c <_strtod_l+0x5a4>)
 23f92e2:	4652      	mov	r2, sl
 23f92e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 23f92e8:	465b      	mov	r3, fp
 23f92ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f92ee:	f7ee fbd3 	bl	23e7a98 <__aeabi_dmul>
 23f92f2:	4682      	mov	sl, r0
 23f92f4:	468b      	mov	fp, r1
 23f92f6:	f038 080f 	bics.w	r8, r8, #15
 23f92fa:	d04f      	beq.n	23f939c <_strtod_l+0x524>
 23f92fc:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 23f9300:	dd22      	ble.n	23f9348 <_strtod_l+0x4d0>
 23f9302:	2500      	movs	r5, #0
 23f9304:	462e      	mov	r6, r5
 23f9306:	9507      	str	r5, [sp, #28]
 23f9308:	9505      	str	r5, [sp, #20]
 23f930a:	2322      	movs	r3, #34	; 0x22
 23f930c:	f8df b114 	ldr.w	fp, [pc, #276]	; 23f9424 <_strtod_l+0x5ac>
 23f9310:	f04f 0a00 	mov.w	sl, #0
 23f9314:	6023      	str	r3, [r4, #0]
 23f9316:	9b07      	ldr	r3, [sp, #28]
 23f9318:	2b00      	cmp	r3, #0
 23f931a:	f43f adf1 	beq.w	23f8f00 <_strtod_l+0x88>
 23f931e:	9918      	ldr	r1, [sp, #96]	; 0x60
 23f9320:	4620      	mov	r0, r4
 23f9322:	f001 f86b 	bl	23fa3fc <_Bfree>
 23f9326:	9905      	ldr	r1, [sp, #20]
 23f9328:	4620      	mov	r0, r4
 23f932a:	f001 f867 	bl	23fa3fc <_Bfree>
 23f932e:	4631      	mov	r1, r6
 23f9330:	4620      	mov	r0, r4
 23f9332:	f001 f863 	bl	23fa3fc <_Bfree>
 23f9336:	9907      	ldr	r1, [sp, #28]
 23f9338:	4620      	mov	r0, r4
 23f933a:	f001 f85f 	bl	23fa3fc <_Bfree>
 23f933e:	4629      	mov	r1, r5
 23f9340:	4620      	mov	r0, r4
 23f9342:	f001 f85b 	bl	23fa3fc <_Bfree>
 23f9346:	e5db      	b.n	23f8f00 <_strtod_l+0x88>
 23f9348:	4b35      	ldr	r3, [pc, #212]	; (23f9420 <_strtod_l+0x5a8>)
 23f934a:	ea4f 1828 	mov.w	r8, r8, asr #4
 23f934e:	4650      	mov	r0, sl
 23f9350:	4659      	mov	r1, fp
 23f9352:	9304      	str	r3, [sp, #16]
 23f9354:	2300      	movs	r3, #0
 23f9356:	4699      	mov	r9, r3
 23f9358:	f1b8 0f01 	cmp.w	r8, #1
 23f935c:	dc21      	bgt.n	23f93a2 <_strtod_l+0x52a>
 23f935e:	b10b      	cbz	r3, 23f9364 <_strtod_l+0x4ec>
 23f9360:	4682      	mov	sl, r0
 23f9362:	468b      	mov	fp, r1
 23f9364:	4b2e      	ldr	r3, [pc, #184]	; (23f9420 <_strtod_l+0x5a8>)
 23f9366:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 23f936a:	4652      	mov	r2, sl
 23f936c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 23f9370:	465b      	mov	r3, fp
 23f9372:	e9d9 0100 	ldrd	r0, r1, [r9]
 23f9376:	f7ee fb8f 	bl	23e7a98 <__aeabi_dmul>
 23f937a:	4b2a      	ldr	r3, [pc, #168]	; (23f9424 <_strtod_l+0x5ac>)
 23f937c:	460a      	mov	r2, r1
 23f937e:	4682      	mov	sl, r0
 23f9380:	400b      	ands	r3, r1
 23f9382:	4929      	ldr	r1, [pc, #164]	; (23f9428 <_strtod_l+0x5b0>)
 23f9384:	428b      	cmp	r3, r1
 23f9386:	d8bc      	bhi.n	23f9302 <_strtod_l+0x48a>
 23f9388:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 23f938c:	428b      	cmp	r3, r1
 23f938e:	bf86      	itte	hi
 23f9390:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 23f942c <_strtod_l+0x5b4>
 23f9394:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 23f9398:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 23f939c:	2300      	movs	r3, #0
 23f939e:	9304      	str	r3, [sp, #16]
 23f93a0:	e083      	b.n	23f94aa <_strtod_l+0x632>
 23f93a2:	f018 0f01 	tst.w	r8, #1
 23f93a6:	d005      	beq.n	23f93b4 <_strtod_l+0x53c>
 23f93a8:	9b04      	ldr	r3, [sp, #16]
 23f93aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f93ae:	f7ee fb73 	bl	23e7a98 <__aeabi_dmul>
 23f93b2:	2301      	movs	r3, #1
 23f93b4:	9a04      	ldr	r2, [sp, #16]
 23f93b6:	f109 0901 	add.w	r9, r9, #1
 23f93ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 23f93be:	3208      	adds	r2, #8
 23f93c0:	9204      	str	r2, [sp, #16]
 23f93c2:	e7c9      	b.n	23f9358 <_strtod_l+0x4e0>
 23f93c4:	d0ea      	beq.n	23f939c <_strtod_l+0x524>
 23f93c6:	f1c8 0800 	rsb	r8, r8, #0
 23f93ca:	f018 020f 	ands.w	r2, r8, #15
 23f93ce:	d00a      	beq.n	23f93e6 <_strtod_l+0x56e>
 23f93d0:	4b12      	ldr	r3, [pc, #72]	; (23f941c <_strtod_l+0x5a4>)
 23f93d2:	4650      	mov	r0, sl
 23f93d4:	4659      	mov	r1, fp
 23f93d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 23f93da:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f93de:	f7ee fc85 	bl	23e7cec <__aeabi_ddiv>
 23f93e2:	4682      	mov	sl, r0
 23f93e4:	468b      	mov	fp, r1
 23f93e6:	ea5f 1828 	movs.w	r8, r8, asr #4
 23f93ea:	d0d7      	beq.n	23f939c <_strtod_l+0x524>
 23f93ec:	f1b8 0f1f 	cmp.w	r8, #31
 23f93f0:	dd1e      	ble.n	23f9430 <_strtod_l+0x5b8>
 23f93f2:	2500      	movs	r5, #0
 23f93f4:	462e      	mov	r6, r5
 23f93f6:	9507      	str	r5, [sp, #28]
 23f93f8:	9505      	str	r5, [sp, #20]
 23f93fa:	2322      	movs	r3, #34	; 0x22
 23f93fc:	f04f 0a00 	mov.w	sl, #0
 23f9400:	f04f 0b00 	mov.w	fp, #0
 23f9404:	6023      	str	r3, [r4, #0]
 23f9406:	e786      	b.n	23f9316 <_strtod_l+0x49e>
 23f9408:	023ff965 	.word	0x023ff965
 23f940c:	023ffcb4 	.word	0x023ffcb4
 23f9410:	023ff969 	.word	0x023ff969
 23f9414:	023ffc98 	.word	0x023ffc98
 23f9418:	023fb03b 	.word	0x023fb03b
 23f941c:	023ffef8 	.word	0x023ffef8
 23f9420:	023ffed0 	.word	0x023ffed0
 23f9424:	7ff00000 	.word	0x7ff00000
 23f9428:	7ca00000 	.word	0x7ca00000
 23f942c:	7fefffff 	.word	0x7fefffff
 23f9430:	f018 0310 	ands.w	r3, r8, #16
 23f9434:	4650      	mov	r0, sl
 23f9436:	4659      	mov	r1, fp
 23f9438:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 23f97e4 <_strtod_l+0x96c>
 23f943c:	bf18      	it	ne
 23f943e:	236a      	movne	r3, #106	; 0x6a
 23f9440:	9304      	str	r3, [sp, #16]
 23f9442:	2300      	movs	r3, #0
 23f9444:	f018 0f01 	tst.w	r8, #1
 23f9448:	d004      	beq.n	23f9454 <_strtod_l+0x5dc>
 23f944a:	e9d9 2300 	ldrd	r2, r3, [r9]
 23f944e:	f7ee fb23 	bl	23e7a98 <__aeabi_dmul>
 23f9452:	2301      	movs	r3, #1
 23f9454:	ea5f 0868 	movs.w	r8, r8, asr #1
 23f9458:	f109 0908 	add.w	r9, r9, #8
 23f945c:	d1f2      	bne.n	23f9444 <_strtod_l+0x5cc>
 23f945e:	b10b      	cbz	r3, 23f9464 <_strtod_l+0x5ec>
 23f9460:	4682      	mov	sl, r0
 23f9462:	468b      	mov	fp, r1
 23f9464:	9b04      	ldr	r3, [sp, #16]
 23f9466:	b1c3      	cbz	r3, 23f949a <_strtod_l+0x622>
 23f9468:	f3cb 520a 	ubfx	r2, fp, #20, #11
 23f946c:	4659      	mov	r1, fp
 23f946e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 23f9472:	2b00      	cmp	r3, #0
 23f9474:	dd11      	ble.n	23f949a <_strtod_l+0x622>
 23f9476:	2b1f      	cmp	r3, #31
 23f9478:	f340 8121 	ble.w	23f96be <_strtod_l+0x846>
 23f947c:	2b34      	cmp	r3, #52	; 0x34
 23f947e:	f04f 0a00 	mov.w	sl, #0
 23f9482:	bfdb      	ittet	le
 23f9484:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 23f9488:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 23f948c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 23f9490:	fa03 f202 	lslle.w	r2, r3, r2
 23f9494:	bfd8      	it	le
 23f9496:	ea02 0b01 	andle.w	fp, r2, r1
 23f949a:	2200      	movs	r2, #0
 23f949c:	2300      	movs	r3, #0
 23f949e:	4650      	mov	r0, sl
 23f94a0:	4659      	mov	r1, fp
 23f94a2:	f7ee fd61 	bl	23e7f68 <__aeabi_dcmpeq>
 23f94a6:	2800      	cmp	r0, #0
 23f94a8:	d1a3      	bne.n	23f93f2 <_strtod_l+0x57a>
 23f94aa:	9b07      	ldr	r3, [sp, #28]
 23f94ac:	463a      	mov	r2, r7
 23f94ae:	9908      	ldr	r1, [sp, #32]
 23f94b0:	4620      	mov	r0, r4
 23f94b2:	9300      	str	r3, [sp, #0]
 23f94b4:	462b      	mov	r3, r5
 23f94b6:	f001 f80b 	bl	23fa4d0 <__s2b>
 23f94ba:	9007      	str	r0, [sp, #28]
 23f94bc:	2800      	cmp	r0, #0
 23f94be:	f43f af20 	beq.w	23f9302 <_strtod_l+0x48a>
 23f94c2:	9b05      	ldr	r3, [sp, #20]
 23f94c4:	2500      	movs	r5, #0
 23f94c6:	1b9e      	subs	r6, r3, r6
 23f94c8:	9b06      	ldr	r3, [sp, #24]
 23f94ca:	2b00      	cmp	r3, #0
 23f94cc:	bfb4      	ite	lt
 23f94ce:	4633      	movlt	r3, r6
 23f94d0:	2300      	movge	r3, #0
 23f94d2:	462e      	mov	r6, r5
 23f94d4:	930c      	str	r3, [sp, #48]	; 0x30
 23f94d6:	9b06      	ldr	r3, [sp, #24]
 23f94d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 23f94dc:	9312      	str	r3, [sp, #72]	; 0x48
 23f94de:	9b07      	ldr	r3, [sp, #28]
 23f94e0:	4620      	mov	r0, r4
 23f94e2:	6859      	ldr	r1, [r3, #4]
 23f94e4:	f000 ff4a 	bl	23fa37c <_Balloc>
 23f94e8:	9005      	str	r0, [sp, #20]
 23f94ea:	2800      	cmp	r0, #0
 23f94ec:	f43f af0d 	beq.w	23f930a <_strtod_l+0x492>
 23f94f0:	9b07      	ldr	r3, [sp, #28]
 23f94f2:	300c      	adds	r0, #12
 23f94f4:	691a      	ldr	r2, [r3, #16]
 23f94f6:	f103 010c 	add.w	r1, r3, #12
 23f94fa:	3202      	adds	r2, #2
 23f94fc:	0092      	lsls	r2, r2, #2
 23f94fe:	f7ff fbe9 	bl	23f8cd4 <memcpy>
 23f9502:	aa1a      	add	r2, sp, #104	; 0x68
 23f9504:	a919      	add	r1, sp, #100	; 0x64
 23f9506:	4620      	mov	r0, r4
 23f9508:	ec4b ab10 	vmov	d0, sl, fp
 23f950c:	f001 fb28 	bl	23fab60 <__d2b>
 23f9510:	9018      	str	r0, [sp, #96]	; 0x60
 23f9512:	ec4b ab18 	vmov	d8, sl, fp
 23f9516:	2800      	cmp	r0, #0
 23f9518:	f43f aef7 	beq.w	23f930a <_strtod_l+0x492>
 23f951c:	2101      	movs	r1, #1
 23f951e:	4620      	mov	r0, r4
 23f9520:	f001 f870 	bl	23fa604 <__i2b>
 23f9524:	4606      	mov	r6, r0
 23f9526:	2800      	cmp	r0, #0
 23f9528:	f43f aeef 	beq.w	23f930a <_strtod_l+0x492>
 23f952c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 23f952e:	9904      	ldr	r1, [sp, #16]
 23f9530:	2b00      	cmp	r3, #0
 23f9532:	eba3 0801 	sub.w	r8, r3, r1
 23f9536:	bfa9      	itett	ge
 23f9538:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 23f953a:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 23f953c:	eb03 0902 	addge.w	r9, r3, r2
 23f9540:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 23f9542:	bfb8      	it	lt
 23f9544:	1ad7      	sublt	r7, r2, r3
 23f9546:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 23f9548:	4ba1      	ldr	r3, [pc, #644]	; (23f97d0 <_strtod_l+0x958>)
 23f954a:	4490      	add	r8, r2
 23f954c:	bfb8      	it	lt
 23f954e:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 23f9552:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 23f9556:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23f955a:	4598      	cmp	r8, r3
 23f955c:	f280 80c3 	bge.w	23f96e6 <_strtod_l+0x86e>
 23f9560:	eba3 0308 	sub.w	r3, r3, r8
 23f9564:	2101      	movs	r1, #1
 23f9566:	2b1f      	cmp	r3, #31
 23f9568:	eba2 0203 	sub.w	r2, r2, r3
 23f956c:	f300 80ae 	bgt.w	23f96cc <_strtod_l+0x854>
 23f9570:	fa01 f303 	lsl.w	r3, r1, r3
 23f9574:	930d      	str	r3, [sp, #52]	; 0x34
 23f9576:	2300      	movs	r3, #0
 23f9578:	9308      	str	r3, [sp, #32]
 23f957a:	eb09 0802 	add.w	r8, r9, r2
 23f957e:	9b04      	ldr	r3, [sp, #16]
 23f9580:	4417      	add	r7, r2
 23f9582:	45c1      	cmp	r9, r8
 23f9584:	441f      	add	r7, r3
 23f9586:	464b      	mov	r3, r9
 23f9588:	bfa8      	it	ge
 23f958a:	4643      	movge	r3, r8
 23f958c:	42bb      	cmp	r3, r7
 23f958e:	bfa8      	it	ge
 23f9590:	463b      	movge	r3, r7
 23f9592:	2b00      	cmp	r3, #0
 23f9594:	bfc2      	ittt	gt
 23f9596:	eba8 0803 	subgt.w	r8, r8, r3
 23f959a:	1aff      	subgt	r7, r7, r3
 23f959c:	eba9 0903 	subgt.w	r9, r9, r3
 23f95a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23f95a2:	2b00      	cmp	r3, #0
 23f95a4:	dd17      	ble.n	23f95d6 <_strtod_l+0x75e>
 23f95a6:	4631      	mov	r1, r6
 23f95a8:	461a      	mov	r2, r3
 23f95aa:	4620      	mov	r0, r4
 23f95ac:	f001 f8e8 	bl	23fa780 <__pow5mult>
 23f95b0:	4606      	mov	r6, r0
 23f95b2:	2800      	cmp	r0, #0
 23f95b4:	f43f aea9 	beq.w	23f930a <_strtod_l+0x492>
 23f95b8:	4601      	mov	r1, r0
 23f95ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 23f95bc:	4620      	mov	r0, r4
 23f95be:	f001 f837 	bl	23fa630 <__multiply>
 23f95c2:	900b      	str	r0, [sp, #44]	; 0x2c
 23f95c4:	2800      	cmp	r0, #0
 23f95c6:	f43f aea0 	beq.w	23f930a <_strtod_l+0x492>
 23f95ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 23f95cc:	4620      	mov	r0, r4
 23f95ce:	f000 ff15 	bl	23fa3fc <_Bfree>
 23f95d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f95d4:	9318      	str	r3, [sp, #96]	; 0x60
 23f95d6:	f1b8 0f00 	cmp.w	r8, #0
 23f95da:	f300 8089 	bgt.w	23f96f0 <_strtod_l+0x878>
 23f95de:	9b06      	ldr	r3, [sp, #24]
 23f95e0:	2b00      	cmp	r3, #0
 23f95e2:	dd08      	ble.n	23f95f6 <_strtod_l+0x77e>
 23f95e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 23f95e6:	4620      	mov	r0, r4
 23f95e8:	9905      	ldr	r1, [sp, #20]
 23f95ea:	f001 f8c9 	bl	23fa780 <__pow5mult>
 23f95ee:	9005      	str	r0, [sp, #20]
 23f95f0:	2800      	cmp	r0, #0
 23f95f2:	f43f ae8a 	beq.w	23f930a <_strtod_l+0x492>
 23f95f6:	2f00      	cmp	r7, #0
 23f95f8:	dd08      	ble.n	23f960c <_strtod_l+0x794>
 23f95fa:	463a      	mov	r2, r7
 23f95fc:	9905      	ldr	r1, [sp, #20]
 23f95fe:	4620      	mov	r0, r4
 23f9600:	f001 f918 	bl	23fa834 <__lshift>
 23f9604:	9005      	str	r0, [sp, #20]
 23f9606:	2800      	cmp	r0, #0
 23f9608:	f43f ae7f 	beq.w	23f930a <_strtod_l+0x492>
 23f960c:	f1b9 0f00 	cmp.w	r9, #0
 23f9610:	dd08      	ble.n	23f9624 <_strtod_l+0x7ac>
 23f9612:	4631      	mov	r1, r6
 23f9614:	464a      	mov	r2, r9
 23f9616:	4620      	mov	r0, r4
 23f9618:	f001 f90c 	bl	23fa834 <__lshift>
 23f961c:	4606      	mov	r6, r0
 23f961e:	2800      	cmp	r0, #0
 23f9620:	f43f ae73 	beq.w	23f930a <_strtod_l+0x492>
 23f9624:	9a05      	ldr	r2, [sp, #20]
 23f9626:	4620      	mov	r0, r4
 23f9628:	9918      	ldr	r1, [sp, #96]	; 0x60
 23f962a:	f001 f98f 	bl	23fa94c <__mdiff>
 23f962e:	4605      	mov	r5, r0
 23f9630:	2800      	cmp	r0, #0
 23f9632:	f43f ae6a 	beq.w	23f930a <_strtod_l+0x492>
 23f9636:	68c3      	ldr	r3, [r0, #12]
 23f9638:	4631      	mov	r1, r6
 23f963a:	930b      	str	r3, [sp, #44]	; 0x2c
 23f963c:	2300      	movs	r3, #0
 23f963e:	60c3      	str	r3, [r0, #12]
 23f9640:	f001 f968 	bl	23fa914 <__mcmp>
 23f9644:	2800      	cmp	r0, #0
 23f9646:	da5d      	bge.n	23f9704 <_strtod_l+0x88c>
 23f9648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f964a:	ea53 030a 	orrs.w	r3, r3, sl
 23f964e:	d17f      	bne.n	23f9750 <_strtod_l+0x8d8>
 23f9650:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23f9654:	2b00      	cmp	r3, #0
 23f9656:	d17b      	bne.n	23f9750 <_strtod_l+0x8d8>
 23f9658:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23f965c:	0d1b      	lsrs	r3, r3, #20
 23f965e:	051b      	lsls	r3, r3, #20
 23f9660:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 23f9664:	d974      	bls.n	23f9750 <_strtod_l+0x8d8>
 23f9666:	696b      	ldr	r3, [r5, #20]
 23f9668:	b913      	cbnz	r3, 23f9670 <_strtod_l+0x7f8>
 23f966a:	692b      	ldr	r3, [r5, #16]
 23f966c:	2b01      	cmp	r3, #1
 23f966e:	dd6f      	ble.n	23f9750 <_strtod_l+0x8d8>
 23f9670:	4629      	mov	r1, r5
 23f9672:	2201      	movs	r2, #1
 23f9674:	4620      	mov	r0, r4
 23f9676:	f001 f8dd 	bl	23fa834 <__lshift>
 23f967a:	4631      	mov	r1, r6
 23f967c:	4605      	mov	r5, r0
 23f967e:	f001 f949 	bl	23fa914 <__mcmp>
 23f9682:	2800      	cmp	r0, #0
 23f9684:	dd64      	ble.n	23f9750 <_strtod_l+0x8d8>
 23f9686:	9904      	ldr	r1, [sp, #16]
 23f9688:	465b      	mov	r3, fp
 23f968a:	4a52      	ldr	r2, [pc, #328]	; (23f97d4 <_strtod_l+0x95c>)
 23f968c:	2900      	cmp	r1, #0
 23f968e:	d07f      	beq.n	23f9790 <_strtod_l+0x918>
 23f9690:	ea02 010b 	and.w	r1, r2, fp
 23f9694:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 23f9698:	dc7a      	bgt.n	23f9790 <_strtod_l+0x918>
 23f969a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 23f969e:	f77f aeac 	ble.w	23f93fa <_strtod_l+0x582>
 23f96a2:	4b4d      	ldr	r3, [pc, #308]	; (23f97d8 <_strtod_l+0x960>)
 23f96a4:	4650      	mov	r0, sl
 23f96a6:	4659      	mov	r1, fp
 23f96a8:	2200      	movs	r2, #0
 23f96aa:	f7ee f9f5 	bl	23e7a98 <__aeabi_dmul>
 23f96ae:	460b      	mov	r3, r1
 23f96b0:	4682      	mov	sl, r0
 23f96b2:	468b      	mov	fp, r1
 23f96b4:	4303      	orrs	r3, r0
 23f96b6:	bf04      	itt	eq
 23f96b8:	2322      	moveq	r3, #34	; 0x22
 23f96ba:	6023      	streq	r3, [r4, #0]
 23f96bc:	e62f      	b.n	23f931e <_strtod_l+0x4a6>
 23f96be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f96c2:	fa02 f303 	lsl.w	r3, r2, r3
 23f96c6:	ea03 0a0a 	and.w	sl, r3, sl
 23f96ca:	e6e6      	b.n	23f949a <_strtod_l+0x622>
 23f96cc:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 23f96d0:	910d      	str	r1, [sp, #52]	; 0x34
 23f96d2:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 23f96d6:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 23f96da:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 23f96de:	fa01 f308 	lsl.w	r3, r1, r8
 23f96e2:	9308      	str	r3, [sp, #32]
 23f96e4:	e749      	b.n	23f957a <_strtod_l+0x702>
 23f96e6:	2300      	movs	r3, #0
 23f96e8:	9308      	str	r3, [sp, #32]
 23f96ea:	2301      	movs	r3, #1
 23f96ec:	930d      	str	r3, [sp, #52]	; 0x34
 23f96ee:	e744      	b.n	23f957a <_strtod_l+0x702>
 23f96f0:	4642      	mov	r2, r8
 23f96f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 23f96f4:	4620      	mov	r0, r4
 23f96f6:	f001 f89d 	bl	23fa834 <__lshift>
 23f96fa:	9018      	str	r0, [sp, #96]	; 0x60
 23f96fc:	2800      	cmp	r0, #0
 23f96fe:	f47f af6e 	bne.w	23f95de <_strtod_l+0x766>
 23f9702:	e602      	b.n	23f930a <_strtod_l+0x492>
 23f9704:	465f      	mov	r7, fp
 23f9706:	d16f      	bne.n	23f97e8 <_strtod_l+0x970>
 23f9708:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23f970a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23f970e:	b342      	cbz	r2, 23f9762 <_strtod_l+0x8ea>
 23f9710:	4a32      	ldr	r2, [pc, #200]	; (23f97dc <_strtod_l+0x964>)
 23f9712:	4293      	cmp	r3, r2
 23f9714:	d128      	bne.n	23f9768 <_strtod_l+0x8f0>
 23f9716:	9b04      	ldr	r3, [sp, #16]
 23f9718:	4651      	mov	r1, sl
 23f971a:	b1eb      	cbz	r3, 23f9758 <_strtod_l+0x8e0>
 23f971c:	4b2d      	ldr	r3, [pc, #180]	; (23f97d4 <_strtod_l+0x95c>)
 23f971e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23f9722:	403b      	ands	r3, r7
 23f9724:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 23f9728:	d819      	bhi.n	23f975e <_strtod_l+0x8e6>
 23f972a:	0d1b      	lsrs	r3, r3, #20
 23f972c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 23f9730:	fa02 f303 	lsl.w	r3, r2, r3
 23f9734:	4299      	cmp	r1, r3
 23f9736:	d117      	bne.n	23f9768 <_strtod_l+0x8f0>
 23f9738:	4b29      	ldr	r3, [pc, #164]	; (23f97e0 <_strtod_l+0x968>)
 23f973a:	429f      	cmp	r7, r3
 23f973c:	d102      	bne.n	23f9744 <_strtod_l+0x8cc>
 23f973e:	3101      	adds	r1, #1
 23f9740:	f43f ade3 	beq.w	23f930a <_strtod_l+0x492>
 23f9744:	4b23      	ldr	r3, [pc, #140]	; (23f97d4 <_strtod_l+0x95c>)
 23f9746:	f04f 0a00 	mov.w	sl, #0
 23f974a:	403b      	ands	r3, r7
 23f974c:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 23f9750:	9b04      	ldr	r3, [sp, #16]
 23f9752:	2b00      	cmp	r3, #0
 23f9754:	d1a5      	bne.n	23f96a2 <_strtod_l+0x82a>
 23f9756:	e5e2      	b.n	23f931e <_strtod_l+0x4a6>
 23f9758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23f975c:	e7ea      	b.n	23f9734 <_strtod_l+0x8bc>
 23f975e:	4613      	mov	r3, r2
 23f9760:	e7e8      	b.n	23f9734 <_strtod_l+0x8bc>
 23f9762:	ea53 030a 	orrs.w	r3, r3, sl
 23f9766:	d08e      	beq.n	23f9686 <_strtod_l+0x80e>
 23f9768:	9b08      	ldr	r3, [sp, #32]
 23f976a:	b1db      	cbz	r3, 23f97a4 <_strtod_l+0x92c>
 23f976c:	423b      	tst	r3, r7
 23f976e:	d0ef      	beq.n	23f9750 <_strtod_l+0x8d8>
 23f9770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f9772:	4650      	mov	r0, sl
 23f9774:	9a04      	ldr	r2, [sp, #16]
 23f9776:	4659      	mov	r1, fp
 23f9778:	b1c3      	cbz	r3, 23f97ac <_strtod_l+0x934>
 23f977a:	f7ff fb5e 	bl	23f8e3a <sulp>
 23f977e:	4602      	mov	r2, r0
 23f9780:	460b      	mov	r3, r1
 23f9782:	ec51 0b18 	vmov	r0, r1, d8
 23f9786:	f7ed ffd1 	bl	23e772c <__adddf3>
 23f978a:	4682      	mov	sl, r0
 23f978c:	468b      	mov	fp, r1
 23f978e:	e7df      	b.n	23f9750 <_strtod_l+0x8d8>
 23f9790:	4013      	ands	r3, r2
 23f9792:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23f9796:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 23f979a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 23f979e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 23f97a2:	e7d5      	b.n	23f9750 <_strtod_l+0x8d8>
 23f97a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23f97a6:	ea13 0f0a 	tst.w	r3, sl
 23f97aa:	e7e0      	b.n	23f976e <_strtod_l+0x8f6>
 23f97ac:	f7ff fb45 	bl	23f8e3a <sulp>
 23f97b0:	4602      	mov	r2, r0
 23f97b2:	460b      	mov	r3, r1
 23f97b4:	ec51 0b18 	vmov	r0, r1, d8
 23f97b8:	f7ed ffb6 	bl	23e7728 <__aeabi_dsub>
 23f97bc:	2200      	movs	r2, #0
 23f97be:	2300      	movs	r3, #0
 23f97c0:	4682      	mov	sl, r0
 23f97c2:	468b      	mov	fp, r1
 23f97c4:	f7ee fbd0 	bl	23e7f68 <__aeabi_dcmpeq>
 23f97c8:	2800      	cmp	r0, #0
 23f97ca:	d0c1      	beq.n	23f9750 <_strtod_l+0x8d8>
 23f97cc:	e615      	b.n	23f93fa <_strtod_l+0x582>
 23f97ce:	bf00      	nop
 23f97d0:	fffffc02 	.word	0xfffffc02
 23f97d4:	7ff00000 	.word	0x7ff00000
 23f97d8:	39500000 	.word	0x39500000
 23f97dc:	000fffff 	.word	0x000fffff
 23f97e0:	7fefffff 	.word	0x7fefffff
 23f97e4:	023ffcc8 	.word	0x023ffcc8
 23f97e8:	4631      	mov	r1, r6
 23f97ea:	4628      	mov	r0, r5
 23f97ec:	f001 fa14 	bl	23fac18 <__ratio>
 23f97f0:	2200      	movs	r2, #0
 23f97f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23f97f6:	ee10 0a10 	vmov	r0, s0
 23f97fa:	ec59 8b10 	vmov	r8, r9, d0
 23f97fe:	4649      	mov	r1, r9
 23f9800:	f7ee fbc6 	bl	23e7f90 <__aeabi_dcmple>
 23f9804:	2800      	cmp	r0, #0
 23f9806:	d07a      	beq.n	23f98fe <_strtod_l+0xa86>
 23f9808:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f980a:	2b00      	cmp	r3, #0
 23f980c:	d04a      	beq.n	23f98a4 <_strtod_l+0xa2c>
 23f980e:	2200      	movs	r2, #0
 23f9810:	4b93      	ldr	r3, [pc, #588]	; (23f9a60 <_strtod_l+0xbe8>)
 23f9812:	f04f 0800 	mov.w	r8, #0
 23f9816:	f8df 9248 	ldr.w	r9, [pc, #584]	; 23f9a60 <_strtod_l+0xbe8>
 23f981a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23f981e:	4b91      	ldr	r3, [pc, #580]	; (23f9a64 <_strtod_l+0xbec>)
 23f9820:	403b      	ands	r3, r7
 23f9822:	930d      	str	r3, [sp, #52]	; 0x34
 23f9824:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23f9826:	4b90      	ldr	r3, [pc, #576]	; (23f9a68 <_strtod_l+0xbf0>)
 23f9828:	429a      	cmp	r2, r3
 23f982a:	f040 80b0 	bne.w	23f998e <_strtod_l+0xb16>
 23f982e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 23f9832:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23f9836:	ec4b ab10 	vmov	d0, sl, fp
 23f983a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 23f983e:	f001 f915 	bl	23faa6c <__ulp>
 23f9842:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23f9846:	ec53 2b10 	vmov	r2, r3, d0
 23f984a:	f7ee f925 	bl	23e7a98 <__aeabi_dmul>
 23f984e:	4652      	mov	r2, sl
 23f9850:	465b      	mov	r3, fp
 23f9852:	f7ed ff6b 	bl	23e772c <__adddf3>
 23f9856:	460b      	mov	r3, r1
 23f9858:	4982      	ldr	r1, [pc, #520]	; (23f9a64 <_strtod_l+0xbec>)
 23f985a:	4682      	mov	sl, r0
 23f985c:	4a83      	ldr	r2, [pc, #524]	; (23f9a6c <_strtod_l+0xbf4>)
 23f985e:	4019      	ands	r1, r3
 23f9860:	4291      	cmp	r1, r2
 23f9862:	d960      	bls.n	23f9926 <_strtod_l+0xaae>
 23f9864:	ee18 3a90 	vmov	r3, s17
 23f9868:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 23f986c:	4293      	cmp	r3, r2
 23f986e:	d104      	bne.n	23f987a <_strtod_l+0xa02>
 23f9870:	ee18 3a10 	vmov	r3, s16
 23f9874:	3301      	adds	r3, #1
 23f9876:	f43f ad48 	beq.w	23f930a <_strtod_l+0x492>
 23f987a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 23f9a78 <_strtod_l+0xc00>
 23f987e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 23f9882:	9918      	ldr	r1, [sp, #96]	; 0x60
 23f9884:	4620      	mov	r0, r4
 23f9886:	f000 fdb9 	bl	23fa3fc <_Bfree>
 23f988a:	9905      	ldr	r1, [sp, #20]
 23f988c:	4620      	mov	r0, r4
 23f988e:	f000 fdb5 	bl	23fa3fc <_Bfree>
 23f9892:	4631      	mov	r1, r6
 23f9894:	4620      	mov	r0, r4
 23f9896:	f000 fdb1 	bl	23fa3fc <_Bfree>
 23f989a:	4629      	mov	r1, r5
 23f989c:	4620      	mov	r0, r4
 23f989e:	f000 fdad 	bl	23fa3fc <_Bfree>
 23f98a2:	e61c      	b.n	23f94de <_strtod_l+0x666>
 23f98a4:	f1ba 0f00 	cmp.w	sl, #0
 23f98a8:	d11b      	bne.n	23f98e2 <_strtod_l+0xa6a>
 23f98aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23f98ae:	b9f3      	cbnz	r3, 23f98ee <_strtod_l+0xa76>
 23f98b0:	2200      	movs	r2, #0
 23f98b2:	4b6b      	ldr	r3, [pc, #428]	; (23f9a60 <_strtod_l+0xbe8>)
 23f98b4:	4640      	mov	r0, r8
 23f98b6:	4649      	mov	r1, r9
 23f98b8:	f7ee fb60 	bl	23e7f7c <__aeabi_dcmplt>
 23f98bc:	b9d0      	cbnz	r0, 23f98f4 <_strtod_l+0xa7c>
 23f98be:	4640      	mov	r0, r8
 23f98c0:	4649      	mov	r1, r9
 23f98c2:	2200      	movs	r2, #0
 23f98c4:	4b6a      	ldr	r3, [pc, #424]	; (23f9a70 <_strtod_l+0xbf8>)
 23f98c6:	f7ee f8e7 	bl	23e7a98 <__aeabi_dmul>
 23f98ca:	4680      	mov	r8, r0
 23f98cc:	4689      	mov	r9, r1
 23f98ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 23f98d2:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 23f98d6:	9315      	str	r3, [sp, #84]	; 0x54
 23f98d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 23f98dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23f98e0:	e79d      	b.n	23f981e <_strtod_l+0x9a6>
 23f98e2:	f1ba 0f01 	cmp.w	sl, #1
 23f98e6:	d102      	bne.n	23f98ee <_strtod_l+0xa76>
 23f98e8:	2f00      	cmp	r7, #0
 23f98ea:	f43f ad86 	beq.w	23f93fa <_strtod_l+0x582>
 23f98ee:	2200      	movs	r2, #0
 23f98f0:	4b60      	ldr	r3, [pc, #384]	; (23f9a74 <_strtod_l+0xbfc>)
 23f98f2:	e78e      	b.n	23f9812 <_strtod_l+0x99a>
 23f98f4:	f04f 0800 	mov.w	r8, #0
 23f98f8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 23f9a70 <_strtod_l+0xbf8>
 23f98fc:	e7e7      	b.n	23f98ce <_strtod_l+0xa56>
 23f98fe:	4b5c      	ldr	r3, [pc, #368]	; (23f9a70 <_strtod_l+0xbf8>)
 23f9900:	4640      	mov	r0, r8
 23f9902:	4649      	mov	r1, r9
 23f9904:	2200      	movs	r2, #0
 23f9906:	f7ee f8c7 	bl	23e7a98 <__aeabi_dmul>
 23f990a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f990c:	4680      	mov	r8, r0
 23f990e:	4689      	mov	r9, r1
 23f9910:	b933      	cbnz	r3, 23f9920 <_strtod_l+0xaa8>
 23f9912:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23f9916:	900e      	str	r0, [sp, #56]	; 0x38
 23f9918:	930f      	str	r3, [sp, #60]	; 0x3c
 23f991a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 23f991e:	e7dd      	b.n	23f98dc <_strtod_l+0xa64>
 23f9920:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 23f9924:	e7f9      	b.n	23f991a <_strtod_l+0xaa2>
 23f9926:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 23f992a:	9b04      	ldr	r3, [sp, #16]
 23f992c:	2b00      	cmp	r3, #0
 23f992e:	d1a8      	bne.n	23f9882 <_strtod_l+0xa0a>
 23f9930:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 23f9934:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23f9936:	0d1b      	lsrs	r3, r3, #20
 23f9938:	051b      	lsls	r3, r3, #20
 23f993a:	429a      	cmp	r2, r3
 23f993c:	d1a1      	bne.n	23f9882 <_strtod_l+0xa0a>
 23f993e:	4640      	mov	r0, r8
 23f9940:	4649      	mov	r1, r9
 23f9942:	f7ee fc41 	bl	23e81c8 <__aeabi_d2lz>
 23f9946:	f7ee f879 	bl	23e7a3c <__aeabi_l2d>
 23f994a:	4602      	mov	r2, r0
 23f994c:	460b      	mov	r3, r1
 23f994e:	4640      	mov	r0, r8
 23f9950:	4649      	mov	r1, r9
 23f9952:	f7ed fee9 	bl	23e7728 <__aeabi_dsub>
 23f9956:	f3cb 0313 	ubfx	r3, fp, #0, #20
 23f995a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23f995c:	4680      	mov	r8, r0
 23f995e:	ea43 030a 	orr.w	r3, r3, sl
 23f9962:	4689      	mov	r9, r1
 23f9964:	4313      	orrs	r3, r2
 23f9966:	d055      	beq.n	23f9a14 <_strtod_l+0xb9c>
 23f9968:	a335      	add	r3, pc, #212	; (adr r3, 23f9a40 <_strtod_l+0xbc8>)
 23f996a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f996e:	f7ee fb05 	bl	23e7f7c <__aeabi_dcmplt>
 23f9972:	2800      	cmp	r0, #0
 23f9974:	f47f acd3 	bne.w	23f931e <_strtod_l+0x4a6>
 23f9978:	4640      	mov	r0, r8
 23f997a:	4649      	mov	r1, r9
 23f997c:	a332      	add	r3, pc, #200	; (adr r3, 23f9a48 <_strtod_l+0xbd0>)
 23f997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9982:	f7ee fb19 	bl	23e7fb8 <__aeabi_dcmpgt>
 23f9986:	2800      	cmp	r0, #0
 23f9988:	f43f af7b 	beq.w	23f9882 <_strtod_l+0xa0a>
 23f998c:	e4c7      	b.n	23f931e <_strtod_l+0x4a6>
 23f998e:	9b04      	ldr	r3, [sp, #16]
 23f9990:	b333      	cbz	r3, 23f99e0 <_strtod_l+0xb68>
 23f9992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23f9994:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 23f9998:	d822      	bhi.n	23f99e0 <_strtod_l+0xb68>
 23f999a:	4640      	mov	r0, r8
 23f999c:	4649      	mov	r1, r9
 23f999e:	a32c      	add	r3, pc, #176	; (adr r3, 23f9a50 <_strtod_l+0xbd8>)
 23f99a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f99a4:	f7ee faf4 	bl	23e7f90 <__aeabi_dcmple>
 23f99a8:	b1a0      	cbz	r0, 23f99d4 <_strtod_l+0xb5c>
 23f99aa:	4649      	mov	r1, r9
 23f99ac:	4640      	mov	r0, r8
 23f99ae:	f7ee fb4b 	bl	23e8048 <__aeabi_d2uiz>
 23f99b2:	2801      	cmp	r0, #1
 23f99b4:	bf38      	it	cc
 23f99b6:	2001      	movcc	r0, #1
 23f99b8:	f7ed fff4 	bl	23e79a4 <__aeabi_ui2d>
 23f99bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 23f99be:	4680      	mov	r8, r0
 23f99c0:	4689      	mov	r9, r1
 23f99c2:	bb23      	cbnz	r3, 23f9a0e <_strtod_l+0xb96>
 23f99c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23f99c8:	9010      	str	r0, [sp, #64]	; 0x40
 23f99ca:	9311      	str	r3, [sp, #68]	; 0x44
 23f99cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 23f99d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 23f99d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23f99d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 23f99d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 23f99dc:	1a9b      	subs	r3, r3, r2
 23f99de:	9309      	str	r3, [sp, #36]	; 0x24
 23f99e0:	eeb0 0a48 	vmov.f32	s0, s16
 23f99e4:	eef0 0a68 	vmov.f32	s1, s17
 23f99e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23f99ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 23f99f0:	f001 f83c 	bl	23faa6c <__ulp>
 23f99f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 23f99f8:	ec53 2b10 	vmov	r2, r3, d0
 23f99fc:	f7ee f84c 	bl	23e7a98 <__aeabi_dmul>
 23f9a00:	ec53 2b18 	vmov	r2, r3, d8
 23f9a04:	f7ed fe92 	bl	23e772c <__adddf3>
 23f9a08:	4682      	mov	sl, r0
 23f9a0a:	468b      	mov	fp, r1
 23f9a0c:	e78d      	b.n	23f992a <_strtod_l+0xab2>
 23f9a0e:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 23f9a12:	e7db      	b.n	23f99cc <_strtod_l+0xb54>
 23f9a14:	a310      	add	r3, pc, #64	; (adr r3, 23f9a58 <_strtod_l+0xbe0>)
 23f9a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9a1a:	f7ee faaf 	bl	23e7f7c <__aeabi_dcmplt>
 23f9a1e:	e7b2      	b.n	23f9986 <_strtod_l+0xb0e>
 23f9a20:	2300      	movs	r3, #0
 23f9a22:	930a      	str	r3, [sp, #40]	; 0x28
 23f9a24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 23f9a26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 23f9a28:	6013      	str	r3, [r2, #0]
 23f9a2a:	f7ff ba6d 	b.w	23f8f08 <_strtod_l+0x90>
 23f9a2e:	2a65      	cmp	r2, #101	; 0x65
 23f9a30:	f43f ab61 	beq.w	23f90f6 <_strtod_l+0x27e>
 23f9a34:	2a45      	cmp	r2, #69	; 0x45
 23f9a36:	f43f ab5e 	beq.w	23f90f6 <_strtod_l+0x27e>
 23f9a3a:	2301      	movs	r3, #1
 23f9a3c:	f7ff bb96 	b.w	23f916c <_strtod_l+0x2f4>
 23f9a40:	94a03595 	.word	0x94a03595
 23f9a44:	3fdfffff 	.word	0x3fdfffff
 23f9a48:	35afe535 	.word	0x35afe535
 23f9a4c:	3fe00000 	.word	0x3fe00000
 23f9a50:	ffc00000 	.word	0xffc00000
 23f9a54:	41dfffff 	.word	0x41dfffff
 23f9a58:	94a03595 	.word	0x94a03595
 23f9a5c:	3fcfffff 	.word	0x3fcfffff
 23f9a60:	3ff00000 	.word	0x3ff00000
 23f9a64:	7ff00000 	.word	0x7ff00000
 23f9a68:	7fe00000 	.word	0x7fe00000
 23f9a6c:	7c9fffff 	.word	0x7c9fffff
 23f9a70:	3fe00000 	.word	0x3fe00000
 23f9a74:	bff00000 	.word	0xbff00000
 23f9a78:	7fefffff 	.word	0x7fefffff

023f9a7c <strtod>:
 23f9a7c:	460a      	mov	r2, r1
 23f9a7e:	4601      	mov	r1, r0
 23f9a80:	4802      	ldr	r0, [pc, #8]	; (23f9a8c <strtod+0x10>)
 23f9a82:	4b03      	ldr	r3, [pc, #12]	; (23f9a90 <strtod+0x14>)
 23f9a84:	6800      	ldr	r0, [r0, #0]
 23f9a86:	f7ff b9f7 	b.w	23f8e78 <_strtod_l>
 23f9a8a:	bf00      	nop
 23f9a8c:	1007a4bc 	.word	0x1007a4bc
 23f9a90:	1007a528 	.word	0x1007a528

023f9a94 <_strtol_l.constprop.0>:
 23f9a94:	2b01      	cmp	r3, #1
 23f9a96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23f9a9a:	d001      	beq.n	23f9aa0 <_strtol_l.constprop.0+0xc>
 23f9a9c:	2b24      	cmp	r3, #36	; 0x24
 23f9a9e:	d906      	bls.n	23f9aae <_strtol_l.constprop.0+0x1a>
 23f9aa0:	f7fa fea0 	bl	23f47e4 <__errno>
 23f9aa4:	2316      	movs	r3, #22
 23f9aa6:	6003      	str	r3, [r0, #0]
 23f9aa8:	2000      	movs	r0, #0
 23f9aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23f9aae:	460d      	mov	r5, r1
 23f9ab0:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23f9b94 <_strtol_l.constprop.0+0x100>
 23f9ab4:	462e      	mov	r6, r5
 23f9ab6:	f815 4b01 	ldrb.w	r4, [r5], #1
 23f9aba:	f814 700c 	ldrb.w	r7, [r4, ip]
 23f9abe:	f017 0708 	ands.w	r7, r7, #8
 23f9ac2:	d1f7      	bne.n	23f9ab4 <_strtol_l.constprop.0+0x20>
 23f9ac4:	2c2d      	cmp	r4, #45	; 0x2d
 23f9ac6:	d132      	bne.n	23f9b2e <_strtol_l.constprop.0+0x9a>
 23f9ac8:	782c      	ldrb	r4, [r5, #0]
 23f9aca:	2701      	movs	r7, #1
 23f9acc:	1cb5      	adds	r5, r6, #2
 23f9ace:	2b00      	cmp	r3, #0
 23f9ad0:	d05b      	beq.n	23f9b8a <_strtol_l.constprop.0+0xf6>
 23f9ad2:	2b10      	cmp	r3, #16
 23f9ad4:	d109      	bne.n	23f9aea <_strtol_l.constprop.0+0x56>
 23f9ad6:	2c30      	cmp	r4, #48	; 0x30
 23f9ad8:	d107      	bne.n	23f9aea <_strtol_l.constprop.0+0x56>
 23f9ada:	782c      	ldrb	r4, [r5, #0]
 23f9adc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23f9ae0:	2c58      	cmp	r4, #88	; 0x58
 23f9ae2:	d14d      	bne.n	23f9b80 <_strtol_l.constprop.0+0xec>
 23f9ae4:	786c      	ldrb	r4, [r5, #1]
 23f9ae6:	2310      	movs	r3, #16
 23f9ae8:	3502      	adds	r5, #2
 23f9aea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23f9aee:	f04f 0c00 	mov.w	ip, #0
 23f9af2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23f9af6:	4666      	mov	r6, ip
 23f9af8:	fbb8 f9f3 	udiv	r9, r8, r3
 23f9afc:	fb03 8a19 	mls	sl, r3, r9, r8
 23f9b00:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23f9b04:	f1be 0f09 	cmp.w	lr, #9
 23f9b08:	d816      	bhi.n	23f9b38 <_strtol_l.constprop.0+0xa4>
 23f9b0a:	4674      	mov	r4, lr
 23f9b0c:	42a3      	cmp	r3, r4
 23f9b0e:	dd24      	ble.n	23f9b5a <_strtol_l.constprop.0+0xc6>
 23f9b10:	f1bc 0f00 	cmp.w	ip, #0
 23f9b14:	db1e      	blt.n	23f9b54 <_strtol_l.constprop.0+0xc0>
 23f9b16:	45b1      	cmp	r9, r6
 23f9b18:	d31c      	bcc.n	23f9b54 <_strtol_l.constprop.0+0xc0>
 23f9b1a:	d101      	bne.n	23f9b20 <_strtol_l.constprop.0+0x8c>
 23f9b1c:	45a2      	cmp	sl, r4
 23f9b1e:	db19      	blt.n	23f9b54 <_strtol_l.constprop.0+0xc0>
 23f9b20:	fb06 4603 	mla	r6, r6, r3, r4
 23f9b24:	f04f 0c01 	mov.w	ip, #1
 23f9b28:	f815 4b01 	ldrb.w	r4, [r5], #1
 23f9b2c:	e7e8      	b.n	23f9b00 <_strtol_l.constprop.0+0x6c>
 23f9b2e:	2c2b      	cmp	r4, #43	; 0x2b
 23f9b30:	bf04      	itt	eq
 23f9b32:	782c      	ldrbeq	r4, [r5, #0]
 23f9b34:	1cb5      	addeq	r5, r6, #2
 23f9b36:	e7ca      	b.n	23f9ace <_strtol_l.constprop.0+0x3a>
 23f9b38:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23f9b3c:	f1be 0f19 	cmp.w	lr, #25
 23f9b40:	d801      	bhi.n	23f9b46 <_strtol_l.constprop.0+0xb2>
 23f9b42:	3c37      	subs	r4, #55	; 0x37
 23f9b44:	e7e2      	b.n	23f9b0c <_strtol_l.constprop.0+0x78>
 23f9b46:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23f9b4a:	f1be 0f19 	cmp.w	lr, #25
 23f9b4e:	d804      	bhi.n	23f9b5a <_strtol_l.constprop.0+0xc6>
 23f9b50:	3c57      	subs	r4, #87	; 0x57
 23f9b52:	e7db      	b.n	23f9b0c <_strtol_l.constprop.0+0x78>
 23f9b54:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23f9b58:	e7e6      	b.n	23f9b28 <_strtol_l.constprop.0+0x94>
 23f9b5a:	f1bc 0f00 	cmp.w	ip, #0
 23f9b5e:	da05      	bge.n	23f9b6c <_strtol_l.constprop.0+0xd8>
 23f9b60:	2322      	movs	r3, #34	; 0x22
 23f9b62:	4646      	mov	r6, r8
 23f9b64:	6003      	str	r3, [r0, #0]
 23f9b66:	b942      	cbnz	r2, 23f9b7a <_strtol_l.constprop.0+0xe6>
 23f9b68:	4630      	mov	r0, r6
 23f9b6a:	e79e      	b.n	23f9aaa <_strtol_l.constprop.0+0x16>
 23f9b6c:	b107      	cbz	r7, 23f9b70 <_strtol_l.constprop.0+0xdc>
 23f9b6e:	4276      	negs	r6, r6
 23f9b70:	2a00      	cmp	r2, #0
 23f9b72:	d0f9      	beq.n	23f9b68 <_strtol_l.constprop.0+0xd4>
 23f9b74:	f1bc 0f00 	cmp.w	ip, #0
 23f9b78:	d000      	beq.n	23f9b7c <_strtol_l.constprop.0+0xe8>
 23f9b7a:	1e69      	subs	r1, r5, #1
 23f9b7c:	6011      	str	r1, [r2, #0]
 23f9b7e:	e7f3      	b.n	23f9b68 <_strtol_l.constprop.0+0xd4>
 23f9b80:	2430      	movs	r4, #48	; 0x30
 23f9b82:	2b00      	cmp	r3, #0
 23f9b84:	d1b1      	bne.n	23f9aea <_strtol_l.constprop.0+0x56>
 23f9b86:	2308      	movs	r3, #8
 23f9b88:	e7af      	b.n	23f9aea <_strtol_l.constprop.0+0x56>
 23f9b8a:	2c30      	cmp	r4, #48	; 0x30
 23f9b8c:	d0a5      	beq.n	23f9ada <_strtol_l.constprop.0+0x46>
 23f9b8e:	230a      	movs	r3, #10
 23f9b90:	e7ab      	b.n	23f9aea <_strtol_l.constprop.0+0x56>
 23f9b92:	bf00      	nop
 23f9b94:	023ffcf1 	.word	0x023ffcf1

023f9b98 <strtol>:
 23f9b98:	4613      	mov	r3, r2
 23f9b9a:	460a      	mov	r2, r1
 23f9b9c:	4601      	mov	r1, r0
 23f9b9e:	4802      	ldr	r0, [pc, #8]	; (23f9ba8 <strtol+0x10>)
 23f9ba0:	6800      	ldr	r0, [r0, #0]
 23f9ba2:	f7ff bf77 	b.w	23f9a94 <_strtol_l.constprop.0>
 23f9ba6:	bf00      	nop
 23f9ba8:	1007a4bc 	.word	0x1007a4bc

023f9bac <__register_exitproc>:
 23f9bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23f9bb0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23f9c70 <__register_exitproc+0xc4>
 23f9bb4:	4606      	mov	r6, r0
 23f9bb6:	461f      	mov	r7, r3
 23f9bb8:	460d      	mov	r5, r1
 23f9bba:	f8d8 0000 	ldr.w	r0, [r8]
 23f9bbe:	4691      	mov	r9, r2
 23f9bc0:	f000 fbc6 	bl	23fa350 <__retarget_lock_acquire_recursive>
 23f9bc4:	4b26      	ldr	r3, [pc, #152]	; (23f9c60 <__register_exitproc+0xb4>)
 23f9bc6:	681c      	ldr	r4, [r3, #0]
 23f9bc8:	b934      	cbnz	r4, 23f9bd8 <__register_exitproc+0x2c>
 23f9bca:	4c26      	ldr	r4, [pc, #152]	; (23f9c64 <__register_exitproc+0xb8>)
 23f9bcc:	601c      	str	r4, [r3, #0]
 23f9bce:	4b26      	ldr	r3, [pc, #152]	; (23f9c68 <__register_exitproc+0xbc>)
 23f9bd0:	b113      	cbz	r3, 23f9bd8 <__register_exitproc+0x2c>
 23f9bd2:	681b      	ldr	r3, [r3, #0]
 23f9bd4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23f9bd8:	6863      	ldr	r3, [r4, #4]
 23f9bda:	2b1f      	cmp	r3, #31
 23f9bdc:	dd07      	ble.n	23f9bee <__register_exitproc+0x42>
 23f9bde:	f8d8 0000 	ldr.w	r0, [r8]
 23f9be2:	f000 fbb7 	bl	23fa354 <__retarget_lock_release_recursive>
 23f9be6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f9bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23f9bee:	b35e      	cbz	r6, 23f9c48 <__register_exitproc+0x9c>
 23f9bf0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23f9bf4:	b988      	cbnz	r0, 23f9c1a <__register_exitproc+0x6e>
 23f9bf6:	4b1d      	ldr	r3, [pc, #116]	; (23f9c6c <__register_exitproc+0xc0>)
 23f9bf8:	b923      	cbnz	r3, 23f9c04 <__register_exitproc+0x58>
 23f9bfa:	f8d8 0000 	ldr.w	r0, [r8]
 23f9bfe:	f000 fba8 	bl	23fa352 <__retarget_lock_release>
 23f9c02:	e7f0      	b.n	23f9be6 <__register_exitproc+0x3a>
 23f9c04:	f44f 7084 	mov.w	r0, #264	; 0x108
 23f9c08:	f7fa fd98 	bl	23f473c <malloc>
 23f9c0c:	2800      	cmp	r0, #0
 23f9c0e:	d0f4      	beq.n	23f9bfa <__register_exitproc+0x4e>
 23f9c10:	2300      	movs	r3, #0
 23f9c12:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23f9c16:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23f9c1a:	6863      	ldr	r3, [r4, #4]
 23f9c1c:	2201      	movs	r2, #1
 23f9c1e:	2e02      	cmp	r6, #2
 23f9c20:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23f9c24:	fa02 f203 	lsl.w	r2, r2, r3
 23f9c28:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23f9c2c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23f9c30:	ea43 0302 	orr.w	r3, r3, r2
 23f9c34:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23f9c38:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23f9c3c:	bf02      	ittt	eq
 23f9c3e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23f9c42:	4313      	orreq	r3, r2
 23f9c44:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23f9c48:	6863      	ldr	r3, [r4, #4]
 23f9c4a:	f8d8 0000 	ldr.w	r0, [r8]
 23f9c4e:	1c5a      	adds	r2, r3, #1
 23f9c50:	3302      	adds	r3, #2
 23f9c52:	6062      	str	r2, [r4, #4]
 23f9c54:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23f9c58:	f000 fb7c 	bl	23fa354 <__retarget_lock_release_recursive>
 23f9c5c:	2000      	movs	r0, #0
 23f9c5e:	e7c4      	b.n	23f9bea <__register_exitproc+0x3e>
 23f9c60:	1007afe0 	.word	0x1007afe0
 23f9c64:	1007af54 	.word	0x1007af54
 23f9c68:	00000000 	.word	0x00000000
 23f9c6c:	023f473d 	.word	0x023f473d
 23f9c70:	1007a520 	.word	0x1007a520

023f9c74 <rshift>:
 23f9c74:	6903      	ldr	r3, [r0, #16]
 23f9c76:	114a      	asrs	r2, r1, #5
 23f9c78:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 23f9c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f9c80:	f100 0414 	add.w	r4, r0, #20
 23f9c84:	dd45      	ble.n	23f9d12 <rshift+0x9e>
 23f9c86:	f011 011f 	ands.w	r1, r1, #31
 23f9c8a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 23f9c8e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 23f9c92:	d10c      	bne.n	23f9cae <rshift+0x3a>
 23f9c94:	f100 0710 	add.w	r7, r0, #16
 23f9c98:	4629      	mov	r1, r5
 23f9c9a:	42b1      	cmp	r1, r6
 23f9c9c:	d334      	bcc.n	23f9d08 <rshift+0x94>
 23f9c9e:	1a9b      	subs	r3, r3, r2
 23f9ca0:	1eea      	subs	r2, r5, #3
 23f9ca2:	009b      	lsls	r3, r3, #2
 23f9ca4:	4296      	cmp	r6, r2
 23f9ca6:	bf38      	it	cc
 23f9ca8:	2300      	movcc	r3, #0
 23f9caa:	4423      	add	r3, r4
 23f9cac:	e015      	b.n	23f9cda <rshift+0x66>
 23f9cae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 23f9cb2:	f1c1 0820 	rsb	r8, r1, #32
 23f9cb6:	f105 0e04 	add.w	lr, r5, #4
 23f9cba:	46a1      	mov	r9, r4
 23f9cbc:	40cf      	lsrs	r7, r1
 23f9cbe:	4576      	cmp	r6, lr
 23f9cc0:	46f4      	mov	ip, lr
 23f9cc2:	d815      	bhi.n	23f9cf0 <rshift+0x7c>
 23f9cc4:	1a9a      	subs	r2, r3, r2
 23f9cc6:	3501      	adds	r5, #1
 23f9cc8:	0092      	lsls	r2, r2, #2
 23f9cca:	3a04      	subs	r2, #4
 23f9ccc:	42ae      	cmp	r6, r5
 23f9cce:	bf38      	it	cc
 23f9cd0:	2200      	movcc	r2, #0
 23f9cd2:	18a3      	adds	r3, r4, r2
 23f9cd4:	50a7      	str	r7, [r4, r2]
 23f9cd6:	b107      	cbz	r7, 23f9cda <rshift+0x66>
 23f9cd8:	3304      	adds	r3, #4
 23f9cda:	1b1a      	subs	r2, r3, r4
 23f9cdc:	42a3      	cmp	r3, r4
 23f9cde:	ea4f 02a2 	mov.w	r2, r2, asr #2
 23f9ce2:	bf08      	it	eq
 23f9ce4:	2300      	moveq	r3, #0
 23f9ce6:	6102      	str	r2, [r0, #16]
 23f9ce8:	bf08      	it	eq
 23f9cea:	6143      	streq	r3, [r0, #20]
 23f9cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23f9cf0:	f8dc c000 	ldr.w	ip, [ip]
 23f9cf4:	fa0c fc08 	lsl.w	ip, ip, r8
 23f9cf8:	ea4c 0707 	orr.w	r7, ip, r7
 23f9cfc:	f849 7b04 	str.w	r7, [r9], #4
 23f9d00:	f85e 7b04 	ldr.w	r7, [lr], #4
 23f9d04:	40cf      	lsrs	r7, r1
 23f9d06:	e7da      	b.n	23f9cbe <rshift+0x4a>
 23f9d08:	f851 cb04 	ldr.w	ip, [r1], #4
 23f9d0c:	f847 cf04 	str.w	ip, [r7, #4]!
 23f9d10:	e7c3      	b.n	23f9c9a <rshift+0x26>
 23f9d12:	4623      	mov	r3, r4
 23f9d14:	e7e1      	b.n	23f9cda <rshift+0x66>

023f9d16 <__hexdig_fun>:
 23f9d16:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23f9d1a:	2b09      	cmp	r3, #9
 23f9d1c:	d802      	bhi.n	23f9d24 <__hexdig_fun+0xe>
 23f9d1e:	3820      	subs	r0, #32
 23f9d20:	b2c0      	uxtb	r0, r0
 23f9d22:	4770      	bx	lr
 23f9d24:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 23f9d28:	2b05      	cmp	r3, #5
 23f9d2a:	d801      	bhi.n	23f9d30 <__hexdig_fun+0x1a>
 23f9d2c:	3847      	subs	r0, #71	; 0x47
 23f9d2e:	e7f7      	b.n	23f9d20 <__hexdig_fun+0xa>
 23f9d30:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 23f9d34:	2b05      	cmp	r3, #5
 23f9d36:	d801      	bhi.n	23f9d3c <__hexdig_fun+0x26>
 23f9d38:	3827      	subs	r0, #39	; 0x27
 23f9d3a:	e7f1      	b.n	23f9d20 <__hexdig_fun+0xa>
 23f9d3c:	2000      	movs	r0, #0
 23f9d3e:	4770      	bx	lr

023f9d40 <__gethex>:
 23f9d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23f9d44:	ed2d 8b02 	vpush	{d8}
 23f9d48:	b089      	sub	sp, #36	; 0x24
 23f9d4a:	ee08 0a10 	vmov	s16, r0
 23f9d4e:	468b      	mov	fp, r1
 23f9d50:	4690      	mov	r8, r2
 23f9d52:	9304      	str	r3, [sp, #16]
 23f9d54:	4bb2      	ldr	r3, [pc, #712]	; (23fa020 <__gethex+0x2e0>)
 23f9d56:	681b      	ldr	r3, [r3, #0]
 23f9d58:	4618      	mov	r0, r3
 23f9d5a:	9301      	str	r3, [sp, #4]
 23f9d5c:	f7ee fbec 	bl	23e8538 <strlen>
 23f9d60:	9b01      	ldr	r3, [sp, #4]
 23f9d62:	f8db 2000 	ldr.w	r2, [fp]
 23f9d66:	4682      	mov	sl, r0
 23f9d68:	4403      	add	r3, r0
 23f9d6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 23f9d6e:	9305      	str	r3, [sp, #20]
 23f9d70:	1c93      	adds	r3, r2, #2
 23f9d72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 23f9d76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 23f9d7a:	32fe      	adds	r2, #254	; 0xfe
 23f9d7c:	18d1      	adds	r1, r2, r3
 23f9d7e:	461f      	mov	r7, r3
 23f9d80:	f813 0b01 	ldrb.w	r0, [r3], #1
 23f9d84:	9100      	str	r1, [sp, #0]
 23f9d86:	2830      	cmp	r0, #48	; 0x30
 23f9d88:	d0f8      	beq.n	23f9d7c <__gethex+0x3c>
 23f9d8a:	f7ff ffc4 	bl	23f9d16 <__hexdig_fun>
 23f9d8e:	4604      	mov	r4, r0
 23f9d90:	2800      	cmp	r0, #0
 23f9d92:	d139      	bne.n	23f9e08 <__gethex+0xc8>
 23f9d94:	4652      	mov	r2, sl
 23f9d96:	9901      	ldr	r1, [sp, #4]
 23f9d98:	4638      	mov	r0, r7
 23f9d9a:	f7ff f826 	bl	23f8dea <strncmp>
 23f9d9e:	4605      	mov	r5, r0
 23f9da0:	2800      	cmp	r0, #0
 23f9da2:	d167      	bne.n	23f9e74 <__gethex+0x134>
 23f9da4:	f817 000a 	ldrb.w	r0, [r7, sl]
 23f9da8:	eb07 060a 	add.w	r6, r7, sl
 23f9dac:	f7ff ffb3 	bl	23f9d16 <__hexdig_fun>
 23f9db0:	2800      	cmp	r0, #0
 23f9db2:	d061      	beq.n	23f9e78 <__gethex+0x138>
 23f9db4:	4633      	mov	r3, r6
 23f9db6:	7818      	ldrb	r0, [r3, #0]
 23f9db8:	461f      	mov	r7, r3
 23f9dba:	3301      	adds	r3, #1
 23f9dbc:	2830      	cmp	r0, #48	; 0x30
 23f9dbe:	d0fa      	beq.n	23f9db6 <__gethex+0x76>
 23f9dc0:	f7ff ffa9 	bl	23f9d16 <__hexdig_fun>
 23f9dc4:	fab0 f480 	clz	r4, r0
 23f9dc8:	2301      	movs	r3, #1
 23f9dca:	4635      	mov	r5, r6
 23f9dcc:	0964      	lsrs	r4, r4, #5
 23f9dce:	9300      	str	r3, [sp, #0]
 23f9dd0:	463a      	mov	r2, r7
 23f9dd2:	4616      	mov	r6, r2
 23f9dd4:	3201      	adds	r2, #1
 23f9dd6:	7830      	ldrb	r0, [r6, #0]
 23f9dd8:	f7ff ff9d 	bl	23f9d16 <__hexdig_fun>
 23f9ddc:	2800      	cmp	r0, #0
 23f9dde:	d1f8      	bne.n	23f9dd2 <__gethex+0x92>
 23f9de0:	4652      	mov	r2, sl
 23f9de2:	9901      	ldr	r1, [sp, #4]
 23f9de4:	4630      	mov	r0, r6
 23f9de6:	f7ff f800 	bl	23f8dea <strncmp>
 23f9dea:	b980      	cbnz	r0, 23f9e0e <__gethex+0xce>
 23f9dec:	b94d      	cbnz	r5, 23f9e02 <__gethex+0xc2>
 23f9dee:	eb06 050a 	add.w	r5, r6, sl
 23f9df2:	462a      	mov	r2, r5
 23f9df4:	4616      	mov	r6, r2
 23f9df6:	3201      	adds	r2, #1
 23f9df8:	7830      	ldrb	r0, [r6, #0]
 23f9dfa:	f7ff ff8c 	bl	23f9d16 <__hexdig_fun>
 23f9dfe:	2800      	cmp	r0, #0
 23f9e00:	d1f8      	bne.n	23f9df4 <__gethex+0xb4>
 23f9e02:	1bad      	subs	r5, r5, r6
 23f9e04:	00ad      	lsls	r5, r5, #2
 23f9e06:	e004      	b.n	23f9e12 <__gethex+0xd2>
 23f9e08:	2400      	movs	r4, #0
 23f9e0a:	4625      	mov	r5, r4
 23f9e0c:	e7e0      	b.n	23f9dd0 <__gethex+0x90>
 23f9e0e:	2d00      	cmp	r5, #0
 23f9e10:	d1f7      	bne.n	23f9e02 <__gethex+0xc2>
 23f9e12:	7833      	ldrb	r3, [r6, #0]
 23f9e14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 23f9e18:	2b50      	cmp	r3, #80	; 0x50
 23f9e1a:	d13b      	bne.n	23f9e94 <__gethex+0x154>
 23f9e1c:	7873      	ldrb	r3, [r6, #1]
 23f9e1e:	2b2b      	cmp	r3, #43	; 0x2b
 23f9e20:	d02c      	beq.n	23f9e7c <__gethex+0x13c>
 23f9e22:	2b2d      	cmp	r3, #45	; 0x2d
 23f9e24:	d02e      	beq.n	23f9e84 <__gethex+0x144>
 23f9e26:	1c71      	adds	r1, r6, #1
 23f9e28:	f04f 0900 	mov.w	r9, #0
 23f9e2c:	7808      	ldrb	r0, [r1, #0]
 23f9e2e:	f7ff ff72 	bl	23f9d16 <__hexdig_fun>
 23f9e32:	1e43      	subs	r3, r0, #1
 23f9e34:	b2db      	uxtb	r3, r3
 23f9e36:	2b18      	cmp	r3, #24
 23f9e38:	d82c      	bhi.n	23f9e94 <__gethex+0x154>
 23f9e3a:	f1a0 0210 	sub.w	r2, r0, #16
 23f9e3e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 23f9e42:	f7ff ff68 	bl	23f9d16 <__hexdig_fun>
 23f9e46:	1e43      	subs	r3, r0, #1
 23f9e48:	b2db      	uxtb	r3, r3
 23f9e4a:	2b18      	cmp	r3, #24
 23f9e4c:	d91d      	bls.n	23f9e8a <__gethex+0x14a>
 23f9e4e:	f1b9 0f00 	cmp.w	r9, #0
 23f9e52:	d000      	beq.n	23f9e56 <__gethex+0x116>
 23f9e54:	4252      	negs	r2, r2
 23f9e56:	4415      	add	r5, r2
 23f9e58:	f8cb 1000 	str.w	r1, [fp]
 23f9e5c:	b1e4      	cbz	r4, 23f9e98 <__gethex+0x158>
 23f9e5e:	9b00      	ldr	r3, [sp, #0]
 23f9e60:	2b00      	cmp	r3, #0
 23f9e62:	bf14      	ite	ne
 23f9e64:	2700      	movne	r7, #0
 23f9e66:	2706      	moveq	r7, #6
 23f9e68:	4638      	mov	r0, r7
 23f9e6a:	b009      	add	sp, #36	; 0x24
 23f9e6c:	ecbd 8b02 	vpop	{d8}
 23f9e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23f9e74:	463e      	mov	r6, r7
 23f9e76:	4625      	mov	r5, r4
 23f9e78:	2401      	movs	r4, #1
 23f9e7a:	e7ca      	b.n	23f9e12 <__gethex+0xd2>
 23f9e7c:	f04f 0900 	mov.w	r9, #0
 23f9e80:	1cb1      	adds	r1, r6, #2
 23f9e82:	e7d3      	b.n	23f9e2c <__gethex+0xec>
 23f9e84:	f04f 0901 	mov.w	r9, #1
 23f9e88:	e7fa      	b.n	23f9e80 <__gethex+0x140>
 23f9e8a:	230a      	movs	r3, #10
 23f9e8c:	fb03 0202 	mla	r2, r3, r2, r0
 23f9e90:	3a10      	subs	r2, #16
 23f9e92:	e7d4      	b.n	23f9e3e <__gethex+0xfe>
 23f9e94:	4631      	mov	r1, r6
 23f9e96:	e7df      	b.n	23f9e58 <__gethex+0x118>
 23f9e98:	1bf3      	subs	r3, r6, r7
 23f9e9a:	4621      	mov	r1, r4
 23f9e9c:	3b01      	subs	r3, #1
 23f9e9e:	2b07      	cmp	r3, #7
 23f9ea0:	dc0b      	bgt.n	23f9eba <__gethex+0x17a>
 23f9ea2:	ee18 0a10 	vmov	r0, s16
 23f9ea6:	f000 fa69 	bl	23fa37c <_Balloc>
 23f9eaa:	4604      	mov	r4, r0
 23f9eac:	b940      	cbnz	r0, 23f9ec0 <__gethex+0x180>
 23f9eae:	4b5d      	ldr	r3, [pc, #372]	; (23fa024 <__gethex+0x2e4>)
 23f9eb0:	4602      	mov	r2, r0
 23f9eb2:	21de      	movs	r1, #222	; 0xde
 23f9eb4:	485c      	ldr	r0, [pc, #368]	; (23fa028 <__gethex+0x2e8>)
 23f9eb6:	f7fa fca3 	bl	23f4800 <__assert_func>
 23f9eba:	3101      	adds	r1, #1
 23f9ebc:	105b      	asrs	r3, r3, #1
 23f9ebe:	e7ee      	b.n	23f9e9e <__gethex+0x15e>
 23f9ec0:	f100 0914 	add.w	r9, r0, #20
 23f9ec4:	f04f 0b00 	mov.w	fp, #0
 23f9ec8:	f1ca 0301 	rsb	r3, sl, #1
 23f9ecc:	f8cd 9008 	str.w	r9, [sp, #8]
 23f9ed0:	f8cd b000 	str.w	fp, [sp]
 23f9ed4:	9306      	str	r3, [sp, #24]
 23f9ed6:	42b7      	cmp	r7, r6
 23f9ed8:	d340      	bcc.n	23f9f5c <__gethex+0x21c>
 23f9eda:	9802      	ldr	r0, [sp, #8]
 23f9edc:	9b00      	ldr	r3, [sp, #0]
 23f9ede:	f840 3b04 	str.w	r3, [r0], #4
 23f9ee2:	eba0 0009 	sub.w	r0, r0, r9
 23f9ee6:	1080      	asrs	r0, r0, #2
 23f9ee8:	0146      	lsls	r6, r0, #5
 23f9eea:	6120      	str	r0, [r4, #16]
 23f9eec:	4618      	mov	r0, r3
 23f9eee:	f000 fb39 	bl	23fa564 <__hi0bits>
 23f9ef2:	1a30      	subs	r0, r6, r0
 23f9ef4:	f8d8 6000 	ldr.w	r6, [r8]
 23f9ef8:	42b0      	cmp	r0, r6
 23f9efa:	dd63      	ble.n	23f9fc4 <__gethex+0x284>
 23f9efc:	1b87      	subs	r7, r0, r6
 23f9efe:	4620      	mov	r0, r4
 23f9f00:	4639      	mov	r1, r7
 23f9f02:	f000 fedf 	bl	23facc4 <__any_on>
 23f9f06:	4682      	mov	sl, r0
 23f9f08:	b1a8      	cbz	r0, 23f9f36 <__gethex+0x1f6>
 23f9f0a:	1e7b      	subs	r3, r7, #1
 23f9f0c:	f04f 0a01 	mov.w	sl, #1
 23f9f10:	1159      	asrs	r1, r3, #5
 23f9f12:	f003 021f 	and.w	r2, r3, #31
 23f9f16:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 23f9f1a:	fa0a f202 	lsl.w	r2, sl, r2
 23f9f1e:	420a      	tst	r2, r1
 23f9f20:	d009      	beq.n	23f9f36 <__gethex+0x1f6>
 23f9f22:	4553      	cmp	r3, sl
 23f9f24:	dd05      	ble.n	23f9f32 <__gethex+0x1f2>
 23f9f26:	1eb9      	subs	r1, r7, #2
 23f9f28:	4620      	mov	r0, r4
 23f9f2a:	f000 fecb 	bl	23facc4 <__any_on>
 23f9f2e:	2800      	cmp	r0, #0
 23f9f30:	d145      	bne.n	23f9fbe <__gethex+0x27e>
 23f9f32:	f04f 0a02 	mov.w	sl, #2
 23f9f36:	443d      	add	r5, r7
 23f9f38:	4639      	mov	r1, r7
 23f9f3a:	4620      	mov	r0, r4
 23f9f3c:	f7ff fe9a 	bl	23f9c74 <rshift>
 23f9f40:	f8d8 3008 	ldr.w	r3, [r8, #8]
 23f9f44:	42ab      	cmp	r3, r5
 23f9f46:	da4c      	bge.n	23f9fe2 <__gethex+0x2a2>
 23f9f48:	4621      	mov	r1, r4
 23f9f4a:	ee18 0a10 	vmov	r0, s16
 23f9f4e:	f000 fa55 	bl	23fa3fc <_Bfree>
 23f9f52:	2300      	movs	r3, #0
 23f9f54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23f9f56:	27a3      	movs	r7, #163	; 0xa3
 23f9f58:	6013      	str	r3, [r2, #0]
 23f9f5a:	e785      	b.n	23f9e68 <__gethex+0x128>
 23f9f5c:	1e73      	subs	r3, r6, #1
 23f9f5e:	9a05      	ldr	r2, [sp, #20]
 23f9f60:	9303      	str	r3, [sp, #12]
 23f9f62:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 23f9f66:	4293      	cmp	r3, r2
 23f9f68:	d019      	beq.n	23f9f9e <__gethex+0x25e>
 23f9f6a:	f1bb 0f20 	cmp.w	fp, #32
 23f9f6e:	d107      	bne.n	23f9f80 <__gethex+0x240>
 23f9f70:	9b02      	ldr	r3, [sp, #8]
 23f9f72:	9a00      	ldr	r2, [sp, #0]
 23f9f74:	f843 2b04 	str.w	r2, [r3], #4
 23f9f78:	9302      	str	r3, [sp, #8]
 23f9f7a:	2300      	movs	r3, #0
 23f9f7c:	469b      	mov	fp, r3
 23f9f7e:	9300      	str	r3, [sp, #0]
 23f9f80:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 23f9f84:	f7ff fec7 	bl	23f9d16 <__hexdig_fun>
 23f9f88:	f000 000f 	and.w	r0, r0, #15
 23f9f8c:	9b00      	ldr	r3, [sp, #0]
 23f9f8e:	fa00 f00b 	lsl.w	r0, r0, fp
 23f9f92:	f10b 0b04 	add.w	fp, fp, #4
 23f9f96:	4303      	orrs	r3, r0
 23f9f98:	9300      	str	r3, [sp, #0]
 23f9f9a:	9b03      	ldr	r3, [sp, #12]
 23f9f9c:	e00d      	b.n	23f9fba <__gethex+0x27a>
 23f9f9e:	9b03      	ldr	r3, [sp, #12]
 23f9fa0:	9a06      	ldr	r2, [sp, #24]
 23f9fa2:	4413      	add	r3, r2
 23f9fa4:	42bb      	cmp	r3, r7
 23f9fa6:	d3e0      	bcc.n	23f9f6a <__gethex+0x22a>
 23f9fa8:	4618      	mov	r0, r3
 23f9faa:	4652      	mov	r2, sl
 23f9fac:	9901      	ldr	r1, [sp, #4]
 23f9fae:	9307      	str	r3, [sp, #28]
 23f9fb0:	f7fe ff1b 	bl	23f8dea <strncmp>
 23f9fb4:	9b07      	ldr	r3, [sp, #28]
 23f9fb6:	2800      	cmp	r0, #0
 23f9fb8:	d1d7      	bne.n	23f9f6a <__gethex+0x22a>
 23f9fba:	461e      	mov	r6, r3
 23f9fbc:	e78b      	b.n	23f9ed6 <__gethex+0x196>
 23f9fbe:	f04f 0a03 	mov.w	sl, #3
 23f9fc2:	e7b8      	b.n	23f9f36 <__gethex+0x1f6>
 23f9fc4:	da0a      	bge.n	23f9fdc <__gethex+0x29c>
 23f9fc6:	1a37      	subs	r7, r6, r0
 23f9fc8:	4621      	mov	r1, r4
 23f9fca:	ee18 0a10 	vmov	r0, s16
 23f9fce:	463a      	mov	r2, r7
 23f9fd0:	1bed      	subs	r5, r5, r7
 23f9fd2:	f000 fc2f 	bl	23fa834 <__lshift>
 23f9fd6:	4604      	mov	r4, r0
 23f9fd8:	f100 0914 	add.w	r9, r0, #20
 23f9fdc:	f04f 0a00 	mov.w	sl, #0
 23f9fe0:	e7ae      	b.n	23f9f40 <__gethex+0x200>
 23f9fe2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 23f9fe6:	42a8      	cmp	r0, r5
 23f9fe8:	dd72      	ble.n	23fa0d0 <__gethex+0x390>
 23f9fea:	1b45      	subs	r5, r0, r5
 23f9fec:	42ae      	cmp	r6, r5
 23f9fee:	dc35      	bgt.n	23fa05c <__gethex+0x31c>
 23f9ff0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 23f9ff4:	2b02      	cmp	r3, #2
 23f9ff6:	d029      	beq.n	23fa04c <__gethex+0x30c>
 23f9ff8:	2b03      	cmp	r3, #3
 23f9ffa:	d02b      	beq.n	23fa054 <__gethex+0x314>
 23f9ffc:	2b01      	cmp	r3, #1
 23f9ffe:	d11b      	bne.n	23fa038 <__gethex+0x2f8>
 23fa000:	42ae      	cmp	r6, r5
 23fa002:	d119      	bne.n	23fa038 <__gethex+0x2f8>
 23fa004:	2e01      	cmp	r6, #1
 23fa006:	d111      	bne.n	23fa02c <__gethex+0x2ec>
 23fa008:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23fa00c:	2762      	movs	r7, #98	; 0x62
 23fa00e:	9a04      	ldr	r2, [sp, #16]
 23fa010:	6013      	str	r3, [r2, #0]
 23fa012:	2301      	movs	r3, #1
 23fa014:	6123      	str	r3, [r4, #16]
 23fa016:	f8c9 3000 	str.w	r3, [r9]
 23fa01a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23fa01c:	601c      	str	r4, [r3, #0]
 23fa01e:	e723      	b.n	23f9e68 <__gethex+0x128>
 23fa020:	023ffe64 	.word	0x023ffe64
 23fa024:	023ffdf1 	.word	0x023ffdf1
 23fa028:	023ffe02 	.word	0x023ffe02
 23fa02c:	1e71      	subs	r1, r6, #1
 23fa02e:	4620      	mov	r0, r4
 23fa030:	f000 fe48 	bl	23facc4 <__any_on>
 23fa034:	2800      	cmp	r0, #0
 23fa036:	d1e7      	bne.n	23fa008 <__gethex+0x2c8>
 23fa038:	4621      	mov	r1, r4
 23fa03a:	ee18 0a10 	vmov	r0, s16
 23fa03e:	f000 f9dd 	bl	23fa3fc <_Bfree>
 23fa042:	2300      	movs	r3, #0
 23fa044:	9a14      	ldr	r2, [sp, #80]	; 0x50
 23fa046:	2750      	movs	r7, #80	; 0x50
 23fa048:	6013      	str	r3, [r2, #0]
 23fa04a:	e70d      	b.n	23f9e68 <__gethex+0x128>
 23fa04c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fa04e:	2b00      	cmp	r3, #0
 23fa050:	d1f2      	bne.n	23fa038 <__gethex+0x2f8>
 23fa052:	e7d9      	b.n	23fa008 <__gethex+0x2c8>
 23fa054:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fa056:	2b00      	cmp	r3, #0
 23fa058:	d1d6      	bne.n	23fa008 <__gethex+0x2c8>
 23fa05a:	e7ed      	b.n	23fa038 <__gethex+0x2f8>
 23fa05c:	1e6f      	subs	r7, r5, #1
 23fa05e:	f1ba 0f00 	cmp.w	sl, #0
 23fa062:	d132      	bne.n	23fa0ca <__gethex+0x38a>
 23fa064:	b127      	cbz	r7, 23fa070 <__gethex+0x330>
 23fa066:	4639      	mov	r1, r7
 23fa068:	4620      	mov	r0, r4
 23fa06a:	f000 fe2b 	bl	23facc4 <__any_on>
 23fa06e:	4682      	mov	sl, r0
 23fa070:	117b      	asrs	r3, r7, #5
 23fa072:	2101      	movs	r1, #1
 23fa074:	f007 071f 	and.w	r7, r7, #31
 23fa078:	4620      	mov	r0, r4
 23fa07a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 23fa07e:	1b76      	subs	r6, r6, r5
 23fa080:	fa01 f707 	lsl.w	r7, r1, r7
 23fa084:	4629      	mov	r1, r5
 23fa086:	421f      	tst	r7, r3
 23fa088:	f04f 0702 	mov.w	r7, #2
 23fa08c:	bf18      	it	ne
 23fa08e:	f04a 0a02 	orrne.w	sl, sl, #2
 23fa092:	f7ff fdef 	bl	23f9c74 <rshift>
 23fa096:	f8d8 5004 	ldr.w	r5, [r8, #4]
 23fa09a:	f1ba 0f00 	cmp.w	sl, #0
 23fa09e:	d048      	beq.n	23fa132 <__gethex+0x3f2>
 23fa0a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 23fa0a4:	2b02      	cmp	r3, #2
 23fa0a6:	d015      	beq.n	23fa0d4 <__gethex+0x394>
 23fa0a8:	2b03      	cmp	r3, #3
 23fa0aa:	d017      	beq.n	23fa0dc <__gethex+0x39c>
 23fa0ac:	2b01      	cmp	r3, #1
 23fa0ae:	d109      	bne.n	23fa0c4 <__gethex+0x384>
 23fa0b0:	f01a 0f02 	tst.w	sl, #2
 23fa0b4:	d006      	beq.n	23fa0c4 <__gethex+0x384>
 23fa0b6:	f8d9 0000 	ldr.w	r0, [r9]
 23fa0ba:	ea4a 0a00 	orr.w	sl, sl, r0
 23fa0be:	f01a 0f01 	tst.w	sl, #1
 23fa0c2:	d10e      	bne.n	23fa0e2 <__gethex+0x3a2>
 23fa0c4:	f047 0710 	orr.w	r7, r7, #16
 23fa0c8:	e033      	b.n	23fa132 <__gethex+0x3f2>
 23fa0ca:	f04f 0a01 	mov.w	sl, #1
 23fa0ce:	e7cf      	b.n	23fa070 <__gethex+0x330>
 23fa0d0:	2701      	movs	r7, #1
 23fa0d2:	e7e2      	b.n	23fa09a <__gethex+0x35a>
 23fa0d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fa0d6:	f1c3 0301 	rsb	r3, r3, #1
 23fa0da:	9315      	str	r3, [sp, #84]	; 0x54
 23fa0dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 23fa0de:	2b00      	cmp	r3, #0
 23fa0e0:	d0f0      	beq.n	23fa0c4 <__gethex+0x384>
 23fa0e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 23fa0e6:	f104 0314 	add.w	r3, r4, #20
 23fa0ea:	f04f 0c00 	mov.w	ip, #0
 23fa0ee:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 23fa0f2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 23fa0f6:	4618      	mov	r0, r3
 23fa0f8:	f853 2b04 	ldr.w	r2, [r3], #4
 23fa0fc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 23fa100:	d01c      	beq.n	23fa13c <__gethex+0x3fc>
 23fa102:	3201      	adds	r2, #1
 23fa104:	6002      	str	r2, [r0, #0]
 23fa106:	2f02      	cmp	r7, #2
 23fa108:	f104 0314 	add.w	r3, r4, #20
 23fa10c:	d13f      	bne.n	23fa18e <__gethex+0x44e>
 23fa10e:	f8d8 2000 	ldr.w	r2, [r8]
 23fa112:	3a01      	subs	r2, #1
 23fa114:	42b2      	cmp	r2, r6
 23fa116:	d10a      	bne.n	23fa12e <__gethex+0x3ee>
 23fa118:	1171      	asrs	r1, r6, #5
 23fa11a:	2201      	movs	r2, #1
 23fa11c:	f006 061f 	and.w	r6, r6, #31
 23fa120:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 23fa124:	fa02 f606 	lsl.w	r6, r2, r6
 23fa128:	421e      	tst	r6, r3
 23fa12a:	bf18      	it	ne
 23fa12c:	4617      	movne	r7, r2
 23fa12e:	f047 0720 	orr.w	r7, r7, #32
 23fa132:	9b14      	ldr	r3, [sp, #80]	; 0x50
 23fa134:	601c      	str	r4, [r3, #0]
 23fa136:	9b04      	ldr	r3, [sp, #16]
 23fa138:	601d      	str	r5, [r3, #0]
 23fa13a:	e695      	b.n	23f9e68 <__gethex+0x128>
 23fa13c:	4299      	cmp	r1, r3
 23fa13e:	f843 cc04 	str.w	ip, [r3, #-4]
 23fa142:	d8d8      	bhi.n	23fa0f6 <__gethex+0x3b6>
 23fa144:	68a3      	ldr	r3, [r4, #8]
 23fa146:	459b      	cmp	fp, r3
 23fa148:	db19      	blt.n	23fa17e <__gethex+0x43e>
 23fa14a:	6861      	ldr	r1, [r4, #4]
 23fa14c:	ee18 0a10 	vmov	r0, s16
 23fa150:	3101      	adds	r1, #1
 23fa152:	f000 f913 	bl	23fa37c <_Balloc>
 23fa156:	4681      	mov	r9, r0
 23fa158:	b918      	cbnz	r0, 23fa162 <__gethex+0x422>
 23fa15a:	4b1b      	ldr	r3, [pc, #108]	; (23fa1c8 <__gethex+0x488>)
 23fa15c:	4602      	mov	r2, r0
 23fa15e:	2184      	movs	r1, #132	; 0x84
 23fa160:	e6a8      	b.n	23f9eb4 <__gethex+0x174>
 23fa162:	6922      	ldr	r2, [r4, #16]
 23fa164:	f104 010c 	add.w	r1, r4, #12
 23fa168:	300c      	adds	r0, #12
 23fa16a:	3202      	adds	r2, #2
 23fa16c:	0092      	lsls	r2, r2, #2
 23fa16e:	f7fe fdb1 	bl	23f8cd4 <memcpy>
 23fa172:	4621      	mov	r1, r4
 23fa174:	464c      	mov	r4, r9
 23fa176:	ee18 0a10 	vmov	r0, s16
 23fa17a:	f000 f93f 	bl	23fa3fc <_Bfree>
 23fa17e:	6923      	ldr	r3, [r4, #16]
 23fa180:	1c5a      	adds	r2, r3, #1
 23fa182:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 23fa186:	6122      	str	r2, [r4, #16]
 23fa188:	2201      	movs	r2, #1
 23fa18a:	615a      	str	r2, [r3, #20]
 23fa18c:	e7bb      	b.n	23fa106 <__gethex+0x3c6>
 23fa18e:	6922      	ldr	r2, [r4, #16]
 23fa190:	455a      	cmp	r2, fp
 23fa192:	dd0b      	ble.n	23fa1ac <__gethex+0x46c>
 23fa194:	2101      	movs	r1, #1
 23fa196:	4620      	mov	r0, r4
 23fa198:	f7ff fd6c 	bl	23f9c74 <rshift>
 23fa19c:	3501      	adds	r5, #1
 23fa19e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 23fa1a2:	42ab      	cmp	r3, r5
 23fa1a4:	f6ff aed0 	blt.w	23f9f48 <__gethex+0x208>
 23fa1a8:	2701      	movs	r7, #1
 23fa1aa:	e7c0      	b.n	23fa12e <__gethex+0x3ee>
 23fa1ac:	f016 061f 	ands.w	r6, r6, #31
 23fa1b0:	d0fa      	beq.n	23fa1a8 <__gethex+0x468>
 23fa1b2:	4453      	add	r3, sl
 23fa1b4:	f1c6 0620 	rsb	r6, r6, #32
 23fa1b8:	f853 0c04 	ldr.w	r0, [r3, #-4]
 23fa1bc:	f000 f9d2 	bl	23fa564 <__hi0bits>
 23fa1c0:	42b0      	cmp	r0, r6
 23fa1c2:	dbe7      	blt.n	23fa194 <__gethex+0x454>
 23fa1c4:	e7f0      	b.n	23fa1a8 <__gethex+0x468>
 23fa1c6:	bf00      	nop
 23fa1c8:	023ffdf1 	.word	0x023ffdf1

023fa1cc <L_shift>:
 23fa1cc:	f1c2 0208 	rsb	r2, r2, #8
 23fa1d0:	0092      	lsls	r2, r2, #2
 23fa1d2:	b570      	push	{r4, r5, r6, lr}
 23fa1d4:	f1c2 0620 	rsb	r6, r2, #32
 23fa1d8:	6843      	ldr	r3, [r0, #4]
 23fa1da:	6804      	ldr	r4, [r0, #0]
 23fa1dc:	fa03 f506 	lsl.w	r5, r3, r6
 23fa1e0:	40d3      	lsrs	r3, r2
 23fa1e2:	432c      	orrs	r4, r5
 23fa1e4:	6004      	str	r4, [r0, #0]
 23fa1e6:	f840 3f04 	str.w	r3, [r0, #4]!
 23fa1ea:	4288      	cmp	r0, r1
 23fa1ec:	d3f4      	bcc.n	23fa1d8 <L_shift+0xc>
 23fa1ee:	bd70      	pop	{r4, r5, r6, pc}

023fa1f0 <__match>:
 23fa1f0:	6803      	ldr	r3, [r0, #0]
 23fa1f2:	3301      	adds	r3, #1
 23fa1f4:	b530      	push	{r4, r5, lr}
 23fa1f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fa1fa:	b914      	cbnz	r4, 23fa202 <__match+0x12>
 23fa1fc:	6003      	str	r3, [r0, #0]
 23fa1fe:	2001      	movs	r0, #1
 23fa200:	bd30      	pop	{r4, r5, pc}
 23fa202:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fa206:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 23fa20a:	2d19      	cmp	r5, #25
 23fa20c:	bf98      	it	ls
 23fa20e:	3220      	addls	r2, #32
 23fa210:	42a2      	cmp	r2, r4
 23fa212:	d0f0      	beq.n	23fa1f6 <__match+0x6>
 23fa214:	2000      	movs	r0, #0
 23fa216:	e7f3      	b.n	23fa200 <__match+0x10>

023fa218 <__hexnan>:
 23fa218:	680b      	ldr	r3, [r1, #0]
 23fa21a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa21e:	115e      	asrs	r6, r3, #5
 23fa220:	f013 031f 	ands.w	r3, r3, #31
 23fa224:	f04f 0500 	mov.w	r5, #0
 23fa228:	b087      	sub	sp, #28
 23fa22a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 23fa22e:	4690      	mov	r8, r2
 23fa230:	4682      	mov	sl, r0
 23fa232:	6802      	ldr	r2, [r0, #0]
 23fa234:	bf18      	it	ne
 23fa236:	3604      	addne	r6, #4
 23fa238:	46ab      	mov	fp, r5
 23fa23a:	9301      	str	r3, [sp, #4]
 23fa23c:	1f37      	subs	r7, r6, #4
 23fa23e:	f846 5c04 	str.w	r5, [r6, #-4]
 23fa242:	9502      	str	r5, [sp, #8]
 23fa244:	46b9      	mov	r9, r7
 23fa246:	463c      	mov	r4, r7
 23fa248:	1c53      	adds	r3, r2, #1
 23fa24a:	7851      	ldrb	r1, [r2, #1]
 23fa24c:	9303      	str	r3, [sp, #12]
 23fa24e:	b341      	cbz	r1, 23fa2a2 <__hexnan+0x8a>
 23fa250:	4608      	mov	r0, r1
 23fa252:	9205      	str	r2, [sp, #20]
 23fa254:	9104      	str	r1, [sp, #16]
 23fa256:	f7ff fd5e 	bl	23f9d16 <__hexdig_fun>
 23fa25a:	2800      	cmp	r0, #0
 23fa25c:	d14f      	bne.n	23fa2fe <__hexnan+0xe6>
 23fa25e:	9904      	ldr	r1, [sp, #16]
 23fa260:	9a05      	ldr	r2, [sp, #20]
 23fa262:	2920      	cmp	r1, #32
 23fa264:	d818      	bhi.n	23fa298 <__hexnan+0x80>
 23fa266:	9b02      	ldr	r3, [sp, #8]
 23fa268:	459b      	cmp	fp, r3
 23fa26a:	dd13      	ble.n	23fa294 <__hexnan+0x7c>
 23fa26c:	454c      	cmp	r4, r9
 23fa26e:	d206      	bcs.n	23fa27e <__hexnan+0x66>
 23fa270:	2d07      	cmp	r5, #7
 23fa272:	dc04      	bgt.n	23fa27e <__hexnan+0x66>
 23fa274:	462a      	mov	r2, r5
 23fa276:	4649      	mov	r1, r9
 23fa278:	4620      	mov	r0, r4
 23fa27a:	f7ff ffa7 	bl	23fa1cc <L_shift>
 23fa27e:	4544      	cmp	r4, r8
 23fa280:	d94f      	bls.n	23fa322 <__hexnan+0x10a>
 23fa282:	2300      	movs	r3, #0
 23fa284:	f1a4 0904 	sub.w	r9, r4, #4
 23fa288:	f8cd b008 	str.w	fp, [sp, #8]
 23fa28c:	f844 3c04 	str.w	r3, [r4, #-4]
 23fa290:	461d      	mov	r5, r3
 23fa292:	464c      	mov	r4, r9
 23fa294:	9a03      	ldr	r2, [sp, #12]
 23fa296:	e7d7      	b.n	23fa248 <__hexnan+0x30>
 23fa298:	2929      	cmp	r1, #41	; 0x29
 23fa29a:	d155      	bne.n	23fa348 <__hexnan+0x130>
 23fa29c:	3202      	adds	r2, #2
 23fa29e:	f8ca 2000 	str.w	r2, [sl]
 23fa2a2:	f1bb 0f00 	cmp.w	fp, #0
 23fa2a6:	d04f      	beq.n	23fa348 <__hexnan+0x130>
 23fa2a8:	454c      	cmp	r4, r9
 23fa2aa:	d206      	bcs.n	23fa2ba <__hexnan+0xa2>
 23fa2ac:	2d07      	cmp	r5, #7
 23fa2ae:	dc04      	bgt.n	23fa2ba <__hexnan+0xa2>
 23fa2b0:	462a      	mov	r2, r5
 23fa2b2:	4649      	mov	r1, r9
 23fa2b4:	4620      	mov	r0, r4
 23fa2b6:	f7ff ff89 	bl	23fa1cc <L_shift>
 23fa2ba:	4544      	cmp	r4, r8
 23fa2bc:	d933      	bls.n	23fa326 <__hexnan+0x10e>
 23fa2be:	f1a8 0204 	sub.w	r2, r8, #4
 23fa2c2:	4623      	mov	r3, r4
 23fa2c4:	f853 1b04 	ldr.w	r1, [r3], #4
 23fa2c8:	429f      	cmp	r7, r3
 23fa2ca:	f842 1f04 	str.w	r1, [r2, #4]!
 23fa2ce:	d2f9      	bcs.n	23fa2c4 <__hexnan+0xac>
 23fa2d0:	1b3b      	subs	r3, r7, r4
 23fa2d2:	3e03      	subs	r6, #3
 23fa2d4:	3401      	adds	r4, #1
 23fa2d6:	2200      	movs	r2, #0
 23fa2d8:	f023 0303 	bic.w	r3, r3, #3
 23fa2dc:	3304      	adds	r3, #4
 23fa2de:	42b4      	cmp	r4, r6
 23fa2e0:	bf88      	it	hi
 23fa2e2:	2304      	movhi	r3, #4
 23fa2e4:	4443      	add	r3, r8
 23fa2e6:	f843 2b04 	str.w	r2, [r3], #4
 23fa2ea:	429f      	cmp	r7, r3
 23fa2ec:	d2fb      	bcs.n	23fa2e6 <__hexnan+0xce>
 23fa2ee:	683b      	ldr	r3, [r7, #0]
 23fa2f0:	b91b      	cbnz	r3, 23fa2fa <__hexnan+0xe2>
 23fa2f2:	4547      	cmp	r7, r8
 23fa2f4:	d126      	bne.n	23fa344 <__hexnan+0x12c>
 23fa2f6:	2301      	movs	r3, #1
 23fa2f8:	603b      	str	r3, [r7, #0]
 23fa2fa:	2005      	movs	r0, #5
 23fa2fc:	e025      	b.n	23fa34a <__hexnan+0x132>
 23fa2fe:	3501      	adds	r5, #1
 23fa300:	f10b 0b01 	add.w	fp, fp, #1
 23fa304:	2d08      	cmp	r5, #8
 23fa306:	dd05      	ble.n	23fa314 <__hexnan+0xfc>
 23fa308:	4544      	cmp	r4, r8
 23fa30a:	d9c3      	bls.n	23fa294 <__hexnan+0x7c>
 23fa30c:	2300      	movs	r3, #0
 23fa30e:	3c04      	subs	r4, #4
 23fa310:	2501      	movs	r5, #1
 23fa312:	6023      	str	r3, [r4, #0]
 23fa314:	6822      	ldr	r2, [r4, #0]
 23fa316:	f000 000f 	and.w	r0, r0, #15
 23fa31a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 23fa31e:	6022      	str	r2, [r4, #0]
 23fa320:	e7b8      	b.n	23fa294 <__hexnan+0x7c>
 23fa322:	2508      	movs	r5, #8
 23fa324:	e7b6      	b.n	23fa294 <__hexnan+0x7c>
 23fa326:	9b01      	ldr	r3, [sp, #4]
 23fa328:	2b00      	cmp	r3, #0
 23fa32a:	d0e0      	beq.n	23fa2ee <__hexnan+0xd6>
 23fa32c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fa330:	f1c3 0320 	rsb	r3, r3, #32
 23fa334:	fa22 f303 	lsr.w	r3, r2, r3
 23fa338:	f856 2c04 	ldr.w	r2, [r6, #-4]
 23fa33c:	401a      	ands	r2, r3
 23fa33e:	f846 2c04 	str.w	r2, [r6, #-4]
 23fa342:	e7d4      	b.n	23fa2ee <__hexnan+0xd6>
 23fa344:	3f04      	subs	r7, #4
 23fa346:	e7d2      	b.n	23fa2ee <__hexnan+0xd6>
 23fa348:	2004      	movs	r0, #4
 23fa34a:	b007      	add	sp, #28
 23fa34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fa350 <__retarget_lock_acquire_recursive>:
 23fa350:	4770      	bx	lr

023fa352 <__retarget_lock_release>:
 23fa352:	4770      	bx	lr

023fa354 <__retarget_lock_release_recursive>:
 23fa354:	4770      	bx	lr

023fa356 <__ascii_mbtowc>:
 23fa356:	b082      	sub	sp, #8
 23fa358:	b901      	cbnz	r1, 23fa35c <__ascii_mbtowc+0x6>
 23fa35a:	a901      	add	r1, sp, #4
 23fa35c:	b142      	cbz	r2, 23fa370 <__ascii_mbtowc+0x1a>
 23fa35e:	b14b      	cbz	r3, 23fa374 <__ascii_mbtowc+0x1e>
 23fa360:	7813      	ldrb	r3, [r2, #0]
 23fa362:	600b      	str	r3, [r1, #0]
 23fa364:	7812      	ldrb	r2, [r2, #0]
 23fa366:	1e10      	subs	r0, r2, #0
 23fa368:	bf18      	it	ne
 23fa36a:	2001      	movne	r0, #1
 23fa36c:	b002      	add	sp, #8
 23fa36e:	4770      	bx	lr
 23fa370:	4610      	mov	r0, r2
 23fa372:	e7fb      	b.n	23fa36c <__ascii_mbtowc+0x16>
 23fa374:	f06f 0001 	mvn.w	r0, #1
 23fa378:	e7f8      	b.n	23fa36c <__ascii_mbtowc+0x16>
	...

023fa37c <_Balloc>:
 23fa37c:	b570      	push	{r4, r5, r6, lr}
 23fa37e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 23fa380:	4604      	mov	r4, r0
 23fa382:	460d      	mov	r5, r1
 23fa384:	b976      	cbnz	r6, 23fa3a4 <_Balloc+0x28>
 23fa386:	2010      	movs	r0, #16
 23fa388:	f7fa f9d8 	bl	23f473c <malloc>
 23fa38c:	4602      	mov	r2, r0
 23fa38e:	6260      	str	r0, [r4, #36]	; 0x24
 23fa390:	b920      	cbnz	r0, 23fa39c <_Balloc+0x20>
 23fa392:	4b18      	ldr	r3, [pc, #96]	; (23fa3f4 <_Balloc+0x78>)
 23fa394:	2166      	movs	r1, #102	; 0x66
 23fa396:	4818      	ldr	r0, [pc, #96]	; (23fa3f8 <_Balloc+0x7c>)
 23fa398:	f7fa fa32 	bl	23f4800 <__assert_func>
 23fa39c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 23fa3a0:	6006      	str	r6, [r0, #0]
 23fa3a2:	60c6      	str	r6, [r0, #12]
 23fa3a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 23fa3a6:	68f3      	ldr	r3, [r6, #12]
 23fa3a8:	b183      	cbz	r3, 23fa3cc <_Balloc+0x50>
 23fa3aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fa3ac:	68db      	ldr	r3, [r3, #12]
 23fa3ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 23fa3b2:	b9b8      	cbnz	r0, 23fa3e4 <_Balloc+0x68>
 23fa3b4:	2101      	movs	r1, #1
 23fa3b6:	4620      	mov	r0, r4
 23fa3b8:	fa01 f605 	lsl.w	r6, r1, r5
 23fa3bc:	1d72      	adds	r2, r6, #5
 23fa3be:	0092      	lsls	r2, r2, #2
 23fa3c0:	f7fe fcb7 	bl	23f8d32 <_calloc_r>
 23fa3c4:	b160      	cbz	r0, 23fa3e0 <_Balloc+0x64>
 23fa3c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 23fa3ca:	e00e      	b.n	23fa3ea <_Balloc+0x6e>
 23fa3cc:	2221      	movs	r2, #33	; 0x21
 23fa3ce:	2104      	movs	r1, #4
 23fa3d0:	4620      	mov	r0, r4
 23fa3d2:	f7fe fcae 	bl	23f8d32 <_calloc_r>
 23fa3d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 23fa3d8:	60f0      	str	r0, [r6, #12]
 23fa3da:	68db      	ldr	r3, [r3, #12]
 23fa3dc:	2b00      	cmp	r3, #0
 23fa3de:	d1e4      	bne.n	23fa3aa <_Balloc+0x2e>
 23fa3e0:	2000      	movs	r0, #0
 23fa3e2:	bd70      	pop	{r4, r5, r6, pc}
 23fa3e4:	6802      	ldr	r2, [r0, #0]
 23fa3e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 23fa3ea:	2300      	movs	r3, #0
 23fa3ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 23fa3f0:	e7f7      	b.n	23fa3e2 <_Balloc+0x66>
 23fa3f2:	bf00      	nop
 23fa3f4:	023ffc28 	.word	0x023ffc28
 23fa3f8:	023ffe76 	.word	0x023ffe76

023fa3fc <_Bfree>:
 23fa3fc:	b570      	push	{r4, r5, r6, lr}
 23fa3fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 23fa400:	4605      	mov	r5, r0
 23fa402:	460c      	mov	r4, r1
 23fa404:	b976      	cbnz	r6, 23fa424 <_Bfree+0x28>
 23fa406:	2010      	movs	r0, #16
 23fa408:	f7fa f998 	bl	23f473c <malloc>
 23fa40c:	4602      	mov	r2, r0
 23fa40e:	6268      	str	r0, [r5, #36]	; 0x24
 23fa410:	b920      	cbnz	r0, 23fa41c <_Bfree+0x20>
 23fa412:	4b09      	ldr	r3, [pc, #36]	; (23fa438 <_Bfree+0x3c>)
 23fa414:	218a      	movs	r1, #138	; 0x8a
 23fa416:	4809      	ldr	r0, [pc, #36]	; (23fa43c <_Bfree+0x40>)
 23fa418:	f7fa f9f2 	bl	23f4800 <__assert_func>
 23fa41c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 23fa420:	6006      	str	r6, [r0, #0]
 23fa422:	60c6      	str	r6, [r0, #12]
 23fa424:	b13c      	cbz	r4, 23fa436 <_Bfree+0x3a>
 23fa426:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 23fa428:	6862      	ldr	r2, [r4, #4]
 23fa42a:	68db      	ldr	r3, [r3, #12]
 23fa42c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 23fa430:	6021      	str	r1, [r4, #0]
 23fa432:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 23fa436:	bd70      	pop	{r4, r5, r6, pc}
 23fa438:	023ffc28 	.word	0x023ffc28
 23fa43c:	023ffe76 	.word	0x023ffe76

023fa440 <__multadd>:
 23fa440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fa444:	f101 0c14 	add.w	ip, r1, #20
 23fa448:	4607      	mov	r7, r0
 23fa44a:	460c      	mov	r4, r1
 23fa44c:	461e      	mov	r6, r3
 23fa44e:	690d      	ldr	r5, [r1, #16]
 23fa450:	2000      	movs	r0, #0
 23fa452:	f8dc 3000 	ldr.w	r3, [ip]
 23fa456:	3001      	adds	r0, #1
 23fa458:	b299      	uxth	r1, r3
 23fa45a:	4285      	cmp	r5, r0
 23fa45c:	fb02 6101 	mla	r1, r2, r1, r6
 23fa460:	ea4f 4613 	mov.w	r6, r3, lsr #16
 23fa464:	ea4f 4311 	mov.w	r3, r1, lsr #16
 23fa468:	b289      	uxth	r1, r1
 23fa46a:	fb02 3306 	mla	r3, r2, r6, r3
 23fa46e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 23fa472:	ea4f 4613 	mov.w	r6, r3, lsr #16
 23fa476:	f84c 1b04 	str.w	r1, [ip], #4
 23fa47a:	dcea      	bgt.n	23fa452 <__multadd+0x12>
 23fa47c:	b30e      	cbz	r6, 23fa4c2 <__multadd+0x82>
 23fa47e:	68a3      	ldr	r3, [r4, #8]
 23fa480:	42ab      	cmp	r3, r5
 23fa482:	dc19      	bgt.n	23fa4b8 <__multadd+0x78>
 23fa484:	6861      	ldr	r1, [r4, #4]
 23fa486:	4638      	mov	r0, r7
 23fa488:	3101      	adds	r1, #1
 23fa48a:	f7ff ff77 	bl	23fa37c <_Balloc>
 23fa48e:	4680      	mov	r8, r0
 23fa490:	b928      	cbnz	r0, 23fa49e <__multadd+0x5e>
 23fa492:	4602      	mov	r2, r0
 23fa494:	4b0c      	ldr	r3, [pc, #48]	; (23fa4c8 <__multadd+0x88>)
 23fa496:	21b5      	movs	r1, #181	; 0xb5
 23fa498:	480c      	ldr	r0, [pc, #48]	; (23fa4cc <__multadd+0x8c>)
 23fa49a:	f7fa f9b1 	bl	23f4800 <__assert_func>
 23fa49e:	6922      	ldr	r2, [r4, #16]
 23fa4a0:	f104 010c 	add.w	r1, r4, #12
 23fa4a4:	300c      	adds	r0, #12
 23fa4a6:	3202      	adds	r2, #2
 23fa4a8:	0092      	lsls	r2, r2, #2
 23fa4aa:	f7fe fc13 	bl	23f8cd4 <memcpy>
 23fa4ae:	4621      	mov	r1, r4
 23fa4b0:	4644      	mov	r4, r8
 23fa4b2:	4638      	mov	r0, r7
 23fa4b4:	f7ff ffa2 	bl	23fa3fc <_Bfree>
 23fa4b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 23fa4bc:	3501      	adds	r5, #1
 23fa4be:	615e      	str	r6, [r3, #20]
 23fa4c0:	6125      	str	r5, [r4, #16]
 23fa4c2:	4620      	mov	r0, r4
 23fa4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fa4c8:	023ffdf1 	.word	0x023ffdf1
 23fa4cc:	023ffe76 	.word	0x023ffe76

023fa4d0 <__s2b>:
 23fa4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fa4d4:	4615      	mov	r5, r2
 23fa4d6:	461f      	mov	r7, r3
 23fa4d8:	2209      	movs	r2, #9
 23fa4da:	3308      	adds	r3, #8
 23fa4dc:	460c      	mov	r4, r1
 23fa4de:	4606      	mov	r6, r0
 23fa4e0:	2100      	movs	r1, #0
 23fa4e2:	fb93 f3f2 	sdiv	r3, r3, r2
 23fa4e6:	2201      	movs	r2, #1
 23fa4e8:	429a      	cmp	r2, r3
 23fa4ea:	db09      	blt.n	23fa500 <__s2b+0x30>
 23fa4ec:	4630      	mov	r0, r6
 23fa4ee:	f7ff ff45 	bl	23fa37c <_Balloc>
 23fa4f2:	b940      	cbnz	r0, 23fa506 <__s2b+0x36>
 23fa4f4:	4602      	mov	r2, r0
 23fa4f6:	4b19      	ldr	r3, [pc, #100]	; (23fa55c <__s2b+0x8c>)
 23fa4f8:	21ce      	movs	r1, #206	; 0xce
 23fa4fa:	4819      	ldr	r0, [pc, #100]	; (23fa560 <__s2b+0x90>)
 23fa4fc:	f7fa f980 	bl	23f4800 <__assert_func>
 23fa500:	0052      	lsls	r2, r2, #1
 23fa502:	3101      	adds	r1, #1
 23fa504:	e7f0      	b.n	23fa4e8 <__s2b+0x18>
 23fa506:	9b08      	ldr	r3, [sp, #32]
 23fa508:	2d09      	cmp	r5, #9
 23fa50a:	6143      	str	r3, [r0, #20]
 23fa50c:	f04f 0301 	mov.w	r3, #1
 23fa510:	6103      	str	r3, [r0, #16]
 23fa512:	dd16      	ble.n	23fa542 <__s2b+0x72>
 23fa514:	f104 0909 	add.w	r9, r4, #9
 23fa518:	442c      	add	r4, r5
 23fa51a:	46c8      	mov	r8, r9
 23fa51c:	f818 3b01 	ldrb.w	r3, [r8], #1
 23fa520:	4601      	mov	r1, r0
 23fa522:	220a      	movs	r2, #10
 23fa524:	4630      	mov	r0, r6
 23fa526:	3b30      	subs	r3, #48	; 0x30
 23fa528:	f7ff ff8a 	bl	23fa440 <__multadd>
 23fa52c:	45a0      	cmp	r8, r4
 23fa52e:	d1f5      	bne.n	23fa51c <__s2b+0x4c>
 23fa530:	f1a5 0408 	sub.w	r4, r5, #8
 23fa534:	444c      	add	r4, r9
 23fa536:	1b2d      	subs	r5, r5, r4
 23fa538:	1963      	adds	r3, r4, r5
 23fa53a:	42bb      	cmp	r3, r7
 23fa53c:	db04      	blt.n	23fa548 <__s2b+0x78>
 23fa53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fa542:	340a      	adds	r4, #10
 23fa544:	2509      	movs	r5, #9
 23fa546:	e7f6      	b.n	23fa536 <__s2b+0x66>
 23fa548:	f814 3b01 	ldrb.w	r3, [r4], #1
 23fa54c:	4601      	mov	r1, r0
 23fa54e:	220a      	movs	r2, #10
 23fa550:	4630      	mov	r0, r6
 23fa552:	3b30      	subs	r3, #48	; 0x30
 23fa554:	f7ff ff74 	bl	23fa440 <__multadd>
 23fa558:	e7ee      	b.n	23fa538 <__s2b+0x68>
 23fa55a:	bf00      	nop
 23fa55c:	023ffdf1 	.word	0x023ffdf1
 23fa560:	023ffe76 	.word	0x023ffe76

023fa564 <__hi0bits>:
 23fa564:	0c03      	lsrs	r3, r0, #16
 23fa566:	041b      	lsls	r3, r3, #16
 23fa568:	b9d3      	cbnz	r3, 23fa5a0 <__hi0bits+0x3c>
 23fa56a:	0400      	lsls	r0, r0, #16
 23fa56c:	2310      	movs	r3, #16
 23fa56e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 23fa572:	bf04      	itt	eq
 23fa574:	0200      	lsleq	r0, r0, #8
 23fa576:	3308      	addeq	r3, #8
 23fa578:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 23fa57c:	bf04      	itt	eq
 23fa57e:	0100      	lsleq	r0, r0, #4
 23fa580:	3304      	addeq	r3, #4
 23fa582:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 23fa586:	bf04      	itt	eq
 23fa588:	0080      	lsleq	r0, r0, #2
 23fa58a:	3302      	addeq	r3, #2
 23fa58c:	2800      	cmp	r0, #0
 23fa58e:	db05      	blt.n	23fa59c <__hi0bits+0x38>
 23fa590:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 23fa594:	f103 0301 	add.w	r3, r3, #1
 23fa598:	bf08      	it	eq
 23fa59a:	2320      	moveq	r3, #32
 23fa59c:	4618      	mov	r0, r3
 23fa59e:	4770      	bx	lr
 23fa5a0:	2300      	movs	r3, #0
 23fa5a2:	e7e4      	b.n	23fa56e <__hi0bits+0xa>

023fa5a4 <__lo0bits>:
 23fa5a4:	6803      	ldr	r3, [r0, #0]
 23fa5a6:	4601      	mov	r1, r0
 23fa5a8:	f013 0207 	ands.w	r2, r3, #7
 23fa5ac:	d00b      	beq.n	23fa5c6 <__lo0bits+0x22>
 23fa5ae:	07da      	lsls	r2, r3, #31
 23fa5b0:	d423      	bmi.n	23fa5fa <__lo0bits+0x56>
 23fa5b2:	0798      	lsls	r0, r3, #30
 23fa5b4:	bf47      	ittee	mi
 23fa5b6:	085b      	lsrmi	r3, r3, #1
 23fa5b8:	2001      	movmi	r0, #1
 23fa5ba:	089b      	lsrpl	r3, r3, #2
 23fa5bc:	2002      	movpl	r0, #2
 23fa5be:	bf4c      	ite	mi
 23fa5c0:	600b      	strmi	r3, [r1, #0]
 23fa5c2:	600b      	strpl	r3, [r1, #0]
 23fa5c4:	4770      	bx	lr
 23fa5c6:	b298      	uxth	r0, r3
 23fa5c8:	b9a8      	cbnz	r0, 23fa5f6 <__lo0bits+0x52>
 23fa5ca:	0c1b      	lsrs	r3, r3, #16
 23fa5cc:	2010      	movs	r0, #16
 23fa5ce:	b2da      	uxtb	r2, r3
 23fa5d0:	b90a      	cbnz	r2, 23fa5d6 <__lo0bits+0x32>
 23fa5d2:	3008      	adds	r0, #8
 23fa5d4:	0a1b      	lsrs	r3, r3, #8
 23fa5d6:	071a      	lsls	r2, r3, #28
 23fa5d8:	bf04      	itt	eq
 23fa5da:	091b      	lsreq	r3, r3, #4
 23fa5dc:	3004      	addeq	r0, #4
 23fa5de:	079a      	lsls	r2, r3, #30
 23fa5e0:	bf04      	itt	eq
 23fa5e2:	089b      	lsreq	r3, r3, #2
 23fa5e4:	3002      	addeq	r0, #2
 23fa5e6:	07da      	lsls	r2, r3, #31
 23fa5e8:	d403      	bmi.n	23fa5f2 <__lo0bits+0x4e>
 23fa5ea:	085b      	lsrs	r3, r3, #1
 23fa5ec:	f100 0001 	add.w	r0, r0, #1
 23fa5f0:	d005      	beq.n	23fa5fe <__lo0bits+0x5a>
 23fa5f2:	600b      	str	r3, [r1, #0]
 23fa5f4:	4770      	bx	lr
 23fa5f6:	4610      	mov	r0, r2
 23fa5f8:	e7e9      	b.n	23fa5ce <__lo0bits+0x2a>
 23fa5fa:	2000      	movs	r0, #0
 23fa5fc:	4770      	bx	lr
 23fa5fe:	2020      	movs	r0, #32
 23fa600:	4770      	bx	lr
	...

023fa604 <__i2b>:
 23fa604:	b510      	push	{r4, lr}
 23fa606:	460c      	mov	r4, r1
 23fa608:	2101      	movs	r1, #1
 23fa60a:	f7ff feb7 	bl	23fa37c <_Balloc>
 23fa60e:	4602      	mov	r2, r0
 23fa610:	b928      	cbnz	r0, 23fa61e <__i2b+0x1a>
 23fa612:	4b05      	ldr	r3, [pc, #20]	; (23fa628 <__i2b+0x24>)
 23fa614:	f44f 71a0 	mov.w	r1, #320	; 0x140
 23fa618:	4804      	ldr	r0, [pc, #16]	; (23fa62c <__i2b+0x28>)
 23fa61a:	f7fa f8f1 	bl	23f4800 <__assert_func>
 23fa61e:	2301      	movs	r3, #1
 23fa620:	6144      	str	r4, [r0, #20]
 23fa622:	6103      	str	r3, [r0, #16]
 23fa624:	bd10      	pop	{r4, pc}
 23fa626:	bf00      	nop
 23fa628:	023ffdf1 	.word	0x023ffdf1
 23fa62c:	023ffe76 	.word	0x023ffe76

023fa630 <__multiply>:
 23fa630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa634:	4691      	mov	r9, r2
 23fa636:	690a      	ldr	r2, [r1, #16]
 23fa638:	460c      	mov	r4, r1
 23fa63a:	b085      	sub	sp, #20
 23fa63c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23fa640:	429a      	cmp	r2, r3
 23fa642:	bfbe      	ittt	lt
 23fa644:	460b      	movlt	r3, r1
 23fa646:	464c      	movlt	r4, r9
 23fa648:	4699      	movlt	r9, r3
 23fa64a:	6927      	ldr	r7, [r4, #16]
 23fa64c:	68a3      	ldr	r3, [r4, #8]
 23fa64e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 23fa652:	6861      	ldr	r1, [r4, #4]
 23fa654:	eb07 060a 	add.w	r6, r7, sl
 23fa658:	42b3      	cmp	r3, r6
 23fa65a:	bfb8      	it	lt
 23fa65c:	3101      	addlt	r1, #1
 23fa65e:	f7ff fe8d 	bl	23fa37c <_Balloc>
 23fa662:	b930      	cbnz	r0, 23fa672 <__multiply+0x42>
 23fa664:	4602      	mov	r2, r0
 23fa666:	4b44      	ldr	r3, [pc, #272]	; (23fa778 <__multiply+0x148>)
 23fa668:	f240 115d 	movw	r1, #349	; 0x15d
 23fa66c:	4843      	ldr	r0, [pc, #268]	; (23fa77c <__multiply+0x14c>)
 23fa66e:	f7fa f8c7 	bl	23f4800 <__assert_func>
 23fa672:	f100 0514 	add.w	r5, r0, #20
 23fa676:	2200      	movs	r2, #0
 23fa678:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 23fa67c:	462b      	mov	r3, r5
 23fa67e:	4543      	cmp	r3, r8
 23fa680:	d321      	bcc.n	23fa6c6 <__multiply+0x96>
 23fa682:	f104 0314 	add.w	r3, r4, #20
 23fa686:	f104 0115 	add.w	r1, r4, #21
 23fa68a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 23fa68e:	f109 0314 	add.w	r3, r9, #20
 23fa692:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 23fa696:	9202      	str	r2, [sp, #8]
 23fa698:	1b3a      	subs	r2, r7, r4
 23fa69a:	3a15      	subs	r2, #21
 23fa69c:	f022 0203 	bic.w	r2, r2, #3
 23fa6a0:	3204      	adds	r2, #4
 23fa6a2:	428f      	cmp	r7, r1
 23fa6a4:	bf38      	it	cc
 23fa6a6:	2204      	movcc	r2, #4
 23fa6a8:	9201      	str	r2, [sp, #4]
 23fa6aa:	9a02      	ldr	r2, [sp, #8]
 23fa6ac:	9303      	str	r3, [sp, #12]
 23fa6ae:	429a      	cmp	r2, r3
 23fa6b0:	d80c      	bhi.n	23fa6cc <__multiply+0x9c>
 23fa6b2:	2e00      	cmp	r6, #0
 23fa6b4:	dd03      	ble.n	23fa6be <__multiply+0x8e>
 23fa6b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 23fa6ba:	2b00      	cmp	r3, #0
 23fa6bc:	d05a      	beq.n	23fa774 <__multiply+0x144>
 23fa6be:	6106      	str	r6, [r0, #16]
 23fa6c0:	b005      	add	sp, #20
 23fa6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa6c6:	f843 2b04 	str.w	r2, [r3], #4
 23fa6ca:	e7d8      	b.n	23fa67e <__multiply+0x4e>
 23fa6cc:	f8b3 a000 	ldrh.w	sl, [r3]
 23fa6d0:	f1ba 0f00 	cmp.w	sl, #0
 23fa6d4:	d024      	beq.n	23fa720 <__multiply+0xf0>
 23fa6d6:	f104 0e14 	add.w	lr, r4, #20
 23fa6da:	46a9      	mov	r9, r5
 23fa6dc:	f04f 0c00 	mov.w	ip, #0
 23fa6e0:	f85e 2b04 	ldr.w	r2, [lr], #4
 23fa6e4:	f8d9 1000 	ldr.w	r1, [r9]
 23fa6e8:	fa1f fb82 	uxth.w	fp, r2
 23fa6ec:	4577      	cmp	r7, lr
 23fa6ee:	b289      	uxth	r1, r1
 23fa6f0:	fb0a 110b 	mla	r1, sl, fp, r1
 23fa6f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 23fa6f8:	f8d9 2000 	ldr.w	r2, [r9]
 23fa6fc:	4461      	add	r1, ip
 23fa6fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 23fa702:	fb0a c20b 	mla	r2, sl, fp, ip
 23fa706:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 23fa70a:	b289      	uxth	r1, r1
 23fa70c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 23fa710:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23fa714:	f849 1b04 	str.w	r1, [r9], #4
 23fa718:	d8e2      	bhi.n	23fa6e0 <__multiply+0xb0>
 23fa71a:	9a01      	ldr	r2, [sp, #4]
 23fa71c:	f845 c002 	str.w	ip, [r5, r2]
 23fa720:	9a03      	ldr	r2, [sp, #12]
 23fa722:	3304      	adds	r3, #4
 23fa724:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 23fa728:	f1b9 0f00 	cmp.w	r9, #0
 23fa72c:	d020      	beq.n	23fa770 <__multiply+0x140>
 23fa72e:	6829      	ldr	r1, [r5, #0]
 23fa730:	f104 0c14 	add.w	ip, r4, #20
 23fa734:	46ae      	mov	lr, r5
 23fa736:	f04f 0a00 	mov.w	sl, #0
 23fa73a:	f8bc b000 	ldrh.w	fp, [ip]
 23fa73e:	b289      	uxth	r1, r1
 23fa740:	f8be 2002 	ldrh.w	r2, [lr, #2]
 23fa744:	fb09 220b 	mla	r2, r9, fp, r2
 23fa748:	4492      	add	sl, r2
 23fa74a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 23fa74e:	f84e 1b04 	str.w	r1, [lr], #4
 23fa752:	f85c 2b04 	ldr.w	r2, [ip], #4
 23fa756:	f8be 1000 	ldrh.w	r1, [lr]
 23fa75a:	0c12      	lsrs	r2, r2, #16
 23fa75c:	4567      	cmp	r7, ip
 23fa75e:	fb09 1102 	mla	r1, r9, r2, r1
 23fa762:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 23fa766:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 23fa76a:	d8e6      	bhi.n	23fa73a <__multiply+0x10a>
 23fa76c:	9a01      	ldr	r2, [sp, #4]
 23fa76e:	50a9      	str	r1, [r5, r2]
 23fa770:	3504      	adds	r5, #4
 23fa772:	e79a      	b.n	23fa6aa <__multiply+0x7a>
 23fa774:	3e01      	subs	r6, #1
 23fa776:	e79c      	b.n	23fa6b2 <__multiply+0x82>
 23fa778:	023ffdf1 	.word	0x023ffdf1
 23fa77c:	023ffe76 	.word	0x023ffe76

023fa780 <__pow5mult>:
 23fa780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fa784:	4615      	mov	r5, r2
 23fa786:	f012 0203 	ands.w	r2, r2, #3
 23fa78a:	4606      	mov	r6, r0
 23fa78c:	460f      	mov	r7, r1
 23fa78e:	d007      	beq.n	23fa7a0 <__pow5mult+0x20>
 23fa790:	3a01      	subs	r2, #1
 23fa792:	4c25      	ldr	r4, [pc, #148]	; (23fa828 <__pow5mult+0xa8>)
 23fa794:	2300      	movs	r3, #0
 23fa796:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 23fa79a:	f7ff fe51 	bl	23fa440 <__multadd>
 23fa79e:	4607      	mov	r7, r0
 23fa7a0:	10ad      	asrs	r5, r5, #2
 23fa7a2:	d03d      	beq.n	23fa820 <__pow5mult+0xa0>
 23fa7a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 23fa7a6:	b97c      	cbnz	r4, 23fa7c8 <__pow5mult+0x48>
 23fa7a8:	2010      	movs	r0, #16
 23fa7aa:	f7f9 ffc7 	bl	23f473c <malloc>
 23fa7ae:	4602      	mov	r2, r0
 23fa7b0:	6270      	str	r0, [r6, #36]	; 0x24
 23fa7b2:	b928      	cbnz	r0, 23fa7c0 <__pow5mult+0x40>
 23fa7b4:	4b1d      	ldr	r3, [pc, #116]	; (23fa82c <__pow5mult+0xac>)
 23fa7b6:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 23fa7ba:	481d      	ldr	r0, [pc, #116]	; (23fa830 <__pow5mult+0xb0>)
 23fa7bc:	f7fa f820 	bl	23f4800 <__assert_func>
 23fa7c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fa7c4:	6004      	str	r4, [r0, #0]
 23fa7c6:	60c4      	str	r4, [r0, #12]
 23fa7c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 23fa7cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 23fa7d0:	b94c      	cbnz	r4, 23fa7e6 <__pow5mult+0x66>
 23fa7d2:	f240 2171 	movw	r1, #625	; 0x271
 23fa7d6:	4630      	mov	r0, r6
 23fa7d8:	f7ff ff14 	bl	23fa604 <__i2b>
 23fa7dc:	2300      	movs	r3, #0
 23fa7de:	4604      	mov	r4, r0
 23fa7e0:	f8c8 0008 	str.w	r0, [r8, #8]
 23fa7e4:	6003      	str	r3, [r0, #0]
 23fa7e6:	f04f 0900 	mov.w	r9, #0
 23fa7ea:	07eb      	lsls	r3, r5, #31
 23fa7ec:	d50a      	bpl.n	23fa804 <__pow5mult+0x84>
 23fa7ee:	4639      	mov	r1, r7
 23fa7f0:	4622      	mov	r2, r4
 23fa7f2:	4630      	mov	r0, r6
 23fa7f4:	f7ff ff1c 	bl	23fa630 <__multiply>
 23fa7f8:	4680      	mov	r8, r0
 23fa7fa:	4639      	mov	r1, r7
 23fa7fc:	4630      	mov	r0, r6
 23fa7fe:	4647      	mov	r7, r8
 23fa800:	f7ff fdfc 	bl	23fa3fc <_Bfree>
 23fa804:	106d      	asrs	r5, r5, #1
 23fa806:	d00b      	beq.n	23fa820 <__pow5mult+0xa0>
 23fa808:	6820      	ldr	r0, [r4, #0]
 23fa80a:	b938      	cbnz	r0, 23fa81c <__pow5mult+0x9c>
 23fa80c:	4622      	mov	r2, r4
 23fa80e:	4621      	mov	r1, r4
 23fa810:	4630      	mov	r0, r6
 23fa812:	f7ff ff0d 	bl	23fa630 <__multiply>
 23fa816:	6020      	str	r0, [r4, #0]
 23fa818:	f8c0 9000 	str.w	r9, [r0]
 23fa81c:	4604      	mov	r4, r0
 23fa81e:	e7e4      	b.n	23fa7ea <__pow5mult+0x6a>
 23fa820:	4638      	mov	r0, r7
 23fa822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fa826:	bf00      	nop
 23fa828:	023fffc0 	.word	0x023fffc0
 23fa82c:	023ffc28 	.word	0x023ffc28
 23fa830:	023ffe76 	.word	0x023ffe76

023fa834 <__lshift>:
 23fa834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fa838:	460c      	mov	r4, r1
 23fa83a:	4607      	mov	r7, r0
 23fa83c:	4691      	mov	r9, r2
 23fa83e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 23fa842:	6923      	ldr	r3, [r4, #16]
 23fa844:	6849      	ldr	r1, [r1, #4]
 23fa846:	eb03 1862 	add.w	r8, r3, r2, asr #5
 23fa84a:	68a3      	ldr	r3, [r4, #8]
 23fa84c:	f108 0601 	add.w	r6, r8, #1
 23fa850:	42b3      	cmp	r3, r6
 23fa852:	db0b      	blt.n	23fa86c <__lshift+0x38>
 23fa854:	4638      	mov	r0, r7
 23fa856:	f7ff fd91 	bl	23fa37c <_Balloc>
 23fa85a:	4605      	mov	r5, r0
 23fa85c:	b948      	cbnz	r0, 23fa872 <__lshift+0x3e>
 23fa85e:	4602      	mov	r2, r0
 23fa860:	4b2a      	ldr	r3, [pc, #168]	; (23fa90c <__lshift+0xd8>)
 23fa862:	f240 11d9 	movw	r1, #473	; 0x1d9
 23fa866:	482a      	ldr	r0, [pc, #168]	; (23fa910 <__lshift+0xdc>)
 23fa868:	f7f9 ffca 	bl	23f4800 <__assert_func>
 23fa86c:	3101      	adds	r1, #1
 23fa86e:	005b      	lsls	r3, r3, #1
 23fa870:	e7ee      	b.n	23fa850 <__lshift+0x1c>
 23fa872:	2300      	movs	r3, #0
 23fa874:	f100 0114 	add.w	r1, r0, #20
 23fa878:	f100 0210 	add.w	r2, r0, #16
 23fa87c:	4618      	mov	r0, r3
 23fa87e:	4553      	cmp	r3, sl
 23fa880:	db37      	blt.n	23fa8f2 <__lshift+0xbe>
 23fa882:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 23fa886:	f104 0314 	add.w	r3, r4, #20
 23fa88a:	6920      	ldr	r0, [r4, #16]
 23fa88c:	f019 091f 	ands.w	r9, r9, #31
 23fa890:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 23fa894:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 23fa898:	d02f      	beq.n	23fa8fa <__lshift+0xc6>
 23fa89a:	f1c9 0e20 	rsb	lr, r9, #32
 23fa89e:	468a      	mov	sl, r1
 23fa8a0:	f04f 0c00 	mov.w	ip, #0
 23fa8a4:	681a      	ldr	r2, [r3, #0]
 23fa8a6:	fa02 f209 	lsl.w	r2, r2, r9
 23fa8aa:	ea42 020c 	orr.w	r2, r2, ip
 23fa8ae:	f84a 2b04 	str.w	r2, [sl], #4
 23fa8b2:	f853 2b04 	ldr.w	r2, [r3], #4
 23fa8b6:	4298      	cmp	r0, r3
 23fa8b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 23fa8bc:	d8f2      	bhi.n	23fa8a4 <__lshift+0x70>
 23fa8be:	1b03      	subs	r3, r0, r4
 23fa8c0:	f104 0215 	add.w	r2, r4, #21
 23fa8c4:	3b15      	subs	r3, #21
 23fa8c6:	f023 0303 	bic.w	r3, r3, #3
 23fa8ca:	3304      	adds	r3, #4
 23fa8cc:	4290      	cmp	r0, r2
 23fa8ce:	bf38      	it	cc
 23fa8d0:	2304      	movcc	r3, #4
 23fa8d2:	f841 c003 	str.w	ip, [r1, r3]
 23fa8d6:	f1bc 0f00 	cmp.w	ip, #0
 23fa8da:	d001      	beq.n	23fa8e0 <__lshift+0xac>
 23fa8dc:	f108 0602 	add.w	r6, r8, #2
 23fa8e0:	3e01      	subs	r6, #1
 23fa8e2:	4638      	mov	r0, r7
 23fa8e4:	4621      	mov	r1, r4
 23fa8e6:	612e      	str	r6, [r5, #16]
 23fa8e8:	f7ff fd88 	bl	23fa3fc <_Bfree>
 23fa8ec:	4628      	mov	r0, r5
 23fa8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fa8f2:	3301      	adds	r3, #1
 23fa8f4:	f842 0f04 	str.w	r0, [r2, #4]!
 23fa8f8:	e7c1      	b.n	23fa87e <__lshift+0x4a>
 23fa8fa:	3904      	subs	r1, #4
 23fa8fc:	f853 2b04 	ldr.w	r2, [r3], #4
 23fa900:	4298      	cmp	r0, r3
 23fa902:	f841 2f04 	str.w	r2, [r1, #4]!
 23fa906:	d8f9      	bhi.n	23fa8fc <__lshift+0xc8>
 23fa908:	e7ea      	b.n	23fa8e0 <__lshift+0xac>
 23fa90a:	bf00      	nop
 23fa90c:	023ffdf1 	.word	0x023ffdf1
 23fa910:	023ffe76 	.word	0x023ffe76

023fa914 <__mcmp>:
 23fa914:	6902      	ldr	r2, [r0, #16]
 23fa916:	b530      	push	{r4, r5, lr}
 23fa918:	690c      	ldr	r4, [r1, #16]
 23fa91a:	1b12      	subs	r2, r2, r4
 23fa91c:	d10e      	bne.n	23fa93c <__mcmp+0x28>
 23fa91e:	f100 0314 	add.w	r3, r0, #20
 23fa922:	3114      	adds	r1, #20
 23fa924:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 23fa928:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 23fa92c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 23fa930:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 23fa934:	42a5      	cmp	r5, r4
 23fa936:	d003      	beq.n	23fa940 <__mcmp+0x2c>
 23fa938:	d305      	bcc.n	23fa946 <__mcmp+0x32>
 23fa93a:	2201      	movs	r2, #1
 23fa93c:	4610      	mov	r0, r2
 23fa93e:	bd30      	pop	{r4, r5, pc}
 23fa940:	4283      	cmp	r3, r0
 23fa942:	d3f3      	bcc.n	23fa92c <__mcmp+0x18>
 23fa944:	e7fa      	b.n	23fa93c <__mcmp+0x28>
 23fa946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fa94a:	e7f7      	b.n	23fa93c <__mcmp+0x28>

023fa94c <__mdiff>:
 23fa94c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa950:	460c      	mov	r4, r1
 23fa952:	4606      	mov	r6, r0
 23fa954:	4611      	mov	r1, r2
 23fa956:	4692      	mov	sl, r2
 23fa958:	4620      	mov	r0, r4
 23fa95a:	f7ff ffdb 	bl	23fa914 <__mcmp>
 23fa95e:	1e05      	subs	r5, r0, #0
 23fa960:	d110      	bne.n	23fa984 <__mdiff+0x38>
 23fa962:	4629      	mov	r1, r5
 23fa964:	4630      	mov	r0, r6
 23fa966:	f7ff fd09 	bl	23fa37c <_Balloc>
 23fa96a:	b930      	cbnz	r0, 23fa97a <__mdiff+0x2e>
 23fa96c:	4b3d      	ldr	r3, [pc, #244]	; (23faa64 <__mdiff+0x118>)
 23fa96e:	4602      	mov	r2, r0
 23fa970:	f240 2132 	movw	r1, #562	; 0x232
 23fa974:	483c      	ldr	r0, [pc, #240]	; (23faa68 <__mdiff+0x11c>)
 23fa976:	f7f9 ff43 	bl	23f4800 <__assert_func>
 23fa97a:	2301      	movs	r3, #1
 23fa97c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 23fa980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa984:	bfa4      	itt	ge
 23fa986:	4653      	movge	r3, sl
 23fa988:	46a2      	movge	sl, r4
 23fa98a:	4630      	mov	r0, r6
 23fa98c:	bfa8      	it	ge
 23fa98e:	2500      	movge	r5, #0
 23fa990:	f8da 1004 	ldr.w	r1, [sl, #4]
 23fa994:	bfac      	ite	ge
 23fa996:	461c      	movge	r4, r3
 23fa998:	2501      	movlt	r5, #1
 23fa99a:	f7ff fcef 	bl	23fa37c <_Balloc>
 23fa99e:	b920      	cbnz	r0, 23fa9aa <__mdiff+0x5e>
 23fa9a0:	4b30      	ldr	r3, [pc, #192]	; (23faa64 <__mdiff+0x118>)
 23fa9a2:	4602      	mov	r2, r0
 23fa9a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 23fa9a8:	e7e4      	b.n	23fa974 <__mdiff+0x28>
 23fa9aa:	f8da 7010 	ldr.w	r7, [sl, #16]
 23fa9ae:	f104 0914 	add.w	r9, r4, #20
 23fa9b2:	6926      	ldr	r6, [r4, #16]
 23fa9b4:	f100 0814 	add.w	r8, r0, #20
 23fa9b8:	60c5      	str	r5, [r0, #12]
 23fa9ba:	f10a 0514 	add.w	r5, sl, #20
 23fa9be:	f10a 0210 	add.w	r2, sl, #16
 23fa9c2:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 23fa9c6:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 23fa9ca:	46c2      	mov	sl, r8
 23fa9cc:	f04f 0c00 	mov.w	ip, #0
 23fa9d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 23fa9d4:	f859 3b04 	ldr.w	r3, [r9], #4
 23fa9d8:	fa1f f18b 	uxth.w	r1, fp
 23fa9dc:	454e      	cmp	r6, r9
 23fa9de:	448c      	add	ip, r1
 23fa9e0:	b299      	uxth	r1, r3
 23fa9e2:	ea4f 4313 	mov.w	r3, r3, lsr #16
 23fa9e6:	ebac 0101 	sub.w	r1, ip, r1
 23fa9ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 23fa9ee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 23fa9f2:	b289      	uxth	r1, r1
 23fa9f4:	ea4f 4c23 	mov.w	ip, r3, asr #16
 23fa9f8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 23fa9fc:	f84a 3b04 	str.w	r3, [sl], #4
 23faa00:	d8e6      	bhi.n	23fa9d0 <__mdiff+0x84>
 23faa02:	1b33      	subs	r3, r6, r4
 23faa04:	3415      	adds	r4, #21
 23faa06:	3b15      	subs	r3, #21
 23faa08:	f023 0303 	bic.w	r3, r3, #3
 23faa0c:	3304      	adds	r3, #4
 23faa0e:	42a6      	cmp	r6, r4
 23faa10:	bf38      	it	cc
 23faa12:	2304      	movcc	r3, #4
 23faa14:	441d      	add	r5, r3
 23faa16:	4443      	add	r3, r8
 23faa18:	462c      	mov	r4, r5
 23faa1a:	461e      	mov	r6, r3
 23faa1c:	4574      	cmp	r4, lr
 23faa1e:	d30e      	bcc.n	23faa3e <__mdiff+0xf2>
 23faa20:	f10e 0203 	add.w	r2, lr, #3
 23faa24:	1b52      	subs	r2, r2, r5
 23faa26:	3d03      	subs	r5, #3
 23faa28:	f022 0203 	bic.w	r2, r2, #3
 23faa2c:	45ae      	cmp	lr, r5
 23faa2e:	bf38      	it	cc
 23faa30:	2200      	movcc	r2, #0
 23faa32:	441a      	add	r2, r3
 23faa34:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 23faa38:	b18b      	cbz	r3, 23faa5e <__mdiff+0x112>
 23faa3a:	6107      	str	r7, [r0, #16]
 23faa3c:	e7a0      	b.n	23fa980 <__mdiff+0x34>
 23faa3e:	f854 8b04 	ldr.w	r8, [r4], #4
 23faa42:	fa1f f288 	uxth.w	r2, r8
 23faa46:	4462      	add	r2, ip
 23faa48:	1411      	asrs	r1, r2, #16
 23faa4a:	b292      	uxth	r2, r2
 23faa4c:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 23faa50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 23faa54:	ea4f 4c21 	mov.w	ip, r1, asr #16
 23faa58:	f846 2b04 	str.w	r2, [r6], #4
 23faa5c:	e7de      	b.n	23faa1c <__mdiff+0xd0>
 23faa5e:	3f01      	subs	r7, #1
 23faa60:	e7e8      	b.n	23faa34 <__mdiff+0xe8>
 23faa62:	bf00      	nop
 23faa64:	023ffdf1 	.word	0x023ffdf1
 23faa68:	023ffe76 	.word	0x023ffe76

023faa6c <__ulp>:
 23faa6c:	b082      	sub	sp, #8
 23faa6e:	4913      	ldr	r1, [pc, #76]	; (23faabc <__ulp+0x50>)
 23faa70:	ed8d 0b00 	vstr	d0, [sp]
 23faa74:	9b01      	ldr	r3, [sp, #4]
 23faa76:	4019      	ands	r1, r3
 23faa78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 23faa7c:	2900      	cmp	r1, #0
 23faa7e:	dd05      	ble.n	23faa8c <__ulp+0x20>
 23faa80:	2200      	movs	r2, #0
 23faa82:	460b      	mov	r3, r1
 23faa84:	ec43 2b10 	vmov	d0, r2, r3
 23faa88:	b002      	add	sp, #8
 23faa8a:	4770      	bx	lr
 23faa8c:	4249      	negs	r1, r1
 23faa8e:	2200      	movs	r2, #0
 23faa90:	2300      	movs	r3, #0
 23faa92:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 23faa96:	ea4f 5021 	mov.w	r0, r1, asr #20
 23faa9a:	da04      	bge.n	23faaa6 <__ulp+0x3a>
 23faa9c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 23faaa0:	fa41 f300 	asr.w	r3, r1, r0
 23faaa4:	e7ee      	b.n	23faa84 <__ulp+0x18>
 23faaa6:	f1a0 0114 	sub.w	r1, r0, #20
 23faaaa:	291e      	cmp	r1, #30
 23faaac:	bfd6      	itet	le
 23faaae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 23faab2:	2101      	movgt	r1, #1
 23faab4:	fa20 f101 	lsrle.w	r1, r0, r1
 23faab8:	460a      	mov	r2, r1
 23faaba:	e7e3      	b.n	23faa84 <__ulp+0x18>
 23faabc:	7ff00000 	.word	0x7ff00000

023faac0 <__b2d>:
 23faac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23faac2:	6905      	ldr	r5, [r0, #16]
 23faac4:	f100 0714 	add.w	r7, r0, #20
 23faac8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 23faacc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 23faad0:	1f2e      	subs	r6, r5, #4
 23faad2:	4620      	mov	r0, r4
 23faad4:	f7ff fd46 	bl	23fa564 <__hi0bits>
 23faad8:	f1c0 0320 	rsb	r3, r0, #32
 23faadc:	280a      	cmp	r0, #10
 23faade:	f8df c07c 	ldr.w	ip, [pc, #124]	; 23fab5c <__b2d+0x9c>
 23faae2:	600b      	str	r3, [r1, #0]
 23faae4:	dc15      	bgt.n	23fab12 <__b2d+0x52>
 23faae6:	f1c0 0e0b 	rsb	lr, r0, #11
 23faaea:	42b7      	cmp	r7, r6
 23faaec:	f100 0015 	add.w	r0, r0, #21
 23faaf0:	fa24 f10e 	lsr.w	r1, r4, lr
 23faaf4:	fa04 f000 	lsl.w	r0, r4, r0
 23faaf8:	ea41 030c 	orr.w	r3, r1, ip
 23faafc:	bf34      	ite	cc
 23faafe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 23fab02:	2100      	movcs	r1, #0
 23fab04:	fa21 f10e 	lsr.w	r1, r1, lr
 23fab08:	ea40 0201 	orr.w	r2, r0, r1
 23fab0c:	ec43 2b10 	vmov	d0, r2, r3
 23fab10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fab12:	42b7      	cmp	r7, r6
 23fab14:	bf3a      	itte	cc
 23fab16:	f1a5 0608 	subcc.w	r6, r5, #8
 23fab1a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 23fab1e:	2100      	movcs	r1, #0
 23fab20:	380b      	subs	r0, #11
 23fab22:	d017      	beq.n	23fab54 <__b2d+0x94>
 23fab24:	f1c0 0c20 	rsb	ip, r0, #32
 23fab28:	fa04 f500 	lsl.w	r5, r4, r0
 23fab2c:	42be      	cmp	r6, r7
 23fab2e:	fa01 f000 	lsl.w	r0, r1, r0
 23fab32:	fa21 f40c 	lsr.w	r4, r1, ip
 23fab36:	ea45 0504 	orr.w	r5, r5, r4
 23fab3a:	bf8c      	ite	hi
 23fab3c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 23fab40:	2400      	movls	r4, #0
 23fab42:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 23fab46:	fa24 f40c 	lsr.w	r4, r4, ip
 23fab4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 23fab4e:	ea40 0204 	orr.w	r2, r0, r4
 23fab52:	e7db      	b.n	23fab0c <__b2d+0x4c>
 23fab54:	ea44 030c 	orr.w	r3, r4, ip
 23fab58:	460a      	mov	r2, r1
 23fab5a:	e7d7      	b.n	23fab0c <__b2d+0x4c>
 23fab5c:	3ff00000 	.word	0x3ff00000

023fab60 <__d2b>:
 23fab60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fab64:	4689      	mov	r9, r1
 23fab66:	2101      	movs	r1, #1
 23fab68:	4690      	mov	r8, r2
 23fab6a:	ec57 6b10 	vmov	r6, r7, d0
 23fab6e:	f7ff fc05 	bl	23fa37c <_Balloc>
 23fab72:	4604      	mov	r4, r0
 23fab74:	b930      	cbnz	r0, 23fab84 <__d2b+0x24>
 23fab76:	4602      	mov	r2, r0
 23fab78:	4b25      	ldr	r3, [pc, #148]	; (23fac10 <__d2b+0xb0>)
 23fab7a:	f240 310a 	movw	r1, #778	; 0x30a
 23fab7e:	4825      	ldr	r0, [pc, #148]	; (23fac14 <__d2b+0xb4>)
 23fab80:	f7f9 fe3e 	bl	23f4800 <__assert_func>
 23fab84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 23fab88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 23fab8c:	bb35      	cbnz	r5, 23fabdc <__d2b+0x7c>
 23fab8e:	2e00      	cmp	r6, #0
 23fab90:	9301      	str	r3, [sp, #4]
 23fab92:	d028      	beq.n	23fabe6 <__d2b+0x86>
 23fab94:	4668      	mov	r0, sp
 23fab96:	9600      	str	r6, [sp, #0]
 23fab98:	f7ff fd04 	bl	23fa5a4 <__lo0bits>
 23fab9c:	9900      	ldr	r1, [sp, #0]
 23fab9e:	b300      	cbz	r0, 23fabe2 <__d2b+0x82>
 23faba0:	9a01      	ldr	r2, [sp, #4]
 23faba2:	f1c0 0320 	rsb	r3, r0, #32
 23faba6:	fa02 f303 	lsl.w	r3, r2, r3
 23fabaa:	40c2      	lsrs	r2, r0
 23fabac:	430b      	orrs	r3, r1
 23fabae:	9201      	str	r2, [sp, #4]
 23fabb0:	6163      	str	r3, [r4, #20]
 23fabb2:	9b01      	ldr	r3, [sp, #4]
 23fabb4:	2b00      	cmp	r3, #0
 23fabb6:	61a3      	str	r3, [r4, #24]
 23fabb8:	bf14      	ite	ne
 23fabba:	2202      	movne	r2, #2
 23fabbc:	2201      	moveq	r2, #1
 23fabbe:	6122      	str	r2, [r4, #16]
 23fabc0:	b1d5      	cbz	r5, 23fabf8 <__d2b+0x98>
 23fabc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 23fabc6:	4405      	add	r5, r0
 23fabc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 23fabcc:	f8c9 5000 	str.w	r5, [r9]
 23fabd0:	f8c8 0000 	str.w	r0, [r8]
 23fabd4:	4620      	mov	r0, r4
 23fabd6:	b003      	add	sp, #12
 23fabd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fabdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fabe0:	e7d5      	b.n	23fab8e <__d2b+0x2e>
 23fabe2:	6161      	str	r1, [r4, #20]
 23fabe4:	e7e5      	b.n	23fabb2 <__d2b+0x52>
 23fabe6:	a801      	add	r0, sp, #4
 23fabe8:	f7ff fcdc 	bl	23fa5a4 <__lo0bits>
 23fabec:	9b01      	ldr	r3, [sp, #4]
 23fabee:	2201      	movs	r2, #1
 23fabf0:	3020      	adds	r0, #32
 23fabf2:	6163      	str	r3, [r4, #20]
 23fabf4:	6122      	str	r2, [r4, #16]
 23fabf6:	e7e3      	b.n	23fabc0 <__d2b+0x60>
 23fabf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 23fabfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 23fac00:	f8c9 0000 	str.w	r0, [r9]
 23fac04:	6918      	ldr	r0, [r3, #16]
 23fac06:	f7ff fcad 	bl	23fa564 <__hi0bits>
 23fac0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 23fac0e:	e7df      	b.n	23fabd0 <__d2b+0x70>
 23fac10:	023ffdf1 	.word	0x023ffdf1
 23fac14:	023ffe76 	.word	0x023ffe76

023fac18 <__ratio>:
 23fac18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fac1c:	4688      	mov	r8, r1
 23fac1e:	4681      	mov	r9, r0
 23fac20:	4669      	mov	r1, sp
 23fac22:	f7ff ff4d 	bl	23faac0 <__b2d>
 23fac26:	a901      	add	r1, sp, #4
 23fac28:	4640      	mov	r0, r8
 23fac2a:	ec55 4b10 	vmov	r4, r5, d0
 23fac2e:	f7ff ff47 	bl	23faac0 <__b2d>
 23fac32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 23fac36:	f8d8 2010 	ldr.w	r2, [r8, #16]
 23fac3a:	462f      	mov	r7, r5
 23fac3c:	eba3 0c02 	sub.w	ip, r3, r2
 23fac40:	e9dd 3200 	ldrd	r3, r2, [sp]
 23fac44:	ec51 0b10 	vmov	r0, r1, d0
 23fac48:	1a9b      	subs	r3, r3, r2
 23fac4a:	468b      	mov	fp, r1
 23fac4c:	4620      	mov	r0, r4
 23fac4e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 23fac52:	2b00      	cmp	r3, #0
 23fac54:	bfd5      	itete	le
 23fac56:	460a      	movle	r2, r1
 23fac58:	462a      	movgt	r2, r5
 23fac5a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 23fac5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 23fac62:	bfd8      	it	le
 23fac64:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 23fac68:	ee10 2a10 	vmov	r2, s0
 23fac6c:	4639      	mov	r1, r7
 23fac6e:	465b      	mov	r3, fp
 23fac70:	f7ed f83c 	bl	23e7cec <__aeabi_ddiv>
 23fac74:	ec41 0b10 	vmov	d0, r0, r1
 23fac78:	b003      	add	sp, #12
 23fac7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fac7e <__copybits>:
 23fac7e:	3901      	subs	r1, #1
 23fac80:	f102 0314 	add.w	r3, r2, #20
 23fac84:	1149      	asrs	r1, r1, #5
 23fac86:	b570      	push	{r4, r5, r6, lr}
 23fac88:	3101      	adds	r1, #1
 23fac8a:	6914      	ldr	r4, [r2, #16]
 23fac8c:	1f05      	subs	r5, r0, #4
 23fac8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 23fac92:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 23fac96:	42a3      	cmp	r3, r4
 23fac98:	d30c      	bcc.n	23facb4 <__copybits+0x36>
 23fac9a:	1aa3      	subs	r3, r4, r2
 23fac9c:	3211      	adds	r2, #17
 23fac9e:	3b11      	subs	r3, #17
 23faca0:	f023 0303 	bic.w	r3, r3, #3
 23faca4:	42a2      	cmp	r2, r4
 23faca6:	bf88      	it	hi
 23faca8:	2300      	movhi	r3, #0
 23facaa:	4418      	add	r0, r3
 23facac:	2300      	movs	r3, #0
 23facae:	4288      	cmp	r0, r1
 23facb0:	d305      	bcc.n	23facbe <__copybits+0x40>
 23facb2:	bd70      	pop	{r4, r5, r6, pc}
 23facb4:	f853 6b04 	ldr.w	r6, [r3], #4
 23facb8:	f845 6f04 	str.w	r6, [r5, #4]!
 23facbc:	e7eb      	b.n	23fac96 <__copybits+0x18>
 23facbe:	f840 3b04 	str.w	r3, [r0], #4
 23facc2:	e7f4      	b.n	23facae <__copybits+0x30>

023facc4 <__any_on>:
 23facc4:	f100 0214 	add.w	r2, r0, #20
 23facc8:	114b      	asrs	r3, r1, #5
 23facca:	6900      	ldr	r0, [r0, #16]
 23faccc:	4298      	cmp	r0, r3
 23facce:	b510      	push	{r4, lr}
 23facd0:	db11      	blt.n	23facf6 <__any_on+0x32>
 23facd2:	dd0a      	ble.n	23facea <__any_on+0x26>
 23facd4:	f011 011f 	ands.w	r1, r1, #31
 23facd8:	d007      	beq.n	23facea <__any_on+0x26>
 23facda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 23facde:	fa24 f001 	lsr.w	r0, r4, r1
 23face2:	fa00 f101 	lsl.w	r1, r0, r1
 23face6:	428c      	cmp	r4, r1
 23face8:	d10b      	bne.n	23fad02 <__any_on+0x3e>
 23facea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 23facee:	4293      	cmp	r3, r2
 23facf0:	d803      	bhi.n	23facfa <__any_on+0x36>
 23facf2:	2000      	movs	r0, #0
 23facf4:	bd10      	pop	{r4, pc}
 23facf6:	4603      	mov	r3, r0
 23facf8:	e7f7      	b.n	23facea <__any_on+0x26>
 23facfa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 23facfe:	2900      	cmp	r1, #0
 23fad00:	d0f5      	beq.n	23facee <__any_on+0x2a>
 23fad02:	2001      	movs	r0, #1
 23fad04:	e7f6      	b.n	23facf4 <__any_on+0x30>

023fad06 <__ascii_wctomb>:
 23fad06:	b149      	cbz	r1, 23fad1c <__ascii_wctomb+0x16>
 23fad08:	2aff      	cmp	r2, #255	; 0xff
 23fad0a:	bf8d      	iteet	hi
 23fad0c:	238a      	movhi	r3, #138	; 0x8a
 23fad0e:	2001      	movls	r0, #1
 23fad10:	700a      	strbls	r2, [r1, #0]
 23fad12:	6003      	strhi	r3, [r0, #0]
 23fad14:	bf88      	it	hi
 23fad16:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 23fad1a:	4770      	bx	lr
 23fad1c:	4608      	mov	r0, r1
 23fad1e:	4770      	bx	lr

023fad20 <link_const_data_start>:
 23fad20:	0000000a 	.word	0x0000000a
 23fad24:	0000000a 	.word	0x0000000a
 23fad28:	0000000a 	.word	0x0000000a
 23fad2c:	0004c171 	.word	0x0004c171
 23fad30:	023fadd9 	.word	0x023fadd9
 23fad34:	023faddf 	.word	0x023faddf
 23fad38:	00000004 	.word	0x00000004
 23fad3c:	00000027 	.word	0x00000027
 23fad40:	0000003e 	.word	0x0000003e
 23fad44:	00000003 	.word	0x00000003
 23fad48:	000000ba 	.word	0x000000ba
	...
 23fad58:	41800000 	.word	0x41800000
 23fad5c:	427a0000 	.word	0x427a0000
 23fad60:	00000001 	.word	0x00000001
 23fad64:	1007a44c 	.word	0x1007a44c
	...
 23fad70:	000000ff 	.word	0x000000ff
 23fad74:	00000000 	.word	0x00000000
 23fad78:	00000004 	.word	0x00000004
 23fad7c:	00000001 	.word	0x00000001
 23fad80:	023fc910 	.word	0x023fc910
 23fad84:	00000002 	.word	0x00000002
 23fad88:	00000006 	.word	0x00000006
 23fad8c:	023fadf4 	.word	0x023fadf4
 23fad90:	0000000f 	.word	0x0000000f
 23fad94:	00000004 	.word	0x00000004
 23fad98:	00040000 	.word	0x00040000
 23fad9c:	00000001 	.word	0x00000001
 23fada0:	00000000 	.word	0x00000000
 23fada4:	3f4ccccd 	.word	0x3f4ccccd
	...
 23fadb0:	1007a43c 	.word	0x1007a43c

023fadb4 <dynalib_user>:
 23fadb4:	023e8549 023e8571 023e8575 00000000     I.>.q.>.u.>.....
 23fadc4:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23fadd4:	6c617574 61685300 70006e77 69747261     tual.Shawn.parti
 23fade4:	2d656c63 672d3270 75747365 00736572     cle-p2-gestures.
 23fadf4:	58636361 202b2020 59636361 202b2020     accX  + accY  + 
 23fae04:	5a636361 6f6e0020 3000656e 202c312e     accZ .none.0.1, 
 23fae14:	2c352e30 302e3120 2e32202c 35202c30     0.5, 1.0, 2.0, 5
 23fae24:	6900302e 00656c64 6b616e73 70750065     .0.idle.snake.up
 23fae34:	6e776f64 76617700 6f760065 7b206469     down.wave.void {
 23fae44:	6e6f6e61 756f6d79 3a3a7d73 615f6965     anonymous}::ei_a
 23fae54:	6e67696c 665f6465 28656572 64696f76     ligned_free(void
 23fae64:	2f00292a 72657355 68732f73 686e7761     *)./Users/shawnh
 23fae74:	6c656d79 6f72502f 7463656a 61502f73     ymel/Projects/Pa
 23fae84:	63697472 702f656c 69747261 2d656c63     rticle/particle-
 23fae94:	672d3270 75747365 5f736572 65666e69     p2-gestures_infe
 23faea4:	636e6572 2f676e69 6372732f 6764652f     rencing//src/edg
 23faeb4:	6d692d65 736c7570 64732d65 6c632f6b     e-impulse-sdk/cl
 23faec4:	69737361 72656966 5f69652f 67696c61     assifier/ei_alig
 23faed4:	5f64656e 6c6c616d 682e636f 66656400     ned_malloc.h.def
 23faee4:	746c7561 534d0020 534c0042 533c0042     ault .MSB.LSB.<S
 23faef4:	65534950 6e697474 64207367 75616665     PISettings defau
 23faf04:	003e746c 4950533c 74746553 73676e69     lt>.<SPISettings
 23faf14:	25732520 73252075 444f4d20 3e752545      %s%u %s MODE%u>
 23faf24:	52524500 6e69203a 20747570 736e6574     .ERR: input tens
 23faf34:	6820726f 73207361 20657a69 202c6425     or has size %d, 
 23faf44:	20747562 75706e69 616d2074 78697274     but input matrix
 23faf54:	73616820 73616820 7a697320 64252065      has has size %d
 23faf64:	5245000a 43203a52 6f6e6e61 61682074     ..ERR: Cannot ha
 23faf74:	656c646e 706e6920 74207475 20657079     ndle input type 
 23faf84:	29642528 5245000a 4d203a52 6c69626f     (%d)..ERR: Mobil
 23faf94:	74654e65 44535320 20736920 20746f6e     eNet SSD is not 
 23fafa4:	70707573 6574726f 6e692064 4e4f4520     supported in EON
 23fafb4:	20726f20 736e6554 6c46726f 4c20776f      or TensorFlow L
 23fafc4:	20657469 7263694d 45000a6f 203a5252     ite Micro..ERR: 
 23fafd4:	61766e49 2064696c 7074756f 74207475     Invalid output t
 23fafe4:	20657079 29642528 726f6620 4c4f5920     ype (%d) for YOL
 23faff4:	2035764f 7473616c 79616c20 000a7265     Ov5 last layer..
 23fb004:	3a525245 736e5520 6f707075 64657472     ERR: Unsupported
 23fb014:	6a626f20 20746365 65746564 6f697463      object detectio
 23fb024:	616c206e 6c207473 72657961 64252820     n last layer (%d
 23fb034:	25000a29 00093a73 6f766e49 6620656b     )..%s:..Invoke f
 23fb044:	656c6961 25282064 000a2964 64657250     ailed (%d)..Pred
 23fb054:	69746369 20736e6f 6d697428 25203a65     ictions (time: %
 23fb064:	736d2064 0a3a292e 67644500 6d492065     d ms.):..Edge Im
 23fb074:	736c7570 74732065 61646e61 656e6f6c     pulse standalone
 23fb084:	666e6920 6e657265 676e6963 32502820      inferencing (P2
 23fb094:	78652029 6c706d61 57000a65 69746961     ) example..Waiti
 23fb0a4:	6620676e 6120726f 6c656363 6d6f7265     ng for accelerom
 23fb0b4:	72657465 0d2e2e2e 6954000a 676e696d     eter......Timing
 23fb0c4:	5344203a 64252050 2c736d20 666e6920     : DSP %d ms, inf
 23fb0d4:	6e657265 25206563 736d2064 6e61202c     erence %d ms, an
 23fb0e4:	6c616d6f 64252079 0d736d20 7250000a     omaly %d ms...Pr
 23fb0f4:	63696465 6e6f6974 0a0d3a73 25202000     edictions:...  %
 23fb104:	00203a73 66352e25 46000a0d 656c6961     s: .%.5f...Faile
 23fb114:	6f742064 6c6c6120 7461636f 46542065     d to allocate TF
 23fb124:	6574694c 65726120 2820616e 20757a25     Lite arena (%zu 
 23fb134:	65747962 000a2973 65646f4d 7270206c     bytes)..Model pr
 23fb144:	6469766f 69206465 63732073 616d6568     ovided is schema
 23fb154:	72657620 6e6f6973 20642520 20746f6e      version %d not 
 23fb164:	61757165 6f74206c 70757320 74726f70     equal to support
 23fb174:	76206465 69737265 25206e6f 41002e64     ed version %d..A
 23fb184:	636f6c6c 54657461 6f736e65 29287372     llocateTensors()
 23fb194:	69616620 0064656c 79617247 6c616373      failed.Grayscal
 23fb1a4:	52450065 46203a52 656c6961 6f742064     e.ERR: Failed to
 23fb1b4:	6e757220 50534420 6f727020 73736563      run DSP process
 23fb1c4:	64252820 46000a29 75746165 20736572      (%d)..Features 
 23fb1d4:	20642528 292e736d 6300203a 6f6e6e61     (%d ms.): .canno
 23fb1e4:	72632074 65746165 64747320 65763a3a     t create std::ve
 23fb1f4:	726f7463 72616c20 20726567 6e616874     ctor larger than
 23fb204:	78616d20 7a69735f 00292865 74617473      max_size().stat
 23fb214:	65206369 65765f69 726f7463 746e693c     ic ei_vector<int
 23fb224:	6965203e 70733a3a 72746365 3a3a6c61     > ei::spectral::
 23fb234:	74616566 3a657275 7465673a 7461725f     feature::get_rat
 23fb244:	635f6f69 6f626d6f 746e6928 552f0029     io_combo(int)./U
 23fb254:	73726573 6168732f 79686e77 2f6c656d     sers/shawnhymel/
 23fb264:	6a6f7250 73746365 7261502f 6c636974     Projects/Particl
 23fb274:	61702f65 63697472 702d656c 65672d32     e/particle-p2-ge
 23fb284:	72757473 695f7365 7265666e 69636e65     stures_inferenci
 23fb294:	2f2f676e 2f637273 65676465 706d692d     ng//src/edge-imp
 23fb2a4:	65736c75 6b64732d 7073642f 6570732f     ulse-sdk/dsp/spe
 23fb2b4:	61727463 65662f6c 72757461 70682e65     ctral/feature.hp
 23fb2c4:	52450070 57203a52 646c756f 69727720     p.ERR: Would wri
 23fb2d4:	6f206574 69737475 66206564 75746165     te outside featu
 23fb2e4:	62206572 65666675 52000a72 696e6e75     re buffer..Runni
 23fb2f4:	6920676e 6c75706d 2e2e6573 53000a2e     ng impulse.....S
 23fb304:	6c706d61 2e676e69 0a0d2e2e 696f4400     ampling......Doi
 23fb314:	6920676e 7265666e 65636e65 0d2e2e2e     ng inference....
 23fb324:	5245000a 46203a52 656c6961 6f742064     ..ERR: Failed to
 23fb334:	6e757220 616c6320 66697373 20726569      run classifier 
 23fb344:	29642528 7572000a 6c635f6e 69737361     (%d)..run_classi
 23fb354:	72656966 74657220 656e7275 25203a64     fier returned: %
 23fb364:	000a0d64 74636576 3a3a726f 725f4d5f     d...vector::_M_r
 23fb374:	6c6c6165 695f636f 7265736e 52450074     ealloc_insert.ER
 23fb384:	46203a52 656c6961 6f742064 61637320     R: Failed to sca
 23fb394:	7320656c 616e6769 2528206c 000a2964     le signal (%d)..
 23fb3a4:	3a525245 69614620 2064656c 74206f74     ERR: Failed to t
 23fb3b4:	736e6172 65736f70 74616d20 20786972     ranspose matrix 
 23fb3c4:	29642528 6f6c000a 69680077 45006867     (%d)..low.high.E
 23fb3d4:	203a5252 6c696146 74206465 6163206f     RR: Failed to ca
 23fb3e4:	6c75636c 20657461 63657073 6c617274     lculate spectral
 23fb3f4:	61656620 65727574 25282073 000a2964      features (%d)..
 23fb404:	69746172 3d3d206f 7c203320 6172207c     ratio == 3 || ra
 23fb414:	206f6974 31203d3d 74730030 63697461     tio == 10.static
 23fb424:	7a697320 20745f65 3a3a6965 63657073      size_t ei::spec
 23fb434:	6c617274 65663a3a 72757461 5f3a3a65     tral::feature::_
 23fb444:	69636564 6574616d 3a696528 74616d3a     decimate(ei::mat
 23fb454:	5f786972 202c2a74 3a3a6965 7274616d     rix_t*, ei::matr
 23fb464:	745f7869 73202c2a 5f657a69 6e002974     ix_t*, size_t).n
 23fb474:	735f6d75 69746365 20736e6f 0030203e     um_sections > 0.
 23fb484:	64696f76 3a696520 6769733a 3a6c616e     void ei::signal:
 23fb494:	736f733a 746c6966 75723a3a 6f63286e     :sosfilt::run(co
 23fb4a4:	2074736e 616f6c66 202c2a74 657a6973     nst float*, size
 23fb4b4:	202c745f 616f6c66 00292a74 6573552f     _t, float*)./Use
 23fb4c4:	732f7372 6e776168 656d7968 72502f6c     rs/shawnhymel/Pr
 23fb4d4:	63656a6f 502f7374 69747261 2f656c63     ojects/Particle/
 23fb4e4:	74726170 656c6369 2d32702d 74736567     particle-p2-gest
 23fb4f4:	73657275 666e695f 6e657265 676e6963     ures_inferencing
 23fb504:	72732f2f 64652f63 692d6567 6c75706d     //src/edge-impul
 23fb514:	732d6573 642f6b64 732f7073 74636570     se-sdk/dsp/spect
 23fb524:	2f6c6172 6e676973 682e6c61 6f007070     ral/signal.hpp.o
 23fb534:	75707475 69735f74 3e20657a 7865203d     utput_size >= ex
 23fb544:	74636570 735f6465 00657a69 74617473     pected_size.stat
 23fb554:	76206369 2064696f 3a3a6965 6e676973     ic void ei::sign
 23fb564:	3a3a6c61 69636564 6574616d 6d69735f     al::decimate_sim
 23fb574:	28656c70 736e6f63 6c662074 2a74616f     ple(const float*
 23fb584:	6973202c 745f657a 6c66202c 2a74616f     , size_t, float*
 23fb594:	6973202c 745f657a 6973202c 745f657a     , size_t, size_t
 23fb5a4:	6965202c 69733a3a 6c616e67 6f733a3a     , ei::signal::so
 23fb5b4:	6c696673 00292674 74636576 3a3a726f     sfilt&).vector::
 23fb5c4:	645f4d5f 75616665 615f746c 6e657070     _M_default_appen
 23fb5d4:	69620064 2e31726f 69620033 2e31726f     d.bior1.3.bior1.
 23fb5e4:	69620035 2e32726f 69620032 2e32726f     5.bior2.2.bior2.
 23fb5f4:	69620034 2e32726f 69620036 2e32726f     4.bior2.6.bior2.
 23fb604:	69620038 2e33726f 69620031 2e33726f     8.bior3.1.bior3.
 23fb614:	69620033 2e33726f 69620035 2e33726f     3.bior3.5.bior3.
 23fb624:	69620037 2e33726f 69620039 2e34726f     7.bior3.9.bior4.
 23fb634:	69620034 2e35726f 69620035 2e36726f     4.bior5.5.bior6.
 23fb644:	6f630038 00316669 66696f63 6f630032     8.coif1.coif2.co
 23fb654:	00336669 00326264 00336264 00346264     if3.db2.db3.db4.
 23fb664:	00356264 00366264 00376264 00386264     db5.db6.db7.db8.
 23fb674:	00396264 30316264 61616800 62720072     db9.db10.haar.rb
 23fb684:	2e316f69 62720033 2e316f69 62720035     io1.3.rbio1.5.rb
 23fb694:	2e326f69 62720032 2e326f69 62720034     io2.2.rbio2.4.rb
 23fb6a4:	2e326f69 62720036 2e326f69 62720038     io2.6.rbio2.8.rb
 23fb6b4:	2e336f69 62720031 2e336f69 62720033     io3.1.rbio3.3.rb
 23fb6c4:	2e336f69 62720035 2e336f69 62720037     io3.5.rbio3.7.rb
 23fb6d4:	2e336f69 62720039 2e346f69 62720034     io3.9.rbio4.4.rb
 23fb6e4:	2e356f69 62720035 2e366f69 79730038     io5.5.rbio6.8.sy
 23fb6f4:	7300326d 00336d79 346d7973 6d797300     m2.sym3.sym4.sym
 23fb704:	79730035 7300366d 00376d79 386d7973     5.sym6.sym7.sym8
 23fb714:	6d797300 79730039 0030316d 74617473     .sym9.sym10.stat
 23fb724:	76206369 2064696f 3a3a6965 63657073     ic void ei::spec
 23fb734:	6c617274 61773a3a 656c6576 663a3a74     tral::wavelet::f
 23fb744:	5f646e69 746c6966 63287265 74736e6f     ind_filter(const
 23fb754:	61686320 202c2a72 3a3a6965 63657073      char*, ei::spec
 23fb764:	6c617274 76663a3a 2c266365 3a696520     tral::fvec&, ei:
 23fb774:	6570733a 61727463 663a3a6c 26636576     :spectral::fvec&
 23fb784:	552f0029 73726573 6168732f 79686e77     )./Users/shawnhy
 23fb794:	2f6c656d 6a6f7250 73746365 7261502f     mel/Projects/Par
 23fb7a4:	6c636974 61702f65 63697472 702d656c     ticle/particle-p
 23fb7b4:	65672d32 72757473 695f7365 7265666e     2-gestures_infer
 23fb7c4:	69636e65 2f2f676e 2f637273 65676465     encing//src/edge
 23fb7d4:	706d692d 65736c75 6b64732d 7073642f     -impulse-sdk/dsp
 23fb7e4:	6570732f 61727463 61772f6c 656c6576     /spectral/wavele
 23fb7f4:	70682e74 686e0070 203d3c20 26203032     t.hpp.nh <= 20 &
 23fb804:	686e2026 30203e20 20262620 3e20786e     & nh > 0 && nx >
 23fb814:	73003020 69746174 6f762063 65206469      0.static void e
 23fb824:	733a3a69 74636570 3a6c6172 7661773a     i::spectral::wav
 23fb834:	74656c65 77643a3a 6f632874 2074736e     elet::dwt(const 
 23fb844:	616f6c66 202c2a74 657a6973 202c745f     float*, size_t, 
 23fb854:	736e6f63 6c662074 2a74616f 6f63202c     const float*, co
 23fb864:	2074736e 616f6c66 202c2a74 657a6973     nst float*, size
 23fb874:	202c745f 3a3a6965 63657073 6c617274     _t, ei::spectral
 23fb884:	76663a3a 2c266365 3a696520 6570733a     ::fvec&, ei::spe
 23fb894:	61727463 663a3a6c 26636576 74730029     ctral::fvec&).st
 23fb8a4:	63697461 696f7620 69652064 70733a3a     atic void ei::sp
 23fb8b4:	72746365 3a3a6c61 65766177 3a74656c     ectral::wavelet:
 23fb8c4:	7478653a 74636172 6165665f 65727574     :extract_feature
 23fb8d4:	69652873 70733a3a 72746365 3a3a6c61     s(ei::spectral::
 23fb8e4:	63657666 65202c26 733a3a69 74636570     fvec&, ei::spect
 23fb8f4:	3a6c6172 6576663a 00292663 6576656c     ral::fvec&).leve
 23fb904:	203e206c 26262030 76656c20 3c206c65     l > 0 && level <
 23fb914:	73003820 69746174 6f762063 65206469      8.static void e
 23fb924:	733a3a69 74636570 3a6c6172 7661773a     i::spectral::wav
 23fb934:	74656c65 61773a3a 65646576 65665f63     elet::wavedec_fe
 23fb944:	72757461 63287365 74736e6f 6f6c6620     atures(const flo
 23fb954:	2c2a7461 746e6920 6f63202c 2074736e     at*, int, const 
 23fb964:	72616863 69202c2a 202c746e 3a3a6965     char*, int, ei::
 23fb974:	63657073 6c617274 76663a3a 29266365     spectral::fvec&)
 23fb984:	76656c00 3c206c65 0037203d 74617473     .level <= 7.stat
 23fb994:	69206369 6520746e 733a3a69 74636570     ic int ei::spect
 23fb9a4:	3a6c6172 7661773a 74656c65 77643a3a     ral::wavelet::dw
 23fb9b4:	65665f74 72757461 63287365 74736e6f     t_features(const
 23fb9c4:	6f6c6620 2c2a7461 746e6920 6f63202c      float*, int, co
 23fb9d4:	2074736e 72616863 69202c2a 202c746e     nst char*, int, 
 23fb9e4:	3a3a6965 63657073 6c617274 76663a3a     ei::spectral::fv
 23fb9f4:	29266365 63657600 3a726f74 7365723a     ec&).vector::res
 23fba04:	65767265 6d756e00 6165665f 65727574     erve.num_feature
 23fba14:	3d3d2073 74756f20 5f747570 7274616d     s == output_matr
 23fba24:	3e2d7869 736c6f63 69202f20 7475706e     ix->cols / input
 23fba34:	74616d5f 2d786972 776f723e 74730073     _matrix->rows.st
 23fba44:	63697461 746e6920 3a696520 6570733a     atic int ei::spe
 23fba54:	61727463 773a3a6c 6c657661 3a3a7465     ctral::wavelet::
 23fba64:	72747865 5f746361 65766177 5f74656c     extract_wavelet_
 23fba74:	74616566 73657275 3a696528 74616d3a     features(ei::mat
 23fba84:	5f786972 202c2a74 3a3a6965 7274616d     rix_t*, ei::matr
 23fba94:	745f7869 65202c2a 73645f69 6f635f70     ix_t*, ei_dsp_co
 23fbaa4:	6769666e 6570735f 61727463 6e615f6c     nfig_spectral_an
 23fbab4:	73796c61 745f7369 66202c2a 74616f6c     alysis_t*, float
 23fbac4:	61570029 656c6576 46460074 00000054     ).Wavelet.FFT...

023fbad4 <_ZTVN8particle11SPISettingsE>:
	...
 23fbadc:	023eb081 023ea321 023ea6bd              ..>.!.>...>.

023fbae8 <_ZTVN5spark10LogHandlerE>:
	...
 23fbaf8:	023e8591 023ea323                       ..>.#.>.

023fbb00 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23fbb08:	023eaa65 023eaa99 023f5a9d 023f5c45     e.>...>..Z?.E\?.

023fbb18 <_ZTVN6tflite22MicroMutableOpResolverILj2EEE>:
	...
 23fbb20:	023ea347 023ea34d 023ea325 023ea32f     G.>.M.>.%.>./.>.
 23fbb30:	023ea339 023ea355 023ea6cb 023ea343     9.>.U.>...>.C.>.
 23fbb40:	023ea707 023ea375 023ea6d9 00000000     ..>.u.>...>.....

023fbb50 <_ZL14tflite_learn_7>:
 23fbb50:	0000001c 334c4654 00200014 0018001c     ....TFL3.. .....
 23fbb60:	00100014 0000000c 00040008 00000014     ................
 23fbb70:	0000001c 0000008c 000000e4 00000680     ................
 23fbb80:	00000690 00000d54 00000003 00000001     ....T...........
 23fbb90:	00000010 000a0000 000c0010 00040008     ................
 23fbba0:	0000000a 0000000c 0000001c 0000003c     ............<...
 23fbbb0:	0000000f 76726573 5f676e69 61666564     ....serving_defa
 23fbbc0:	00746c75 00000001 00000004 ffffff9c     ult.............
 23fbbd0:	0000000a 00000004 00000008 7074756f     ............outp
 23fbbe0:	305f7475 00000000 00000001 00000004     ut_0............
 23fbbf0:	fffff966 00000004 00000001 00000078     f...........x...
 23fbc00:	00000002 00000034 00000004 ffffffdc     ....4...........
 23fbc10:	0000000d 00000004 00000013 564e4f43     ............CONV
 23fbc20:	49535245 4d5f4e4f 44415445 00415441     ERSION_METADATA.
 23fbc30:	000c0008 00040008 00000008 0000000c     ................
 23fbc40:	00000004 00000013 5f6e696d 746e7572     ........min_runt
 23fbc50:	5f656d69 73726576 006e6f69 0000000e     ime_version.....
 23fbc60:	00000598 00000590 00000570 00000538     ........p...8...
 23fbc70:	00000500 00000428 000003c8 000000ac     ....(...........
 23fbc80:	000000a4 0000009c 00000094 0000008c     ................
 23fbc90:	0000006c 00000004 fffffa0e 00000004     l...............
 23fbca0:	00000058 0000000c 000e0008 00040008     X...............
 23fbcb0:	00000008 00000010 00000028 00060000     ........(.......
 23fbcc0:	00040008 00000006 00000004 00000001     ................
 23fbcd0:	000003eb 000a0000 000c0010 00040008     ................
 23fbce0:	0000000a 00000003 00000002 00000004     ................
 23fbcf0:	00000006 31312e32 0000312e fffffa72     ....2.11.1..r...
 23fbd00:	00000004 00000010 34312e31 0000302e     ........1.14.0..
	...
 23fbd18:	fffffa5c fffffa60 fffffa64 fffffa68     \...`...d...h...
 23fbd28:	fffffa9e 00000004 0000030c 3cf6f11b     ...............<
 23fbd38:	e3293819 3819d735 4ce6d1d2 e1de4114     .8).5..8...L.A..
 23fbd48:	2053f64d eee947c7 2739c1c6 37c6ca3d     M.S .G....9'=..7
 23fbd58:	b70b51e2 0528350a 26192520 011dc543     .Q...5(. %.&C...
 23fbd68:	52cd4012 f0d75f29 11d92ff0 e6360e0e     .@.R)_.../....6.
 23fbd78:	616a15e9 db00506a f84a3317 d01eb8bd     ..jajP...3J.....
 23fbd88:	0d64512f 38de29dd 2d053cc1 cb5c2300     /Qd..).8.<.-.#\.
 23fbd98:	0929e046 c8df1564 cb303bee 08c6effd     F.).d....;0.....
 23fbda8:	e814bb39 ef2b003e 29a7163f 0e350e27     9...>.+.?..)'.5.
 23fbdb8:	1de9d806 b50bbe2d cb090cc1 eb3b513b     ....-.......;Q;.
 23fbdc8:	3dea5a36 19b85716 c90a0c37 da34b4b8     6Z.=.W..7.....4.
 23fbdd8:	fad31cc5 1fcbd0b9 ddeb2c2e dfdd38e6     .........,...8..
 23fbde8:	3032efd2 be19b8b1 c8d7b63c e5ffa3d5     ..20....<.......
 23fbdf8:	0a1f0538 d94a06cc ace1b40c c1142c1e     8.....J......,..
 23fbe08:	b3f7dd13 29c2deab dd0c47d2 621b257f     .......).G...%.b
 23fbe18:	63de3af4 f63c51fe cce0e7d7 22ff5a03     .:.c.Q<......Z."
 23fbe28:	3f171315 edf5f131 27f65f6d 0cf447f1     ...?1...m_.'.G..
 23fbe38:	193ac53d f700b816 15ac28bd 01bf57b0     =.:......(...W..
 23fbe48:	2f2a4c47 045e003a c43ef869 e0f7f5a7     GL*/:.^.i.>.....
 23fbe58:	f2ec5c68 f2700c1f ffe7c01b ecbd174c     h\....p.....L...
 23fbe68:	321af5b7 01225421 dc0741c3 3204f6fc     ...2!T"..A.....2
 23fbe78:	d421db29 205fe431 1b433753 03282c2c     ).!.1._ S7C.,,(.
 23fbe88:	ab13b442 dab1f6ea cabb36ab df03a839     B........6..9...
 23fbe98:	de05b938 b9d0c2b5 f542bcf6 f5cf4238     8.........B.8B..
 23fbea8:	5f591b3f 080c1b42 d3f9fd3d 4727490b     ?.Y_B...=....I'G
 23fbeb8:	0250034e d0ada139 14f10222 c51415c0     N.P.9...".......
 23fbec8:	f1f1e121 23b00410 f44944b5 2939e3d4     !......#.DI...9)
 23fbed8:	e9bdb9bb bce4464d 580000bd 5abec3ec     ....MF.....X...Z
 23fbee8:	51f846eb cb513d52 51dae734 5df7f50e     .F.QR=Q.4..Q...]
 23fbef8:	332f250e f71a5034 19e309f6 1b1accf3     .%/34P..........
 23fbf08:	fff9b6cf 9dc2b445 9fd612a7 34f41ffe     ....E..........4
 23fbf18:	d83a032a 1cb71914 e2ffce11 15e4014d     *.:.........M...
 23fbf28:	2e3147b1 28b4c33b 5b12cdc4 e041ba5c     .G1.;..(...[\.A.
 23fbf38:	30fef901 c7d6ed33 b7e0cb09 c8cee6a8     ...03...........
 23fbf48:	f64bc697 baacff17 09fbdd9e b36227dc     ..K..........'b.
 23fbf58:	c4fd0fe0 0b160dcc 5fa89b3c 1bc8ec9b     ........<.._....
 23fbf68:	4137b627 caab32ce dd3ec2f5 1fcdc546     '.7A.2....>.F...
 23fbf78:	fba7b6e0 bc3cf326 ed10b1b3 f4131405     ....&.<.........
 23fbf88:	2d20c818 1426063b b53dae29 d9f80b1c     .. -;.&.).=.....
 23fbf98:	0dc9fcd3 f729dfde 14b4fe0e 00d9cb0b     ......).........
 23fbfa8:	d7f80051 f7caca31 26ea3223 f837e3c0     Q...1...#2.&..7.
 23fbfb8:	ec2fe1cb 4ff7f330 13283ec5 e6fae252     ../.0..O.>(.R...
 23fbfc8:	e7efcc2b 5a5e3e2a 093ae2f6 d03acde1     +...*>^Z..:...:.
 23fbfd8:	e2dbd732 2cd0531a b734a9cc ff1dd3a1     2....S.,..4.....
 23fbfe8:	10cff7ee 434b031d e5b034c4 0a1ba424     ......KC.4..$...
 23fbff8:	e600fcce bdbde4b8 ccffccc1 48d922d6     .............".H
 23fc008:	bde043d6 c4adf2f4 b5ccdc2b cc194351     .C......+...QC..
 23fc018:	fd4427c4 4d1916fe d7586228 232c4f5b     .'D....M(bX.[O,#
 23fc028:	0ada22fb 5ee01a51 c01c1bdc 924f20ed     ."..Q..^..... O.
 23fc038:	0ddc5620 fe0cb21c fffffdb6 00000004      V..............
 23fc048:	00000050 ffffffe2 00000056 ffffffaa     P.......V.......
 23fc058:	00000066 00000002 00000065 0000004a     f.......e...J...
 23fc068:	fffffffc 00000031 fffffff0 ffffffe6     ....1...........
 23fc078:	00000032 0000006c 00000068 00000044     2...l...h...D...
 23fc088:	fffffff3 ffffffdf 00000094 ffffffe6     ................
 23fc098:	0000008e fffffe12 00000004 000000c8     ................
 23fc0a8:	fcc7c228 c6540767 1320cbfb b42a7838     (...g.T... .8x*.
 23fc0b8:	33d8f405 4633abcc a9d80e2d d5dd14b6     ...3..3F-.......
 23fc0c8:	4a483045 d0f230d8 54efaded 0cd6cde1     E0HJ.0.....T....
 23fc0d8:	3321f5da a8f5b2f8 afa7bd3f ed62ff39     ..!3....?...9.b.
 23fc0e8:	f2e145d1 375948f4 e00a8cc4 2462c2eb     .E...HY7......b$
 23fc0f8:	dba525f9 f7d56ecb 305343ae cc0b3ef2     .%...n...CS0.>..
 23fc108:	124f4cf8 48fa73d9 7f288cf7 4143cebb     .LO..s.H..(...CA
 23fc118:	a10655c9 52a46306 c0e33960 f9145435     .U...c.R`9..5T..
 23fc128:	252e1eeb f302ccb6 d1e4f339 4f1b61f0     ...%....9....a.O
 23fc138:	8b4251e8 58c3e55c 26a1e935 69f90a4c     .QB.\..X5..&L..i
 23fc148:	2a251732 d2943e48 135e0ce3 4ae4ca0e     2.%*H>....^....J
 23fc158:	ceec41b8 fee9cd27 07e2444f 26d7a23b     .A..'...OD..;..&
 23fc168:	ee2af1c9 6d155af7 fffffee6 00000004     ..*..Z.m........
 23fc178:	00000028 0000004f 0000003e ffffffe9     (...O...>.......
 23fc188:	ffffffcf 00000005 0000012b 00000016     ........+.......
 23fc198:	00000045 00000029 00000056 ffffff1a     E...)...V.......
 23fc1a8:	00000004 00000028 c4745149 db898517     ....(...IQt.....
 23fc1b8:	d13a2d7f d58f89a3 20c820f3 90b6659f     .-:...... . .e..
 23fc1c8:	386d8354 eb12ae3e aaf44506 949fe862     T.m8>....E..b...
 23fc1d8:	ffffff4e 00000004 00000010 ffffff61     N...........a...
 23fc1e8:	000000c2 ffffffe0 ffffffdd ffffff38     ............8...
 23fc1f8:	ffffff3c 0000000f 52494c4d 6e6f4320     <.......MLIR Con
 23fc208:	74726576 002e6465 00000001 00000014     verted..........
 23fc218:	000e0000 00140018 000c0010 00040008     ................
 23fc228:	0000000e 00000014 0000001c 00000128     ............(...
 23fc238:	0000012c 00000130 00000004 6e69616d     ,...0.......main
 23fc248:	00000000 00000004 000000d0 00000088     ................
 23fc258:	00000050 00000014 000e0000 0014001a     P...............
 23fc268:	000c0010 0004000b 0000000e 0000001c     ................
 23fc278:	09000000 0000001c 00000020 00000001     ........ .......
 23fc288:	00060000 00040008 00000006 3f800000     ...............?
 23fc298:	00000001 0000000a 00000001 00000009     ................
 23fc2a8:	ffffff96 00000014 08000000 00000010     ................
 23fc2b8:	00000014 00040004 00000004 00000001     ................
 23fc2c8:	00000009 00000003 00000008 00000002     ................
 23fc2d8:	00000001 ffffffca 00000010 08000000     ................
 23fc2e8:	00000010 00000014 ffffffba 01000000     ................
 23fc2f8:	00000001 00000008 00000003 00000007     ................
 23fc308:	00000004 00000003 000e0000 00000016     ................
 23fc318:	000c0010 0004000b 0000000e 00000018     ................
 23fc328:	08000000 00000018 0000001c 00060000     ................
 23fc338:	00070008 00000006 01000000 00000001     ................
 23fc348:	00000007 00000003 00000000 00000006     ................
 23fc358:	00000005 00000001 0000000a 00000001     ................
 23fc368:	00000000 0000000b 000004f8 00000468     ............h...
 23fc378:	000003fc 00000380 00000314 000002a0     ................
 23fc388:	00000234 00000198 000000f4 00000070     4...........p...
 23fc398:	00000004 fffffb4a 01000000 00000014     ....J...........
 23fc3a8:	00000030 0000000b 09000000 00000044     0...........D...
 23fc3b8:	fffffb34 00000008 00000010 00000001     4...............
 23fc3c8:	ffffff80 ffffffff 00000001 3b800000     ...............;
 23fc3d8:	00000019 74617453 6c756665 74726150     ....StatefulPart
 23fc3e8:	6f697469 4364656e 3a6c6c61 00000030     itionedCall:0...
 23fc3f8:	00000002 00000001 00000004 fffffbb2     ................
 23fc408:	01000000 00000014 00000030 0000000a     ........0.......
 23fc418:	09000000 0000005c fffffb9c 00000008     ....\...........
 23fc428:	00000010 00000001 0000003a 00000000     ........:.......
 23fc438:	00000001 3df0ecd2 00000032 75716573     .......=2...sequ
 23fc448:	69746e65 792f6c61 6572705f 614d2f64     ential/y_pred/Ma
 23fc458:	6c754d74 7165733b 746e6575 2f6c6169     tMul;sequential/
 23fc468:	72705f79 422f6465 41736169 00006464     y_pred/BiasAdd..
 23fc478:	00000002 00000001 00000004 fffffc32     ............2...
 23fc488:	01000000 00000014 00000034 00000009     ........4.......
 23fc498:	09000000 0000007c fffffc1c 00000008     ....|...........
 23fc4a8:	00000014 00000001 ffffff80 ffffffff     ................
 23fc4b8:	00000000 00000001 3de253ef 0000004c     .........S.=L...
 23fc4c8:	75716573 69746e65 642f6c61 65736e65     sequential/dense
 23fc4d8:	4d2f315f 754d7461 65733b6c 6e657571     _1/MatMul;sequen
 23fc4e8:	6c616974 6e65642f 315f6573 6c65522f     tial/dense_1/Rel
 23fc4f8:	65733b75 6e657571 6c616974 6e65642f     u;sequential/den
 23fc508:	315f6573 6169422f 64644173 00000000     se_1/BiasAdd....
 23fc518:	00000002 00000001 0000000a fffffcd2     ................
 23fc528:	01000000 00000014 00000034 00000008     ........4.......
 23fc538:	09000000 00000074 fffffcbc 00000008     ....t...........
 23fc548:	00000014 00000001 ffffff80 ffffffff     ................
 23fc558:	00000000 00000001 3e30ab5e 00000046     ........^.0>F...
 23fc568:	75716573 69746e65 642f6c61 65736e65     sequential/dense
 23fc578:	74614d2f 3b6c754d 75716573 69746e65     /MatMul;sequenti
 23fc588:	642f6c61 65736e65 6c65522f 65733b75     al/dense/Relu;se
 23fc598:	6e657571 6c616974 6e65642f 422f6573     quential/dense/B
 23fc5a8:	41736169 00006464 00000002 00000001     iasAdd..........
 23fc5b8:	00000014 fffffd6a 01000000 00000014     ....j...........
 23fc5c8:	00000034 00000007 09000000 00000044     4...........D...
 23fc5d8:	fffffd54 00000008 00000014 00000001     T...............
	...
 23fc5f4:	00000001 3b7c4dbc 00000017 75716573     .....M|;....sequ
 23fc604:	69746e65 642f6c61 65736e65 74614d2f     ential/dense/Mat
 23fc614:	006c754d 00000002 00000014 00000027     Mul.........'...
 23fc624:	fffffdd2 01000000 00000014 00000030     ............0...
 23fc634:	00000006 02000000 00000050 fffffdbc     ........P.......
 23fc644:	00000008 00000010 00000001 00000000     ................
 23fc654:	00000000 00000001 3a7da9a9 00000027     ..........}:'...
 23fc664:	75716573 69746e65 642f6c61 65736e65     sequential/dense
 23fc674:	6169422f 64644173 6165522f 72615664     /BiasAdd/ReadVar
 23fc684:	6c626169 00704f65 00000001 00000014     iableOp.........
 23fc694:	fffffe42 01000000 00000014 00000030     B...........0...
 23fc6a4:	00000005 09000000 00000044 fffffe2c     ........D...,...
 23fc6b4:	00000008 00000010 00000001 00000000     ................
 23fc6c4:	00000000 00000001 3b91f6f7 00000019     ...........;....
 23fc6d4:	75716573 69746e65 642f6c61 65736e65     sequential/dense
 23fc6e4:	4d2f315f 754d7461 0000006c 00000002     _1/MatMul.......
 23fc6f4:	0000000a 00000014 fffffeaa 01000000     ................
 23fc704:	00000014 00000034 00000004 02000000     ....4...........
 23fc714:	00000058 fffffe94 00000008 00000014     X...............
 23fc724:	00000001 00000000 00000000 00000000     ................
 23fc734:	00000001 3a4976ff 00000029 75716573     .....vI:)...sequ
 23fc744:	69746e65 642f6c61 65736e65 422f315f     ential/dense_1/B
 23fc754:	41736169 522f6464 56646165 61697261     iasAdd/ReadVaria
 23fc764:	4f656c62 00000070 00000001 0000000a     bleOp...........
 23fc774:	ffffff22 01000000 00000014 00000030     "...........0...
 23fc784:	00000003 09000000 00000044 ffffff0c     ........D.......
 23fc794:	00000008 00000010 00000001 00000000     ................
 23fc7a4:	00000000 00000001 3bb5298c 00000018     .........).;....
 23fc7b4:	75716573 69746e65 792f6c61 6572705f     sequential/y_pre
 23fc7c4:	614d2f64 6c754d74 00000000 00000002     d/MatMul........
 23fc7d4:	00000004 0000000a ffffff8a 01000000     ................
 23fc7e4:	00000014 00000030 00000002 02000000     ....0...........
 23fc7f4:	00000054 ffffff74 00000008 00000010     T...t...........
 23fc804:	00000001 00000000 00000000 00000001     ................
 23fc814:	3a202a13 00000028 75716573 69746e65     .* :(...sequenti
 23fc824:	792f6c61 6572705f 69422f64 64417361     al/y_pred/BiasAd
 23fc834:	65522f64 61566461 62616972 704f656c     d/ReadVariableOp
 23fc844:	00000000 00000001 00000004 00160000     ................
 23fc854:	0018001c 00100017 0008000c 00000000     ................
 23fc864:	00070000 00000016 01000000 00000020     ............ ...
 23fc874:	00000040 00000001 09000000 0000004c     @...........L...
 23fc884:	000c000c 00000000 00040008 0000000c     ................
 23fc894:	00000008 00000014 00000001 ffffff9d     ................
 23fc8a4:	ffffffff 00000000 00000001 3e80b083     ...............>
 23fc8b4:	00000013 76726573 5f676e69 61666564     ....serving_defa
 23fc8c4:	5f746c75 00303a78 00000002 00000001     ult_x:0.........
 23fc8d4:	00000027 00000002 00000024 00000004     '.......$.......
 23fc8e4:	fffffff0 00000019 00000002 19000000     ................
 23fc8f4:	0010000c 0000000f 00040008 0000000c     ................
 23fc904:	00000009 00000004 09000000              ............

023fc910 <_ZL18ei_learning_blocks>:
 23fc910:	023ec595 023fc91c 00000000              ..>...?.....

023fc91c <_ZL26ei_learning_block_config_7>:
 23fc91c:	00000001 00000007 0100ff00 00000102     ................
 23fc92c:	1007a428                                (...

023fc930 <_ZN2ei8spectralL3db2E>:
 23fc930:	be0483ee 3e6585f8 3f5625ef 3ef746ea     ......e>.%V?.F.>
 23fc940:	bef746ea 3f5625ef be6585f8 be0483ee     .F...%V?..e.....

023fc950 <_ZN2ei8spectralL3db3E>:
 23fc950:	3d104972 bdaefbd6 be0a4054 3eeb7510     rI.=....T@...u.>
 23fc960:	3f4e9071 3eaa53cb beaa53cb 3f4e9071     q.N?.S.>.S..q.N?
 23fc970:	beeb7510 be0a4054 3daefbd6 3d104972     .u..T@.....=rI.=

023fc980 <_ZN2ei8spectralL3db4E>:
 23fc980:	bc2da0ba 3d06b056 3cfca711 be3f860e     ..-.V..=...<..?.
 23fc990:	bce53e38 3f218167 3f37002f 3e6be829     8>..g.!?/.7?).k>
 23fc9a0:	be6be829 3f37002f bf218167 bce53e38     ).k./.7?g.!.8>..
 23fc9b0:	3e3f860e 3cfca711 bd06b056 bc2da0ba     ..?>...<V.....-.

023fc9c0 <_ZN2ei8spectralL3db5E>:
 23fc9c0:	3b5a9c2f bc4e1f80 bbcc856a 3d9eddce     /.Z;..N.j......=
 23fc9d0:	bd041332 be781c27 3e0dc01c 3f396c49     2...'.x....>Il9?
 23fc9e0:	3f1a948e 3e23f1e2 be23f1e2 3f1a948e     ...?..#>..#....?
 23fc9f0:	bf396c49 3e0dc01c 3e781c27 bd041332     Il9....>'.x>2...
 23fca00:	bd9eddce bbcc856a 3c4e1f80 3b5a9c2f     ....j.....N</.Z;

023fca10 <_ZN2ei8spectralL3db6E>:
 23fca10:	ba8d343a 3b9c8a8a 3a112fb9 bd015c2b     :4.....;./.:+\..
 23fca20:	3ce177a2 3dc7aeec be04e19b be67b1ef     .w.<...=......g.
 23fca30:	3ea1687e 3f404a50 3efd3f58 3de46f79     ~h.>PJ@?X?.>yo.=
 23fca40:	bde46f79 3efd3f58 bf404a50 3ea1687e     yo..X?.>PJ@.~h.>
 23fca50:	3e67b1ef be04e19b bdc7aeec 3ce177a2     ..g>.........w.<
 23fca60:	3d015c2b 3a112fb9 bb9c8a8a ba8d343a     +\.=./.:....:4..

023fca70 <_ZN2ei8spectralL3db7E>:
 23fca70:	39b972aa baec2508 39e138fb 3c4da2b4     .r.9.%...8.9..M<
 23fca80:	bc87c755 bd1bc547 3da51839 3d920a91     U...G...9..=...=
 23fca90:	be6569be be135c18 3ef0874e 3f3aa867     .ie..\..N..>g.:?
 23fcaa0:	3ecb0734 3d9f70e6 bd9f70e6 3ecb0734     4..>.p.=.p..4..>
 23fcab0:	bf3aa867 3ef0874e 3e135c18 be6569be     g.:.N..>.\.>.ie.
 23fcac0:	bd920a91 3da51839 3d1bc547 bc87c755     ....9..=G..=U...
 23fcad0:	bc4da2b4 39e138fb 3aec2508 39b972aa     ..M..8.9.%.:.r.9

023fcae0 <_ZN2ei8spectralL3db8E>:
 23fcae0:	b8f65dde 3a3110a4 b9cd6281 bb9f977b     .]....1:.b..{...
 23fcaf0:	3c0f4bc7 3c6510ae bd3495e3 bc8e4a10     .K.<..e<..4..J..
 23fcb00:	3e03d65e 39f7b7ce be916a7c bc81ac0a     ^..>...9|j......
 23fcb10:	3f15d9ce 3f2cf623 3ea030b5 3d5ee325     ...?#.,?.0.>%.^=
 23fcb20:	bd5ee325 3ea030b5 bf2cf623 3f15d9ce     %.^..0.>#.,....?
 23fcb30:	3c81ac0a be916a7c b9f7b7ce 3e03d65e     ...<|j......^..>
 23fcb40:	3c8e4a10 bd3495e3 bc6510ae 3c0f4bc7     .J.<..4...e..K.<
 23fcb50:	3b9f977b b9cd6281 ba3110a4 b8f65dde     {..;.b....1..]..

023fcb60 <_ZN2ei8spectralL3db9E>:
 23fcb60:	382508dd b98419ed 397193b5 3af22cbe     ..%8......q9.,.:
 23fcb70:	bb8c4bdb bb9ac51d 3cb72fce 3983918d     .K......./.<...9
 23fcb80:	bd8a8315 3cfbb46d 3e181b11 bdc65476     ....m..<...>vT..
 23fcb90:	be9627fb 3e0864e5 3f284408 3f1ad5b0     .'...d.>.D(?...?
 23fcba0:	3e79afcc 3d1bf79f bd1bf79f 3e79afcc     ..y>...=......y>
 23fcbb0:	bf1ad5b0 3f284408 be0864e5 be9627fb     .....D(?.d...'..
 23fcbc0:	3dc65476 3e181b11 bcfbb46d bd8a8315     vT.=...>m.......
 23fcbd0:	b983918d 3cb72fce 3b9ac51d bb8c4bdb     ...../.<...;.K..
 23fcbe0:	baf22cbe 397193b5 398419ed 382508dd     .,....q9...9..%8

023fcbf0 <_ZN2ei8spectralL4db10E>:
 23fcbf0:	b75e8951 38c44509 b8f43fab ba33cb10     Q.^..E.8.?....3.
 23fcc00:	3b029304 3ab6e43c bc2fda33 3b6c5bee     ...;<..:3./..[l;
 23fcc10:	3d080a03 bcf150ef bd923718 3dbe94dc     ...=.P...7.....=
 23fcc20:	3e026d1c be48a624 be7fd7be 3e8ff5d2     .m.>$.H........>
 23fcc30:	3f303eda 3f06f6a8 3e40b16b 3cda7b2a     .>0?...?k.@>*{.<
 23fcc40:	bcda7b2a 3e40b16b bf06f6a8 3f303eda     *{..k.@>.....>0?
 23fcc50:	be8ff5d2 be7fd7be 3e48a624 3e026d1c     ........$.H>.m.>
 23fcc60:	bdbe94dc bd923718 3cf150ef 3d080a03     .....7...P.<...=
 23fcc70:	bb6c5bee bc2fda33 bab6e43c 3b029304     .[l.3./.<......;
 23fcc80:	3a33cb10 b8f43fab b8c44509 b75e8951     ..3:.?...E..Q.^.

023fcc90 <_ZN2ei8spectralL4sym4E>:
 23fcc90:	bd9b2b0e bcf2c635 3efec7e0 3f4dc1d3     .+..5......>..M?
 23fcca0:	3e9880d1 bdcb339e bc4e80df 3d03fc5f     ...>.3....N._..=
 23fccb0:	bd03fc5f bc4e80df 3dcb339e 3e9880d1     _.....N..3.=...>
 23fccc0:	bf4dc1d3 3efec7e0 3cf2c635 bd9b2b0e     ..M....>5..<.+..

023fccd0 <_ZN2ei8spectralL4sym5E>:
 23fccd0:	3cdfe999 3cf1d2dc bd204b3c 3e4c2ede     ...<...<<K ...L>
 23fcce0:	3f39313f 3f224c72 3c880124 be338935     ?19?rL"?$..<5.3.
 23fccf0:	bcacddc1 3ca01002 bca01002 bcacddc1     .......<........
 23fcd00:	3e338935 3c880124 bf224c72 3f39313f     5.3>$..<rL".?19?
 23fcd10:	be4c2ede bd204b3c bcf1d2dc 3cdfe999     ..L.<K ........<

023fcd20 <_ZN2ei8spectralL4sym6E>:
 23fcd20:	3c7c6184 3b64c46e bdf1a4cd bd45e289     .a|<n.d;......E.
 23fcd30:	3efb6baf 3f49a2da 3ead0516 bd94c2fb     .k.>..I?...>....
 23fcd40:	bcac86a2 3d373175 3ae7b291 bbff9d16     ....u17=...:....
 23fcd50:	3bff9d16 3ae7b291 bd373175 bcac86a2     ...;...:u17.....
 23fcd60:	3d94c2fb 3ead0516 bf49a2da 3efb6baf     ...=...>..I..k.>
 23fcd70:	3d45e289 bdf1a4cd bb64c46e 3c7c6184     ..E=....n.d..a|<

023fcd80 <_ZN2ei8spectralL4sym7E>:
 23fcd80:	3b2fc162 ba894868 bc4f087f 3cf9fbab     b./;hH....O....<
 23fcd90:	3d8b0b53 bd4af7ea 3c8ee0f7 3f093dfa     S..=..J....<.=.?
 23fcda0:	3f448c34 3e93c743 be0f688b bddcca91     4.D?C..>.h......
 23fcdb0:	3b83685f 3c283bdb bc283bdb 3b83685f     _h.;.;(<.;(._h.;
 23fcdc0:	3ddcca91 be0f688b be93c743 3f448c34     ...=.h..C...4.D?
 23fcdd0:	bf093dfa 3c8ee0f7 3d4af7ea 3d8b0b53     .=.....<..J=S..=
 23fcde0:	bcf9fbab bc4f087f 3a894868 3b2fc162     ......O.hH.:b./;

023fcdf0 <_ZN2ei8spectralL4sym8E>:
 23fcdf0:	bb5dab86 ba0e1de3 3d01d2b5 3bf9483b     ..]........=;H.;
 23fce00:	be12bbba bd7af9c6 3ef674c6 3f46f5a5     ......z..t.>..F?
 23fce10:	3eba9821 bd54c529 bcdefa71 3d494411     !..>).T.q....DI=
 23fce20:	3b799c41 bc74fa51 b99ed14e 3af7b836     A.y;Q.t.N...6..:
 23fce30:	baf7b836 b99ed14e 3c74fa51 3b799c41     6...N...Q.t<A.y;
 23fce40:	bd494411 bcdefa71 3d54c529 3eba9821     .DI.q...).T=!..>
 23fce50:	bf46f5a5 3ef674c6 3d7af9c6 be12bbba     ..F..t.>..z=....
 23fce60:	bbf9483b 3d01d2b5 3a0e1de3 bb5dab86     ;H.....=...:..].

023fce70 <_ZN2ei8spectralL4sym9E>:
 23fce70:	3ab79eed 3a2278cb bc5972ab bc3ce0d1     ...:.x":.rY...<.
 23fce80:	3cf79a2a 3a18f386 bd5f83b3 3e747dbe     *..<...:.._..}t>
 23fce90:	3f37c81a 3f1e09e5 3d1079e2 be4425e7     ..7?...?.y.=.%D.
 23fcea0:	bc955efd 3d7e4548 3c112676 bc282a9b     .^..HE~=v&.<.*(.
 23fceb0:	b9f811b9 3a8c2e21 ba8c2e21 b9f811b9     ....!..:!.......
 23fcec0:	3c282a9b 3c112676 bd7e4548 bc955efd     .*(<v&.<HE~..^..
 23fced0:	3e4425e7 3d1079e2 bf1e09e5 3f37c81a     .%D>.y.=......7?
 23fcee0:	be747dbe bd5f83b3 ba18f386 3cf79a2a     .}t..._.....*..<
 23fcef0:	3c3ce0d1 bc5972ab ba2278cb 3ab79eed     ..<<.rY..x"....:

023fcf00 <_ZN2ei8spectralL5coif1E>:
 23fcf00:	bc804071 bd94f4d7 3ec50d01 3f5a4229     q@.........>)BZ?
 23fcf10:	3ead00ec bd94f4d7 3d94f4d7 3ead00ec     ...>.......=...>
 23fcf20:	bf5a4229 3ec50d01 3d94f4d7 bc804071     )BZ....>...=q@..

023fcf30 <_ZN2ei8spectralL5coif2E>:
 23fcf30:	ba3ce341 baeef8bd 3bb7e021 3cc1fcec     A.<.....!..;...<
 23fcf40:	bd737181 bd9ca60e 3ed581b4 3f500ea8     .qs........>..P?
 23fcf50:	3ec5b038 bd89fa9f bd29d723 3c863ebc     8..>....#.)..>.<
 23fcf60:	bc863ebc bd29d723 3d89fa9f 3ec5b038     .>..#.)....=8..>
 23fcf70:	bf500ea8 3ed581b4 3d9ca60e bd737181     ..P....>...=.qs.
 23fcf80:	bcc1fcec 3bb7e021 3aeef8bd ba3ce341     ....!..;...:A.<.

023fcf90 <_ZN2ei8spectralL5coif3E>:
 23fcf90:	b8111f39 b894dcdf 39f46e95 3a9279b5     9........n.9.y.:
 23fcfa0:	bb28b93d bc139631 3c8217eb 3d0d8993     =.(.1......<...=
 23fcfb0:	bda88dea bd930bc9 3edb6230 3f4b34fc     ........0b.>.4K?
 23fcfc0:	3ecf7359 bd7a5c85 bd86b36c 3cc01fde     Ys.>.\z.l......<
 23fcfd0:	3bff0527 bb789c96 3b789c96 3bff0527     '..;..x...x;'..;
 23fcfe0:	bcc01fde bd86b36c 3d7a5c85 3ecf7359     ....l....\z=Ys.>
 23fcff0:	bf4b34fc 3edb6230 3d930bc9 bda88dea     .4K.0b.>...=....
 23fd000:	bd0d8993 3c8217eb 3c139631 bb28b93d     .......<1..<=.(.
 23fd010:	ba9279b5 39f46e95 3894dcdf b8111f39     .y...n.9...89...

023fd020 <_ZN2ei8spectralL5sym10E>:
 23fd020:	3a49e48d 38c88e66 bc0d943c bac01215     ..I:f..8<.......
 23fd030:	3d3c1e33 3c3e376d be235278 bd9129d0     3.<=m7><xR#..)..
 23fd040:	3ef18170 3f44fe9c 3ec484f1 bd118ef9     p..>..D?...>....
 23fd050:	bd030802 3d4cc787 3bbce796 bca6bf67     ......L=...;g...
 23fd060:	ba52db9d 3b968255 386f3a07 b9f0d227     ..R.U..;.:o8'...
 23fd070:	39f0d227 386f3a07 bb968255 ba52db9d     '..9.:o8U.....R.
 23fd080:	3ca6bf67 3bbce796 bd4cc787 bd030802     g..<...;..L.....
 23fd090:	3d118ef9 3ec484f1 bf44fe9c 3ef18170     ...=...>..D.p..>
 23fd0a0:	3d9129d0 be235278 bc3e376d 3d3c1e33     .).=xR#.m7>.3.<=
 23fd0b0:	3ac01215 bc0d943c b8c88e66 3a49e48d     ...:<...f.....I:

023fd0c0 <_ZN2ei8spectralL7bior1p3E>:
 23fd0c0:	bdb504f3 3db504f3 3f3504f3 3f3504f3     .......=..5?..5?
 23fd0d0:	3db504f3 bdb504f3 80000000 00000000     ...=............
 23fd0e0:	bf3504f3 3f3504f3 80000000 00000000     ..5...5?........

023fd0f0 <_ZN2ei8spectralL7bior1p5E>:
 23fd0f0:	3c87c3b6 bc87c3b6 bdf8e6ce 3df8e6ce     ...<...........=
 23fd100:	3f3504f3 3f3504f3 3df8e6ce bdf8e6ce     ..5?..5?...=....
 23fd110:	bc87c3b6 3c87c3b6 80000000 00000000     .......<........
 23fd120:	80000000 00000000 bf3504f3 3f3504f3     ..........5...5?
 23fd130:	80000000 00000000 80000000 00000000     ................

023fd140 <_ZN2ei8spectralL7bior2p2E>:
 23fd140:	00000000 be3504f3 3eb504f3 3f87c3b6     ......5....>...?
 23fd150:	3eb504f3 be3504f3 80000000 3eb504f3     ...>..5........>
 23fd160:	bf3504f3 3eb504f3 80000000 00000000     ..5....>........

023fd170 <_ZN2ei8spectralL7bior2p4E>:
 23fd170:	00000000 3d07c3b6 bd87c3b6 be3504f3     .......=......5.
 23fd180:	3ed6f5e1 3f7e8ef6 3ed6f5e1 be3504f3     ...>..~?...>..5.
 23fd190:	bd87c3b6 3d07c3b6 80000000 00000000     .......=........
 23fd1a0:	80000000 3eb504f3 bf3504f3 3eb504f3     .......>..5....>
 23fd1b0:	80000000 00000000 80000000 00000000     ................

023fd1c0 <_ZN2ei8spectralL7bior2p6E>:
 23fd1c0:	00000000 bbe24630 3c624630 3d405542     ....0F..0Fb<BU@=
 23fd1d0:	bddc9e08 be2df2c2 3ee51a44 3f777cc5     ......-.D..>.|w?
 23fd1e0:	3ee51a44 be2df2c2 bddc9e08 3d405542     D..>..-.....BU@=
 23fd1f0:	3c624630 bbe24630 80000000 00000000     0Fb<0F..........
 23fd200:	80000000 00000000 80000000 3eb504f3     ...............>
 23fd210:	bf3504f3 3eb504f3 80000000 00000000     ..5....>........
 23fd220:	80000000 00000000 80000000 00000000     ................

023fd230 <_ZN2ei8spectralL7bior2p8E>:
 23fd230:	00000000 3ac5fd6a bb45fd6a bc5421cd     ....j..:j.E..!T.
 23fd240:	3cece17a 3d5914f0 be0a26a7 be27c2d6     z..<..Y=.&....'.
 23fd250:	3eecd62a 3f739ed1 3eecd62a be27c2d6     *..>..s?*..>..'.
 23fd260:	be0a26a7 3d5914f0 3cece17a bc5421cd     .&....Y=z..<.!T.
 23fd270:	bb45fd6a 3ac5fd6a 80000000 00000000     j.E.j..:........
 23fd280:	80000000 00000000 80000000 00000000     ................
 23fd290:	80000000 3eb504f3 bf3504f3 3eb504f3     .......>..5....>
 23fd2a0:	80000000 00000000 80000000 00000000     ................
 23fd2b0:	80000000 00000000 80000000 00000000     ................

023fd2c0 <_ZN2ei8spectralL7bior3p1E>:
 23fd2c0:	beb504f3 3f87c3b6 3f87c3b6 beb504f3     .......?...?....
 23fd2d0:	be3504f3 3f07c3b6 bf07c3b6 3e3504f3     ..5....?......5>

023fd2e0 <_ZN2ei8spectralL7bior3p3E>:
 23fd2e0:	3d87c3b6 be4ba592 be1e6455 3f7e8ef6     ...=..K.Ud....~?
 23fd2f0:	3f7e8ef6 be1e6455 be4ba592 3d87c3b6     ..~?Ud....K....=
 23fd300:	80000000 00000000 be3504f3 3f07c3b6     ..........5....?
 23fd310:	bf07c3b6 3e3504f3 80000000 00000000     ......5>........

023fd320 <_ZN2ei8spectralL7bior3p5E>:
 23fd320:	bc624630 3d29b4a4 3d56f5e1 be892dc0     0Fb...)=..V=.-..
 23fd330:	bd931406 3f777cc5 3f777cc5 bd931406     .....|w?.|w?....
 23fd340:	be892dc0 3d56f5e1 3d29b4a4 bc624630     .-....V=..)=0Fb.
 23fd350:	80000000 00000000 80000000 00000000     ................
 23fd360:	be3504f3 3f07c3b6 bf07c3b6 3e3504f3     ..5....?......5>
 23fd370:	80000000 00000000 80000000 00000000     ................

023fd380 <_ZN2ei8spectralL7bior3p7E>:
 23fd380:	3b45fd6a bc147e10 bc89e2c5 3d98e96e     j.E;.~......n..=
 23fd390:	3d005702 be9a3187 bcd914f0 3f739ed1     .W.=.1........s?
 23fd3a0:	3f739ed1 bcd914f0 be9a3187 3d005702     ..s?.....1...W.=
 23fd3b0:	3d98e96e bc89e2c5 bc147e10 3b45fd6a     n..=.....~..j.E;
 23fd3c0:	80000000 00000000 80000000 00000000     ................
 23fd3d0:	80000000 00000000 be3504f3 3f07c3b6     ..........5....?
 23fd3e0:	bf07c3b6 3e3504f3 80000000 00000000     ......5>........
 23fd3f0:	80000000 00000000 80000000 00000000     ................

023fd400 <_ZN2ei8spectralL7bior3p9E>:
 23fd400:	ba3230df 3b05a4a8 3ba5d109 bca8e8fe     .02....;...;....
 23fd410:	bc673953 3dcb072d 3c498683 bea3f034     S9g.-..=..I<4...
 23fd420:	3b0659ad 3f712f26 3f712f26 3b0659ad     .Y.;&/q?&/q?.Y.;
 23fd430:	bea3f034 3c498683 3dcb072d bc673953     4.....I<-..=S9g.
 23fd440:	bca8e8fe 3ba5d109 3b05a4a8 ba3230df     .......;...;.02.
 23fd450:	80000000 00000000 80000000 00000000     ................
 23fd460:	80000000 00000000 80000000 00000000     ................
 23fd470:	be3504f3 3f07c3b6 bf07c3b6 3e3504f3     ..5....?......5>
 23fd480:	80000000 00000000 80000000 00000000     ................
 23fd490:	80000000 00000000 80000000 00000000     ................

023fd4a0 <_ZN2ei8spectralL7bior4p4E>:
 23fd4a0:	00000000 3d1af203 bcc35ff4 bde28f0c     .......=._......
 23fd4b0:	3ec13af2 3f5a4a76 3ec13af2 bde28f0c     .:.>vJZ?.:.>....
 23fd4c0:	bcc35ff4 3d1af203 80000000 bd842cf6     ._.....=.....,..
 23fd4d0:	3d26a9f2 3ed61031 bf49da31 3ed61031     ..&=1..>1.I.1..>
 23fd4e0:	3d26a9f2 bd842cf6 80000000 00000000     ..&=.,..........

023fd4f0 <_ZN2ei8spectralL7bior5p5E>:
	...
 23fd4f8:	3d228eee 3c0238c9 bd5f156c 3eb0f32d     .."=.8.<l._.-..>
 23fd508:	3f3c95c3 3eb0f32d bd5f156c 3c0238c9     ..<?-..>l._..8.<
 23fd518:	3d228eee 00000000 bc5c7988 bb309e0b     .."=.....y\...0.
 23fd528:	3e0bfcd0 bdbf7f64 bef41f8f 3f664608     ...>d........Ff?
 23fd538:	bef41f8f bdbf7f64 3e0bfcd0 bb309e0b     ....d......>..0.
 23fd548:	bc5c7988 00000000                       .y\.....

023fd550 <_ZN2ei8spectralL7bior6p8E>:
 23fd550:	00000000 3afa31c4 bafae8c9 bc8b2ff4     .....1.:...../..
 23fd560:	3c438932 3d4bb4bb bd9e3c28 bdc0a21d     2.C<..K=(<......
 23fd570:	3ed7729c 3f536fb1 3ed7729c bdc0a21d     .r.>.oS?.r.>....
 23fd580:	bd9e3c28 3d4bb4bb 3c438932 bc8b2ff4     (<....K=2.C<./..
 23fd590:	bafae8c9 3afa31c4 80000000 00000000     .....1.:........
 23fd5a0:	80000000 3c6c5c37 bc6d091d bda13900     ....7\l<..m..9..
 23fd5b0:	3d2558e5 3ed5f052 bf4247c7 3ed5f052     .X%=R..>.GB.R..>
 23fd5c0:	3d2558e5 bda13900 bc6d091d 3c6c5c37     .X%=.9....m.7\l<
 23fd5d0:	80000000 00000000 80000000 00000000     ................

023fd5e0 <_ZN2ei8spectralL7rbio1p3E>:
	...
 23fd5e8:	3f3504f3 3f3504f3 00000000 00000000     ..5?..5?........
 23fd5f8:	3db504f3 3db504f3 bf3504f3 3f3504f3     ...=...=..5...5?
 23fd608:	bdb504f3 bdb504f3                       ........

023fd610 <_ZN2ei8spectralL7rbio1p5E>:
	...
 23fd620:	3f3504f3 3f3504f3 00000000 00000000     ..5?..5?........
	...
 23fd638:	bc87c3b6 bc87c3b6 3df8e6ce 3df8e6ce     ...........=...=
 23fd648:	bf3504f3 3f3504f3 bdf8e6ce bdf8e6ce     ..5...5?........
 23fd658:	3c87c3b6 3c87c3b6                       ...<...<

023fd660 <_ZN2ei8spectralL7rbio2p2E>:
	...
 23fd668:	3eb504f3 3f3504f3 3eb504f3 00000000     ...>..5?...>....
 23fd678:	3e3504f3 3eb504f3 bf87c3b6 3eb504f3     ..5>...>.......>
 23fd688:	3e3504f3 00000000                       ..5>....

023fd690 <_ZN2ei8spectralL7rbio2p4E>:
	...
 23fd6a0:	3eb504f3 3f3504f3 3eb504f3 00000000     ...>..5?...>....
	...
 23fd6b8:	bd07c3b6 bd87c3b6 3e3504f3 3ed6f5e1     ..........5>...>
 23fd6c8:	bf7e8ef6 3ed6f5e1 3e3504f3 bd87c3b6     ..~....>..5>....
 23fd6d8:	bd07c3b6 00000000                       ........

023fd6e0 <_ZN2ei8spectralL7rbio2p6E>:
	...
 23fd6f8:	3eb504f3 3f3504f3 3eb504f3 00000000     ...>..5?...>....
	...
 23fd718:	3be24630 3c624630 bd405542 bddc9e08     0F.;0Fb<BU@.....
 23fd728:	3e2df2c2 3ee51a44 bf777cc5 3ee51a44     ..->D..>.|w.D..>
 23fd738:	3e2df2c2 bddc9e08 bd405542 3c624630     ..->....BU@.0Fb<
 23fd748:	3be24630 00000000                       0F.;....

023fd750 <_ZN2ei8spectralL7rbio2p8E>:
	...
 23fd770:	3eb504f3 3f3504f3 3eb504f3 00000000     ...>..5?...>....
	...
 23fd798:	bac5fd6a bb45fd6a 3c5421cd 3cece17a     j...j.E..!T<z..<
 23fd7a8:	bd5914f0 be0a26a7 3e27c2d6 3eecd62a     ..Y..&....'>*..>
 23fd7b8:	bf739ed1 3eecd62a 3e27c2d6 be0a26a7     ..s.*..>..'>.&..
 23fd7c8:	bd5914f0 3cece17a 3c5421cd bb45fd6a     ..Y.z..<.!T<j.E.
 23fd7d8:	bac5fd6a 00000000                       j.......

023fd7e0 <_ZN2ei8spectralL7rbio3p1E>:
 23fd7e0:	3e3504f3 3f07c3b6 3f07c3b6 3e3504f3     ..5>...?...?..5>
 23fd7f0:	3eb504f3 3f87c3b6 bf87c3b6 beb504f3     ...>...?........

023fd800 <_ZN2ei8spectralL7rbio3p3E>:
	...
 23fd808:	3e3504f3 3f07c3b6 3f07c3b6 3e3504f3     ..5>...?...?..5>
	...
 23fd820:	bd87c3b6 be4ba592 3e1e6455 3f7e8ef6     ......K.Ud.>..~?
 23fd830:	bf7e8ef6 be1e6455 3e4ba592 3d87c3b6     ..~.Ud....K>...=

023fd840 <_ZN2ei8spectralL7rbio3p5E>:
	...
 23fd850:	3e3504f3 3f07c3b6 3f07c3b6 3e3504f3     ..5>...?...?..5>
	...
 23fd870:	3c624630 3d29b4a4 bd56f5e1 be892dc0     0Fb<..)=..V..-..
 23fd880:	3d931406 3f777cc5 bf777cc5 bd931406     ...=.|w?.|w.....
 23fd890:	3e892dc0 3d56f5e1 bd29b4a4 bc624630     .-.>..V=..).0Fb.

023fd8a0 <_ZN2ei8spectralL7rbio3p7E>:
	...
 23fd8b8:	3e3504f3 3f07c3b6 3f07c3b6 3e3504f3     ..5>...?...?..5>
	...
 23fd8e0:	bb45fd6a bc147e10 3c89e2c5 3d98e96e     j.E..~.....<n..=
 23fd8f0:	bd005702 be9a3187 3cd914f0 3f739ed1     .W...1.....<..s?
 23fd900:	bf739ed1 bcd914f0 3e9a3187 3d005702     ..s......1.>.W.=
 23fd910:	bd98e96e bc89e2c5 3c147e10 3b45fd6a     n........~.<j.E;

023fd920 <_ZN2ei8spectralL7rbio3p9E>:
	...
 23fd940:	3e3504f3 3f07c3b6 3f07c3b6 3e3504f3     ..5>...?...?..5>
	...
 23fd970:	3a3230df 3b05a4a8 bba5d109 bca8e8fe     .02:...;........
 23fd980:	3c673953 3dcb072d bc498683 bea3f034     S9g<-..=..I.4...
 23fd990:	bb0659ad 3f712f26 bf712f26 3b0659ad     .Y..&/q?&/q..Y.;
 23fd9a0:	3ea3f034 3c498683 bdcb072d bc673953     4..>..I<-...S9g.
 23fd9b0:	3ca8e8fe 3ba5d109 bb05a4a8 ba3230df     ...<...;.....02.

023fd9c0 <_ZN2ei8spectralL7rbio4p4E>:
	...
 23fd9c8:	bd842cf6 bd26a9f2 3ed61031 3f49da31     .,....&.1..>1.I?
 23fd9d8:	3ed61031 bd26a9f2 bd842cf6 00000000     1..>..&..,......
 23fd9e8:	bd1af203 bcc35ff4 3de28f0c 3ec13af2     ....._.....=.:.>
 23fd9f8:	bf5a4a76 3ec13af2 3de28f0c bcc35ff4     vJZ..:.>...=._..
 23fda08:	bd1af203 00000000                       ........

023fda10 <_ZN2ei8spectralL7rbio5p5E>:
 23fda10:	00000000 3c5c7988 bb309e0b be0bfcd0     .....y\<..0.....
 23fda20:	bdbf7f64 3ef41f8f 3f664608 3ef41f8f     d......>.Ff?...>
 23fda30:	bdbf7f64 be0bfcd0 bb309e0b 3c5c7988     d.........0..y\<
 23fda40:	80000000 3d228eee bc0238c9 bd5f156c     ......"=.8..l._.
 23fda50:	beb0f32d 3f3c95c3 beb0f32d bd5f156c     -.....<?-...l._.
 23fda60:	bc0238c9 3d228eee 80000000 00000000     .8...."=........

023fda70 <_ZN2ei8spectralL7rbio6p8E>:
	...
 23fda80:	3c6c5c37 3c6d091d bda13900 bd2558e5     7\l<..m<.9...X%.
 23fda90:	3ed5f052 3f4247c7 3ed5f052 bd2558e5     R..>.GB?R..>.X%.
 23fdaa0:	bda13900 3c6d091d 3c6c5c37 00000000     .9....m<7\l<....
	...
 23fdab8:	bafa31c4 bafae8c9 3c8b2ff4 3c438932     .1......./.<2.C<
 23fdac8:	bd4bb4bb bd9e3c28 3dc0a21d 3ed7729c     ..K.(<.....=.r.>
 23fdad8:	bf536fb1 3ed7729c 3dc0a21d bd9e3c28     .oS..r.>...=(<..
 23fdae8:	bd4bb4bb 3c438932 3c8b2ff4 bafae8c9     ..K.2.C<./.<....
 23fdaf8:	bafa31c4 00000000 20544646 676e656c     .1......FFT leng
 23fdb08:	6d206874 20747375 65206562 0a6e6576     th must be even.
 23fdb18:	73696b00 66662073 73752074 20656761     .kiss fft usage 
 23fdb28:	6f727265 69203a72 6f72706d 20726570     error: improper 
 23fdb38:	6f6c6c61 55000a63 6f6e6b6e 74206e77     alloc..Unknown t
 23fdb48:	00657079 59544f4e 46004550 54414f4c     ype.NOTYPE.FLOAT
 23fdb58:	55003233 38544e49 52545300 00474e49     32.UINT8.STRING.
 23fdb68:	4c4f4f42 4d4f4300 58454c50 46003436     BOOL.COMPLEX64.F
 23fdb78:	54414f4c 46003631 54414f4c 43003436     LOAT16.FLOAT64.C
 23fdb88:	4c504d4f 32315845 49550038 3436544e     OMPLEX128.UINT64
 23fdb98:	53455200 4352554f 41560045 4e414952     .RESOURCE.VARIAN
 23fdba8:	49550054 3233544e 4e495500 00363154     T.UINT32.UINT16.
 23fdbb8:	34544e49 00000000                       INT4....

023fdbc0 <CSWTCH.28>:
 23fdbc0:	023fdb4c 023fdb53 023fdbab 023fdb5b     L.?.S.?...?.[.?.
 23fdbd0:	023fdb93 023fdb61 023fdb68 023fdbb2     ..?.a.?.h.?...?.
 23fdbe0:	023fdb6d 023fdb5c 023fdb77 023fdb7f     m.?.\.?.w.?...?.
 23fdbf0:	023fdb87 023fdb92 023fdb99 023fdba2     ..?...?...?...?.
 23fdc00:	023fdbaa 023fdbb1 023fdbb8 75736e55     ..?...?...?.Unsu
 23fdc10:	726f7070 20646574 61746164 70797420     pported data typ
 23fdc20:	64252065 206e6920 736e6574 000a726f     e %d in tensor..
 23fdc30:	6573552f 732f7372 6e776168 656d7968     /Users/shawnhyme
 23fdc40:	72502f6c 63656a6f 502f7374 69747261     l/Projects/Parti
 23fdc50:	2f656c63 74726170 656c6369 2d32702d     cle/particle-p2-
 23fdc60:	74736567 73657275 666e695f 6e657265     gestures_inferen
 23fdc70:	676e6963 72732f2f 64652f63 692d6567     cing//src/edge-i
 23fdc80:	6c75706d 732d6573 742f6b64 6f736e65     mpulse-sdk/tenso
 23fdc90:	6f6c6672 696c2f77 632f6574 2f65726f     rflow/lite/core/
 23fdca0:	2f697061 74616c66 66667562 635f7265     api/flatbuffer_c
 23fdcb0:	65766e6f 6f697372 632e736e 25007070     onversions.cpp.%
 23fdcc0:	64253a73 20732520 20736177 20746f6e     s:%d %s was not 
 23fdcd0:	65757274 6170002e 736d6172 203d2120     true..params != 
 23fdce0:	6c6c756e 00727470 61686e55 656c646e     nullptr.Unhandle
 23fdcf0:	75662064 2d796c6c 6e6e6f63 65746365     d fully-connecte
 23fdd00:	65772064 74686769 6f662073 74616d72     d weights format
 23fdd10:	704f002e 69756220 6e69746c 646f635f     ..Op builtin_cod
 23fdd20:	756f2065 666f2074 6e617220 203a6567     e out of range: 
 23fdd30:	202e6425 20657241 20756f79 6e697375     %d. Are you usin
 23fdd40:	6c6f2067 46542064 6574694c 6e696220     g old TFLite bin
 23fdd50:	20797261 68746977 77656e20 6d207265     ary with newer m
 23fdd60:	6c65646f 7562003f 73692074 206e6920     odel?.but is in 
 23fdd70:	6c6c7566 4c465420 20657469 672e6528     full TFLite (e.g
 23fdd80:	6e6f202e 6e694c20 2e297875 6944000a     . on Linux)...Di
 23fdd90:	74276e64 6e696620 706f2064 726f6620     dn't find op for
 23fdda0:	69756220 6e69746c 63706f20 2065646f      builtin opcode 
 23fddb0:	27732527 72657620 6e6f6973 64252720     '%s' version '%d
 23fddc0:	54202e27 20736968 65646f6d 7369206c     '. This model is
 23fddd0:	746f6e20 70757320 74726f70 62206465      not supported b
 23fdde0:	4f452079 6f43204e 6c69706d 6f207265     y EON Compiler o
 23fddf0:	65542066 726f736e 776f6c46 74694c20     f TensorFlow Lit
 23fde00:	694d2065 2c6f7263 65704f00 6f746172     e Micro,.Operato
 23fde10:	69772072 43206874 4f545355 7562204d     r with CUSTOM bu
 23fde20:	69746c69 6f635f6e 68206564 6e207361     iltin_code has n
 23fde30:	7563206f 6d6f7473 646f635f 000a2e65     o custom_code...
 23fde40:	00444441 52455641 5f454741 4c4f4f50     ADD.AVERAGE_POOL
 23fde50:	0044325f 434e4f43 4e455441 4f495441     _2D.CONCATENATIO
 23fde60:	4544004e 57485450 5f455349 564e4f43     N.DEPTHWISE_CONV
 23fde70:	0044325f 54504544 4f545f48 4150535f     _2D.DEPTH_TO_SPA
 23fde80:	44004543 41555145 5a49544e 4d450045     CE.DEQUANTIZE.EM
 23fde90:	44444542 5f474e49 4b4f4f4c 46005055     BEDDING_LOOKUP.F
 23fdea0:	524f4f4c 4c554600 435f594c 454e4e4f     LOOR.FULLY_CONNE
 23fdeb0:	44455443 53414800 42415448 4c5f454c     CTED.HASHTABLE_L
 23fdec0:	554b4f4f 324c0050 524f4e5f 494c414d     OOKUP.L2_NORMALI
 23fded0:	4954415a 4c004e4f 4f505f32 325f4c4f     ZATION.L2_POOL_2
 23fdee0:	4f4c0044 5f4c4143 50534552 45534e4f     D.LOCAL_RESPONSE
 23fdef0:	524f4e5f 494c414d 4954415a 4c004e4f     _NORMALIZATION.L
 23fdf00:	5349474f 00434954 5f48534c 4a4f5250     OGISTIC.LSH_PROJ
 23fdf10:	49544345 4d004e4f 505f5841 5f4c4f4f     ECTION.MAX_POOL_
 23fdf20:	52004432 5f554c45 545f314e 00315f4f     2D.RELU_N1_TO_1.
 23fdf30:	554c4552 45520036 50414853 45520045     RELU6.RESHAPE.RE
 23fdf40:	455a4953 4c49425f 41454e49 50530052     SIZE_BILINEAR.SP
 23fdf50:	5f454341 445f4f54 48545045 44565300     ACE_TO_DEPTH.SVD
 23fdf60:	41540046 4300484e 41434e4f 4d455f54     F.TANH.CONCAT_EM
 23fdf70:	44444542 53474e49 494b5300 52475f50     BEDDINGS.SKIP_GR
 23fdf80:	43004d41 004c4c41 54535543 45004d4f     AM.CALL.CUSTOM.E
 23fdf90:	4445424d 474e4944 4f4f4c5f 5f50554b     MBEDDING_LOOKUP_
 23fdfa0:	52415053 55004553 4944494e 54434552     SPARSE.UNIDIRECT
 23fdfb0:	414e4f49 45535f4c 4e455551 525f4543     IONAL_SEQUENCE_R
 23fdfc0:	47004e4e 45485441 41420052 5f484354     NN.GATHER.BATCH_
 23fdfd0:	535f4f54 45434150 00444e5f 43415053     TO_SPACE_ND.SPAC
 23fdfe0:	4f545f45 5441425f 4e5f4843 454d0044     E_TO_BATCH_ND.ME
 23fdff0:	53004e41 53004255 45455551 5500455a     AN.SUB.SQUEEZE.U
 23fe000:	4944494e 54434552 414e4f49 45535f4c     NIDIRECTIONAL_SE
 23fe010:	4e455551 4c5f4543 004d5453 49525453     QUENCE_LSTM.STRI
 23fe020:	5f444544 43494c53 49420045 45524944     DED_SLICE.BIDIRE
 23fe030:	4f495443 5f4c414e 55514553 45434e45     CTIONAL_SEQUENCE
 23fe040:	4e4e525f 50584500 504f5400 32565f4b     _RNN.EXP.TOPK_V2
 23fe050:	4c505300 4c005449 535f474f 4d54464f     .SPLIT.LOG_SOFTM
 23fe060:	44005841 47454c45 00455441 49444942     AX.DELEGATE.BIDI
 23fe070:	54434552 414e4f49 45535f4c 4e455551     RECTIONAL_SEQUEN
 23fe080:	4c5f4543 004d5453 54534143 45525000     CE_LSTM.CAST.PRE
 23fe090:	4d00554c 4d495841 41004d55 4d5f4752     LU.MAXIMUM.ARG_M
 23fe0a0:	4d005841 4d494e49 4c004d55 00535345     AX.MINIMUM.LESS.
 23fe0b0:	0047454e 56444150 52470032 45544145     NEG.PADV2.GREATE
 23fe0c0:	52470052 45544145 51455f52 004c4155     R.GREATER_EQUAL.
 23fe0d0:	5353454c 5551455f 53004c41 43454c45     LESS_EQUAL.SELEC
 23fe0e0:	49530054 5254004e 50534e41 5f45534f     T.SIN.TRANSPOSE_
 23fe0f0:	564e4f43 41505300 5f455352 445f4f54     CONV.SPARSE_TO_D
 23fe100:	45534e45 4c495400 58450045 444e4150     ENSE.TILE.EXPAND
 23fe110:	4d49445f 4f4e0053 51455f54 004c4155     _DIMS.NOT_EQUAL.
 23fe120:	00474f4c 52515352 4f500054 52410057     LOG.RSQRT.POW.AR
 23fe130:	494d5f47 4146004e 515f454b 544e4155     G_MIN.FAKE_QUANT
 23fe140:	44455200 5f454355 444f5250 44455200     .REDUCE_PROD.RED
 23fe150:	5f454355 0058414d 49474f4c 5f4c4143     UCE_MAX.LOGICAL_
 23fe160:	4f00524f 485f454e 4c00544f 4349474f     OR.ONE_HOT.LOGIC
 23fe170:	415f4c41 4c00444e 4349474f 4e5f4c41     AL_AND.LOGICAL_N
 23fe180:	5500544f 4341504e 4552004b 45435544     OT.UNPACK.REDUCE
 23fe190:	4e494d5f 4f4c4600 445f524f 52005649     _MIN.FLOOR_DIV.R
 23fe1a0:	43554445 4e415f45 51530059 45524155     EDUCE_ANY.SQUARE
 23fe1b0:	52455a00 4c5f534f 00454b49 4c4c4946     .ZEROS_LIKE.FILL
 23fe1c0:	4f4c4600 4d5f524f 5200444f 45474e41     .FLOOR_MOD.RANGE
 23fe1d0:	53455200 5f455a49 5241454e 5f545345     .RESIZE_NEAREST_
 23fe1e0:	4749454e 524f4248 41454c00 525f594b     NEIGHBOR.LEAKY_R
 23fe1f0:	00554c45 41555153 5f444552 46464944     ELU.SQUARED_DIFF
 23fe200:	4e455245 4d004543 4f525249 41505f52     ERENCE.MIRROR_PA
 23fe210:	50530044 5f54494c 4e550056 45555149     D.SPLIT_V.UNIQUE
 23fe220:	49454300 4552004c 53524556 32565f45     .CEIL.REVERSE_V2
 23fe230:	44444100 47004e5f 45485441 444e5f52     .ADD_N.GATHER_ND
 23fe240:	534f4300 45485700 52004552 004b4e41     .COS.WHERE.RANK.
 23fe250:	45564552 5f455352 55514553 45434e45     REVERSE_SEQUENCE
 23fe260:	54414d00 5f584952 47414944 54414d00     .MATRIX_DIAG.MAT
 23fe270:	5f584952 5f544553 47414944 554f5200     RIX_SET_DIAG.ROU
 23fe280:	4800444e 5f445241 53495753 46490048     ND.HARD_SWISH.IF
 23fe290:	49485700 4e00454c 4d5f4e4f 535f5841     .WHILE.NON_MAX_S
 23fe2a0:	52505055 49535345 565f4e4f 4f4e0034     UPPRESSION_V4.NO
 23fe2b0:	414d5f4e 55535f58 45525050 4f495353     N_MAX_SUPPRESSIO
 23fe2c0:	35565f4e 41435300 52455454 00444e5f     N_V5.SCATTER_ND.
 23fe2d0:	454c4553 565f5443 45440032 4649534e     SELECT_V2.DENSIF
 23fe2e0:	41420059 5f484354 4d54414d 50004c55     Y.BATCH_MATMUL.P
 23fe2f0:	4543414c 444c4f48 465f5245 475f524f     LACEHOLDER_FOR_G
 23fe300:	54414552 4f5f5245 4f435f50 00534544     REATER_OP_CODES.
 23fe310:	534d5543 43004d55 5f4c4c41 45434e4f     CUMSUM.CALL_ONCE
 23fe320:	4f524200 41434441 545f5453 4652004f     .BROADCAST_TO.RF
 23fe330:	44325446 4e4f4300 44335f56 414d4900     FT2D.CONV_3D.IMA
 23fe340:	45520047 43004c41 4c504d4f 415f5845     G.REAL.COMPLEX_A
 23fe350:	48005342 54485341 454c4241 53414800     BS.HASHTABLE.HAS
 23fe360:	42415448 465f454c 00444e49 48534148     HTABLE_FIND.HASH
 23fe370:	4c424154 4d495f45 54524f50 53414800     TABLE_IMPORT.HAS
 23fe380:	42415448 535f454c 00455a49 55444552     HTABLE_SIZE.REDU
 23fe390:	415f4543 43004c4c 5f564e4f 545f4433     CE_ALL.CONV_3D_T
 23fe3a0:	534e4152 45534f50 52415600 4e41485f     RANSPOSE.VAR_HAN
 23fe3b0:	00454c44 44414552 5241565f 4c424149     DLE.READ_VARIABL
 23fe3c0:	53410045 4e474953 5241565f 4c424149     E.ASSIGN_VARIABL
 23fe3d0:	52420045 4344414f 5f545341 53475241     E.BROADCAST_ARGS
 23fe3e0:	4e415200 5f4d4f44 4e415453 44524144     .RANDOM_STANDARD
 23fe3f0:	524f4e5f 004c414d 4b435542 5a495445     _NORMAL.BUCKETIZ
 23fe400:	41520045 4d4f444e 494e555f 4d524f46     E.RANDOM_UNIFORM
 23fe410:	4c554d00 4f4e4954 4c41494d 4c454700     .MULTINOMIAL.GEL
 23fe420:	59440055 494d414e 50555f43 45544144     U.DYNAMIC_UPDATE
 23fe430:	494c535f 52004543 5f554c45 4f545f30     _SLICE.RELU_0_TO
 23fe440:	5500315f 524f534e 5f444554 4d474553     _1.UNSORTED_SEGM
 23fe450:	5f544e45 444f5250 534e5500 4554524f     ENT_PROD.UNSORTE
 23fe460:	45535f44 4e454d47 414d5f54 4e550058     D_SEGMENT_MAX.UN
 23fe470:	54524f53 535f4445 454d4745 535f544e     SORTED_SEGMENT_S
 23fe480:	41004d55 324e4154 534e5500 4554524f     UM.ATAN2.UNSORTE
 23fe490:	45535f44 4e454d47 494d5f54 4953004e     D_SEGMENT_MIN.SI
 23fe4a0:	00004e47                                GN..

023fe4a4 <_ZZN6tflite24EnumNamesBuiltinOperatorEvE5names>:
 23fe4a4:	023fde40 023fde44 023fde54 023fde6c     @.?.D.?.T.?.l.?.
 23fe4b4:	023fde62 023fde74 023fde83 023fde8e     b.?.t.?...?...?.
 23fe4c4:	023fde9f 023fdea5 023fdeb5 023fdec6     ..?...?...?...?.
 23fe4d4:	023fded7 023fdee2 023fdeff 023fdf08     ..?...?...?...?.
 23fe4e4:	023fe083 023fdf17 023fe2eb 023fe08e     ..?...?...?...?.
 23fe4f4:	023fdf23 023fdf30 023fdf36 023fdf3e     #.?.0.?.6.?.>.?.
 23fe504:	023fe041 023fe05b 023fdf4e 023fdf5d     A.?.[.?.N.?.].?.
 23fe514:	023fdf62 023fdf67 023fdf79 023fdf83     b.?.g.?.y.?...?.
 23fe524:	023fdf88 023fdf8f 023fe20e 023fdfa7     ..?...?...?...?.
 23fe534:	023fdfc3 023fdfca 023fdfdc 023fe39f     ..?...?...?...?.
 23fe544:	023fdfee 023fdff3 023fe19b 023fdff7     ..?...?...?...?.
 23fe554:	023fdfff 023fe01c 023fe02a 023fe045     ..?...?.*.?.E.?.
 23fe564:	023fe049 023fe051 023fe057 023fe063     I.?.Q.?.W.?.c.?.
 23fe574:	023fe06c 023fe088 023fe08d 023fe093     l.?...?...?...?.
 23fe584:	023fe09b 023fe0a3 023fe0ab 023fe0b0     ..?...?...?...?.
 23fe594:	023fe0b4 023fe0ba 023fe0c2 023fe0d0     ..?...?...?...?.
 23fe5a4:	023fe0db 023fe024 023fe0e2 023fe0e6     ..?.$.?...?...?.
 23fe5b4:	023fe0f5 023fe105 023fe10a 023fe0ca     ..?...?...?...?.
 23fe5c4:	023fe116 023fe120 023fe313 023fe125     ..?. .?...?.%.?.
 23fe5d4:	023fe124 023fdf38 023fe12a 023fe12e     $.?.8.?.*.?...?.
 23fe5e4:	023fe136 023fe141 023fe14d 023fe185     6.?.A.?.M.?...?.
 23fe5f4:	023fe158 023fe163 023fe16b 023fe177     X.?.c.?.k.?.w.?.
 23fe604:	023fe183 023fe18a 023fe195 023fe19f     ..?...?...?...?.
 23fe614:	023fe1aa 023fe1b1 023fe1bc 023fe1c1     ..?...?...?...?.
 23fe624:	023fe1cb 023fe1d1 023fe1e9 023fe1f4     ..?...?...?...?.
 23fe634:	023fe207 023fe34f 023fe212 023fe21a     ..?.O.?...?...?.
 23fe644:	023fe221 023fe226 023fe231 023fe237     !.?.&.?.1.?.7.?.
 23fe654:	023fe241 023fe245 023fe24b 023fe41e     A.?.E.?.K.?...?.
 23fe664:	023fe250 023fe261 023fde85 023fe26d     P.?.a.?...?.m.?.
 23fe674:	023fe27d 023fe283 023fe28e 023fe291     }.?...?...?...?.
 23fe684:	023fe297 023fe2ae 023fe2c5 023fe2d0     ..?...?...?...?.
 23fe694:	023fe2da 023fe477 023fe2e2 023fe2ef     ..?.w.?...?...?.
 23fe6a4:	023fe310 023fe317 023fe321 023fe32e     ..?...?.!.?...?.
 23fe6b4:	023fe335 023fe33d 023fe342 023fe347     5.?.=.?.B.?.G.?.
 23fe6c4:	023fe353 023fe35d 023fe36c 023fe37d     S.?.].?.l.?.}.?.
 23fe6d4:	023fe38c 023fe397 023fe3a9 023fe3b4     ..?...?...?...?.
 23fe6e4:	023fe3c2 023fe3d2 023fe3e1 023fe3f8     ..?...?...?...?.
 23fe6f4:	023fe402 023fe411 023fe41d 023fe422     ..?...?...?.".?.
 23fe704:	023fe437 023fe443 023fe459 023fe46e     7.?.C.?.Y.?.n.?.
 23fe714:	023fe483 023fe489 023fe49e 00000000     ..?...?...?.....
 23fe724:	6573552f 732f7372 6e776168 656d7968     /Users/shawnhyme
 23fe734:	72502f6c 63656a6f 502f7374 69747261     l/Projects/Parti
 23fe744:	2f656c63 74726170 656c6369 2d32702d     cle/particle-p2-
 23fe754:	74736567 73657275 666e695f 6e657265     gestures_inferen
 23fe764:	676e6963 72732f2f 64652f63 692d6567     cing//src/edge-i
 23fe774:	6c75706d 732d6573 742f6b64 6f736e65     mpulse-sdk/tenso
 23fe784:	6f6c6672 696c2f77 6b2f6574 656e7265     rflow/lite/kerne
 23fe794:	6b2f736c 656e7265 74755f6c 6c5f6c69     ls/kernel_util_l
 23fe7a4:	2e657469 00707063 695f6f6e 6765746e     ite.cpp.no_integ
 23fe7b4:	6f5f7265 66726576 5f776f6c 6d6f7266     er_overflow_from
 23fe7c4:	6175715f 7a69746e 6f697461 6e69006e     _quantization.in
 23fe7d4:	5f747570 646f7270 5f746375 6c616373     put_product_scal
 23fe7e4:	3d3e2065 73003020 656c6163 6669645f     e >= 0.scale_dif
 23fe7f4:	202f2066 7074756f 735f7475 656c6163     f / output_scale
 23fe804:	203d3c20 32302e30 6c616600 69006573      <= 0.02.false.i
 23fe814:	73203c20 28657a69 6c660029 75627461      < size().flatbu
 23fe824:	72656666 563a3a73 6f746365 3e543c72     ffers::Vector<T>
 23fe834:	65723a3a 6e727574 7079745f 6c662065     ::return_type fl
 23fe844:	75627461 72656666 563a3a73 6f746365     atbuffers::Vecto
 23fe854:	3e543c72 65473a3a 6c662874 75627461     r<T>::Get(flatbu
 23fe864:	72656666 753a3a73 7366666f 745f7465     ffers::uoffset_t
 23fe874:	6f632029 2074736e 7469775b 20542068     ) const [with T 
 23fe884:	6c66203d 75627461 72656666 4f3a3a73     = flatbuffers::O
 23fe894:	65736666 66743c74 6574696c 75533a3a     ffset<tflite::Su
 23fe8a4:	61724762 3b3e6870 616c6620 66756274     bGraph>; flatbuf
 23fe8b4:	73726566 65563a3a 726f7463 3a3e543c     fers::Vector<T>:
 23fe8c4:	7465723a 5f6e7275 65707974 63203d20     :return_type = c
 23fe8d4:	74736e6f 6c667420 3a657469 6275533a     onst tflite::Sub
 23fe8e4:	70617247 203b2a68 74616c66 66667562     Graph*; flatbuff
 23fe8f4:	3a737265 666f753a 74657366 3d20745f     ers::uoffset_t =
 23fe904:	6e6f6c20 6e752067 6e676973 69206465      long unsigned i
 23fe914:	005d746e 6573552f 732f7372 6e776168     nt]./Users/shawn
 23fe924:	656d7968 72502f6c 63656a6f 502f7374     hymel/Projects/P
 23fe934:	69747261 2f656c63 74726170 656c6369     article/particle
 23fe944:	2d32702d 74736567 73657275 666e695f     -p2-gestures_inf
 23fe954:	6e657265 676e6963 72732f2f 64652f63     erencing//src/ed
 23fe964:	692d6567 6c75706d 732d6573 742f6b64     ge-impulse-sdk/t
 23fe974:	64726968 7261705f 662f7974 6274616c     hird_party/flatb
 23fe984:	65666675 692f7372 756c636e 662f6564     uffers/include/f
 23fe994:	6274616c 65666675 662f7372 65765f62     latbuffers/fb_ve
 23fe9a4:	726f7463 6600682e 6274616c 65666675     ctor.h.flatbuffe
 23fe9b4:	3a3a7372 74636556 543c726f 723a3a3e     rs::Vector<T>::r
 23fe9c4:	72757465 79745f6e 66206570 6274616c     eturn_type flatb
 23fe9d4:	65666675 3a3a7372 74636556 543c726f     uffers::Vector<T
 23fe9e4:	473a3a3e 66287465 6274616c 65666675     >::Get(flatbuffe
 23fe9f4:	3a3a7372 66666f75 5f746573 63202974     rs::uoffset_t) c
 23fea04:	74736e6f 69775b20 54206874 66203d20     onst [with T = f
 23fea14:	6274616c 65666675 3a3a7372 7366664f     latbuffers::Offs
 23fea24:	743c7465 74696c66 423a3a65 65666675     et<tflite::Buffe
 23fea34:	203b3e72 74616c66 66667562 3a737265     r>; flatbuffers:
 23fea44:	6365563a 3c726f74 3a3a3e54 75746572     :Vector<T>::retu
 23fea54:	745f6e72 20657079 6f63203d 2074736e     rn_type = const 
 23fea64:	696c6674 3a3a6574 66667542 3b2a7265     tflite::Buffer*;
 23fea74:	616c6620 66756274 73726566 6f753a3a      flatbuffers::uo
 23fea84:	65736666 20745f74 6f6c203d 7520676e     ffset_t = long u
 23fea94:	6769736e 2064656e 5d746e69 616c6600     nsigned int].fla
 23feaa4:	66756274 73726566 65563a3a 726f7463     tbuffers::Vector
 23feab4:	3a3e543c 7465723a 5f6e7275 65707974     <T>::return_type
 23feac4:	616c6620 66756274 73726566 65563a3a      flatbuffers::Ve
 23fead4:	726f7463 3a3e543c 7465473a 616c6628     ctor<T>::Get(fla
 23feae4:	66756274 73726566 6f753a3a 65736666     tbuffers::uoffse
 23feaf4:	29745f74 6e6f6320 5b207473 68746977     t_t) const [with
 23feb04:	3d205420 6e6f6c20 6e692067 66203b74      T = long int; f
 23feb14:	6274616c 65666675 3a3a7372 74636556     latbuffers::Vect
 23feb24:	543c726f 723a3a3e 72757465 79745f6e     or<T>::return_ty
 23feb34:	3d206570 6e6f6c20 6e692067 66203b74     pe = long int; f
 23feb44:	6274616c 65666675 3a3a7372 66666f75     latbuffers::uoff
 23feb54:	5f746573 203d2074 676e6f6c 736e7520     set_t = long uns
 23feb64:	656e6769 6e692064 66005d74 6274616c     igned int].flatb
 23feb74:	65666675 3a3a7372 74636556 543c726f     uffers::Vector<T
 23feb84:	723a3a3e 72757465 79745f6e 66206570     >::return_type f
 23feb94:	6274616c 65666675 3a3a7372 74636556     latbuffers::Vect
 23feba4:	543c726f 473a3a3e 66287465 6274616c     or<T>::Get(flatb
 23febb4:	65666675 3a3a7372 66666f75 5f746573     uffers::uoffset_
 23febc4:	63202974 74736e6f 69775b20 54206874     t) const [with T
 23febd4:	66203d20 6274616c 65666675 3a3a7372      = flatbuffers::
 23febe4:	7366664f 743c7465 74696c66 543a3a65     Offset<tflite::T
 23febf4:	6f736e65 203b3e72 74616c66 66667562     ensor>; flatbuff
 23fec04:	3a737265 6365563a 3c726f74 3a3a3e54     ers::Vector<T>::
 23fec14:	75746572 745f6e72 20657079 6f63203d     return_type = co
 23fec24:	2074736e 696c6674 3a3a6574 736e6554     nst tflite::Tens
 23fec34:	3b2a726f 616c6620 66756274 73726566     or*; flatbuffers
 23fec44:	6f753a3a 65736666 20745f74 6f6c203d     ::uoffset_t = lo
 23fec54:	7520676e 6769736e 2064656e 5d746e69     ng unsigned int]
 23fec64:	616c6600 66756274 73726566 65563a3a     .flatbuffers::Ve
 23fec74:	726f7463 3a3e543c 7465723a 5f6e7275     ctor<T>::return_
 23fec84:	65707974 616c6620 66756274 73726566     type flatbuffers
 23fec94:	65563a3a 726f7463 3a3e543c 7465473a     ::Vector<T>::Get
 23feca4:	616c6628 66756274 73726566 6f753a3a     (flatbuffers::uo
 23fecb4:	65736666 29745f74 6e6f6320 5b207473     ffset_t) const [
 23fecc4:	68746977 3d205420 616c6620 66756274     with T = flatbuf
 23fecd4:	73726566 664f3a3a 74657366 6c66743c     fers::Offset<tfl
 23fece4:	3a657469 65704f3a 6f746172 203b3e72     ite::Operator>; 
 23fecf4:	74616c66 66667562 3a737265 6365563a     flatbuffers::Vec
 23fed04:	3c726f74 3a3a3e54 75746572 745f6e72     tor<T>::return_t
 23fed14:	20657079 6f63203d 2074736e 696c6674     ype = const tfli
 23fed24:	3a3a6574 7265704f 726f7461 66203b2a     te::Operator*; f
 23fed34:	6274616c 65666675 3a3a7372 66666f75     latbuffers::uoff
 23fed44:	5f746573 203d2074 676e6f6c 736e7520     set_t = long uns
 23fed54:	656e6769 6e692064 66005d74 6274616c     igned int].flatb
 23fed64:	65666675 3a3a7372 74636556 543c726f     uffers::Vector<T
 23fed74:	723a3a3e 72757465 79745f6e 66206570     >::return_type f
 23fed84:	6274616c 65666675 3a3a7372 74636556     latbuffers::Vect
 23fed94:	543c726f 473a3a3e 66287465 6274616c     or<T>::Get(flatb
 23feda4:	65666675 3a3a7372 66666f75 5f746573     uffers::uoffset_
 23fedb4:	63202974 74736e6f 69775b20 54206874     t) const [with T
 23fedc4:	66203d20 6274616c 65666675 3a3a7372      = flatbuffers::
 23fedd4:	7366664f 743c7465 74696c66 4f3a3a65     Offset<tflite::O
 23fede4:	61726570 43726f74 3e65646f 6c66203b     peratorCode>; fl
 23fedf4:	75627461 72656666 563a3a73 6f746365     atbuffers::Vecto
 23fee04:	3e543c72 65723a3a 6e727574 7079745f     r<T>::return_typ
 23fee14:	203d2065 736e6f63 66742074 6574696c     e = const tflite
 23fee24:	704f3a3a 74617265 6f43726f 3b2a6564     ::OperatorCode*;
 23fee34:	616c6620 66756274 73726566 6f753a3a      flatbuffers::uo
 23fee44:	65736666 20745f74 6f6c203d 7520676e     ffset_t = long u
 23fee54:	6769736e 2064656e 5d746e69               nsigned int].

023fee61 <_ZN6tflite12_GLOBAL__N_1L24kOfflineMemAllocMetadataE>:
 23fee61:	6c66664f 4d656e69 726f6d65 6c6c4179     OfflineMemoryAll
 23fee71:	7461636f 006e6f69 74616c66 66667562     ocation.flatbuff
 23fee81:	3a737265 6365563a 3c726f74 3a3a3e54     ers::Vector<T>::
 23fee91:	75746572 745f6e72 20657079 74616c66     return_type flat
 23feea1:	66667562 3a737265 6365563a 3c726f74     buffers::Vector<
 23feeb1:	3a3a3e54 28746547 74616c66 66667562     T>::Get(flatbuff
 23feec1:	3a737265 666f753a 74657366 2029745f     ers::uoffset_t) 
 23feed1:	736e6f63 775b2074 20687469 203d2054     const [with T = 
 23feee1:	676e6f6c 6e6f6c20 6e692067 66203b74     long long int; f
 23feef1:	6274616c 65666675 3a3a7372 74636556     latbuffers::Vect
 23fef01:	543c726f 723a3a3e 72757465 79745f6e     or<T>::return_ty
 23fef11:	3d206570 6e6f6c20 6f6c2067 6920676e     pe = long long i
 23fef21:	203b746e 74616c66 66667562 3a737265     nt; flatbuffers:
 23fef31:	666f753a 74657366 3d20745f 6e6f6c20     :uoffset_t = lon
 23fef41:	6e752067 6e676973 69206465 005d746e     g unsigned int].
 23fef51:	                                         ...

023fef54 <_ZN6tflite12_GLOBAL__N_1L19kZeroLengthIntArrayE>:
 23fef54:	00000000                                ....

023fef58 <_ZTVN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorE>:
	...
 23fef60:	023f1181 023f1189 023f11b3 023f120b     ..?...?...?...?.

023fef70 <_ZTVN6tflite14MicroAllocatorE>:
	...
 23fef78:	023f1767 023f17d1 023f11b5 023f1197     g.?...?...?...?.
 23fef88:	023f119f 023f118d 023f118b 023f11fd     ..?...?...?...?.
 23fef98:	023f1711 023f1a5b 023f16b5 023f11a7     ..?.[.?...?...?.
 23fefa8:	023f1a07 023f183d 023f1219              ..?.=.?...?.

023fefb4 <_ZTVN6tflite12MicroContextE>:
	...
 23fefbc:	023f1af9 023f1b43 023f1afb 023f1b51     ..?.C.?...?.Q.?.
 23fefcc:	023f1b03 023f1b0b 023f1b91 023f1bb7     ..?...?...?...?.
 23fefdc:	023f1bdd 023f1b27 023f1b2f              ..?.'.?./.?.

023fefe8 <_ZTVN6tflite18MicroErrorReporterE>:
	...
 23feff0:	023f1c21 023f1c31 023f1c23              !.?.1.?.#.?.

023feffc <_ZTVN6tflite10MicroGraphE>:
	...
 23ff004:	023f1c61 023f1c63 023f1c71 023f1d2d     a.?.c.?.q.?.-.?.
 23ff014:	023f1cd5 023f1da7 023f1e51 023f1fb5     ..?...?.Q.?...?.
 23ff024:	023f1f55 023f1fd3 023f1f85 023f1e13     U.?...?...?...?.

023ff034 <_ZTVN6tflite26SingleArenaBufferAllocatorE>:
	...
 23ff03c:	023f2575 023f25e5 023f264d 023f2589     u%?..%?.M&?..%?.
 23ff04c:	023f2597 023f25a9 023f25fb 023f26b7     .%?..%?..%?..&?.
 23ff05c:	023f2577 023f25c1 023f2627 023f25c5     w%?..%?.'&?..%?.
 23ff06c:	023f269d 023f2679 023f25d5 fffffffc     .&?.y&?..%?.....
 23ff07c:	00000000 023f26f5 023f25f3 023f2695     .....&?..%?..&?.
 23ff08c:	023f25dd 6573552f 732f7372 6e776168     .%?./Users/shawn
 23ff09c:	656d7968 72502f6c 63656a6f 502f7374     hymel/Projects/P
 23ff0ac:	69747261 2f656c63 74726170 656c6369     article/particle
 23ff0bc:	2d32702d 74736567 73657275 666e695f     -p2-gestures_inf
 23ff0cc:	6e657265 676e6963 72732f2f 64652f63     erencing//src/ed
 23ff0dc:	692d6567 6c75706d 732d6573 742f6b64     ge-impulse-sdk/t
 23ff0ec:	6f736e65 6f6c6672 696c2f77 6d2f6574     ensorflow/lite/m
 23ff0fc:	6f726369 72656b2f 736c656e 6c75662f     icro/kernels/ful
 23ff10c:	635f796c 656e6e6f 64657463 7070632e     ly_connected.cpp
 23ff11c:	706e6900 21207475 756e203d 74706c6c     .input != nullpt
 23ff12c:	69660072 7265746c 203d2120 6c6c756e     r.filter != null
 23ff13c:	00727470 7074756f 21207475 756e203d     ptr.output != nu
 23ff14c:	74706c6c 73250072 2064253a 21207325     llptr.%s:%d %s !
 23ff15c:	7325203d 73252820 203d2120 00297325     = %s (%s != %s).
 23ff16c:	7074756f 3e2d7475 65707974 706e6900     output->type.inp
 23ff17c:	3e2d7475 65707974 3a732500 25206425     ut->type.%s:%d %
 23ff18c:	3d212073 20732520 20642528 25203d21     s != %s (%d != %
 23ff19c:	69002964 7475706e 61703e2d 736d6172     d).input->params
 23ff1ac:	72657a2e 6f705f6f 00746e69 7074756f     .zero_point.outp
 23ff1bc:	3e2d7475 61726170 7a2e736d 5f6f7265     ut->params.zero_
 23ff1cc:	6e696f70 52410074 4d435f4d 5f534953     point.ARM_CMSIS_
 23ff1dc:	535f4e4e 45434355 61005353 665f6d72     NN_SUCCESS.arm_f
 23ff1ec:	796c6c75 6e6f635f 7463656e 735f6465     ully_connected_s
 23ff1fc:	20283631 78746326 6626202c 61705f63     16( &ctx, &fc_pa
 23ff20c:	736d6172 7126202c 746e6175 7261705f     rams, &quant_par
 23ff21c:	2c736d61 6e692620 5f747570 736d6964     ams, &input_dims
 23ff22c:	6674202c 6574696c 696d3a3a 3a6f7263     , tflite::micro:
 23ff23c:	7465473a 736e6554 6144726f 693c6174     :GetTensorData<i
 23ff24c:	3631746e 283e745f 75706e69 202c2974     nt16_t>(input), 
 23ff25c:	6c696626 5f726574 736d6964 6674202c     &filter_dims, tf
 23ff26c:	6574696c 696d3a3a 3a6f7263 7465473a     lite::micro::Get
 23ff27c:	736e6554 6144726f 693c6174 5f38746e     TensorData<int8_
 23ff28c:	66283e74 65746c69 202c2972 61696226     t>(filter), &bia
 23ff29c:	69645f73 202c736d 73616962 7461645f     s_dims, bias_dat
 23ff2ac:	26202c61 7074756f 645f7475 2c736d69     a, &output_dims,
 23ff2bc:	6c667420 3a657469 63696d3a 3a3a6f72      tflite::micro::
 23ff2cc:	54746547 6f736e65 74614472 6e693c61     GetTensorData<in
 23ff2dc:	5f363174 6f283e74 75707475 00292974     t16_t>(output)).
 23ff2ec:	5f6d7261 766e6f63 65766c6f 3178315f     arm_convolve_1x1
 23ff2fc:	5f38735f 74736166 63262028 202c7874     _s8_fast( &ctx, 
 23ff30c:	6e6f6326 61705f76 736d6172 7026202c     &conv_params, &p
 23ff31c:	635f7265 6e6e6168 715f6c65 746e6175     er_channel_quant
 23ff32c:	7261705f 2c736d61 6e692620 5f747570     _params, &input_
 23ff33c:	736d6964 6674202c 6574696c 696d3a3a     dims, tflite::mi
 23ff34c:	3a6f7263 7465473a 736e6554 6144726f     cro::GetTensorDa
 23ff35c:	693c6174 5f38746e 69283e74 7475706e     ta<int8_t>(input
 23ff36c:	26202c29 746c6966 645f7265 2c736d69     ), &filter_dims,
 23ff37c:	6c667420 3a657469 63696d3a 3a3a6f72      tflite::micro::
 23ff38c:	54746547 6f736e65 74614472 6e693c61     GetTensorData<in
 23ff39c:	745f3874 6966283e 7265746c 26202c29     t8_t>(filter), &
 23ff3ac:	73616962 6d69645f 62202c73 5f736169     bias_dims, bias_
 23ff3bc:	61746164 6f26202c 75707475 69645f74     data, &output_di
 23ff3cc:	202c736d 696c6674 3a3a6574 7263696d     ms, tflite::micr
 23ff3dc:	473a3a6f 65547465 726f736e 61746144     o::GetTensorData
 23ff3ec:	746e693c 3e745f38 74756f28 29747570     <int8_t>(output)
 23ff3fc:	72610029 75665f6d 5f796c6c 6e6e6f63     ).arm_fully_conn
 23ff40c:	65746365 38735f64 63262028 202c7874     ected_s8( &ctx, 
 23ff41c:	5f636626 61726170 202c736d 61757126     &fc_params, &qua
 23ff42c:	705f746e 6d617261 26202c73 75706e69     nt_params, &inpu
 23ff43c:	69645f74 202c736d 696c6674 3a3a6574     t_dims, tflite::
 23ff44c:	7263696d 473a3a6f 65547465 726f736e     micro::GetTensor
 23ff45c:	61746144 746e693c 3e745f38 706e6928     Data<int8_t>(inp
 23ff46c:	2c297475 69662620 7265746c 6d69645f     ut), &filter_dim
 23ff47c:	74202c73 74696c66 6d3a3a65 6f726369     s, tflite::micro
 23ff48c:	65473a3a 6e655474 44726f73 3c617461     ::GetTensorData<
 23ff49c:	38746e69 283e745f 746c6966 2c297265     int8_t>(filter),
 23ff4ac:	69622620 645f7361 2c736d69 61696220      &bias_dims, bia
 23ff4bc:	61645f73 202c6174 74756f26 5f747570     s_data, &output_
 23ff4cc:	736d6964 6674202c 6574696c 696d3a3a     dims, tflite::mi
 23ff4dc:	3a6f7263 7465473a 736e6554 6144726f     cro::GetTensorDa
 23ff4ec:	693c6174 5f38746e 6f283e74 75707475     ta<int8_t>(outpu
 23ff4fc:	00292974                                t)).

023ff500 <_ZN6tflite25kFullyConnectedBiasTensorE>:
 23ff500:	00000002                                ....

023ff504 <_ZN6tflite26kFullyConnectedInputTensorE>:
 23ff504:	00000000                                ....

023ff508 <_ZN6tflite27kFullyConnectedOutputTensorE>:
 23ff508:	00000000                                ....

023ff50c <_ZN6tflite28kFullyConnectedWeightsTensorE>:
 23ff50c:	00000001 6573552f 732f7372 6e776168     ..../Users/shawn
 23ff51c:	656d7968 72502f6c 63656a6f 502f7374     hymel/Projects/P
 23ff52c:	69747261 2f656c63 74726170 656c6369     article/particle
 23ff53c:	2d32702d 74736567 73657275 666e695f     -p2-gestures_inf
 23ff54c:	6e657265 676e6963 72732f2f 64652f63     erencing//src/ed
 23ff55c:	692d6567 6c75706d 732d6573 742f6b64     ge-impulse-sdk/t
 23ff56c:	6f736e65 6f6c6672 696c2f77 6d2f6574     ensorflow/lite/m
 23ff57c:	6f726369 72656b2f 736c656e 666f732f     icro/kernels/sof
 23ff58c:	78616d74 7070632e 6d754e00 75706e49     tmax.cpp.NumInpu
 23ff59c:	6e287374 2965646f 6d754e00 7074754f     ts(node).NumOutp
 23ff5ac:	28737475 65646f6e 754e0029 6d69446d     uts(node).NumDim
 23ff5bc:	69736e65 28736e6f 75706e69 3e202974     ensions(input) >
 23ff5cc:	0031203d 65646f6e 73753e2d 645f7265     = 1.node->user_d
 23ff5dc:	20617461 6e203d21 706c6c75 2f007274     ata != nullptr./
 23ff5ec:	72657355 68732f73 686e7761 6c656d79     Users/shawnhymel
 23ff5fc:	6f72502f 7463656a 61502f73 63697472     /Projects/Partic
 23ff60c:	702f656c 69747261 2d656c63 672d3270     le/particle-p2-g
 23ff61c:	75747365 5f736572 65666e69 636e6572     estures_inferenc
 23ff62c:	2f676e69 6372732f 6764652f 6d692d65     ing//src/edge-im
 23ff63c:	736c7570 64732d65 65742f6b 726f736e     pulse-sdk/tensor
 23ff64c:	776f6c66 74696c2f 696d2f65 2f6f7263     flow/lite/micro/
 23ff65c:	6e72656b 2f736c65 74666f73 5f78616d     kernels/softmax_
 23ff66c:	6d6d6f63 632e6e6f 72007070 655f7761     common.cpp.raw_e
 23ff67c:	6c5f7078 21207475 756e203d 74706c6c     xp_lut != nullpt
 23ff68c:	6e6f0072 766f5f65 6f5f7265 705f656e     r.one_over_one_p
 23ff69c:	5f73756c 756c5f78 3d212074 6c756e20     lus_x_lut != nul
 23ff6ac:	7274706c 706e6900 3e2d7475 65707974     lptr.input->type
 23ff6bc:	203d3d20 4c66546b 49657469 2038746e      == kTfLiteInt8 
 23ff6cc:	69207c7c 7475706e 79743e2d 3d206570     || input->type =
 23ff6dc:	546b203d 74694c66 746e4965 25003631     = kTfLiteInt16.%
 23ff6ec:	64253a73 20732520 20746f6e 7261656e     s:%d %s not near
 23ff6fc:	20732520 20662528 25203d21 31002966      %s (%f != %f).1
 23ff70c:	2f20662e 37323320 6f003836 75707475     .f / 32768.outpu
 23ff71c:	703e2d74 6d617261 63732e73 00656c61     t->params.scale.
 23ff72c:	3732332d 31003836 2f20662e 35353620     -32768.1.f / 655
 23ff73c:	6b003633 694c6654 6e496574 2d003874     36.kTfLiteInt8.-
 23ff74c:	00383231 7074756f 3e2d7475 61726170     128.output->para
 23ff75c:	732e736d 656c6163 203d3d20 20662e31     ms.scale == 1.f 
 23ff76c:	3532202f 546b0036 74694c66 6f6c4665     / 256.kTfLiteFlo
 23ff77c:	32337461 00000000                       at32....

023ff784 <_ZTVN6tflite19GreedyMemoryPlannerE>:
	...
 23ff78c:	023f3aa9 023f3afd 023f3aab 023f3add     .:?..:?..:?..:?.
 23ff79c:	023f3d31 023f3af9 023f3d6f 023f3a75     1=?..:?.o=?.u:?.
 23ff7ac:	023f3d6b                                k=?.

023ff7b0 <_ZTV10ADXL362DMA>:
	...
 23ff7b8:	023f3d95 023f3d97                       .=?..=?.

023ff7c0 <_ZTVN5spark13EthernetClassE>:
	...
 23ff7c8:	023f4927 023f491d 023f4913 023f4909     'I?..I?..I?..I?.
 23ff7d8:	023f48fd 023f48f1 023f5e31 023f5e39     .H?..H?.1^?.9^?.
 23ff7e8:	023f48e5 023f48dd 023f48d3 023f48c9     .H?..H?..H?..H?.
 23ff7f8:	023f5e69                                i^?.

023ff7fc <_ZTV7TwoWire>:
	...
 23ff804:	023f4945 023f498f 023f4967 023f4947     EI?..I?.gI?.GI?.
 23ff814:	023f496f 023f4977 023f497f 023f4987     oI?.wI?..I?..I?.

023ff824 <_ZTV9IPAddress>:
	...
 23ff82c:	023f49e9 023f49d9 023f49db 25006425     .I?..I?..I?.%d.%
 23ff83c:	25750075 00783430 64756162 72655300     u.u%04x.baud.Ser
 23ff84c:	006c6169 69726553 00316c61 4e4f534a     ial.Serial1.JSON
 23ff85c:	65727453 6f4c6d61 6e614867 72656c64     StreamLogHandler
 23ff86c:	70706100 31302500 00207530 2c00205d     .app.%010u .] .,
 23ff87c:	29280020 2000203a 6f63005b 3d206564      .(): . [.code =
 23ff88c:	69250020 74656400 736c6961 00203d20      .%i.details = .
 23ff89c:	6e6c006d 006e6600 65646f63 74656400     m.ln.fn.code.det
 23ff8ac:	006c6961                                ail.

023ff8b0 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ff8b8:	023f4e95 023f4ebb 023f4e79 023f4af7     .N?..N?.yN?..J?.

023ff8c8 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ff8d0:	023f5349 023f5361 023f5a9d 023f5c45     IS?.aS?..Z?.E\?.

023ff8e0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ff8e8:	023f5375 023f5389 023f5c7d 023f4e81     uS?..S?.}\?..N?.

023ff8f8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ff900:	023f4e93 023f4ec9 023f5a01 023f4e83     .N?..N?..Z?..N?.

023ff910 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ff918:	023f4e91 023f4ed7 023f52b1 023f4ef9     .N?..N?..R?..N?.

023ff928 <_ZTVN5spark12NetworkClassE>:
	...
 23ff930:	023f5df1 023f5dfb 023f5e05 023f5e0f     .]?..]?..^?..^?.
 23ff940:	023f5e19 023f5e25 023f5e31 023f5e39     .^?.%^?.1^?.9^?.
 23ff950:	023f5e41 023f5e4d 023f5e55 023f5e5f     A^?.M^?.U^?._^?.
 23ff960:	023f5e69 006e616e 00666e69 0066766f     i^?.nan.inf.ovf.

023ff970 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ff970:	18100800 38302820 252d5925 64252d6d     .... (08%Y-%m-%d
 23ff980:	3a482554 253a4d25 007a2553 74637361     T%H:%M:%S%z.asct
 23ff990:	00656d69                                ime.

023ff994 <_ZTV11USARTSerial>:
	...
 23ff99c:	023f64f9 023f6565 023f653d 023f5f55     .d?.ee?.=e?.U_?.
 23ff9ac:	023f650d 023f6529 023f651b 023f6537     .e?.)e?..e?.7e?.
 23ff9bc:	023f64fb 023f64ff                       .d?..d?.

023ff9c4 <_ZTV9USBSerial>:
	...
 23ff9cc:	023f65bd 023f6625 023f65fb 023f5f55     .e?.%f?..e?.U_?.
 23ff9dc:	023f65ed 023f65bf 023f65cf 023f661f     .e?..e?..e?..f?.
 23ff9ec:	023f65df 023f65b7                       .e?..e?.

023ff9f4 <_ZTVN5spark9WiFiClassE>:
	...
 23ff9fc:	023f6727 023f671d 023f6713 023f66c9     'g?..g?..g?..f?.
 23ffa0c:	023f6707 023f66fb 023f5e31 023f5e39     .g?..f?.1^?.9^?.
 23ffa1c:	023f66ef 023f66e7 023f66dd 023f66d3     .f?..f?..f?..f?.
 23ffa2c:	023f5e69                                i^?.

023ffa30 <_ZSt7nothrow>:
	...

023ffa38 <npio2_hw>:
 23ffa38:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 23ffa48:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 23ffa58:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 23ffa68:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 23ffa78:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 23ffa88:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 23ffa98:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 23ffaa8:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

023ffab8 <two_over_pi>:
 23ffab8:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 23ffac8:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 23ffad8:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 23ffae8:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 23ffaf8:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 23ffb08:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 23ffb18:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 23ffb28:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 23ffb38:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 23ffb48:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 23ffb58:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 23ffb68:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 23ffb78:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 23ffb88:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 23ffb98:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 23ffba8:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 23ffbb8:	0060e27b 00c08c6b                       {.`.k...

023ffbc0 <halF>:
 23ffbc0:	3f000000 bf000000                       ...?....

023ffbc8 <ln2HI>:
 23ffbc8:	3f317180 bf317180                       .q1?.q1.

023ffbd0 <ln2LO>:
 23ffbd0:	3717f7d1 b717f7d1                       ...7....

023ffbd8 <PIo2>:
 23ffbd8:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 23ffbe8:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 23ffbf8:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 23ffc08:	80000000 36e38222 00000000 3569f31d     ...."..6......i5

023ffc18 <init_jk>:
 23ffc18:	00000002 00000003 00000004 00000006     ................
 23ffc28:	4e454552 616d2054 636f6c6c 63757320     REENT malloc suc
 23ffc38:	64656563 2f006465 2f706d74 6b6e656a     ceeded./tmp/jenk
 23ffc48:	2d736e69 2d434347 702d3031 6c657069     ins-GCC-10-pipel
 23ffc58:	2d656e69 325f3834 31303230 5f343231     ine-48_20201124_
 23ffc68:	36303631 36303831 732f3933 6e2f6372     1606180639/src/n
 23ffc78:	696c7765 656e2f62 62696c77 62696c2f     ewlib/newlib/lib
 23ffc88:	74732f63 62696c64 6e61722f 00632e64     c/stdlib/rand.c.
 23ffc98:	74696e69 00000079                       inity...

023ffca0 <fpi.1>:
 23ffca0:	00000035 fffffbce 000003cb 00000001     5...............
 23ffcb0:	00000000                                ....

023ffcb4 <fpinan.0>:
 23ffcb4:	00000034 fffffbce 000003cb 00000001     4...............
 23ffcc4:	00000000                                ....

023ffcc8 <tinytens>:
 23ffcc8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
 23ffcd8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
 23ffce8:	64ac6f43 11680628                       Co.d(.h.

023ffcf0 <_ctype_>:
 23ffcf0:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffd00:	20202020 20202020 20202020 20202020                     
 23ffd10:	10108820 10101010 10101010 10101010      ...............
 23ffd20:	04040410 04040404 10040404 10101010     ................
 23ffd30:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23ffd40:	01010101 01010101 01010101 10101010     ................
 23ffd50:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23ffd60:	02020202 02020202 02020202 10101010     ................
 23ffd70:	00000020 00000000 00000000 00000000      ...............
	...
 23ffdf0:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
 23ffe00:	742f0064 6a2f706d 696b6e65 472d736e     d./tmp/jenkins-G
 23ffe10:	312d4343 69702d30 696c6570 342d656e     CC-10-pipeline-4
 23ffe20:	30325f38 31313032 315f3432 31363036     8_20201124_16061
 23ffe30:	33363038 72732f39 656e2f63 62696c77     80639/src/newlib
 23ffe40:	77656e2f 2f62696c 6362696c 6474732f     /newlib/libc/std
 23ffe50:	2f62696c 6f746467 65672d61 78656874     lib/gdtoa-gethex
 23ffe60:	0000632e                                .c..

023ffe64 <_C_numeric_locale>:
 23ffe64:	023fb181 023fb03b 1007a524 49534f50     ..?.;.?.$...POSI
 23ffe74:	742f0058 6a2f706d 696b6e65 472d736e     X./tmp/jenkins-G
 23ffe84:	312d4343 69702d30 696c6570 342d656e     CC-10-pipeline-4
 23ffe94:	30325f38 31313032 315f3432 31363036     8_20201124_16061
 23ffea4:	33363038 72732f39 656e2f63 62696c77     80639/src/newlib
 23ffeb4:	77656e2f 2f62696c 6362696c 6474732f     /newlib/libc/std
 23ffec4:	2f62696c 6572706d 00632e63              lib/mprec.c.

023ffed0 <__mprec_bigtens>:
 23ffed0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 23ffee0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 23ffef0:	7f73bf3c 75154fdd                       <.s..O.u

023ffef8 <__mprec_tens>:
 23ffef8:	00000000 3ff00000 00000000 40240000     .......?......$@
 23fff08:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 23fff18:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 23fff28:	00000000 412e8480 00000000 416312d0     .......A......cA
 23fff38:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 23fff48:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 23fff58:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 23fff68:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 23fff78:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 23fff88:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 23fff98:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 23fffa8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 23fffb8:	79d99db4 44ea7843                       ...yCx.D

023fffc0 <p05.0>:
 23fffc0:	00000005 00000019 0000007d              ........}...

023fffcc <link_const_data_end>:
 23fffcc:	023ef45d 	.word	0x023ef45d
 23fffd0:	023f3f4d 	.word	0x023f3f4d
 23fffd4:	023f48b9 	.word	0x023f48b9
 23fffd8:	023f4931 	.word	0x023f4931
 23fffdc:	023f5a8d 	.word	0x023f5a8d
 23fffe0:	023f5f41 	.word	0x023f5f41
 23fffe4:	023f6219 	.word	0x023f6219
 23fffe8:	023f64c1 	.word	0x023f64c1
 23fffec:	023f64e5 	.word	0x023f64e5
 23ffff0:	023f6731 	.word	0x023f6731
